{"version":3,"sources":["webpack:///./node_modules/terriajs-cesium/Source/Core/CornerType.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositeProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ColorBlendMode.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositePositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ReferenceProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ScaledPositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/OrderedGroundPrimitiveCollection.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/BillboardVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/MaterialAppearance.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/BasicMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/BasicMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/AllMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/AllMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Core/DistanceDisplayConditionGeometryInstanceAttribute.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/MaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DynamicGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/TerrainOffsetProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/heightReferenceOnEntityPropertyChanged.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/BoxGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylinePipeline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GroundGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CorridorGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CylinderGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DynamicGeometryBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/EllipseGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/EllipsoidGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PlaneGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolygonGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineVolumeGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/RectangleGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGeometryColorBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGeometryPerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/quickselect.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/rbush.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleCollisionChecker.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundGeometryColorBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundGeometryPerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticOutlineGeometryBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/WallGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GeometryVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/LabelVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Axis.js","webpack:///./node_modules/terriajs-cesium/Source/Core/getMagic.js","webpack:///./node_modules/terriajs-cesium/Source/Core/loadImageFromTypedArray.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addToArray.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/hasExtension.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/ForEach.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/numberOfComponentsForType.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/getAccessorByteStride.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addDefaults.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addPipelineExtras.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/removeExtensionsRequired.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/removeExtensionsUsed.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/parseGlb.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addExtensionsUsed.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/getComponentReader.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/findAccessorMinMax.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/moveTechniqueRenderStates.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addExtensionsRequired.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/moveTechniquesToExtension.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/removeUnusedElements.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/addBuffer.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/readAccessorPacked.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/updateAccessorComponentTypes.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/GltfPipeline/updateVersion.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/DracoLoader.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/getClipAndStyleCode.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Spline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/LinearSpline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/QuaternionSpline.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WeightSpline.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/AttributeType.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelAnimationCache.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelAnimationLoop.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelAnimationState.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelAnimation.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelAnimationCollection.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelLoadResources.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelMaterial.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelMesh.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelNode.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelUtility.js","webpack:///./node_modules/terriajs-cesium/Source/Core/webGLConstantToGlslType.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/processModelMaterialsCommon.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/processPbrMaterials.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Model.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ModelVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileColorBlendMode.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/getBinaryAccessor.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileBatchTable.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileFeatureTable.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTileBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/VectorTileVS.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/jsep.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ExpressionNodeType.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Expression.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTilePrimitive.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ClassificationModel.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Batched3DModel3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Composite3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTileGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Geometry3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelInstance.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ModelInstanceCollection.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Instanced3DModel3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PointCloud.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PointCloudEyeDomeLighting.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/PointCloudEyeDomeLighting.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PointCloudShading.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PointCloud3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Tileset3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/createBillboardPointCallback.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTilePointFeature.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Polyline.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PolylineCollection.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PolylineVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTilePoints.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTilePolygons.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTilePolylines.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Vector3DTilePolylinesVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Vector3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileContentFactory.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileContentState.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Empty3DTileContent.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TileBoundingSphere.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TileOrientedBoundingBox.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTile.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileOptimizations.js","webpack:///./node_modules/terriajs-cesium/Source/Core/DoublyLinkedList.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTilesetCache.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTilesetHeatmap.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTilesetStatistics.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileStyleEngine.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Cesium3DTileset.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/Cesium3DTilesetVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PathVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PointVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundPolylinePerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DataSourceDisplay.js"],"names":["Object","ROUNDED","MITERED","BEVELED","CompositeProperty","this","_eventHelper","_definitionChanged","_intervals","changedEvent","addEventListener","prototype","_intervalsChanged","defineProperties","isConstant","get","isEmpty","definitionChanged","intervals","getValue","time","result","innerProperty","findDataForIntervalContainingDate","equals","other","property","eventHelper","callback","raiseEvent","items","removeAll","length","i","interval","data","indexOf","add","subscribeAll","ColorBlendMode","HIGHLIGHT","REPLACE","MIX","colorBlendMode","colorBlendAmount","clamp","EPSILON4","CompositePositionProperty","referenceFrame","_referenceFrame","FIXED","_composite","_raiseDefinitionChanged","set","value","getValueInReferenceFrame","resolve","that","targetProperty","_targetProperty","targetEntity","_targetEntity","_targetCollection","getById","_targetId","undefined","ReferenceProperty","_onTargetEntityDefinitionChanged","targetPropertyNames","_targetPropertyNames","len","targetCollection","targetId","collectionChanged","_onCollectionChanged","target","resolvedProperty","fromString","referenceString","identifier","values","inIdentifier","isEscaped","token","c","charAt","push","getType","names","otherNames","name","oldValue","collection","added","removed","removeEventListener","ScaledPositionProperty","_value","_removeSubscription","setValue","WGS84","scaleToGeodeticSurface","OrderedGroundPrimitiveCollection","_length","_collections","_collectionsArray","show","primitive","zIndex","defined","PrimitiveCollection","destroyPrimitives","_zIndex","array","splice","remove","doNotDestroy","contains","index","removeAndDestroy","destroy","collections","update","frameState","isDestroyed","destroyObject","defaultColor","Color","WHITE","defaultEyeOffset","Cartesian3","ZERO","defaultHeightReference","HeightReference","NONE","defaultPixelOffset","Cartesian2","defaultAlignedAxis","defaultHorizontalOrigin","HorizontalOrigin","CENTER","defaultVerticalOrigin","VerticalOrigin","positionScratch","colorScratch","eyeOffsetScratch","pixelOffsetScratch","scaleByDistanceScratch","NearFarScalar","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","boundingRectangleScratch","BoundingRectangle","distanceDisplayConditionScratch","DistanceDisplayCondition","EntityData","entity","billboard","textureValue","BillboardVisualizer","entityCluster","entityCollection","_cluster","_entityCollection","_items","AssociativeArray","returnPrimitive","item","cluster","removeBillboard","position","billboardGraphics","_billboard","isShowing","isAvailable","Property","getValueOrDefault","_show","getValueOrUndefined","_position","_image","_clusterDirty","getBillboard","id","image","color","_color","eyeOffset","_eyeOffset","heightReference","_heightReference","pixelOffset","_pixelOffset","scale","_scale","rotation","_rotation","alignedAxis","_alignedAxis","horizontalOrigin","_horizontalOrigin","verticalOrigin","_verticalOrigin","width","_width","height","_height","scaleByDistance","_scaleByDistance","translucencyByDistance","_translucencyByDistance","pixelOffsetScaleByDistance","_pixelOffsetScaleByDistance","sizeInMeters","_sizeInMeters","distanceDisplayCondition","_distanceDisplayCondition","disableDepthTestDistance","_disableDepthTestDistance","subRegion","_imageSubRegion","setImageSubRegion","_imageId","getBoundingSphere","BoundingSphereState","FAILED","center","clone","_clampedPosition","PENDING","radius","DONE","entities","changed","MaterialAppearance","options","EMPTY_OBJECT","translucent","closed","materialSupport","MaterialSupport","TEXTURED","material","Material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","Appearance","getDefaultRenderState","renderState","_closed","_materialSupport","_vertexFormat","vertexFormat","_flat","flat","_faceForward","faceForward","getFragmentShaderSource","isTranslucent","getRenderState","BASIC","freeze","VertexFormat","POSITION_AND_NORMAL","POSITION_NORMAL_AND_ST","ALL","DistanceDisplayConditionGeometryInstanceAttribute","near","far","Number","MAX_VALUE","Float32Array","componentDatatype","ComponentDatatype","FLOAT","componentsPerAttribute","normalize","fromDistanceDisplayCondition","toValue","MaterialProperty","DeveloperError","throwInstantiationError","materialProperty","type","uniforms","DynamicGeometryUpdater","geometryUpdater","primitives","orderedGroundPrimitives","_primitives","_orderedGroundPrimitives","_primitive","_outlinePrimitive","_geometryUpdater","_options","_entity","_material","_isHidden","geometry","_setOptions","onTerrain","_onTerrain","_geometryPropertyName","shadows","shadowsProperty","fill","appearance","fillMaterialProperty","isColorAppearance","ColorMaterialProperty","_getIsClosed","PerInstanceColorAppearance","_supportsMaterialsforEntitiesOnTerrain","VERTEX_FORMAT","GroundPrimitive","geometryInstances","createFillGeometryInstance","asynchronous","classificationType","classificationTypeProperty","fillInstance","attributes","Primitive","outline","outlineInstance","createOutlineGeometryInstance","outlineWidth","lineWidth","_scene","clampLineWidth","outlinePrimitive","ready","getGeometryInstanceAttributes","boundingSphere","BoundingSphere","defaultShow","ConstantProperty","defaultFill","defaultOutline","defaultOutlineColor","BLACK","defaultShadows","ShadowMode","DISABLED","defaultDistanceDisplayCondition","defaultClassificationType","ClassificationType","BOTH","GeometryUpdater","geometryPropertyName","scene","_fillEnabled","_isClosed","_dynamic","_outlineEnabled","_geometryChanged","Event","_showProperty","_materialProperty","_showOutlineProperty","_outlineColorProperty","_outlineWidth","_shadowsProperty","_distanceDisplayConditionProperty","_classificationTypeProperty","geometryOptions","_id","_observedPropertyNames","observedPropertyNames","Entity","supportsMaterialsforEntitiesOnTerrain","fillEnabled","hasConstantFill","availability","_fillProperty","outlineEnabled","hasConstantOutline","outlineColorProperty","distanceDisplayConditionProperty","isDynamic","isClosed","geometryChanged","isOutlineVisible","visible","isFilled","Iso8601","MINIMUM_VALUE","_isOnTerrain","_isDynamic","_setStaticOptions","_onEntityPropertyChanged","propertyName","newValue","fillProperty","outlineProperty","outlineColor","oneTimeWarning","geometryOutlines","createDynamicUpdater","groundPrimitives","constructor","scratchPosition","scratchCarto","Cartographic","TerrainOffsetProperty","positionProperty","heightReferenceProperty","extrudedHeightReferenceProperty","_extrudedHeightReference","_positionProperty","_cartographicPosition","_normal","_terrainHeight","_removeCallbackFunc","_removeEventListener","_removeModeListener","globe","terrainProviderChanged","_updateClamping","morphComplete","ellipsoid","geodeticSurfaceNormal","surface","_surface","cartographicPosition","cartesianToCartographic","getHeight","updateHeight","clampedPosition","mode","SceneMode","SCENE3D","carto","x","extrudedHeightReference","RELATIVE_TO_GROUND","multiplyByScalar","equalsEpsilon","EPSILON10","normal","call","_terrainOffsetProperty","centerPosition","CallbackProperty","_computeCenter","bind","defaultOffset","offsetScratch","scratchColor","BoxGeometryOptions","dimensions","offsetAttribute","BoxGeometryUpdater","box","DynamicBoxGeometryUpdater","create","terrainOffsetProperty","currentColor","ShowGeometryInstanceAttribute","offset","ColorGeometryInstanceAttribute","fromColor","OffsetGeometryInstanceAttribute","fromCartesian3","GeometryInstance","BoxGeometry","fromDimensions","modelMatrix","computeModelMatrixForHeightReference","z","mapProjection","BoxOutlineGeometry","orientation","GeometryOffsetAttribute","PolylinePipeline","p0","p1","minDistance","distance","Math","ceil","granularity","radiansDistanceSquared","pow","longitude","latitude","sqrt","cartoScratch","extractHeights","positions","heights","Array","p","wrapLongitudeInversMatrix","Matrix4","wrapLongitudeOrigin","wrapLongitudeXZNormal","wrapLongitudeXZPlane","Plane","UNIT_X","wrapLongitudeYZNormal","wrapLongitudeYZPlane","wrapLongitudeIntersection","wrapLongitudeOffset","subdivideHeightsScratchArray","subdivideHeights","numPoints","h0","h1","heightPerVertex","h","carto1","carto2","scaleFirst","scaleLast","EllipsoidGeodesic","ellipsoidRhumb","EllipsoidRhumbLine","generateCartesianArc","first","last","numberOfPoints","start","end","setEndPoints","surfaceDistanceBetweenPoints","surfaceDistance","cart","cartographicToCartesian","pack","interpolateUsingSurfaceDistance","generateCartesianRhumbArc","numberOfPointsRhumbLine","wrapLongitude","cartesians","segments","IDENTITY","inverseModelMatrix","inverseTransformation","origin","multiplyByPoint","xzNormal","multiplyByPointAsVector","UNIT_Y","xzPlane","fromPointNormal","yzNormal","yzPlane","count","prev","cur","getPointDistance","intersection","IntersectionTests","lineSegmentPlane","negate","lengths","generateArc","Ellipsoid","hasHeightArray","isArray","n","y","RADIANS_PER_DEGREE","chordLength","maximumRadius","arrayLength","newPositions","lastPoint","scratchCartographic0","scratchCartographic1","generateRhumbArc","c1","c0","numberArray","size","unpack","scratch2Array","scratchCartesian1","scratchCartesian2","scratchCartesian3","scratchCartesian4","scratchCartesian5","scratchCartesian6","scratchCartesian7","scratchCartesian8","scratchCartesian9","scratch1","scratch2","PolylineVolumeGeometryLibrary","points","angleBetween","nextScratch","prevScratch","negativeX","rotationZ","Matrix3","scaleMatrix","westScratch","finalPosScratch","Cartesian4","heightCartesian","addPosition","left","shape","finalPositions","xScalar","repeat","west","finalPosition","Transforms","eastNorthUpToFixedFrame","angle","tangentPlane","EllipsoidTangentPlane","next","projectPointOntoPlane","computeRotationAngle","fromRotationZ","multiplyTransformation","fromRotationTranslation","j","fromArray","multiplyByVector","centerScratch","addPositions","centers","convertShapeTo3D","shape2D","boundingRectangle","xOffset","yOffset","quaterion","Quaternion","startPointScratch","rotMatrix","computeRoundCorner","pivot","startPoint","endPoint","cornerType","leftIsOutside","duplicatePoints","m","subtract","CornerType","toRadians","fromQuaternion","fromAxisAngle","removeDuplicatesFromShape","shapePositions","cleanedPositions","i0","i1","v0","v1","angleIsGreaterThanPi","forward","backward","scratchForwardProjection","scratchBackwardProjection","computePositions","_ellipsoid","pos","scaleToSurface","_granularity","_cornerType","shapeForSides","point","convertShapeTo3DDuplicate","shapeForEnds","heightOffset","ends","cornerDirection","surfaceNormal","previousPosition","nextPosition","cross","subdividedHeights","forwardProjection","dot","backwardProjection","abs","EPSILON7","scalar","max","magnitude","posLength","combinedPositions","Float64Array","CorridorGeometryLibrary","scratch3","scratch4","scaleArray2","cartesian1","cartesian2","cartesian3","cartesian4","cartesian5","cartesian6","cartesian7","cartesian8","cartesian9","cartesian10","cornerPoint","computeMiteredCorner","leftCornerDirection","addShiftedPositions","calculatedPositions","rightPositions","leftPositions","scaledLeft","scaledRight","rightIndex","leftIndex","rightPos","leftPos","addAttribute","attribute","front","back","params","saveAttributes","previousPos","calculatedLefts","calculatedNormals","endPositions","corners","leftEdge","firstEndCap","midpoint","rightEdge","addEndCaps","lefts","normals","addNormals","attr","tangents","bitangents","tangent","bitangent","combine","computedPositions","corner","computedLefts","computedNormals","GeometryAttributes","leftCount","rightCount","indicesLength","leftSide","endPositionLength","addEndPositions","UL","LL","UR","LR","halfLength","indices","IndexDatatype","createTypedArray","firstEndPositions","rightNormal","leftNormal","posIndex","compIndex","l","r","outsidePoint","previousPoint","nextPoint","lastEndPositions","GeometryAttribute","DOUBLE","st","rightSt","leftSt","stIndex","a","theta","PI","halfEndPos","PI_OVER_TWO","cos","sin","addWallPositions","wallPositions","computePositionsExtruded","topVertexFormat","shadowVolume","extrudedHeight","extrudedPositions","PolygonPipeline","scaleToGeodeticHeight","topNormals","topBitangents","threeSize","twoSize","sixSize","topPosition","bottomPosition","attrIndex","attrIndexOffset","topTangents","topSt","s","t","extrudedAttributes","extrudeNormals","extrudeDirection","applyOffset","Uint8Array","TOP","arrayFill","applyOffsetValue","UNSIGNED_BYTE","iLength","newIndices","v2","scratchCartographic","computeOffsetPoints","position1","position2","halfWidth","min","direction","offsetDirection","minLat","minLon","maxLat","maxLon","lat","lon","scratchCartesianOffset","scratchCartesianEnds","scratchCartographicMin","scratchCartographicMax","computeRectangle","cleanPositions","arrayRemoveDuplicates","Rectangle","POSITIVE_INFINITY","NEGATIVE_INFINITY","rectangle","north","south","east","CorridorGeometry","_positions","DEFAULT","_extrudedHeight","_shadowVolume","_workerName","_offsetAttribute","_rectangle","packedLength","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","createGeometry","corridorGeometry","extrude","EPSILON2","fromVertices","Geometry","primitiveType","PrimitiveType","TRIANGLES","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","textureCoordinateRotationPoints","wallIndices","floor","CorridorOutlineGeometry","corridorOutlineGeometry","offsetValue","LINES","defaultZIndex","GroundGeometryUpdater","isSupported","geometryZIndex","getGeometryHeight","CLAMP_TO_GROUND","geometryHeightReference","getGeometryExtrudedHeight","geometryExtrudedHeightReference","computeGeometryOffsetAttribute","scratchRectangle","CorridorGeometryOptions","CorridorGeometryUpdater","corridor","DynamicCorridorGeometryUpdater","heightValue","heightReferenceValue","extrudedHeightValue","extrudedHeightReferenceValue","ApproximateTerrainHeights","getMinimumMaximumHeights","minimumTerrainHeight","CylinderGeometryLibrary","topRadius","bottomRadius","slices","topZ","bottomZ","twoSlice","tbIndex","bottomOffset","topOffset","TWO_PI","bottomX","bottomY","topX","topY","radiusScratch","normalScratch","bitangentScratch","tangentScratch","CylinderGeometry","_topRadius","_bottomRadius","_slices","unitCylinderGeometry","cylinderGeometry","twoSlices","threeSlices","numVertices","computeNormal","computeTangent","normalIndex","tangentIndex","bitangentIndex","atan2","normalScale","UNIT_Z","numIndices","textureCoordIndex","rad","getUnitCylinder","CylinderOutlineGeometry","numberOfVerticalLines","_numberOfVerticalLines","numSide","numSideLines","round","CylinderGeometryOptions","CylinderGeometryUpdater","cylinder","DynamicCylinderGeometryUpdater","DynamicGeometryBatch","_dynamicUpdaters","updater","dynamicUpdater","geometries","removeAllPrimitives","EllipseGeometryLibrary","rotAxis","tempVec","unitQuat","rotMtx","pointOnEllipsoid","northVec","eastVec","aSqr","ab","bSqr","mag","unitPos","azimuth","cosThetaSquared","sinThetaSquared","scratchNormal","raisePositionsToHeight","i2","extrudedPosition","scaledNormal","unitPosScratch","eastVecScratch","northVecScratch","computeEllipsePositions","addFillPositions","addEdgePositions","semiMinorAxis","semiMajorAxis","numPts","deltaTheta","numInterior","interiorPosition","positionIndex","reflectedPosition","outerPositionsLength","outerRightIndex","outerLeftIndex","outerPositions","lerp","texCoordScratch","textureMatrixScratch","tangentMatrixScratch","quaternionScratch","scratchTangent","scratchBitangent","projectedCenterScratch","scratchMinTexCoord","scratchMaxTexCoord","computeTopBottomAttributes","stRotation","textureCoordinates","projection","GeographicProjection","projectedCenter","project","geodeticNormal","textureMatrix","tangentMatrix","minTexCoord","fromElements","maxTexCoord","stOffset","rotatedPoint","projectedPoint","k","topIndices","prevIndex","indicesIndex","boundingSphereCenter","topBoundingSphere","bottomBoundingSphere","computeExtrudedEllipse","cep","union","topBottomAttributes","topBottomIndices","topBottomGeo","wallAttributes","bottom","computeWallAttributes","computeWallIndices","wallGeo","geo","GeometryPipeline","combineInstances","positionsFlat","positionsCount","fromCartesianArray","EllipseGeometry","_center","_semiMajorAxis","_semiMinorAxis","_stRotation","_textureCoordinateRotationPoints","scratchCenter","ellipseGeometry","computeEllipse","EllipseOutlineGeometry","maxI","EllipseGeometryOptions","EllipseGeometryUpdater","ellipse","DynamicEllipseGeometryUpdater","radiiScratch","innerRadiiScratch","unitSphere","EllipsoidGeometryOptions","radii","innerRadii","minimumClock","maximumClock","minimumCone","maximumCone","stackPartitions","slicePartitions","subdivisions","EllipsoidGeometryUpdater","DynamicEllipsoidGeometryUpdater","_modelMatrix","_attributes","_outlineAttributes","_lastSceneMode","_lastShow","_lastOutlineShow","_lastOutlineWidth","_lastOutlineColor","_lastOffset","skipModelMatrix","modelMatrixResult","EllipsoidGeometry","EllipsoidOutlineGeometry","showFill","showOutline","getValueOrClonedDefault","sceneMode","in3D","_lastDistanceDisplayCondition","outlineAttributes","multiplyByScale","PlaneGeometry","planeGeometry","texCoords","Uint16Array","PlaneOutlineGeometry","PlaneGeometryOptions","plane","PlaneGeometryUpdater","DynamicPlaneGeometryUpdater","distanceDisplayConditionAttribute","planeGraphics","computeModelMatrix","createPrimitiveMatrix","isColorMaterial","scratchAxis","scratchAxis2","scratchTranslation","scratchScale","scratchQuaternion","scratchMatrix3","transform","translation","transformedNormal","up","EPSILON8","rotationMatrix","setColumn","fromRotationMatrix","fromTranslationQuaternionRotationScale","CoplanarPolygonGeometryLibrary","scratchIntersectionPoint","scratchXAxis","scratchYAxis","scratchZAxis","obbScratch","OrientedBoundingBox","projectTo2D","axis1","axis2","v","validOutline","halfAxes","fromPoints","xAxis","getColumn","yAxis","zAxis","xMag","yMag","zMag","computeProjectTo2DArguments","centerResult","planeAxis1Result","planeAxis2Result","planeAxis1","planeAxis2","orientedBoundingBox","createProjectPointsTo2DFunction","positionResults","createProjectPointTo2DFunction","scratchBR","stScratch","textureCoordinatesOrigin","axis1Scratch","axis2Scratch","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","projectPointTo2D","triangulate","positions2D","holes","tangentRotation","stOrigin","flatPositions","stx","sty","CoplanarPolygonGeometry","polygonHierarchy","_polygonHierarchy","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","packPolygonHierarchy","unpackPolygonHierarchy","polygonGeometry","EPSILON6","projectPoints","projectPoint","results","polygonsFromHierarchy","hierarchy","polygons","outerRing","computeBoundingRectangle","geometryInstance","createGeometryFromPositions","CoplanarPolygonOutlineGeometry","polygonOutlinesFromHierarchy","scratchCarto1","scratchCarto2","adjustPosHeightsForNormal","p2","p1Carto","p2Carto","scratchBoundingRectangle","p1Scratch","p2Scratch","scratchPerPosNormal","scratchPerPosTangent","scratchPerPosBitangent","appendTextureCoordinatesOrigin","appendTextureCoordinatesCartesian2","appendTextureCoordinatesCartesian3","appendTextureCoordinatesQuaternion","appendTextureCoordinatesMatrix3","computeAttributes","wall","top","perPositionHeight","recomputeNormal","tangentRotationMatrix","_plane","bottomOffset2","attrIndex1","attrIndex2","startCartographicScratch","endCartographicScratch","westOverIDL","eastOverIDL","arcType","ArcType","RHUMB","swap","inverseChordLength","positionsLength","endCartographic","startCartographic","interpolateAndGrowRectangle","interpolatedCartographicScratch","ellipsoidGeodesic","idlCross","segmentLength","subsegmentDistance","interpolationDistance","interpolatedCartographic","lonAdjusted","createGeometryFromPositionsExtrudedPositions","createGeometryFromPositionsExtruded","closeTop","closeBottom","geos","walls","numPositions","topGeo","edgePoints","topBottomPositions","concat","ilength","topAndBottom","projectPointsOntoPlane","windingOrder","computeWindingOrder2D","WindingOrder","CLOCKWISE","slice","reverse","computeWallGeometry","hole","COUNTER_CLOCKWISE","PolygonGeometry","perPositionHeightExtrude","_closeTop","_closeBottom","_perPositionHeight","_perPositionHeightExtrude","_arcType","GEODESIC","dummyOptions","splitGeometry","scaleToGeodeticHeightExtruded","createGeometryFromPositionsPositions","createGeometryFromPositionsSubdivided","subdividedPositions","subdivideLineCount","subdivideRhumbLineCount","tempPositions","subdivideLine","subdivideRhumbLine","tempPositionsLength","indicesSize","cornersLength","PolygonOutlineGeometry","scratch2DPositions","cart2Scratch","PolygonGeometryOptions","PolygonGeometryUpdater","DyanmicPolygonGeometryUpdater","area","centroid2D","f","sum","projectPointOntoEllipsoid","perPositionHeightProperty","perPositionHeightEnabled","hierarchyValue","perPositionHeightValue","isExtruded","PolylineVolumeGeometry","polylinePositions","_shape","numComponents","brScratch","polylineVolumeGeometry","ll","ul","ur","lr","shapeLength","vertexCount","firstEndIndices","indicesCount","lengthSt","heightSt","stindex","endOffset","computeTangentAndBitangent","e","PolylineVolumeOutlineGeometry","polylineVolumeOutlineGeometry","shapeCount","firstOffset","secondOffset","PolylineVolumeGeometryOptions","PolylineVolumeGeometryUpdater","polylineVolume","DynamicPolylineVolumeGeometryUpdater","rectangleScratch","createAttributes","v1Scratch","v2Scratch","constructRectangle","rectangleGeometry","computedOptions","northCap","southCap","rowStart","rowEnd","rowHeight","minX","minY","maxX","maxY","row","col","RectangleGeometryLibrary","computePosition","calculateAttributes","upperLeft","lowerLeft","lowerRight","upperRight","northIndex","southIndex","topPositions","bottomPositions","addWallTextureCoordinates","wallTextures","constructExtrudedRectangle","offsetAttributeValue","_surfaceHeight","newVertexFormat","newLength","textures","hasOffsets","widthMultiplier","perimeterPositions","dupliateCorners","wallCount","wallExtrudeNormals","wallOffsetAttribute","computeTopOffsets","threeI","extrudeNormalIndex","wallOffsetIndex","calculateAttributesWall","scratchRectanglePoints","nwScratch","stNwScratch","computeOptions","RectangleGeometry","_rotatedRectangle","surfaceHeight","tangentRotationMatrixScratch","axis","geodeticSurfaceNormalCartographic","lonScalar","latScalar","topBS","fromRectangle3D","bottomBS","unrotatedTextureRectangleScratch","points2DScratch","rotation2DScratch","Matrix2","rectangleCenterScratch","unrotatedTextureRectangle","points2D","toDesiredInComputed","fromRotation","boundingRectangleCenter","point2D","minXYCorner","maxYCorner","maxXCorner","scratchCenterRect","RectangleGeometryOptions","RectangleGeometryUpdater","DynamicRectangleGeometryUpdater","RectangleOutlineGeometry","rect","coordinates","toCartesian","Batch","appearanceType","depthFailAppearanceType","depthFailMaterialProperty","removeMaterialSubscription","depthFailMaterial","createPrimitive","waitingOnCreate","oldPrimitive","updaters","updatersWithAttributes","subscriptions","showsUpdated","itemsToRemove","invalidated","onMaterialChanged","StaticGeometryColorBatch","_solidItems","_translucentItems","_appearanceType","_depthFailAppearanceType","_shadows","removeItem","moveItems","batch","itemsMoved","itemsToMoveLength","updateItems","isUpdated","updatersLength","isMaterial","updaterMaterial","instance","unsubscribe","removedCount","depthFailAppearance","colorProperty","resultColor","_lastColor","depthFailColorProperty","depthColor","_lastDepthFailColor","depthFailColor","offsetProperty","updateShows","solidsMoved","translucentsMoved","updaterDepthFailMaterial","StaticGeometryPerMaterialBatch","arr","tmp","defaultCompare","b","right","compare","quickselectStep","log","exp","sd","newLeft","newRight","rbush","maxEntries","format","_maxEntries","_minEntries","_initFormat","clear","findItem","equalsFn","calcBBox","node","toBBox","distBBox","children","destNode","createNode","Infinity","child","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","intersects","multiSelect","mid","stack","pop","all","_all","search","bbox","childBBox","nodesToSearch","collides","load","insert","_build","_splitRoot","tmpNode","_insert","parent","goingUp","path","indexes","_condense","compareMinX","compareMinY","toJSON","fromJSON","apply","N","M","right2","right3","N2","N1","_chooseSubtree","level","targetNode","enlargement","minArea","minEnlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","_allDistMargin","sort","leftBBox","rightBBox","margin","siblings","compareArr","Function","join","RectangleCollisionChecker","_tree","RectangleWithId","idCompare","fromRectangleAndId","withId","removalScratch","collisionScratch","isDirty","rectangleCollisionCheck","StaticGroundGeometryColorBatch","_batches","_classificationType","overlapping","fillColor","bs","batches","batchCount","oldBatch","newBatch","usingSphericalTextureCoordinates","StaticGroundGeometryPerMaterialBatch","ShadowVolumeAppearance","shouldUseSphericalCoordinates","StaticOutlineGeometryBatch","_solidBatches","_translucentBatches","solidBatches","solidBatchesLength","translucentBatches","translucentBatchesLength","needUpdate","solidsToMoveLength","translucentToMoveLength","solidBatch","translucentBatch","WallGeometryLibrary","latLonEquals","EPSILON14","scratchCartographic2","positionsArrayScratch","heightsArrayScratch","generateArcOptionsScratch","maximumHeights","minimumHeights","duplicateCorners","o","topHeights","bottomHeights","hasBottomHeights","hasTopHeights","hasAllZeroHeights","cleanedTopHeights","cleanedBottomHeights","removeDuplicates","numCorners","generateArcOptions","generateArcPositions","generateArcHeights","scratchCartesian3Position1","scratchCartesian3Position2","scratchCartesian3Position3","scratchCartesian3Position4","scratchCartesian3Position5","WallGeometry","_minimumHeights","_maximumHeights","fromConstantHeights","minHeights","maxHeights","minimumHeight","maximumHeight","doMin","doMax","wallGeometry","ds","i3","nextTop","groundPosition","scalednextPosition","scaledGroundPosition","edgeIndex","pl","pr","WallOutlineGeometry","WallGeometryOptions","WallGeometryUpdater","DynamicWallGeometryUpdater","emptyArray","geometryUpdaters","GeometryUpdaterSet","EventHelper","_removeEntitySubscription","GeometryVisualizer","_groundPrimitives","_addedObjects","_removedObjects","_changedObjects","numberOfShadowModes","NUMBER_OF_SHADOW_MODES","_outlineBatches","_closedColorBatches","_closedMaterialBatches","_openColorBatches","_openMaterialBatches","numberOfClassificationTypes","NUMBER_OF_CLASSIFICATION_TYPES","groundColorBatches","groundMaterialBatches","_groundColorBatches","_groundMaterialBatches","_dynamicBatch","_subscriptions","_updaterSets","forEach","updaterSet","addedObjects","removedObjects","changedObjects","_removeUpdater","_insertUpdaterIntoBatch","_onGeometryChanged","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","boundingSpheres","state","batchesLength","fromBoundingSpheres","updaterSets","defaultStyle","LabelStyle","FILL","defaultFillColor","defaultBackgroundColor","defaultBackgroundPadding","fillColorScratch","outlineColorScratch","backgroundColorScratch","backgroundPaddingScratch","label","LabelVisualizer","removeLabel","text","labelGraphics","_label","_text","updateClamping","getLabel","font","_font","style","_style","_fillColor","_outlineColor","showBackground","_showBackground","backgroundColor","_backgroundColor","backgroundPadding","_backgroundPadding","Axis","X","Y","Z","Y_UP_TO_Z_UP","fromRotationX","Z_UP_TO_Y_UP","X_UP_TO_Z_UP","fromRotationY","Z_UP_TO_X_UP","X_UP_TO_Y_UP","Y_UP_TO_X_UP","fromName","uint8Array","byteOffset","getStringFromTypedArray","blobUrl","request","flipY","blob","Blob","Resource","supportsImageBitmapOptions","then","when","createImageBitmapFromBlob","premultiplyAlpha","window","URL","createObjectURL","url","fetchImage","revokeObjectURL","otherwise","error","reject","element","checkDuplicates","gltf","extension","extensionsUsed","ForEach","objectLegacy","objects","handler","objectId","hasOwnProperty","object","arrayOfObjects","topLevel","gltfProperty","accessor","accessorWithSemantic","semantic","visited","mesh","meshPrimitive","valueForEach","meshPrimitiveAttribute","accessorId","attributeSemantic","meshPrimitiveTarget","meshPrimitiveTargetAttribute","accessorContainingVertexAttributeData","accessorContainingIndexData","animation","animationChannel","channels","animationSampler","samplers","buffer","bufferView","camera","compressedImage","extras","compressedImages","compressedImage3DTiles","materialValue","extensions","KHR_techniques_webgl","primitivesLength","targets","nodeInTree","nodeIds","nodes","nodeId","nodeInScene","sceneNodeIds","program","programs","sampler","shader","shaders","skin","skinJoint","joints","jointsLength","techniqueAttribute","technique","attributeName","techniqueUniform","uniformName","techniqueParameter","parameters","parameterName","techniques","texture","bufferViewId","bufferViews","byteStride","getSizeInBytes","componentType","addTextureDefaults","texCoord","WebGLConstants","materials","accessors","normalized","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","materialsCommon","KHR_materials_common","ambient","emission","transparency","transparent","doubleSided","diffuse","specular","shininess","emissiveFactor","alphaMode","alphaCutoff","techniquesExtension","emissiveTexture","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","baseColorTexture","metallicRoughnessTexture","pbrSpecularGlossiness","diffuseFactor","specularFactor","glossinessFactor","specularGlossinessTexture","interpolation","animatedNodes","channel","getAnimatedNodes","matrix","wrapS","REPEAT","wrapT","scenes","addExtras","_pipeline","extensionsRequired","readHeader","glb","dataView","DataView","header","getUint32","RuntimeError","version","contentLength","binaryStart","contentString","JSON","parse","binaryBuffer","subarray","buffers","keys","binaryGltfBuffer","binary_glTF","KHR_binary_glTF","source","parseGlbVersion1","chunkHeader","chunkLength","chunkType","chunkBuffer","jsonString","parseGlbVersion2","BYTE","numberOfComponents","componentTypeByteLength","getInt8","getUint8","SHORT","getInt16","UNSIGNED_SHORT","getUint16","INT","getInt32","UNSIGNED_INT","getFloat32","getFloat64","components","componentReader","defaultBlendEquation","FUNC_ADD","defaultBlendFactors","ONE","isStateEnabled","renderStates","enabled","enable","supportedBlendFactors","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","getSupportedBlendFactors","defaultValue","blendingForTechnique","materialPropertiesForTechnique","techniquesLegacy","techniqueLegacy","techniqueIndex","states","materialProperties","BLEND","blendFunctions","functions","blendEquationSeparate","blendFuncSeparate","blendEquation","blendFactors","CULL_FACE","blending","KHR_blend","mappedUniforms","updatedTechniqueIndices","glExtensions","glExtensionsUsed","parameterLegacy","programLegacy","fragmentShader","vertexShader","fs","vs","materialExtension","allElementTypes","TypeToGltfElementName","Remove","getListOfElementsIdsInUse","attributeAccessorId","inverseBindMatrices","input","output","bufferId","compressedImageBufferView","KHR_draco_mesh_compression","meshId","meshes","skeleton","map","uniform","filter","materialId","usedAccessorIds","usedBufferIds","usedBufferViewIds","usedMeshIds","usedNodeIds","nodeIsEmpty","weights","joint","usedMaterialIds","elementTypes","usedIds","removeUnusedElementsByType","newBuffer","byteLength","convertType","updatedComponentType","typedArray","updateFunctions","asset","profile","split","api","updateInstanceTechniques","setPrimitiveModes","updateNodes","updateAnimations","removeTechniquePasses","allExtensions","lights","animations","animationId","samplerId","removeAnimationSamplersIndirection","isNodeEmpty","deleteNode","sceneNodes","parentNode","parentNodeId","removeEmptyNodes","jointName","globalMapping","cameras","images","skins","jointNameToId","topLevelId","objectMapping","objectToArray","binaryGltf","parameter","childrenLength","meshesLength","meshNode","meshNodeId","skeletons","jointNames","jointNamesLength","sceneNodesLength","samplerMapping","mimeType","compressedExtensions","compressedBinaryGltf","objectsToArrays","removeAnimationSamplerNames","premultipliedAlpha","stripAsset","extensionsUsedLength","knownExtensions","requireKnownExtensions","accessorByteStride","computeAccessorByteStride","accessorByteEnd","requireByteLength","bufferViewHasVertexAttributes","bufferViewMap","currentByteOffset","currentIndex","accessorsLength","accessorByteOffset","accessorByteLength","hasNextAccessor","nextAccessorByteStride","newBufferView","newBufferViewId","moveByteStrideToBufferView","minMax","requirePositionAccessorMinMax","requireAnimationAccessorMinMax","removeBufferType","internalFormat","removeTextureProperties","TEXCOORD_0","COLOR_0","TEXCOORD","COLOR","requireAttributeSetIndex","mappedSemantics","newSemantic","setIndex","strippedSemantic","suffix","substring","indexedSemantic","indexedSemantics","knownSemantics","mappedSemantic","underscoreApplicationSpecificSemantics","perspective","aspectRatio","yfov","clampCameraParameters","removeEmptyArrays","instanceTechnique","defaultMode","quat","w","instanceSkin","updatedAccessors","channelsLength","componentsLength","createArrayBufferView","techniqueId","passes","passName","pass","instanceProgram","mapping","CESIUM_RTC","WEB3D_quantized_attributes","POSITION","NORMAL","TANGENT","JOINT","JOINTS","WEIGHT","WEIGHTS","fromColumnMajorArray","targetVersion","toString","updateFunction","DracoLoader","addBufferToLoadResources","loadResources","createdBufferViews","loadResourceBuffers","addNewVertexBuffer","model","context","_loadResources","vertexBuffersToCreate","enqueue","scheduleDecodingTask","decoderTaskProcessor","_taskProcessorReady","taskData","primitivesToDecode","peek","promise","scheduleTask","activeDecodingTasks","dequeue","decodedIndexBuffer","indexArray","indexBuffersToCreate","fromTypedArray","numberOfIndices","addNewIndexBuffer","decodedAttributeData","attributeData","vertexBufferView","_decodedData","_maxDecodingConcurrency","FeatureDetection","hardwareConcurrency","_decoderTaskProcessor","_getDecoderTaskProcessor","processor","TaskProcessor","initWebAssemblyModule","modulePath","wasmBinaryFile","fallbackModulePath","hasExtension","_decodedModelResourceCache","cacheKey","cache","modelDecodingCache","cachedData","pendingDecodingCache","dequantizeInShader","_dequantizeInShader","primitiveId","compressionData","arraySlice","compressedAttributes","decodeModel","decodingPromises","decodePointCloud","cacheDataForModel","destroyCachedDataForModel","samplerUniformName","matrixUniformName","styleUniformName","Spline","times","evaluate","findTimeInterval","startIndex","wrapTime","timeEnd","timeStart","timeStretch","clampTime","LinearSpline","_times","_points","_lastTimeIndex","u","QuaternionSpline","_evaluateFunction","spline","q0","q1","fastSlerp","createEvaluateFunction","WeightSpline","_weights","_count","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ModelAnimationCache","dataUriRegex","getAccessorKey","uriKey","test","uri","cachedAnimationParameters","getAnimationParameterValues","key","typedArrayView","cachedAnimationSplines","ConstantSpline","getAnimationSpline","animationName","samplerName","getAnimationSplineKey","controlPoints","cachedSkinInverseBindMatrices","getSkinInverseBindMatrices","matrices","MIRRORED_REPEAT","STOPPED","ANIMATING","ModelAnimation","runtimeAnimation","_name","_startTime","JulianDate","startTime","_delay","delay","_stopTime","stopTime","removeOnStop","_multiplier","multiplier","_reverse","_loop","loop","stop","_state","ModelAnimationState","_runtimeAnimation","_computedStartTime","_duration","_raiseStartEvent","_updateEventTime","_raiseUpdateEvent","_raiseStopEvent","ModelAnimationCollection","animationAdded","animationRemoved","_model","_scheduledAnimations","_previousTime","_runtime","scheduledAnimation","animateChannels","localAnimationTime","channelEvaluators","addAll","scheduledAnimations","animationsToRemove","createAnimationRemovedFunction","modelAnimationCollection","animationOccured","sceneTime","addSeconds","duration","delta","secondsDifference","pastStartTime","lessThanOrEquals","numberOfListeners","afterRender","fract","animationToRemove","ModelLoadResources","initialized","resourcesParsed","Queue","pendingBufferLoads","programsToCreate","pendingShaderLoads","texturesToCreate","pendingTextureLoads","texturesToCreateFromBufferView","pendingBufferViewToImage","createSamplers","createSkins","createRuntimeAnimations","createVertexArrays","createRenderStates","createUniformMaps","createRuntimeNodes","skinnedNodesIds","getBuffer","finishedPendingBufferLoads","finishedBuffersCreation","finishedProgramCreation","finishedTextureCreation","finishedPendingLoads","finishedResourceCreation","finishedEverythingButTextureCreation","finishedDecoding","finished","ModelMaterial","_uniformMap","_uniformMaps","_technique","_program","_values","ModelMesh","runtimeMaterialsById","_materials","ModelNode","runtimeNode","_runtimeNode","useMatrix","_matrix","_originalMatrix","_perNodeShowDirty","_cesiumAnimationsDirty","dirtyNumber","_maxDirtyNumber","originalMatrix","setMatrix","ModelUtility","cachedSourceVersion","sourceVersion","getAssetVersion","_gltfForwardAxis","primitiveInfoByMaterial","materialIndex","jointAccessorId","JOINTS_0","jointAccessor","isSkinned","hasVertexColors","hasMorphTargets","hasNormals","hasTangents","hasTexCoords","primitiveInfo","skinning","skinned","clonedMaterial","toLowerCase","NEEDS_LOAD","LOADING","LOADED","ModelState","message","_readyPromise","bufferLoad","bufferResource","_resource","getDerivedResource","fetchArrayBuffer","getFailedLoadFunction","aMinScratch","aMaxScratch","techniqueAttributeForSemantic","getTechniqueAttributeOrUniformFunction","ignoreNodes","attributeOrUniform","attributeOrUniformName","computeBoundingSphere","gltfNodes","gltfMeshes","rootNodes","rootNodesLength","nodeStack","_transformToRoot","getTransform","transformToRoot","positionAccessor","getAccessorMinMax","aMin","aMax","minimumByComponent","maximumByComponent","fromCornerPoints","_forwardAxis","transformWithoutScale","_upAxis","ensureSemanticExistence","techniquesWebgl","targetAttributes","lowerCase","pipelineExtras","shaderText","getShaderVariable","ensureSemanticExistenceForPrimitive","createAttributeLocations","precreatedAttributes","attributeLocations","hasIndex0","accessorMin","accessorMax","quantizedAttributes","decodedMin","decodedMax","getAttributeOrUniformBySemantic","programId","getDiffuseAttributeOrUniform","diffuseUniformName","nodeTranslationScratch","nodeQuaternionScratch","nodeScaleScratch","replaceAllButFirstInString","string","find","replace","RegExp","match","getQuantizedAttributes","getAttributeVariableName","getScalarUniformFunction","func","getVec2UniformFunction","getVec3UniformFunction","getVec4UniformFunction","getMat2UniformFunction","getMat3UniformFunction","getMat4UniformFunction","DelayLoadedTextureUniform","defaultTexture","_textureId","_textures","_defaultTexture","getUsedExtensions","cachedExtensionsUsed","getRequiredExtensions","cachedExtensionsRequired","extensionsRequiredLength","supportedExtensions","checkSupportedExtensions","browserSupportsWebp","checkSupportedGlExtensions","glExtensionsUsedLength","elementIndexUint","modifyShaderForDracoQuantizedAttributes","decodedAttributes","quantizedUniforms","quantization","attributeVarName","decodeUniformVarName","variableType","newMain","decodedAttributeVarName","octEncoded","vec3Color","decode","decodeUniformVarNameRangeConstant","decodeUniformVarNameNormConstant","decodeUniformVarNameMin","ShaderSource","replaceMain","modifyShaderForQuantizedAttributes","decodeUniformVarNameScale","decodeUniformVarNameTranslate","decodeMatrix","mat","vec","toClipCoordinatesGLSL","positionName","decodedPositionName","modelViewProjectionName","projectionName","modelViewName","modifyFragmentShaderForLogDepth","modifyVertexShaderForLogDepth","gltfUniformFunctions","translateFromMatrix5Array","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","createUniformFunction","createUniformsForDracoQuantizedAttributes","uniformMap","decodedData","uniformVarName","uniformVarNameRangeConstant","rangeConstant","quantizationBits","uniformVarNameNormConstant","normConstant","range","uniformVarNameMin","minValues","createUniformsForQuantizedAttributes","setUniforms","uniformVariable","uniformVariableScale","uniformVariableTranslate","quantizedUniform","properties","scratchTranslationRtc","gltfSemanticUniforms","MODEL","uniformState","VIEW","view","PROJECTION","MODELVIEW","modelView","CESIUM_RTC_MODELVIEW","mvRtc","_rtcCenter","getTranslation","setTranslation","MODELVIEWPROJECTION","modelViewProjection","MODELINVERSE","inverseModel","VIEWINVERSE","inverseView","PROJECTIONINVERSE","inverseProjection","MODELVIEWINVERSE","inverseModelView","MODELVIEWPROJECTIONINVERSE","inverseModelViewProjection","MODELINVERSETRANSPOSE","inverseTransposeModel","MODELVIEWINVERSETRANSPOSE","VIEWPORT","viewportCartesian4","getGltfSemanticUniforms","webGLValue","getKHRMaterialsCommonValueType","paramName","paramValue","khrMaterialsCommon","lightsLength","lightId","light","ambientLight","directional","directionalLight","pointLight","constantAttenuation","linearAttenuation","quadraticAttenuation","spot","spotLight","fallOffAngle","fallOffExponent","lightDefaults","lightParameters","nodeName","nodeLightId","lightCount","lightName","lightType","lightBaseName","baseName","useInFragment","generateLightParameters","primitiveByMaterial","splitIncompatibleMaterials","generatedTechniques","techniqueKey","keysCount","jointCount","skinningInfo","getTechniqueKey","addBatchIdToGeneratedShaders","lightingModel","toUpperCase","parameterValues","hasSkinning","techniqueUniforms","u_modelViewMatrix","u_projectionMatrix","u_normalMatrix","u_jointMatrix","uniformType","u_diffuse","lightParamName","arraySize","vertexShaderMain","v_texcoord","techniqueAttributes","a_position","a_normal","a_texcoord_0","attributeType","a_joint","a_weight","a_vertexColor","a_batchId","hasSpecular","u_specular","u_shininess","hasNonAmbientLights","hasAmbientLights","fragmentLightingBlock","varyingDirectionName","varyingPositionName","lightColorName","finalColorComputation","colorCreationBlock","u_transparency","u_emission","u_ambient","vertexShaderId","VERTEX_SHADER","fragmentShaderId","FRAGMENT_SHADER","generateTechnique","materialValues","valueName","addTextureCoordinates","textureName","generatedMaterialValues","defaultTexCoord","fragmentShaderMain","DEFAULT_TEXTURE_OFFSET","DEFAULT_TEXTURE_ROTATION","DEFAULT_TEXTURE_SCALE","handleKHRTextureTransform","KHR_texture_transform","getPBRValueType","useSpecGloss","KHR_materials_pbrSpecularGlossiness","isSpecularGlossinessMaterial","additional","morphTargets","isUnlit","KHR_materials_unlit","u_morphWeights","u_alphaCutoff","baseColorUniform","u_baseColorTexture","u_baseColorFactor","targetAttribute","a_tangent","v_texCoord","normalTexCoord","baseColorTexCoord","specularGlossinessTexCoord","diffuseTexCoord","metallicRoughnessTexCoord","occlusionTexCoord","emissiveTexCoord","u_normalTexture","u_specularGlossinessTexture","u_specularFactor","u_glossinessFactor","u_diffuseTexture","u_diffuseFactor","u_metallicRoughnessTexture","u_metallicFactor","u_roughnessFactor","u_occlusionTexture","u_emissiveTexture","u_emissiveFactor","isOutline","TERRIA_solid_outlines","boundingSphereCartesian3Scratch","articulationEpsilon","EPSILON16","setCachedGltf","cachedGltf","_cachedGltf","CachedGltf","_gltf","modelsToLoad","makeReady","gltfJson","models","gltfCache","uriToGuid","Model","_cacheKey","_releaseGltfJson","releaseGltfJson","ArrayBuffer","basePath","createIfNeeded","credit","Credit","_credit","_resourceCredits","silhouetteColor","RED","_silhouetteColor","_silhouetteColorPreviousAlpha","_normalAttributeName","silhouetteSize","_clampedModelMatrix","minimumPixelSize","_minimumPixelSize","maximumScale","_maximumScale","_heightChanged","_removeUpdateHeightCallback","_terrainProviderChangedCallback","_pickObject","pickObject","_allowPicking","allowPicking","_ready","defer","activeAnimations","clampAnimations","_incrementallyLoadTextures","incrementallyLoadTextures","_asynchronous","ENABLED","_colorPreviousAlpha","_colorShadingEnabled","_clippingPlanes","clippingPlanes","_clippingPlanesState","clippingPlanesOriginMatrix","debugShowBoundingVolume","_debugShowBoundingVolume","debugWireframe","_debugWireframe","_addBatchIdToGeneratedShaders","_precreatedAttributes","_vertexShaderLoaded","vertexShaderLoaded","_fragmentShaderLoaded","fragmentShaderLoaded","_uniformMapLoaded","uniformMapLoaded","_pickIdLoaded","pickIdLoaded","_ignoreCommands","ignoreCommands","_requestType","requestType","upAxis","forwardAxis","cull","opaquePass","Pass","OPAQUE","_computedModelMatrix","_clippingPlaneModelViewMatrix","_initialRadius","_boundingSphere","_scaledBoundingSphere","_mode","_dirty","articulationsByName","articulationsByStageKey","stagesByKey","nodesByName","skinnedNodes","meshesByName","materialsByName","materialsById","_extensionsUsed","_extensionsRequired","_quantizedUniforms","_programPrimitives","_rendererResources","vertexArrays","sourceShaders","silhouettePrograms","_cachedRendererResources","_loadRendererResourcesFromCache","_cachedGeometryByteLength","_cachedTexturesByteLength","_geometryByteLength","_texturesByteLength","_trianglesLength","_sourceTechniques","_sourcePrograms","_quantizedVertexShaders","_nodeCommands","_pickIds","_rtcCenterEye","_rtcCenter3D","_rtcCenter2D","_sourceVersion","_sourceKHRTechniquesWebGL","_imageBasedLightingFactor","imageBasedLightingFactor","_lightColor","lightColor","_luminanceAtZenith","luminanceAtZenith","_sphericalHarmonicCoefficients","sphericalHarmonicCoefficients","_specularEnvironmentMaps","specularEnvironmentMaps","_shouldUpdateSpecularMapAtlas","_specularEnvironmentMapAtlas","_useDefaultSphericalHarmonics","_useDefaultSpecularMaps","_shouldRegenerateShaders","silhouetteSupported","stencilBuffer","isColorShadingEnabled","isClippingEnabled","getRuntime","runtimeName","nonUniformScale","getScale","scaledBoundingSphere","multiplyComponents","maximumComponent","readyPromise","dirty","trianglesLength","geometryByteLength","texturesByteLength","cachedGeometryByteLength","cachedTexturesByteLength","ClippingPlaneCollection","setOwner","pickIds","lum","fromGltf","modelResource","resource","getAbsoluteUri","createGuid","headers","Accept","arrayBuffer","parsedGltf","json","resourceCredits","credits","_gltfCache","getNode","publicNode","getMesh","getMaterial","setArticulationStage","articulationStageKey","stage","articulation","minimumValue","maximumValue","currentValue","scratchArticulationCartesian","scratchArticulationRotation","applyArticulationStageMatrix","cartesian","multiplyByMatrix3","multiplyByTranslation","multiplyByUniformScale","scratchApplyArticulationTransform","imageLoad","textureId","applyArticulations","articulationName","numNodes","numStages","stages","ktxRegex","crnRegex","scratchArticulationStageInitialTransform","CreateVertexBufferJob","createVertexBuffer","vertexBuffer","Buffer","usage","BufferUsage","STATIC_DRAW","vertexArrayDestroyable","sizeInBytes","execute","CreateIndexBufferJob","createIndexBuffer","indexBuffer","indexDatatype","scratchVertexBufferJob","scratchIndexBufferJob","getProgramForPrimitive","programName","modifyShader","CreateProgramJob","programToCreate","createProgram","quantizedVertexShaders","_toClipCoordinatesGLSL","quantizedVS","drawVS","drawFS","isInternetExplorer","useIBL","OctahedralProjectedCubeMap","usesSH","usesSM","createAttributesAndProgram","recreateProgram","clippingPlaneCollection","addClippingPlaneCode","finalFS","_modifyShaderForColor","_getClippingFunction","modifyShaderForClippingPlanes","ShaderProgram","fromCache","scratchCreateProgramJob","getOnImageCreatedFromTypedArray","gltfTexture","CreateTextureJob","createTexture","Sampler","TextureWrap","usesTextureTransform","materialsLength","minFilter","minificationFilter","TextureMinificationFilter","LINEAR","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","textureMinificationFilter","textureMagnificationFilter","magnificationFilter","tx","mipmap","PixelFormat","isCompressedFormat","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","requiresNpot","Texture","arrayBufferView","pixelFormat","npot","isPowerOfTwo","canvas","document","createElement","nextPowerOfTwo","getContext","drawImage","pixelDatatype","generateMipmap","scratchCreateTextureJob","mapJointNames","forest","jointNodes","runtimeSkins","bindShapeMatrix","runtimeNodes","skinnedNode","runtimeSkin","mappedJointNames","gltfJointNames","jointNode","createJoints","getChannelEvaluator","targetPath","rendererBuffers","rendererVertexArrays","attributeLocation","location","programVertexAttributes","vertexAttributes","programAttributeLocations","_attributeLocations","getAttributeLocations","decodedAttribute","offsetInBytes","strideInBytes","VertexArray","rendererRenderStates","polygonOffset","hasOutlines","factor","units","enableCulling","blendingEnabled","RenderState","depthTest","DepthFunction","LESS_OR_EQUAL","depthMask","equationRgb","equationAlpha","functionSourceRgb","functionDestinationRgb","functionSourceAlpha","functionDestinationAlpha","createRenderStateForMaterial","gltfUniformsFromNode","computedMatrix","mv","mvp","multiply","_projection","mInverse","inverse","mvInverse","mvpInverse","mInverseTranspose","getMatrix3","transpose","mvInverseTranspose","createUniformsForMaterial","instanceValues","jointMatrixUniformName","morphWeightsUniformName","uniformValues","uv","getUniformFunctionFromSource","alphaCutoffValue","uv2","createPickColorFunction","createJointMatricesFunction","computedJointMatrices","createMorphWeightsFunction","createSilhouetteColorFunction","createSilhouetteSizeFunction","createColorFunction","scratchClippingPlaneMatrix","createClippingPlanesMatrixFunction","createClippingPlanesFunction","createClippingPlanesEdgeStyleFunction","withAlpha","edgeColor","alpha","edgeWidth","createColorBlendFunction","getColorBlend","createIBLFactorFunction","createLightColorFunction","createLuminanceAtZenithFunction","createSphericalHarmonicCoefficientsFunction","createSpecularEnvironmentMapFunction","createSpecularEnvironmentMapSizeFunction","createSpecularEnvironmentMapLOD","maximumMipmapLevel","triangleCountFromPrimitiveIndices","TRIANGLE_STRIP","TRIANGLE_FAN","createCommand","gltfNode","scene3DOnly","nodeCommands","runtimeMeshesByName","resources","rendererPrograms","uniformMaps","ix","vertexArray","um","jointUniformMap","morphWeightsUniformMap","gltf_color","gltf_colorBlend","gltf_clippingPlanes","gltf_clippingPlanesEdgeStyle","gltf_clippingPlanesMatrix","gltf_iblFactor","gltf_lightColor","gltf_sphericalHarmonicCoefficients","gltf_specularMap","gltf_specularMapSize","gltf_maxSpecularLOD","gltf_luminanceAtZenith","quantizedUniformMap","rs","owner","pickId","castShadows","receiveShadows","createPickId","pickUniforms","czm_pickColor","command2D","command","DrawCommand","boundingVolume","shaderProgram","TRANSLUCENT","shallowClone","nodeCommand","silhouetteModelCommand","silhouetteModelCommand2D","silhouetteColorCommand","silhouetteColorCommand2D","translucentCommand","translucentCommand2D","commands","createResources","toClipCoordinates","cachedResources","memory","getGeometryByteLength","getTexturesByteLength","jobScheduler","JobType","BUFFER","createBuffers","PROGRAM","createPrograms","rendererSamplers","magFilter","onerror","loadKTX","loadCRN","onload","loadTexturesFromBufferViews","TEXTURE","createTextures","modelMaterial","seen","parentRuntimeNode","skeletonIds","parents","childId","getNodeMatrix","publicMatrix","scratchNodeStack","scratchComputedTranslation","scratchComputedMatrixIn2D","scratchObjectSpace","deriveTranslucentCommand","BlendingState","ALPHA_BLEND","updateColor","forceDerive","getProgramId","createSilhouetteProgram","sources","normalAttributeName","hasSilhouette","isInvisible","alphaDirty","currAlpha","prevAlpha","silhouettesLength","createSilhouetteCommands","stencilReference","silhouetteTranslucent","hasTranslucentCommands","modelCommand","stencilTest","frontFunction","ALWAYS","backFunction","reference","mask","frontOperation","fail","KEEP","zFail","zPass","backOperation","colorMask","red","green","blue","NOTEQUAL","silhouetteProgram","silhouetteUniformMap","gltf_silhouetteColor","gltf_silhouetteSize","updateSilhouette","force","scratchBoundingSphere","maxPixelSize","drawingBufferWidth","drawingBufferHeight","cartographic","metersPerPixel","positionWC","getPixelSize","scaleInPixels","pixelsPerMeter","releaseCachedGltf","CachedRendererResources","getUpdateHeightCallback","cartoPosition","clampedCart","clampedModelMatrix","release","modelRendererResourceCache","scratchDisplayConditionCartesian","scratchDistanceDisplayConditionCartographic","destroyIfNotCached","rendererResources","cachedRendererResources","MORPHING","supportsWebP","modelCaches","projectedCart","parseBuffers","justLoaded","brdfLutGenerator","updateForwardAxis","sourceKHRTechniquesWebGL","addBuffersToLoadResources","runtimeStagesByKey","AGI_articulations","gltfArticulations","articulations","numArticulations","initialValue","stageKey","parseArticulations","sourcePrograms","sourceTechniques","parseTechniques","indexBufferIds","parseBufferViews","shaderResource","fetchText","shaderLoad","parseShaders","parsePrograms","imageId","EXT_texture_webp","gltfImage","crunch","s3tc","pvrtc","pvrtc1","etc1","imageResource","parseTextures","runtimeMaterialsByName","parseMaterials","programPrimitives","parseMeshes","runtimeNodesByName","computedShow","parseNodes","iblSupported","console","recompileWithDefaultAtlas","recompileWithoutDefaultAtlas","recompileWithDefaultSHCoeffs","recompileWithoutDefaultSHCoeffs","silhouette","invisible","displayConditionPassed","distance2","ddc","nearSquared","farSquared","SCENE2D","frustum","COLUMBUS_VIEW","distanceSquared","distanceDisplayConditionVisible","animated","modeChanged","modelTransformChanged","cb","computedModelMatrix","maxDirtyNumber","UNIT_W","to2D","wgs84To2DModelMatrix","basisTo2D","nodeMatrix","commandsLength","primitiveCommand","sign","updateNodeHierarchyModelMatrix","inverseBindMatricesLength","applySkins","nodeCommandsLength","updatePerNodeShow","updatePickIds","updateWireframe","updateShowBoundingVolume","updateShadows","updateClippingPlanes","currentClippingPlanesState","useClippingPlanes","view3D","clippingPlanesState","shouldRegenerateShaders","currentlyColorShadingEnabled","visitedPrograms","commandCount","renderProgram","regenerateShaders","nc","commandList","idl2D","render","pick","creditDisplay","addCredit","creditCount","initialize","getClippingFunction","defaultSilhouetteColor","defaultColorBlendMode","defaultImageBasedLightingFactor","defaultUpAxis","modelMatrixScratch","nodeMatrixScratch","ModelVisualizer","_modelHash","_entitiesToVisualize","removeModel","visualizer","modelHash","modelData","modelPrimitive","clearNodeTransformationsArticulationsScratch","nodeTransformationsScratch","articulationsScratch","checkModelLoad","loadFail","modelGraphics","_uri","animationsRunning","_silhouetteSize","_colorBlendMode","_colorBlendAmount","_clampAnimations","runAnimations","_runAnimations","nodeTransformations","_nodeTransformations","nodeNames","nodeIndex","nodeLength","nodeTransformation","modelNode","transformationMatrix","fromTranslationRotationScale","anyArticulationUpdated","_articulations","articulationStageKeys","numKeys","articulationStageValue","ComponentsPerAttribute","ClassPerType","classType","DEFAULT_COLOR_VALUE","Cesium3DTileBatchTable","content","featuresLength","batchTableJson","batchTableBinary","colorChangedCallback","_translucentFeaturesLength","_extensions","textureDimensions","textureStep","jsonHeader","initializeProperties","_properties","_batchTableHierarchy","batchTable","binaryBody","legacyHierarchy","HIERARCHY","_deprecationWarning","hierarchyJson","classId","binaryAccessor","parentIndexes","instancesLength","classes","classIds","parentCounts","parentIds","parentIdsLength","classesLength","classInstancesLength","instances","binaryProperties","getBinaryProperties","classCounts","classIndexes","initializeHierarchyValues","initializeHierarchy","_batchTableBinaryProperties","_showAlphaProperties","_batchValues","_batchValuesDirty","_batchTexture","_pickTexture","_content","_colorChangedCallback","ContextLimits","maximumTextureSize","stepX","centerX","stepY","centerY","_textureDimensions","_textureStep","componentCount","getByteLength","getBatchValues","bytes","getShowAlphaProperties","deprecationWarning","memorySizeInBytes","setShow","batchId","showAlphaProperties","propertyOffset","newShow","setAllShow","getShow","scratchColorBytes","setColor","newColor","toBytes","newAlpha","batchValues","wasTranslucent","setAllColor","getColor","fromBytes","getPickColor","getBinaryProperty","binaryProperty","setBinaryProperty","applyStyle","feature","getFeature","evaluateColor","scratchVisited","scratchStack","marker","traverseHierarchy","instanceIndex","endConditionCallback","visitedMarker","parentCount","parentIndex","parentId","traverseHierarchyMultipleParents","hasParent","traverseHierarchySingleParent","getDefaultShader","applyHighlight","modifyDiffuse","diffuseAttributeOrUniformName","regex","uniformMatch","declaration","sourceDiffuse","replaceDiffuse","endIndex","functionCall","fromIndex","nestedLevel","character","replacedFunction","replaceDiffuseTextureCalls","isClass","className","isExactClass","getExactClassName","hasProperty","hasPropertyInHierarchy","getPropertyNames","propertyNames","getPropertyNamesInHierarchy","getProperty","propertyValues","hierarchyProperty","instanceClass","indexInClass","getHierarchyProperty","setProperty","setHierarchyProperty","getVertexShaderCallback","handleTranslucent","batchIdAttributeName","renamedSource","maximumVertexTextureImageUnits","getFragmentShaderCallback","getClassificationFragmentShaderCallback","getUniformMapCallback","batchUniformMap","tile_batchTexture","tile_textureDimensions","tile_textureStep","tile_colorBlend","tileset","tile_pickTexture","getPickId","StyleCommandsNeeded","deriveCommand","derivedCommand","tile_translucentCommand","deriveOpaqueCommand","StencilConstants","setCesium3DTileBit","stencilMask","CESIUM_3D_TILE_MASK","deriveZBackfaceCommand","face","CullFace","FRONT","u_polygonOffset","shaderCache","getDerivedShaderProgram","defines","unshift","createDerivedShaderProgram","getLogDepthPolygonOffsetFragmentShaderProgram","deriveStencilCommand","SKIP_LOD_MASK","SKIP_LOD_BIT_SHIFT","StencilFunction","GREATER_OR_EQUAL","StencilOperation","RGBA","PixelDatatype","addDerivedCommands","commandStart","stencilCommand","commandEnd","tile","_tile","finalResolution","_finalResolution","bivariateVisibilityTest","_skipLevelOfDetail","_hasMixedContent","styleCommandsNeeded","translucentFeaturesLength","getStyleCommandsNeeded","derivedCommands","originalCommand","opaque","zback","_backfaceCommands","stencil","_selectionDepth","opaqueCommand","postProcess","pickColor","floatToByte","_statistics","batchTableByteLength","createPickTexture","copyFrom","Cesium3DTileFeatureTable","featureTableJson","featureTableBinary","_cachedTypedArrays","getTypedArrayFromBinary","featureTable","componentLength","cachedTypedArrays","getGlobalProperty","jsonValue","getPropertyArray","getTypedArrayFromArray","featureId","batchIds","root","throwError","Error","description","unary_ops","binary_ops","getMaxKeyLen","obj","max_len","max_unop_len","max_binop_len","literals","binaryPrecedence","op_val","createBinaryExpression","operator","isDecimalDigit","ch","isIdentifierStart","String","fromCharCode","isIdentifierPart","jsep","expr","ch_i","charAtFunc","charCodeAtFunc","charCodeAt","exprI","exprICode","gobbleSpaces","gobbleExpression","consequent","alternate","gobbleBinaryExpression","gobbleBinaryOp","to_check","substr","tc_len","biop","prec","biop_info","gobbleToken","gobbleNumericLiteral","gobbleStringLiteral","gobbleVariable","gobbleArray","argument","prefix","chCode","number","parseFloat","raw","str","quote","gobbleIdentifier","gobbleArguments","termination","args","gobbleGroup","computed","callee","elements","body","addUnaryOp","op_name","addBinaryOp","precedence","addLiteral","literal_name","literal_value","removeUnaryOp","removeAllUnaryOps","removeBinaryOp","removeAllBinaryOps","removeLiteral","removeAllLiterals","VARIABLE","UNARY","BINARY","TERNARY","CONDITIONAL","MEMBER","FUNCTION_CALL","ARRAY","REGEX","VARIABLE_IN_STRING","LITERAL_NULL","LITERAL_BOOLEAN","LITERAL_NUMBER","LITERAL_STRING","LITERAL_COLOR","LITERAL_VECTOR","LITERAL_REGEX","LITERAL_UNDEFINED","BUILTIN_VARIABLE","Expression","expression","ast","_expression","closeQuote","openSingleQuote","openDoubleQuote","replaceVariables","backslashRegex","removeBackslashes","definePlaceholder","defineReplace","replaceDefines","_runtimeAst","createRuntimeAst","scratchStorage","arrayIndex","arrayArray","cartesian2Index","cartesian3Index","cartesian4Index","cartesian2Array","cartesian3Array","cartesian4Array","reset","getArray","getCartesian2","getCartesian3","getCartesian4","fromCartesian4","getShaderFunction","functionName","attributePrefix","shaderState","returnType","shaderExpression","getShaderExpression","unaryOperators","binaryOperators","variableRegex","replacementRegex","unaryFunctions","getEvaluateUnaryComponentwise","tan","acos","asin","atan","radians","degrees","toDegrees","exp2","exponent","log2","binaryFunctions","getEvaluateBinaryComponentwise","ternaryFunctions","getEvaluateTernaryComponentwise","mix","operation","allowScalar","Node","_type","_left","_right","_test","_evaluateConditional","_evaluateRegExpTest","_evaluateRegExpExec","_evaluateToString","_evaluateNot","_evaluateNegative","_evaluatePositive","_evaluateNaN","_evaluateIsFinite","_evaluateIsExactClass","_evaluateIsClass","_evaluateGetExactClassName","_evaluateBooleanConversion","_evaluateNumberConversion","_evaluateStringConversion","_evaluatePlus","_evaluateMinus","_evaluateTimes","_evaluateDivide","_evaluateMod","_evaluateEqualsStrict","_evaluateNotEqualsStrict","_evaluateLessThan","_evaluateLessThanOrEquals","_evaluateGreaterThan","_evaluateGreaterThanOrEquals","_evaluateAnd","_evaluateOr","_evaluateRegExpMatch","_evaluateRegExpNotMatch","getEvaluateBinaryFunction","getEvaluateTernaryFunction","_evaluateMemberBrackets","_evaluateMemberDot","_evaluateArray","_evaluateVariable","_evaluateVariableString","_evaluateLiteralColor","_evaluateLiteralVector","_evaluateLiteralString","_evaluateRegExp","evaluateTilesetTime","_evaluateLiteral","replaceBackslashes","parseCall","val","arguments","argsLength","pattern","flags","isLiteralType","parseRegex","parseMemberExpression","E","parseMathConstant","parseNumberConstant","op","parseLiteral","isVariable","NaN","parseKeywordsAndVariables","timeSinceLoad","getFeatureProperty","checkFeature","convertHSLToRGB","fromHsl","convertRGBToColor","numberToString","toFixed","colorToVec4","getExpressionArray","expressions","fromCssColorString","vectorLength","parseInt","component","exec","placeholder","member","divideComponents","divideByScalar","isNaN","isFinite","Boolean","colorToVec3","rgb","vectorExpression","Vector3DTilePrimitive","_batchTable","_batchIds","_vertexBatchIds","vertexBatchIds","_indices","_indexCounts","indexCounts","_indexOffsets","indexOffsets","_batchedIndices","batchedIndices","_boundingVolume","_boundingVolumes","boundingVolumes","_va","_sp","_spStencil","_spPick","_vaSwap","_rsStencilPreloadPass","_rsStencilPreloadPass3DTiles","_rsStencilDepthPass","_rsStencilDepthPass3DTiles","_rsColorPass","_rsPickPass","_rsWireframe","_commands","_commandsIgnoreShow","_pickCommands","_constantColor","_highlightColor","_batchDirty","_pickCommandsDirty","_framesSinceLastRebatch","_updatingAllCommands","_wireframeDirty","forceRebatch","_pickId","_batchIdLookUp","defaultAttributeLocations","getStencilPreloadRenderState","mask3DTiles","stencilFunction","EQUAL","DECREMENT_WRAP","INCREMENT_WRAP","CLASSIFICATION_MASK","getStencilDepthRenderState","colorRenderState","NOT_EQUAL","pickRenderState","modifiedModelViewScratch","rtcScratch","copyIndicesCPU","currentOffset","offsets","counts","batchIdLookUp","BYTES_PER_ELEMENT","batchedIdsLength","copyIndicesGPU","readBuffer","writeBuffer","bytesPerIndex","copyFromBuffer","compareColors","toRgba","rebatchCommands","needToRebatch","colorCounts","rgba","webgl2","current","newBatchedIndices","temp","rebatchGPU","copyFromArrayView","rebatchCPU","createFeatures","features","Cesium3DTileFeature","applyDebugSettings","complexExpressionReg","queueCommands","commandsIgnoreShow","queueTerrainCommands","CESIUM_3D_TILE","queue3DTilesCommands","TERRAIN","commandLength","TERRAIN_CLASSIFICATION","CESIUM_3D_TILE_CLASSIFICATION","invertClassification","colorExpression","isSimpleStyle","clearStyle","updateCommands","batchedOffset","batchedCount","startIds","endIds","batchIdsLength","positionBuffer","idBuffer","DYNAMIC_DRAW","_batchedPositions","_transferrableBatchIds","_verticesPromise","createVertexArray","vsSource","VectorTileVS","fsSource","ShadowVolumeFS","pickVS","pickFS","createShaders","u_modifiedModelViewProjection","viewMatrix","projectionMatrix","u_highlightColor","createUniformMap","needsRebatch","sp","bv","stencilPreloadCommand","stencilPreloadDerivedCommand","stencilDepthCommand","stencilDepthDerivedCommand","colorCommand","colorDerivedCommand","_commandsDirty","createColorCommands","spStencil","commandIndex","commandIgnoreShow","CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW","createColorCommandsIgnoreShow","earlyExit","queueWireframeCommands","pickCommands","spPick","pickOnly","createPickCommands","ClassificationModel","gltfPrimitives","gltfPositionAttribute","gltfBatchIdAttribute","_BATCHID","_classificationShaderLoaded","classificationShaderLoaded","_nodeMatrix","_buffers","_vertexArray","_shaderProgram","batchIdName","uniformDecl","toClip","bufferLength","positionsBuffer","Uint32Array","indexOffset","indexCount","currentId","updateNodeModelMatrix","Batched3DModel3DTileContent","_tileset","_features","_batchIdAttributeName","_diffuseAttributeOrUniformName","_rtcCenterTransform","_contentModelMatrix","featurePropertiesDirty","byteStart","featureTableJsonByteLength","featureTableBinaryByteLength","batchTableJsonByteLength","batchLength","batchTableBinaryByteLength","BATCH_LENGTH","featureTableString","batchTableString","createColorChangedCallback","gltfView","gltfByteLength","rtcCenter","fromTranslation","computedTransform","RequestType","TILES3D","_gltfUpAxis","getPickIdCallback","pointsLength","innerContents","getUrlComponent","getBatchIdAttributeName","hasColorStyle","hasShowStyle","tilesetClippingPlanes","clippingPlanesDirty","_isClipped","Composite3DTileContent","factory","_contents","tilesLength","contentPromises","tileType","tileByteLength","contentFactory","innerContent","contents","Vector3DTileGeometry","_boxes","boxes","_boxBatchIds","boxBatchIds","_cylinders","cylinders","_cylinderBatchIds","cylinderBatchIds","_ellipsoids","ellipsoids","_ellipsoidBatchIds","ellipsoidBatchIds","_spheres","spheres","_sphereBatchIds","sphereBatchIds","_batchTableColors","_packedBuffer","packedBoxLength","packedCylinderLength","packedEllipsoidLength","packedSphereLength","createVerticesTaskProcessor","batchTableColors","packedBuffer","_sphere","packBuffer","transferrableObjects","verticesPromise","indicesBytesPerElement","numBVS","bvs","numBatchedIndices","bis","unpackBuffer","Geometry3DTileContent","_geometries","_contentReadyPromise","featureTableJSONByteLength","batchTableJSONByteLength","numberOfBoxes","BOXES_LENGTH","numberOfCylinders","CYLINDERS_LENGTH","numberOfEllipsoids","ELLIPSOIDS_LENGTH","numberOfSpheres","SPHERES_LENGTH","totalPrimitives","RTC_CENTER","BOX_BATCH_IDS","boxBatchIdsByteOffset","CYLINDER_BATCH_IDS","cylinderBatchIdsByteOffset","ELLIPSOID_BATCH_IDS","ellipsoidBatchIdsByteOffset","SPHERE_BATCH_IDS","sphereBatchIdsByteOffset","atLeastOneDefined","atLeastOneUndefined","getBatchIds","boxesByteOffset","BOXES","cylindersByteOffset","CYLINDERS","ellipsoidsByteOffset","ELLIPSOIDS","spheresByteOffset","SPHERES","ModelInstance","instanceId","_instanceId","expandBoundingSphere","LoadState","ModelInstanceCollection","_instancingSupported","dynamic","_cull","_opaquePass","_instances","instancesOptions","instanceOptions","createInstances","_vertexBufferTypedArray","_vertexBuffer","_batchIdBuffer","_instancedUniformsByProgram","_drawCommands","_modelCommands","createBoundingSphere","_rtcTransform","_rtcModelView","_url","_basePath","scratchCartesian","scratchMatrix","getCheckUniformSemanticFunction","modelSemantics","supportedSemantics","getInstancedUniforms","instancedUniformsByProgram","czm_instanced_modifiedModelView","createModifiedModelView","czm_instanced_nodeTransform","createNodeTransformFunction","instancedUniforms","getVertexBufferTypedArray","collectionCenter","bufferData","instanceMatrix","createModel","instancingSupported","usesBatchTable","modelOptions","createPickIds","batchIdBufferData","pickIdBuffer","_pickIdBuffer","vertexBufferTypedArray","STREAM_DRAW","componentSizeInBytes","instancedAttributes","czm_modelMatrixRow0","instanceDivisor","czm_modelMatrixRow1","czm_modelMatrixRow2","globalVarsHeader","globalVarsMain","varName","batchIdAttribute","pickAttribute","pickVarying","instancedSource","getVertexShaderNonInstancedCallback","getFragmentShaderNonInstancedCallback","getUniformMapNonInstancedCallback","createBatchIdFunction","updateCommandsNonInstanced","modelCommands","collectionTransform","drawCommand","nodeBoundingSphere","getModelCommands","drawCommands","generateModelCommands","modelInstanceCollection","instanceCount","createCommands","createCommandsNonInstanced","instanceModelMatrix","expand","instancedArrays","modelRadius","modelMatrixChanged","rtcTransform","commandsDirty","Instanced3DModel3DTileContent","_modelInstanceCollection","gltfFormat","collectionOptions","gltfUrl","eastNorthUp","rtcCenterArray","instancePosition","instancePositionArray","instanceNormalRight","instanceNormalUp","instanceNormalForward","instanceRotation","instanceQuaternion","instanceScale","instanceTranslationRotationScale","TranslationRotationScale","instanceTransform","propertyScratch1","positionQuantized","quantizedVolumeOffset","quantizedVolumeScale","normalUp","normalRight","propertyScratch2","hasCustomOrientation","octNormalUp","octNormalRight","AttributeCompression","octDecodeInRange","DecodingState","PointCloud","_parsedContent","_drawCommand","_isTranslucent","_styleTranslucent","DARKGRAY","_pointSize","_quantizedVolumeScale","_quantizedVolumeOffset","_styleableShaderAttributes","_isQuantized","_isOctEncoded16P","_isRGB565","_hasColors","_hasNormals","_hasBatchIds","_decodingState","_isQuantizedDraco","_isOctEncodedDraco","_quantizedRange","_octEncodedRange","backFaceCulling","_backFaceCulling","normalShading","_normalShading","_opaqueRenderState","_translucentRenderState","_pointsLength","_batchTableLoaded","batchTableLoaded","styleDirty","isClipped","attenuation","_attenuation","geometricError","geometricErrorScale","maximumAttenuation","pointCloud","colors","dracoBuffer","dracoFeatureTableProperties","dracoBatchTableProperties","draco","styleableProperties","hasPositions","hasColors","hasBatchIds","isQuantized","isRGB565","isOctEncoded16P","featureTableDraco","batchTableDraco","dracoByteOffset","dracoByteLength","RGB","BATCH_ID","featureTableProperties","batchTableProperties","POSITION_QUANTIZED","RGB565","NORMAL_OCT16P","CONSTANT_RGBA","constantRGBA","scratchMin","scratchMax","computeApproximateBoundingSphereFromPositions","samplesLength","randomValues","setRandomNumberSeed","nextRandomNumber","getRandomValues","maxValue","minValue","prepareVertexAttribute","scratchPointSizeAndTimeAndGeometricErrorAndDepthMultiplier","scratchQuantizedVolumeScaleAndOctEncodedRange","defaultProperties","getStyleableProperties","matches","getVertexAttribute","numberOfAttributes","getAttribute","modifyStyleFunction","styleName","replaceName","colorStyleFunction","showStyleFunction","pointSizeStyleFunction","hasStyle","isQuantizedDraco","isOctEncodedDraco","styleTranslucent","getColorShaderFunction","getShowShaderFunction","getPointSizeShaderFunction","hasPointSizeStyle","hasClippedContent","usesColorSemantic","usesNormalSemantic","userProperties","styleableShaderAttributes","usesColors","usesNormals","a_color","attributeDeclarations","u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier","scratch","pixelRatio","depthMultiplier","OrthographicFrustum","sseDenominator","u_constantColor","u_clippingPlanes","u_clippingPlanesEdgeStyle","TRANSPARENT","u_clippingPlanesMatrix","u_quantizedVolumeScaleAndOctEncodedRange","_bind","parsedContent","decodePromise","decodedPositions","decodedRgb","decodedRgba","decodedNormals","decodedBatchIds","decodeDraco","shadersDirty","modelMatrixDirty","hasStyleableProperties","quantizedRange","octEncodedRange","styleableVertexAttributes","vertexAttribute","colorsVertexBuffer","normalsVertexBuffer","batchIdsVertexBuffer","positionsVertexBuffer","colorComponentsPerAttribute","opaqueRenderState","POINTS","_framebuffer","_colorGBuffer","_depthGBuffer","_depthTexture","_clearCommand","_strength","_radius","destroyFramebuffer","framebuffer","distanceAndEdlStrengthScratch","screenWidth","screenHeight","colorGBuffer","nowDirty","resized","depthGBuffer","depthTexture","DEPTH_COMPONENT","Framebuffer","colorTextures","destroyAttachments","createFramebuffer","blendUniformMap","u_pointCloud_colorGBuffer","u_pointCloud_depthGBuffer","u_distanceAndEdlStrength","blendRenderState","createViewportQuadCommand","ClearCommand","depth","drawBuffers","fragmentDepth","getECShaderProgram","pointCloudShading","eyeDomeLightingStrength","eyeDomeLightingRadius","pointCloudProcessor","clearCommand","blendCommand","PointCloudShading","baseResolution","eyeDomeLighting","PointCloud3DTileContent","_styleDirty","_pointCloud","getFragmentShaderLoaded","getUniformMapLoaded","getBatchTableLoaded","getPickIdLoaded","defaultShading","_contentBoundingVolume","_contentBoundingVolume2D","_boundingVolume2D","sphereVolume","contentBoundingVolume","volume","baseResolutionApproximation","cbrt","getGeometricError","refine","Cesium3DTileRefine","ADD","maximumScreenSpaceError","Tileset3DTileContent","tilesetJson","loadTileset","centerAlpha","cssColor","cssOutlineColor","cssOutlineWidth","pixelSize","context2D","clearRect","beginPath","arc","closePath","fillStyle","save","globalCompositeOperation","restore","Cesium3DTilePointFeature","polyline","_polyline","_batchId","_billboardImage","_billboardColor","_billboardOutlineColor","_billboardOutlineWidth","_billboardSize","_pointOutlineColor","_pointOutlineWidth","_heightOffset","setBillboardImage","newOutlineColor","defaultPointOutlineColor","newOutlineWidth","defaultPointOutlineWidth","newPointSize","defaultPointSize","currentOutlineColor","currentOutlineWidth","currentPointSize","toCssColorString","stringify","setImage","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","labelOutlineColor","labelOutlineWidth","labelStyle","labelText","backgroundEnabled","newPosition","anchorLineEnabled","anchorLineColor","imageChanged","labelHorizontalOrigin","labelVerticalOrigin","ids","Polyline","polylineCollection","_actualPositions","_segments","_actualLength","_propertiesChanged","NUMBER_OF_PROPERTIES","_polylineCollection","_boundingVolumeWC","POSITION_INDEX","SHOW_INDEX","WIDTH_INDEX","MATERIAL_INDEX","POSITION_SIZE_INDEX","DISTANCE_DISPLAY_CONDITION","makeDirty","propertyChanged","_updatePolyline","segmentPositionsLength","segmentLengths","positionsChanged","_clean","_destroy","texCoordExpandAndBatchIndex","position3DHigh","position3DLow","position2DHigh","position2DLow","prevPosition3DHigh","prevPosition3DLow","prevPosition2DHigh","prevPosition2DLow","nextPosition3DHigh","nextPosition3DLow","nextPosition2DHigh","nextPosition2DLow","PolylineCollection","_opaqueRS","_translucentRS","_colorCommands","_polylinesUpdated","_polylinesRemoved","_createVertexArray","_polylines","_polylineBuckets","_positionBufferUsage","bufferUsage","frameCount","_polylinesToUpdate","_vertexArrays","_positionBuffer","_texCoordExpandAndBatchIndexBuffer","_createBatchTable","_useHighlightColor","removePolylines","_index","_bucket","bucket","releaseShaders","destroyPolylines","scratchUpdatePolylineEncodedCartesian","EncodedCartesian3","scratchUpdatePolylineCartesian4","scratchNearFarCartesian2","updateMode","BatchTable","createBatchTable","usageChanged","computeNewBuffersUsage","polylinesToUpdate","updateLength","polylineBuckets","ii","writeUpdate","lengthOfPositions","setBatchedAttribute","encodedCenter","fromCartesian","low","high","nearFarCartesian","useDepthTest","morphTime","cloneBoundingSphere","uniformCallback","va","buckets","bucketLength","currentMaterial","bucketLocator","polylines","polylineLength","mId","createMaterialId","_uniforms","boundingSphereScratch","locators","_locatorBuckets","locatorLength","locator","boundingSphereScratch2","createCommandLists","destroyVertexArrays","emptyVertexBuffer","PolylineBucket","addPolyline","sortPolylinesIntoBuckets","totalIndices","useHighlightColor","vertexBufferOffset","vertexArrayBuckets","totalLength","updateShader","position3DArray","positionArray","texCoordExpandAndBatchIndexArray","colorIndex","texCoordExpandAndBatchIndexIndex","write","writeForMorph","updateIndices","position3DBuffer","positionBufferUsage","texCoordExpandAndBatchIndexBufferUsage","positionSizeInBytes","texCoordExpandAndBatchIndexSizeInBytes","vbo","numberOfIndicesArrays","indicesArray","buffer3D","bufferProperty3D","buffer2D","bufferProperty2D","positionHighOffset","SIXTY_FOUR_KILOBYTES","positionLowOffset","prevPositionHighOffset","prevPositionLowOffset","nextPositionHighOffset","nextPositionLowOffset","vertexTexCoordExpandAndBatchIndexBufferOffset","replacer","scratchUniformArray","_uniformList","definedPolylines","definedPolylinesToUpdate","polyIndex","VertexArrayBucketLocator","intersectsIDL","intersectPlane","ORIGIN_ZX_PLANE","Intersect","INTERSECTING","getPolylinePositionsLength","shaderSource","PolylineFS","PolylineCommon","scratchWritePosition","scratchWritePrevPosition","scratchWriteNextPosition","scratchWriteVector","scratchPickColorCartesian","scratchWidthShowCartesian","polylineBatchIndex","getSegments","segmentIndex","segmentStart","segmentEnd","endK","writeElements","colorCartesian","widthShowCartesian","morphPositionScratch","morphPrevPositionScratch","morphNextPositionScratch","morphVectorScratch","prevPosition","scratchSegmentLengths","vaCount","numberOfSegments","segmentIndexCount","getPolylineStartIndex","scratchPositionsArray","scratchSegments","scratchLengths","pscratch","center2D","positionsArrayLength","endJ","Vector3DTilePoints","_minHeight","_maxHeight","_billboardCollection","_labelCollection","_resolvedPromise","textureAtlas","_textureAtlas","createPoints","billboardCollection","BillboardCollection","labelCollection","LabelCollection","_batchIndex","scratchColor2","scratchColor3","scratchColor4","scratchColor5","scratchColor6","scratchScaleByDistance","scratchTranslucencyByDistance","scratchDistanceDisplayCondition","scaleByDistanceCart4","nearValue","farValue","translucencyByDistanceCart4","distanceDisplayConditionCart2","RIGHT","BASELINE","Vector3DTilePolygons","_counts","_minimumHeight","_maximumHeight","_polygonMinimumHeights","polygonMinimumHeights","_polygonMaximumHeights","polygonMaximumHeights","Vector3DTilePolylines","_widths","widths","_rs","_command","_currentPositions","_previousPositions","_nextPositions","_expandAndWidth","currentPosition","expandAndWidth","currentPositions","previousPositions","nextPositions","curPositions","prevPositions","prevPositionBuffer","curPositionBuffer","nextPositionBuffer","expandAndWidthBuffer","u_modifiedModelView","Vector3DTileContent","_polygons","indicesByteLength","positionByteLength","polylinePositionByteLength","pointsPositionByteLength","numberOfPolygons","POLYGONS_LENGTH","numberOfPolylines","POLYLINES_LENGTH","POINTS_LENGTH","region","polygonBatchIds","polylineBatchIds","pointBatchIds","POLYGON_BATCH_IDS","polygonBatchIdsByteOffset","POLYLINE_BATCH_IDS","polylineBatchIdsByteOffset","POINT_BATCH_IDS","pointBatchIdsByteOffset","polygonCounts","polygonIndexCounts","numPolygonPositions","reduce","total","numPolygonIndices","polygonPositions","POLYGON_MINIMUM_HEIGHTS","POLYGON_MAXIMUM_HEIGHTS","polylineCounts","numPolylinePositions","pointPositions","pointsPromise","polygonPromise","polylinePromise","Cesium3DTileContentFactory","b3dm","pnts","i3dm","cmpt","geom","vctr","UNLOADED","PROCESSING","READY","EXPIRED","Empty3DTileContent","TileBoundingSphere","distanceToCamera","createDebugVolume","SphereOutlineGeometry","scratchU","scratchV","scratchW","computeMissingVector","findOrthogonalVector","checkHalfAxes","uZero","vZero","wZero","TileOrientedBoundingBox","_orientedBoundingBox","fromOrientedBoundingBox","distanceSquaredTo","minimum","maximum","Cesium3DTile","baseResource","_header","contentHeader","viewerRequestVolume","hasEmptyContent","contentState","contentResource","serverKey","parentTransform","parentInitialTransform","_initialTransform","createBoundingVolume","_viewerRequestVolume","_geometricError","updateGeometricErrorScale","contentHeaderUri","RequestScheduler","getServerKey","_contentResource","_contentState","_contentReadyToProcessPromise","_expiredContent","_serverKey","hasTilesetContent","cacheNode","expireDuration","expireDate","expire","date","fromIso8601","lastStyleTime","_optimChildrenWithinParent","Cesium3DTileOptimizationHint","NOT_COMPUTED","priorityDeferred","_distanceToCamera","_centerZDepth","_screenSpaceError","_screenSpaceErrorProgressiveResolution","_visibilityPlaneMask","_visible","_inRequestVolume","_depth","_stackLength","_updatedVisibilityFrame","_touchedFrame","_visitedFrame","_selectedFrame","_requestedFrame","_ancestorWithContent","_ancestorWithContentAvailable","_refines","_shouldSelect","_debugBoundingVolume","_debugContentBoundingVolume","_debugViewerRequestVolume","_debugColor","fromRandom","_debugColorizeTiles","_priority","_priorityHolder","_priorityProgressiveResolution","_priorityProgressiveResolutionScreenSpaceErrorLeaf","_priorityReverseScreenSpaceError","_foveatedFactor","_wasMinPriorityChild","_loadTimestamp","_commandsLength","_colorDirty","_request","contentAvailable","contentReady","contentFailed","contentUnloaded","contentExpired","contentReadyToProcessPromise","contentReadyPromise","scratchJulianDate","getScreenSpaceError","useParentGeometricError","progressiveResolutionHeightFraction","heightFraction","parentGeometricError","_offCenterFrustum","dynamicScreenSpaceError","density","_dynamicScreenSpaceErrorComputedDensity","dynamicScreenSpaceErrorFactor","fog","updateVisibility","parentVisibilityPlaneMask","CullingVolume","MASK_INDETERMINATE","updateTransform","distanceToTile","distanceToTileCenter","visibility","MASK_OUTSIDE","insideViewerRequestVolume","screenSpaceError","getPriorityReverseScreenSpaceError","isProgressiveResolutionTile","_maximumScreenSpaceError","tilePasses","parentFails","isPriorityProgressiveResolution","scaledCameraDirection","directionWC","closestPointOnLine","toLine","toLineNormalized","scaledToLine","closestOnSphere","toClosestOnSphere","toClosestOnSphereNormalize","skipLevelOfDetail","foveatedScreenSpaceError","foveatedConeSize","_pass","Cesium3DTilePass","PRELOAD_FLIGHT","PRELOAD","maximumFovatedFactor","fov","foveatedConeFactor","normalizedFoveatedFactor","sseRelaxation","foveatedInterpolationCallback","foveatedMinimumScreenSpaceErrorRelaxation","sse","isPriorityDeferred","updateExpiration","now","lessThan","requestContent","expired","setQueryParameters","Request","throttle","throttleByServer","priorityFunction","contentFailedFunction","statistics","numberOfTilesProcessing","numberOfPendingRequests","getContentFailedFunction","magic","_disableSkipLevelOfDetail","expireDurationDate","updateExpireDate","RequestState","CANCELLED","numberOfAttemptedRequests","unloadContent","scratchProjectedBoundingSphere","getBoundingVolume","sphere","cullingVolume","computeIntersectionWithBoundingVolume","INSIDE","OUTSIDE","computeVisibilityWithPlaneMask","contentVisibility","MASK_INSIDE","getContentBoundingVolume","computeVisibility","scratchToTileCenter","toCenter","scratchHalfAxes","scratchOrientedBoundingBox","scratchTransform","createRegion","initialTransform","fromRectangle","rotationScale","createBoxFromTransformedRegion","rectangleRegion","TileBoundingRegion","boundingVolumeHeader","createBox","createSphere","uniformScale","passOptions","initCommandLength","isRender","hasContentBoundingVolume","empty","showVolume","debugShowContentBoundingVolume","YELLOW","BLUE","debugShowViewerRequestVolume","debugColorizeTilesOn","debugColorizeTiles","_heatmap","tilePropertyName","debugColorizeTilesOff","colorize","makeStyleDirty","expiredContent","updateContent","scratchCommandList","isolateDigits","normalizedValue","numberOfDigits","leftShift","scaled","priorityNormalizeAndClamp","process","savedCommandList","updatePriority","preferLeaves","minimumPriority","_minimumPriority","maximumPriority","_maximumPriority","preloadProgressiveResolutionScale","foveatedLeftShift","foveatedDeferScale","preloadProgressiveResolutionLeftShift","preloadFlightScale","foveatedDeferLeftShift","depthDigits","preferredSortingDigits","reverseScreenSpaceError","preloadProgressiveResolutionDigits","foveatedDigits","foveatedFactor","preferredSortingLeftShift","foveatedDeferDigits","preloadFlightDigits","Cesium3DTileOptimizations","checkChildrenWithinParent","USE_OPTIMIZATION","childBoundingVolume","SKIP_OPTIMIZATION","childOrientedBoundingBox","axisLength","DoublyLinkedList","head","tail","DoublyLinkedListNode","previous","list","nextNode","oldNodeNext","Cesium3DTilesetCache","_list","_sentinel","_trimTiles","touch","unloadTile","unloadCallback","unloadTiles","trimTiles","maximumMemoryUsageInBytes","maximumMemoryUsage","sentinel","totalMemoryUsageInBytes","trim","Cesium3DTilesetHeatmap","_minimum","_maximum","_previousMinimum","_previousMaximum","_referenceMinimum","_referenceMaximum","getHeatmapValue","tileValue","toDate","getTime","setReferenceMinimumMaximum","heatmapColors","frameNumber","heatmapValue","heatmap","getHeatmapValueAndUpdateMinimumMaximum","shiftedMax","colorPosition","colorPositionFloor","colorPositionCeil","colorZero","colorOne","finalColor","resetMinimumMaximum","referenceMinimum","referenceMaximum","useReference","Cesium3DTilesetStatistics","selected","numberOfCommands","numberOfTilesWithContentReady","numberOfTilesTotal","numberOfLoadedTilesTotal","numberOfFeaturesSelected","numberOfFeaturesLoaded","numberOfPointsSelected","numberOfPointsLoaded","numberOfTrianglesSelected","numberOfTilesStyled","numberOfFeaturesStyled","numberOfTilesCulledWithChildrenUnion","updatePointAndFeatureCounts","decrement","incrementSelectionCounts","incrementLoadCounts","decrementLoadCounts","Cesium3DTileStyleEngine","_lastStyleTime","tiles","_selectedTiles","_selectedTilesToStyle","Cesium3DTileset","_root","_asset","_cache","_processingQueue","_emptyTiles","_requestedTiles","_timeSinceLoad","_updatedModelMatrixFrame","_modelMatrixChanged","_previousModelMatrix","_extras","_credits","_cullWithChildrenBounds","cullWithChildrenBounds","_allTilesAdditive","_stencilClearCommand","ManagedArray","_maximumMemoryUsage","_styleEngine","_statisticsLast","_statisticsPerPass","NUMBER_OF_PASSES","_requestedTilesInFlight","debugHeatmapTilePropertyName","cullRequestsWhileMoving","_cullRequestsWhileMoving","cullRequestsWhileMovingMultiplier","_tilesLoaded","_initialTilesLoaded","_tileDebugLabels","_initialClippingPlanesOriginMatrix","_clippingPlanesOriginMatrix","_clippingPlanesOriginMatrixDirty","preloadWhenHidden","preloadFlightDestinations","_foveatedConeSize","_foveatedMinimumScreenSpaceErrorRelaxation","foveatedTimeDelay","dynamicScreenSpaceErrorDensity","dynamicScreenSpaceErrorHeightFalloff","_pointCloudEyeDomeLighting","loadProgress","allTilesLoaded","initialTilesLoaded","tileLoad","tileUnload","tileFailed","tileVisible","baseScreenSpaceError","skipScreenSpaceErrorFactor","skipLevels","immediatelyLoadDesiredLevelOfDetail","loadSiblings","debugFreezeFrame","debugPickedTileLabelOnly","debugPickedTile","debugPickPosition","debugShowGeometricError","debugShowRenderingStatistics","debugShowMemoryUsage","debugShowUrl","getBaseUri","isDataUri","loadJson","gltfUpAxis","cesium","extraCredits","html","showOnScreen","clippingPlanesOrigin","originCartographic","_defaultMinTerrainHeight","isCesium3DTileset","tilesLoaded","styleEngine","tilesetUrl","fetchJson","parentTile","tilesetVersion","rootTile","childHeader","childTile","scratchPositionNormal","scratchDirection","destroyTile","destroySubtree","addToProcessingQueue","handleTileSuccess","handleTileFailure","sortRequestByPriority","postPassesUpdate","requestedTilesInFlight","removeCount","outOfView","cancel","cancelOutOfViewRequests","statisticsLast","lastNumberOfPendingRequest","lastNumberOfTilesProcessing","progressChanged","raiseLoadProgressEvent","prePassesUpdate","filterProcessingQueue","processTiles","tileBoundingVolume","positionCartographic","transformLocal","centerLocal","minimumRadius","centerCartographic","positionLocal","boxHeight","heightClose","heightFar","horizonFactor","updateDynamicScreenSpaceError","newFrame","stringOptions","maximumFractionDigits","formatMemoryString","memoryInMegabytes","toLocaleString","computeTileLabelPosition","addTileDebugLabel","labelString","newLabel","updateTiles","numberOfInitialCommands","selectedTiles","selectedLength","emptyTiles","emptyLength","lengthBeforeUpdate","addedCommandsLength","backfaceCommands","backfaceCommandsLength","updateTileDebugLabels","passStatistics","detectModelMatrixChanged","traversal","selectTiles","requestTiles","isAsync","requestedTiles","trimLoadedTiles","updateForPass","tilesetPassState","REQUEST_RENDER_MODE_DEFER_CHECK","originalCommandList","originalCamera","originalCullingVolume","getPassOptions","extensionName","Cesium3DTilesetVisualizer","_tilesetHash","removeTileset","tilesetHash","tilesetData","tilesetPrimitive","checkLoad","tilesetGraphics","scratchTimeInterval","TimeInterval","subSampleCompositePropertyScratch","subSampleIntervalPropertyScratch","reallySubSample","updateTime","maximumStep","SampledPositionProperty","sampleStepsToTake","sampleStepsTaken","sampleStepSize","steppedOnNow","greaterThanOrEquals","loopStop","sampling","greaterThan","secondsUntilNext","subSampleSampledProperty","_property","intersect","intervalStart","intervalStop","sampleStart","sampleStop","subSampleCompositeProperty","TimeIntervalCollectionPositionProperty","isStartIncluded","isStopIncluded","subSampleIntervalProperty","ConstantPositionProperty","subSampleConstantProperty","stepSize","subSampleGenericProperty","subSample","toFixedScratch","PolylineUpdater","_unusedIndexes","PathVisualizer","_updaters","ReferenceFrame","INERTIAL","computeIcrfToFixedMatrix","computeTemeToPseudoFixedMatrix","updateObject","pathGraphics","_path","showProperty","leadTime","_leadTime","trailTime","_trailTime","_availability","hasAvailability","hasLeadTime","hasTrailTime","unusedIndexes","resolution","_resolution","removeObject","lastUpdater","frameToVisualize","currentUpdater","_subSample","pointPrimitive","PointVisualizer","removePoint","pointGraphics","_point","needsRedraw","getPoint","_pixelSize","newPixelSize","scratchInterpolateColorsArray","interpolateColors","color0","color1","r0","g0","b0","a0","r1","g1","b1","a1","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","PolylineGeometry","colorsPerVertex","_colors","_colorsPerVertex","scratchPrevPosition","scratchNextPosition","polylineGeometry","subdivisionSize","numberOfPointsFunction","colorLength","newColors","newColorIndex","numColors","interpolatedColors","interpolatedColorsLength","finalColors","expandAndWidthIndex","geometryType","GeometryType","POLYLINES","polylineCollections","GeometryOptions","GroundGeometryOptions","PolylineGeometryUpdater","_entitySubscription","_depthFailMaterialProperty","_geometryOptions","_groundGeometryOptions","_clampToGround","_supportsPolylinesOnTerrain","supportsPolylinesOnTerrain","clampToGround","GroundPolylineGeometry","positionsProperty","PolylineColorAppearance","PolylineMaterialAppearance","groundGeometryOptions","generateCartesianArcOptions","_line","_groundPolylinePrimitive","getLine","dynamicGeometryUpdater","sceneId","line","GroundPolylinePrimitive","groundPolylinePrimitive","StaticGroundPolylinePerMaterialBatch","removeUpdater","insertUpdaterIntoBatch","_groundBatches","_colorBatches","_materialBatches","PolylineVisualizer","DataSourceDisplay","_displayID","initializeTerrainHeights","dataSourceCollection","dataSourceAdded","_onDataSourceAdded","dataSourceRemoved","_onDataSourceRemoved","dataSourceMoved","_onDataSourceMoved","postRender","_postRender","_dataSourceCollection","_visualizersCallback","visualizersCallback","defaultVisualizersCallback","primitivesAdded","removeDefaultDataSourceListener","removeDataSourceCollectionListener","defaultDataSource","CustomDataSource","_defaultDataSource","addPrimitives","_removeDefaultDataSourceListener","_removeDataSourceCollectionListener","dataSource","dataSources","visualizers","vLength","_visualizersByDisplayID","allowPartial","d","_visualizers","visualizersLength","displayPrimitives","displayGroundPrimitives","clustering","_initialize","newIndex","oldIndex","raise","lower","lowerToBottom","raiseToTop"],"mappings":"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","file":"1.TerriaJS-specs.js","sourcesContent":["\n    /**\n     * Style options for corners.\n     *\n     * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\n     * demonstrates the three corner types, as used by {@link CorridorGraphics}.\n     *\n     * @exports CornerType\n     */\n    var CornerType = {\n        /**\n         * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner has a smooth edge.\n         * @type {Number}\n         * @constant\n         */\n        ROUNDED : 0,\n\n        /**\n         * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner point is the intersection of adjacent edges.\n         * @type {Number}\n         * @constant\n         */\n        MITERED : 1,\n\n        /**\n         * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner is clipped.\n         * @type {Number}\n         * @constant\n         */\n        BEVELED : 2\n    };\nexport default Object.freeze(CornerType);\n","import defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Event from '../Core/Event.js';\nimport EventHelper from '../Core/EventHelper.js';\nimport TimeIntervalCollection from '../Core/TimeIntervalCollection.js';\nimport Property from './Property.js';\n\n    function subscribeAll(property, eventHelper, definitionChanged, intervals) {\n        function callback() {\n            definitionChanged.raiseEvent(property);\n        }\n        var items = [];\n        eventHelper.removeAll();\n        var length = intervals.length;\n        for (var i = 0; i < length; i++) {\n            var interval = intervals.get(i);\n            if (defined(interval.data) && items.indexOf(interval.data) === -1) {\n                eventHelper.add(interval.data.definitionChanged, callback);\n            }\n        }\n    }\n\n    /**\n     * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\n     * data property of each {@link TimeInterval} is another Property instance which is\n     * evaluated at the provided time.\n     *\n     * @alias CompositeProperty\n     * @constructor\n     *\n     *\n     * @example\n     * var constantProperty = ...;\n     * var sampledProperty = ...;\n     *\n     * //Create a composite property from two previously defined properties\n     * //where the property is valid on August 1st, 2012 and uses a constant\n     * //property for the first half of the day and a sampled property for the\n     * //remaining half.\n     * var composite = new Cesium.CompositeProperty();\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n     *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\n     *     data : constantProperty\n     * }));\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n     *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\n     *     isStartIncluded : false,\n     *     isStopIncluded : false,\n     *     data : sampledProperty\n     * }));\n     *\n     * @see CompositeMaterialProperty\n     * @see CompositePositionProperty\n     */\n    function CompositeProperty() {\n        this._eventHelper = new EventHelper();\n        this._definitionChanged = new Event();\n        this._intervals = new TimeIntervalCollection();\n        this._intervals.changedEvent.addEventListener(CompositeProperty.prototype._intervalsChanged, this);\n    }\n\n    Object.defineProperties(CompositeProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return this._intervals.isEmpty;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever setValue is called with data different\n         * than the current value.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the interval collection.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {TimeIntervalCollection}\n         */\n        intervals : {\n            get : function() {\n                return this._intervals;\n            }\n        }\n    });\n\n    /**\n     * Gets the value of the property at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositeProperty.prototype.getValue = function(time, result) {\n        \n\n        var innerProperty = this._intervals.findDataForIntervalContainingDate(time);\n        if (defined(innerProperty)) {\n            return innerProperty.getValue(time, result);\n        }\n        return undefined;\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    CompositeProperty.prototype.equals = function(other) {\n        return this === other || //\n               (other instanceof CompositeProperty && //\n                this._intervals.equals(other._intervals, Property.equals));\n    };\n\n    /**\n     * @private\n     */\n    CompositeProperty.prototype._intervalsChanged = function() {\n        subscribeAll(this, this._eventHelper, this._definitionChanged, this._intervals);\n        this._definitionChanged.raiseEvent(this);\n    };\nexport default CompositeProperty;\n","import CesiumMath from '../Core/Math.js';\n\n    /**\n     * Defines different modes for blending between a target color and a primitive's source color.\n     *\n     * HIGHLIGHT multiplies the source color by the target color\n     * REPLACE replaces the source color with the target color\n     * MIX blends the source color and target color together\n     *\n     * @exports ColorBlendMode\n     *\n     * @see Model.colorBlendMode\n     */\n    var ColorBlendMode = {\n        HIGHLIGHT : 0,\n        REPLACE : 1,\n        MIX : 2\n    };\n\n    /**\n     * @private\n     */\n    ColorBlendMode.getColorBlend = function(colorBlendMode, colorBlendAmount) {\n        if (colorBlendMode === ColorBlendMode.HIGHLIGHT) {\n            return 0.0;\n        } else if (colorBlendMode === ColorBlendMode.REPLACE) {\n            return 1.0;\n        } else if (colorBlendMode === ColorBlendMode.MIX) {\n            // The value 0.0 is reserved for highlight, so clamp to just above 0.0.\n            return CesiumMath.clamp(colorBlendAmount, CesiumMath.EPSILON4, 1.0);\n        }\n    };\nexport default Object.freeze(ColorBlendMode);\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Event from '../Core/Event.js';\nimport ReferenceFrame from '../Core/ReferenceFrame.js';\nimport CompositeProperty from './CompositeProperty.js';\nimport Property from './Property.js';\n\n    /**\n     * A {@link CompositeProperty} which is also a {@link PositionProperty}.\n     *\n     * @alias CompositePositionProperty\n     * @constructor\n     *\n     * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n     */\n    function CompositePositionProperty(referenceFrame) {\n        this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n        this._definitionChanged = new Event();\n        this._composite = new CompositeProperty();\n        this._composite.definitionChanged.addEventListener(CompositePositionProperty.prototype._raiseDefinitionChanged, this);\n    }\n\n    Object.defineProperties(CompositePositionProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return this._composite.isConstant;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever setValue is called with data different\n         * than the current value.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the interval collection.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {TimeIntervalCollection}\n         */\n        intervals : {\n            get : function() {\n                return this._composite.intervals;\n            }\n        },\n        /**\n         * Gets or sets the reference frame which this position presents itself as.\n         * Each PositionProperty making up this object has it's own reference frame,\n         * so this property merely exposes a \"preferred\" reference frame for clients\n         * to use.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {ReferenceFrame}\n         */\n        referenceFrame : {\n            get : function() {\n                return this._referenceFrame;\n            },\n            set : function(value) {\n                this._referenceFrame = value;\n            }\n        }\n    });\n\n    /**\n     * Gets the value of the property at the provided time in the fixed frame.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositePositionProperty.prototype.getValue = function(time, result) {\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n    };\n\n    /**\n     * Gets the value of the property at the provided time and in the provided reference frame.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositePositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        \n\n        var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\n        if (defined(innerProperty)) {\n            return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\n        }\n        return undefined;\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    CompositePositionProperty.prototype.equals = function(other) {\n        return this === other || //\n               (other instanceof CompositePositionProperty && //\n                this._referenceFrame === other._referenceFrame && //\n                this._composite.equals(other._composite, Property.equals));\n    };\n\n    /**\n     * @private\n     */\n    CompositePositionProperty.prototype._raiseDefinitionChanged = function() {\n        this._definitionChanged.raiseEvent(this);\n    };\nexport default CompositePositionProperty;\n","import defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Event from '../Core/Event.js';\nimport Property from './Property.js';\n\n    function resolve(that) {\n        var targetProperty = that._targetProperty;\n\n        if (!defined(targetProperty)) {\n            var targetEntity = that._targetEntity;\n\n            if (!defined(targetEntity)) {\n                targetEntity = that._targetCollection.getById(that._targetId);\n\n                if (!defined(targetEntity)) {\n                    // target entity not found\n                    that._targetEntity = that._targetProperty = undefined;\n                    return;\n                }\n\n                // target entity was found. listen for changes to entity definition\n                targetEntity.definitionChanged.addEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, that);\n                that._targetEntity = targetEntity;\n            }\n\n            // walk the list of property names and resolve properties\n            var targetPropertyNames = that._targetPropertyNames;\n            targetProperty = that._targetEntity;\n            for (var i = 0, len = targetPropertyNames.length; i < len && defined(targetProperty); ++i) {\n                targetProperty = targetProperty[targetPropertyNames[i]];\n            }\n\n            // target property may or may not be defined, depending on if it was found\n            that._targetProperty = targetProperty;\n        }\n\n        return targetProperty;\n    }\n\n    /**\n     * A {@link Property} which transparently links to another property on a provided object.\n     *\n     * @alias ReferenceProperty\n     * @constructor\n     *\n     * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\n     * @param {String} targetId The id of the entity which is being referenced.\n     * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\n     *\n     * @example\n     * var collection = new Cesium.EntityCollection();\n     *\n     * //Create a new entity and assign a billboard scale.\n     * var object1 = new Cesium.Entity({id:'object1'});\n     * object1.billboard = new Cesium.BillboardGraphics();\n     * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\n     * collection.add(object1);\n     *\n     * //Create a second entity and reference the scale from the first one.\n     * var object2 = new Cesium.Entity({id:'object2'});\n     * object2.model = new Cesium.ModelGraphics();\n     * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\n     * collection.add(object2);\n     *\n     * //Create a third object, but use the fromString helper function.\n     * var object3 = new Cesium.Entity({id:'object3'});\n     * object3.billboard = new Cesium.BillboardGraphics();\n     * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\n     * collection.add(object3);\n     *\n     * //You can refer to an entity with a # or . in id and property names by escaping them.\n     * var object4 = new Cesium.Entity({id:'#object.4'});\n     * object4.billboard = new Cesium.BillboardGraphics();\n     * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\n     * collection.add(object4);\n     *\n     * var object5 = new Cesium.Entity({id:'object5'});\n     * object5.billboard = new Cesium.BillboardGraphics();\n     * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\n     * collection.add(object5);\n     */\n    function ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\n        \n\n        this._targetCollection = targetCollection;\n        this._targetId = targetId;\n        this._targetPropertyNames = targetPropertyNames;\n        this._targetProperty = undefined;\n        this._targetEntity = undefined;\n        this._definitionChanged = new Event();\n\n        targetCollection.collectionChanged.addEventListener(ReferenceProperty.prototype._onCollectionChanged, this);\n    }\n\n    Object.defineProperties(ReferenceProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.\n         * @memberof ReferenceProperty.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return Property.isConstant(resolve(this));\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever the referenced property's definition is changed.\n         * @memberof ReferenceProperty.prototype\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the reference frame that the position is defined in.\n         * This property is only valid if the referenced property is a {@link PositionProperty}.\n         * @memberof ReferenceProperty.prototype\n         * @type {ReferenceFrame}\n         * @readonly\n         */\n        referenceFrame : {\n            get : function() {\n                var target = resolve(this);\n                return defined(target) ? target.referenceFrame : undefined;\n            }\n        },\n        /**\n         * Gets the id of the entity being referenced.\n         * @memberof ReferenceProperty.prototype\n         * @type {String}\n         * @readonly\n         */\n        targetId : {\n            get : function() {\n                return this._targetId;\n            }\n        },\n        /**\n         * Gets the collection containing the entity being referenced.\n         * @memberof ReferenceProperty.prototype\n         * @type {EntityCollection}\n         * @readonly\n         */\n        targetCollection : {\n            get : function() {\n                return this._targetCollection;\n            }\n        },\n        /**\n         * Gets the array of property names used to retrieve the referenced property.\n         * @memberof ReferenceProperty.prototype\n         * @type {String[]}\n         * @readonly\n         */\n        targetPropertyNames : {\n            get : function() {\n                return this._targetPropertyNames;\n            }\n        },\n        /**\n         * Gets the resolved instance of the underlying referenced property.\n         * @memberof ReferenceProperty.prototype\n         * @type {Property}\n         * @readonly\n         */\n        resolvedProperty : {\n            get : function() {\n                return resolve(this);\n            }\n        }\n    });\n\n    /**\n     * Creates a new instance given the entity collection that will\n     * be used to resolve it and a string indicating the target entity id and property.\n     * The format of the string is \"objectId#foo.bar\", where # separates the id from\n     * property path and . separates sub-properties.  If the reference identifier or\n     * or any sub-properties contains a # . or \\ they must be escaped.\n     *\n     * @param {EntityCollection} targetCollection\n     * @param {String} referenceString\n     * @returns {ReferenceProperty} A new instance of ReferenceProperty.\n     *\n     * @exception {DeveloperError} invalid referenceString.\n     */\n    ReferenceProperty.fromString = function(targetCollection, referenceString) {\n        \n\n        var identifier;\n        var values = [];\n\n        var inIdentifier = true;\n        var isEscaped = false;\n        var token = '';\n        for (var i = 0; i < referenceString.length; ++i) {\n            var c = referenceString.charAt(i);\n\n            if (isEscaped) {\n                token += c;\n                isEscaped = false;\n            } else if (c === '\\\\') {\n                isEscaped = true;\n            } else if (inIdentifier && c === '#') {\n                identifier = token;\n                inIdentifier = false;\n                token = '';\n            } else if (!inIdentifier && c === '.') {\n                values.push(token);\n                token = '';\n            } else {\n                token += c;\n            }\n        }\n        values.push(token);\n\n        return new ReferenceProperty(targetCollection, identifier, values);\n    };\n\n    /**\n     * Gets the value of the property at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    ReferenceProperty.prototype.getValue = function(time, result) {\n        var target = resolve(this);\n        return defined(target) ? target.getValue(time, result) : undefined;\n    };\n\n    /**\n     * Gets the value of the property at the provided time and in the provided reference frame.\n     * This method is only valid if the property being referenced is a {@link PositionProperty}.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    ReferenceProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        var target = resolve(this);\n        return defined(target) ? target.getValueInReferenceFrame(time, referenceFrame, result) : undefined;\n    };\n\n    /**\n     * Gets the {@link Material} type at the provided time.\n     * This method is only valid if the property being referenced is a {@link MaterialProperty}.\n     *\n     * @param {JulianDate} time The time for which to retrieve the type.\n     * @returns {String} The type of material.\n     */\n    ReferenceProperty.prototype.getType = function(time) {\n        var target = resolve(this);\n        return defined(target) ? target.getType(time) : undefined;\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    ReferenceProperty.prototype.equals = function(other) {\n        if (this === other) {\n            return true;\n        }\n\n        var names = this._targetPropertyNames;\n        var otherNames = other._targetPropertyNames;\n\n        if (this._targetCollection !== other._targetCollection || //\n            this._targetId !== other._targetId || //\n            names.length !== otherNames.length) {\n            return false;\n        }\n\n        var length = this._targetPropertyNames.length;\n        for (var i = 0; i < length; i++) {\n            if (names[i] !== otherNames[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    ReferenceProperty.prototype._onTargetEntityDefinitionChanged = function(targetEntity, name, value, oldValue) {\n        if (defined(this._targetProperty) && this._targetPropertyNames[0] === name) {\n            this._targetProperty = undefined;\n            this._definitionChanged.raiseEvent(this);\n        }\n    };\n\n    ReferenceProperty.prototype._onCollectionChanged = function(collection, added, removed) {\n        var targetEntity = this._targetEntity;\n        if (defined(targetEntity) && removed.indexOf(targetEntity) !== -1) {\n            targetEntity.definitionChanged.removeEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, this);\n            this._targetEntity = this._targetProperty = undefined;\n        } else if (!defined(targetEntity)) {\n            targetEntity = resolve(this);\n            if (defined(targetEntity)) {\n                this._definitionChanged.raiseEvent(this);\n            }\n        }\n    };\nexport default ReferenceProperty;\n","import defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport Event from '../Core/Event.js';\nimport ReferenceFrame from '../Core/ReferenceFrame.js';\nimport Property from './Property.js';\n\n    /**\n     * This is a temporary class for scaling position properties to the WGS84 surface.\n     * It will go away or be refactored to support data with arbitrary height references.\n     * @private\n     */\n    function ScaledPositionProperty(value) {\n        this._definitionChanged = new Event();\n        this._value = undefined;\n        this._removeSubscription = undefined;\n        this.setValue(value);\n    }\n\n    Object.defineProperties(ScaledPositionProperty.prototype, {\n        isConstant : {\n            get : function() {\n                return Property.isConstant(this._value);\n            }\n        },\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        referenceFrame : {\n            get : function() {\n                return defined(this._value) ? this._value.referenceFrame : ReferenceFrame.FIXED;\n            }\n        }\n    });\n\n    ScaledPositionProperty.prototype.getValue = function(time, result) {\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n    };\n\n    ScaledPositionProperty.prototype.setValue = function(value) {\n        if (this._value !== value) {\n            this._value = value;\n\n            if (defined(this._removeSubscription)) {\n                this._removeSubscription();\n                this._removeSubscription = undefined;\n            }\n\n            if (defined(value)) {\n                this._removeSubscription = value.definitionChanged.addEventListener(this._raiseDefinitionChanged, this);\n            }\n            this._definitionChanged.raiseEvent(this);\n        }\n    };\n\n    ScaledPositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        \n\n        if (!defined(this._value)) {\n            return undefined;\n        }\n\n        result = this._value.getValueInReferenceFrame(time, referenceFrame, result);\n        return defined(result) ? Ellipsoid.WGS84.scaleToGeodeticSurface(result, result) : undefined;\n    };\n\n    ScaledPositionProperty.prototype.equals = function(other) {\n        return this === other || (other instanceof ScaledPositionProperty && this._value === other._value);\n    };\n\n    ScaledPositionProperty.prototype._raiseDefinitionChanged = function() {\n        this._definitionChanged.raiseEvent(this);\n    };\nexport default ScaledPositionProperty;\n","import Check from '../Core/Check.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport PrimitiveCollection from './PrimitiveCollection.js';\n\n    /**\n     * A primitive collection for helping maintain the order or ground primitives based on a z-index\n     *\n     * @private\n     */\n    function OrderedGroundPrimitiveCollection() {\n        this._length = 0;\n        this._collections = {};\n        this._collectionsArray = [];\n\n        this.show = true;\n    }\n\n    Object.defineProperties(OrderedGroundPrimitiveCollection.prototype, {\n        /**\n         * Gets the number of primitives in the collection.\n         *\n         * @memberof OrderedGroundPrimitiveCollection.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._length;\n            }\n        }\n    });\n\n    /**\n     * Adds a primitive to the collection.\n     *\n     * @param {GroundPrimitive} primitive The primitive to add.\n     * @param {Number} [zIndex = 0] The index of the primitive\n     * @returns {GroundPrimitive} The primitive added to the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.add = function(primitive, zIndex) {\n        \n\n        zIndex = defaultValue(zIndex, 0);\n        var collection = this._collections[zIndex];\n        if (!defined(collection)) {\n            collection = new PrimitiveCollection({ destroyPrimitives: false });\n            collection._zIndex = zIndex;\n            this._collections[zIndex] = collection;\n            var array = this._collectionsArray;\n            var i = 0;\n            while (i < array.length && array[i]._zIndex < zIndex) {\n                i++;\n            }\n            array.splice(i, 0, collection);\n        }\n\n        collection.add(primitive);\n        this._length++;\n        primitive._zIndex = zIndex;\n\n        return primitive;\n    };\n\n    /**\n     * Adjusts the z-index\n     * @param {GroundPrimitive} primitive\n     * @param {Number} zIndex\n     */\n    OrderedGroundPrimitiveCollection.prototype.set = function(primitive, zIndex) {\n        \n\n        if (zIndex === primitive._zIndex) {\n            return primitive;\n        }\n\n        this.remove(primitive, true);\n        this.add(primitive, zIndex);\n\n        return primitive;\n    };\n\n    /**\n     * Removes a primitive from the collection.\n     *\n     * @param {Object} primitive The primitive to remove.\n     * @param {Boolean} [doNotDestroy = false]\n     * @returns {Boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.remove = function(primitive, doNotDestroy) {\n        if (this.contains(primitive)) {\n            var index = primitive._zIndex;\n            var collection = this._collections[index];\n            var result;\n            if (doNotDestroy) {\n                result = collection.remove(primitive);\n            } else {\n                result = collection.removeAndDestroy(primitive);\n            }\n\n            if (result) {\n                this._length--;\n            }\n\n            if (collection.length === 0) {\n                this._collectionsArray.splice(this._collectionsArray.indexOf(collection), 1);\n                this._collections[index] = undefined;\n                collection.destroy();\n            }\n\n            return result;\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes all primitives in the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see OrderedGroundPrimitiveCollection#destroyPrimitives\n     */\n    OrderedGroundPrimitiveCollection.prototype.removeAll = function() {\n        var collections = this._collectionsArray;\n        for (var i = 0; i < collections.length; i++) {\n            var collection = collections[i];\n            collection.destroyPrimitives = true;\n            collection.destroy();\n        }\n\n        this._collections = {};\n        this._collectionsArray = [];\n        this._length = 0;\n    };\n\n    /**\n     * Determines if this collection contains a primitive.\n     *\n     * @param {Object} primitive The primitive to check for.\n     * @returns {Boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.contains = function(primitive) {\n        if (!defined(primitive)) {\n            return false;\n        }\n        var collection = this._collections[primitive._zIndex];\n        return defined(collection) && collection.contains(primitive);\n    };\n\n    /**\n     * @private\n     */\n    OrderedGroundPrimitiveCollection.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        var collections = this._collectionsArray;\n        for (var i = 0 ; i < collections.length; i++) {\n            collections[i].update(frameState);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see OrderedGroundPrimitiveCollection#destroy\n     */\n    OrderedGroundPrimitiveCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n     * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n     * collector to destroy this collection.\n     * <br /><br />\n     * Since destroying a collection destroys all the contained primitives, only destroy a collection\n     * when you are sure no other code is still using any of the contained primitives.\n     * <br /><br />\n     * Once this collection is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * primitives = primitives && primitives.destroy();\n     *\n     * @see OrderedGroundPrimitiveCollection#isDestroyed\n     */\n    OrderedGroundPrimitiveCollection.prototype.destroy = function() {\n        this.removeAll();\n        return destroyObject(this);\n    };\nexport default OrderedGroundPrimitiveCollection;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport BoundingRectangle from '../Core/BoundingRectangle.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport NearFarScalar from '../Core/NearFarScalar.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport HorizontalOrigin from '../Scene/HorizontalOrigin.js';\nimport VerticalOrigin from '../Scene/VerticalOrigin.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\n    var defaultColor = Color.WHITE;\n    var defaultEyeOffset = Cartesian3.ZERO;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultPixelOffset = Cartesian2.ZERO;\n    var defaultScale = 1.0;\n    var defaultRotation = 0.0;\n    var defaultAlignedAxis = Cartesian3.ZERO;\n    var defaultHorizontalOrigin = HorizontalOrigin.CENTER;\n    var defaultVerticalOrigin = VerticalOrigin.CENTER;\n    var defaultSizeInMeters = false;\n\n    var positionScratch = new Cartesian3();\n    var colorScratch = new Color();\n    var eyeOffsetScratch = new Cartesian3();\n    var pixelOffsetScratch = new Cartesian2();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var pixelOffsetScaleByDistanceScratch = new NearFarScalar();\n    var boundingRectangleScratch = new BoundingRectangle();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.billboard = undefined;\n        this.textureValue = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n     * @alias BillboardVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function BillboardVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    BillboardVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var billboardGraphics = entity._billboard;\n            var textureValue;\n            var billboard = item.billboard;\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(billboardGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                textureValue = Property.getValueOrUndefined(billboardGraphics._image, time);\n                show = defined(position) && defined(textureValue);\n            }\n\n            if (!show) {\n                //don't bother creating or updating anything else\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            if (!defined(billboard)) {\n                billboard = cluster.getBillboard(entity);\n                billboard.id = entity;\n                billboard.image = undefined;\n                item.billboard = billboard;\n            }\n\n            billboard.show = show;\n            if (!defined(billboard.image) || item.textureValue !== textureValue) {\n                billboard.image = textureValue;\n                item.textureValue = textureValue;\n            }\n            billboard.position = position;\n            billboard.color = Property.getValueOrDefault(billboardGraphics._color, time, defaultColor, colorScratch);\n            billboard.eyeOffset = Property.getValueOrDefault(billboardGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n            billboard.heightReference = Property.getValueOrDefault(billboardGraphics._heightReference, time, defaultHeightReference);\n            billboard.pixelOffset = Property.getValueOrDefault(billboardGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n            billboard.scale = Property.getValueOrDefault(billboardGraphics._scale, time, defaultScale);\n            billboard.rotation = Property.getValueOrDefault(billboardGraphics._rotation, time, defaultRotation);\n            billboard.alignedAxis = Property.getValueOrDefault(billboardGraphics._alignedAxis, time, defaultAlignedAxis);\n            billboard.horizontalOrigin = Property.getValueOrDefault(billboardGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n            billboard.verticalOrigin = Property.getValueOrDefault(billboardGraphics._verticalOrigin, time, defaultVerticalOrigin);\n            billboard.width = Property.getValueOrUndefined(billboardGraphics._width, time);\n            billboard.height = Property.getValueOrUndefined(billboardGraphics._height, time);\n            billboard.scaleByDistance = Property.getValueOrUndefined(billboardGraphics._scaleByDistance, time, scaleByDistanceScratch);\n            billboard.translucencyByDistance = Property.getValueOrUndefined(billboardGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n            billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(billboardGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n            billboard.sizeInMeters = Property.getValueOrDefault(billboardGraphics._sizeInMeters, time, defaultSizeInMeters);\n            billboard.distanceDisplayCondition = Property.getValueOrUndefined(billboardGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n            billboard.disableDepthTestDistance = Property.getValueOrUndefined(billboardGraphics._disableDepthTestDistance, time);\n\n            var subRegion = Property.getValueOrUndefined(billboardGraphics._imageSubRegion, time, boundingRectangleScratch);\n            if (defined(subRegion)) {\n                billboard.setImageSubRegion(billboard._imageId, subRegion);\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    BillboardVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !defined(item.billboard)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var billboard = item.billboard;\n        if (billboard.heightReference === HeightReference.NONE) {\n            result.center = Cartesian3.clone(billboard.position, result.center);\n        } else {\n            if (!defined(billboard._clampedPosition)) {\n                return BoundingSphereState.PENDING;\n            }\n            result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n        }\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    BillboardVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    BillboardVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removeBillboard(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    BillboardVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._billboard) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._billboard) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            item.billboard = undefined;\n            cluster.removeBillboard(entity);\n        }\n    }\nexport default BillboardVisualizer;\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport VertexFormat from '../Core/VertexFormat.js';\nimport AllMaterialAppearanceFS from '../Shaders/Appearances/AllMaterialAppearanceFS.js';\nimport AllMaterialAppearanceVS from '../Shaders/Appearances/AllMaterialAppearanceVS.js';\nimport BasicMaterialAppearanceFS from '../Shaders/Appearances/BasicMaterialAppearanceFS.js';\nimport BasicMaterialAppearanceVS from '../Shaders/Appearances/BasicMaterialAppearanceVS.js';\nimport TexturedMaterialAppearanceFS from '../Shaders/Appearances/TexturedMaterialAppearanceFS.js';\nimport TexturedMaterialAppearanceVS from '../Shaders/Appearances/TexturedMaterialAppearanceVS.js';\nimport Appearance from './Appearance.js';\nimport Material from './Material.js';\n\n    /**\n     * An appearance for arbitrary geometry (as opposed to {@link EllipsoidSurfaceAppearance}, for example)\n     * that supports shading with materials.\n     *\n     * @alias MaterialAppearance\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n     * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n     * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link MaterialAppearance#renderState} has alpha blending enabled.\n     * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link MaterialAppearance#renderState} has backface culling enabled.\n     * @param {MaterialAppearance.MaterialSupport} [options.materialSupport=MaterialAppearance.MaterialSupport.TEXTURED] The type of materials that will be supported.\n     * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n     * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n     * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n     * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n     *\n     * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Materials.html|Cesium Sandcastle Material Appearance Demo}\n     *\n     * @example\n     * var primitive = new Cesium.Primitive({\n     *   geometryInstances : new Cesium.GeometryInstance({\n     *     geometry : new Cesium.WallGeometry({\n            materialSupport :  Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\n     *       // ...\n     *     })\n     *   }),\n     *   appearance : new Cesium.MaterialAppearance({\n     *     material : Cesium.Material.fromType('Color'),\n     *     faceForward : true\n     *   })\n     *\n     * });\n     */\n    function MaterialAppearance(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var translucent = defaultValue(options.translucent, true);\n        var closed = defaultValue(options.closed, false);\n        var materialSupport = defaultValue(options.materialSupport, MaterialAppearance.MaterialSupport.TEXTURED);\n\n        /**\n         * The material used to determine the fragment color.  Unlike other {@link MaterialAppearance}\n         * properties, this is not read-only, so an appearance's material can change on the fly.\n         *\n         * @type Material\n         *\n         * @default {@link Material.ColorType}\n         *\n         * @see {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}\n         */\n        this.material = (defined(options.material)) ? options.material : Material.fromType(Material.ColorType);\n\n        /**\n         * When <code>true</code>, the geometry is expected to appear translucent.\n         *\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        this.translucent = translucent;\n\n        this._vertexShaderSource = defaultValue(options.vertexShaderSource, materialSupport.vertexShaderSource);\n        this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, materialSupport.fragmentShaderSource);\n        this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n        this._closed = closed;\n\n        // Non-derived members\n\n        this._materialSupport = materialSupport;\n        this._vertexFormat = materialSupport.vertexFormat;\n        this._flat = defaultValue(options.flat, false);\n        this._faceForward = defaultValue(options.faceForward, !closed);\n    }\n\n    Object.defineProperties(MaterialAppearance.prototype, {\n        /**\n         * The GLSL source code for the vertex shader.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        vertexShaderSource : {\n            get : function() {\n                return this._vertexShaderSource;\n            }\n        },\n\n        /**\n         * The GLSL source code for the fragment shader.  The full fragment shader\n         * source is built procedurally taking into account {@link MaterialAppearance#material},\n         * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n         * Use {@link MaterialAppearance#getFragmentShaderSource} to get the full source.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        fragmentShaderSource : {\n            get : function() {\n                return this._fragmentShaderSource;\n            }\n        },\n\n        /**\n         * The WebGL fixed-function state to use when rendering the geometry.\n         * <p>\n         * The render state can be explicitly defined when constructing a {@link MaterialAppearance}\n         * instance, or it is set implicitly via {@link MaterialAppearance#translucent}\n         * and {@link MaterialAppearance#closed}.\n         * </p>\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        renderState : {\n            get : function() {\n                return this._renderState;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the geometry is expected to be closed so\n         * {@link MaterialAppearance#renderState} has backface culling enabled.\n         * If the viewer enters the geometry, it will not be visible.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        closed : {\n            get : function() {\n                return this._closed;\n            }\n        },\n\n        /**\n         * The type of materials supported by this instance.  This impacts the required\n         * {@link VertexFormat} and the complexity of the vertex and fragment shaders.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {MaterialAppearance.MaterialSupport}\n         * @readonly\n         *\n         * @default {@link MaterialAppearance.MaterialSupport.TEXTURED}\n         */\n        materialSupport : {\n            get : function() {\n                return this._materialSupport;\n            }\n        },\n\n        /**\n         * The {@link VertexFormat} that this appearance instance is compatible with.\n         * A geometry can have more vertex attributes and still be compatible - at a\n         * potential performance cost - but it can't have less.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type VertexFormat\n         * @readonly\n         *\n         * @default {@link MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat}\n         */\n        vertexFormat : {\n            get : function() {\n                return this._vertexFormat;\n            }\n        },\n\n        /**\n         * When <code>true</code>, flat shading is used in the fragment shader,\n         * which means lighting is not taking into account.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        flat : {\n            get : function() {\n                return this._flat;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the fragment shader flips the surface normal\n         * as needed to ensure that the normal faces the viewer to avoid\n         * dark spots.  This is useful when both sides of a geometry should be\n         * shaded like {@link WallGeometry}.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        faceForward : {\n            get : function() {\n                return this._faceForward;\n            }\n        }\n    });\n\n    /**\n     * Procedurally creates the full GLSL fragment shader source.  For {@link MaterialAppearance},\n     * this is derived from {@link MaterialAppearance#fragmentShaderSource}, {@link MaterialAppearance#material},\n     * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n     *\n     * @function\n     *\n     * @returns {String} The full GLSL fragment shader source.\n     */\n    MaterialAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n\n    /**\n     * Determines if the geometry is translucent based on {@link MaterialAppearance#translucent} and {@link Material#isTranslucent}.\n     *\n     * @function\n     *\n     * @returns {Boolean} <code>true</code> if the appearance is translucent.\n     */\n    MaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n    /**\n     * Creates a render state.  This is not the final render state instance; instead,\n     * it can contain a subset of render state properties identical to the render state\n     * created in the context.\n     *\n     * @function\n     *\n     * @returns {Object} The render state.\n     */\n    MaterialAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\n\n    /**\n     * Determines the type of {@link Material} that is supported by a\n     * {@link MaterialAppearance} instance.  This is a trade-off between\n     * flexibility (a wide array of materials) and memory/performance\n     * (required vertex format and GLSL shader complexity.\n     * @exports MaterialAppearance.MaterialSupport\n     */\n    MaterialAppearance.MaterialSupport = {\n        /**\n         * Only basic materials, which require just <code>position</code> and\n         * <code>normal</code> vertex attributes, are supported.\n         *\n         * @constant\n         */\n        BASIC : Object.freeze({\n            vertexFormat : VertexFormat.POSITION_AND_NORMAL,\n            vertexShaderSource : BasicMaterialAppearanceVS,\n            fragmentShaderSource : BasicMaterialAppearanceFS\n        }),\n        /**\n         * Materials with textures, which require <code>position</code>,\n         * <code>normal</code>, and <code>st</code> vertex attributes,\n         * are supported.  The vast majority of materials fall into this category.\n         *\n         * @constant\n         */\n        TEXTURED : Object.freeze({\n            vertexFormat : VertexFormat.POSITION_NORMAL_AND_ST,\n            vertexShaderSource : TexturedMaterialAppearanceVS,\n            fragmentShaderSource : TexturedMaterialAppearanceFS\n        }),\n        /**\n         * All materials, including those that work in tangent space, are supported.\n         * This requires <code>position</code>, <code>normal</code>, <code>st</code>,\n         * <code>tangent</code>, and <code>bitangent</code> vertex attributes.\n         *\n         * @constant\n         */\n        ALL : Object.freeze({\n            vertexFormat : VertexFormat.ALL,\n            vertexShaderSource : AllMaterialAppearanceVS,\n            fragmentShaderSource : AllMaterialAppearanceFS\n        })\n    };\nexport default MaterialAppearance;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec3 tangent;\\n\\\nattribute vec3 bitangent;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_tangentEC = czm_normal * tangent;                       // tangent in eye coordinates\\n\\\n    v_bitangentEC = czm_normal * bitangent;                   // bitangent in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    mat3 tangentToEyeMatrix = czm_tangentToEyeSpaceMatrix(v_normalEC, v_tangentEC, v_bitangentEC);\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = tangentToEyeMatrix;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","import ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\n\n    /**\n     * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n     *\n     * @alias DistanceDisplayConditionGeometryInstanceAttribute\n     * @constructor\n     *\n     * @param {Number} [near=0.0] The near distance.\n     * @param {Number} [far=Number.MAX_VALUE] The far distance.\n     *\n     * @exception {DeveloperError} far must be greater than near.\n     *\n     * @example\n     * var instance = new Cesium.GeometryInstance({\n     *   geometry : new Cesium.BoxGeometry({\n     *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n     *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n     *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n     *   }),\n     *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n     *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n     *   id : 'box',\n     *   attributes : {\n     *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n     *   }\n     * });\n     *\n     * @see GeometryInstance\n     * @see GeometryInstanceAttribute\n     */\n    function DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n        near = defaultValue(near, 0.0);\n        far = defaultValue(far, Number.MAX_VALUE);\n\n        \n\n        /**\n         * The values for the attributes stored in a typed array.\n         *\n         * @type Float32Array\n         *\n         * @default [0.0, 0.0, Number.MAX_VALUE]\n         */\n        this.value = new Float32Array([near, far]);\n    }\n\n    Object.defineProperties(DistanceDisplayConditionGeometryInstanceAttribute.prototype, {\n        /**\n         * The datatype of each component in the attribute, e.g., individual elements in\n         * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {ComponentDatatype}\n         * @readonly\n         *\n         * @default {@link ComponentDatatype.FLOAT}\n         */\n        componentDatatype : {\n            get : function() {\n                return ComponentDatatype.FLOAT;\n            }\n        },\n\n        /**\n         * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @default 3\n         */\n        componentsPerAttribute : {\n            get : function() {\n                return 2;\n            }\n        },\n\n        /**\n         * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n         * indicate that the components should be mapped to the range [0, 1] (unsigned)\n         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        normalize : {\n            get : function() {\n                return false;\n            }\n        }\n    });\n\n    /**\n     * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n     *\n     * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n     * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n     *\n     * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n     *\n     * @example\n     * var distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n     * var instance = new Cesium.GeometryInstance({\n     *   geometry : geometry,\n     *   attributes : {\n     *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n     *   }\n     * });\n     */\n    DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition = function(distanceDisplayCondition) {\n        \n\n        return new DistanceDisplayConditionGeometryInstanceAttribute(distanceDisplayCondition.near, distanceDisplayCondition.far);\n    };\n\n    /**\n     * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n     *\n     * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n     * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n     * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n     *\n     * @example\n     * var attributes = primitive.getGeometryInstanceAttributes('an id');\n     * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n     */\n    DistanceDisplayConditionGeometryInstanceAttribute.toValue = function(distanceDisplayCondition, result) {\n        \n\n        if (!defined(result)) {\n            return new Float32Array([distanceDisplayCondition.near, distanceDisplayCondition.far]);\n        }\n        result[0] = distanceDisplayCondition.near;\n        result[1] = distanceDisplayCondition.far;\n        return result;\n    };\nexport default DistanceDisplayConditionGeometryInstanceAttribute;\n","import Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Material from '../Scene/Material.js';\n\n    /**\n     * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n     * This type defines an interface and cannot be instantiated directly.\n     *\n     * @alias MaterialProperty\n     * @constructor\n     * @abstract\n     *\n     * @see ColorMaterialProperty\n     * @see CompositeMaterialProperty\n     * @see GridMaterialProperty\n     * @see ImageMaterialProperty\n     * @see PolylineGlowMaterialProperty\n     * @see PolylineOutlineMaterialProperty\n     * @see StripeMaterialProperty\n     */\n    function MaterialProperty() {\n        DeveloperError.throwInstantiationError();\n    }\n\n    Object.defineProperties(MaterialProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof MaterialProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : DeveloperError.throwInstantiationError\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is considered to have changed if a call to getValue would return\n         * a different result for the same time.\n         * @memberof MaterialProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : DeveloperError.throwInstantiationError\n        }\n    });\n\n    /**\n     * Gets the {@link Material} type at the provided time.\n     * @function\n     *\n     * @param {JulianDate} time The time for which to retrieve the type.\n     * @returns {String} The type of material.\n     */\n    MaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n    /**\n     * Gets the value of the property at the provided time.\n     * @function\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    MaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     * @function\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    MaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\n    /**\n     * @private\n     */\n    MaterialProperty.getValue = function(time, materialProperty, material) {\n        var type;\n\n        if (defined(materialProperty)) {\n            type = materialProperty.getType(time);\n            if (defined(type)) {\n                if (!defined(material) || (material.type !== type)) {\n                    material = Material.fromType(type);\n                }\n                materialProperty.getValue(time, material.uniforms);\n                return material;\n            }\n        }\n\n        if (!defined(material) || (material.type !== Material.ColorType)) {\n            material = Material.fromType(Material.ColorType);\n        }\n        Color.clone(Color.WHITE, material.uniforms.color);\n\n        return material;\n    };\nexport default MaterialProperty;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Check from '../Core/Check.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport GroundPrimitive from '../Scene/GroundPrimitive.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport Primitive from '../Scene/Primitive.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    /**\n     * Defines the interface for a dynamic geometry updater.  A DynamicGeometryUpdater\n     * is responsible for handling visualization of a specific type of geometry\n     * that needs to be recomputed based on simulation time.\n     * This object is never used directly by client code, but is instead created by\n     * {@link GeometryUpdater} implementations which contain dynamic geometry.\n     *\n     * This type defines an interface and cannot be instantiated directly.\n     *\n     * @alias DynamicGeometryUpdater\n     * @constructor\n     * @private\n     * @abstract\n     */\n    function DynamicGeometryUpdater(geometryUpdater, primitives, orderedGroundPrimitives) {\n        \n\n        this._primitives = primitives;\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._primitive = undefined;\n        this._outlinePrimitive = undefined;\n        this._geometryUpdater = geometryUpdater;\n        this._options = geometryUpdater._options;\n        this._entity = geometryUpdater._entity;\n        this._material = undefined;\n    }\n\n    DynamicGeometryUpdater.prototype._isHidden = function(entity, geometry, time) {\n        return !entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(geometry.show, time, true);\n    };\n\n    DynamicGeometryUpdater.prototype._setOptions = DeveloperError.throwInstantiationError;\n\n    /**\n     * Updates the geometry to the specified time.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @param {JulianDate} time The current time.\n     */\n    DynamicGeometryUpdater.prototype.update = function(time) {\n        \n\n        var geometryUpdater = this._geometryUpdater;\n        var onTerrain = geometryUpdater._onTerrain;\n\n        var primitives = this._primitives;\n        var orderedGroundPrimitives = this._orderedGroundPrimitives;\n        if (onTerrain) {\n            orderedGroundPrimitives.remove(this._primitive);\n        } else {\n            primitives.removeAndDestroy(this._primitive);\n            primitives.removeAndDestroy(this._outlinePrimitive);\n            this._outlinePrimitive = undefined;\n        }\n        this._primitive = undefined;\n\n        var entity = this._entity;\n        var geometry = entity[this._geometryUpdater._geometryPropertyName];\n        this._setOptions(entity, geometry, time);\n        if (this._isHidden(entity, geometry, time)) {\n            return;\n        }\n\n        var shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n        var options = this._options;\n        if (!defined(geometry.fill) || geometry.fill.getValue(time)) {\n            var fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n            var isColorAppearance = fillMaterialProperty instanceof ColorMaterialProperty;\n            var appearance;\n            var closed = geometryUpdater._getIsClosed(options);\n            if (isColorAppearance) {\n                appearance = new PerInstanceColorAppearance({\n                    closed: closed,\n                    flat : onTerrain && !geometryUpdater._supportsMaterialsforEntitiesOnTerrain\n                });\n            } else {\n                var material = MaterialProperty.getValue(time, fillMaterialProperty, this._material);\n                this._material = material;\n                appearance = new MaterialAppearance({\n                    material : material,\n                    translucent : material.isTranslucent(),\n                    closed : closed\n                });\n            }\n\n            if (onTerrain) {\n                options.vertexFormat = PerInstanceColorAppearance.VERTEX_FORMAT;\n                this._primitive = orderedGroundPrimitives.add(new GroundPrimitive({\n                    geometryInstances : this._geometryUpdater.createFillGeometryInstance(time),\n                    appearance : appearance,\n                    asynchronous : false,\n                    shadows : shadows,\n                    classificationType : this._geometryUpdater.classificationTypeProperty.getValue(time)\n                }), Property.getValueOrUndefined(this._geometryUpdater.zIndex, time));\n            } else {\n                options.vertexFormat = appearance.vertexFormat;\n\n                var fillInstance = this._geometryUpdater.createFillGeometryInstance(time);\n\n                if (isColorAppearance) {\n                    appearance.translucent = fillInstance.attributes.color.value[3] !== 255;\n                }\n\n                this._primitive = primitives.add(new Primitive({\n                    geometryInstances : fillInstance,\n                    appearance : appearance,\n                    asynchronous : false,\n                    shadows : shadows\n                }));\n            }\n        }\n\n        if (!onTerrain && defined(geometry.outline) && geometry.outline.getValue(time)) {\n            var outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(time);\n            var outlineWidth = Property.getValueOrDefault(geometry.outlineWidth, time, 1.0);\n\n            this._outlinePrimitive = primitives.add(new Primitive({\n                geometryInstances : outlineInstance,\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : outlineInstance.attributes.color.value[3] !== 255,\n                    renderState : {\n                        lineWidth : geometryUpdater._scene.clampLineWidth(outlineWidth)\n                    }\n                }),\n                asynchronous : false,\n                shadows : shadows\n            }));\n        }\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     * @function\n     *\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    DynamicGeometryUpdater.prototype.getBoundingSphere = function(result) {\n        \n        var entity = this._entity;\n        var primitive = this._primitive;\n        var outlinePrimitive = this._outlinePrimitive;\n\n        var attributes;\n\n        //Outline and Fill geometries have the same bounding sphere, so just use whichever one is defined and ready\n        if (defined(primitive) && primitive.show && primitive.ready) {\n            attributes = primitive.getGeometryInstanceAttributes(entity);\n            if (defined(attributes) && defined(attributes.boundingSphere)) {\n                BoundingSphere.clone(attributes.boundingSphere, result);\n                return BoundingSphereState.DONE;\n            }\n        }\n\n        if (defined(outlinePrimitive) && outlinePrimitive.show && outlinePrimitive.ready) {\n            attributes = outlinePrimitive.getGeometryInstanceAttributes(entity);\n            if (defined(attributes) && defined(attributes.boundingSphere)) {\n                BoundingSphere.clone(attributes.boundingSphere, result);\n                return BoundingSphereState.DONE;\n            }\n        }\n\n        if ((defined(primitive) && !primitive.ready) || (defined(outlinePrimitive) && !outlinePrimitive.ready)) {\n            return BoundingSphereState.PENDING;\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    DynamicGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    DynamicGeometryUpdater.prototype.destroy = function() {\n        var primitives = this._primitives;\n        var orderedGroundPrimitives = this._orderedGroundPrimitives;\n        if (this._geometryUpdater._onTerrain) {\n            orderedGroundPrimitives.remove(this._primitive);\n        } else {\n            primitives.removeAndDestroy(this._primitive);\n        }\n        primitives.removeAndDestroy(this._outlinePrimitive);\n        destroyObject(this);\n    };\nexport default DynamicGeometryUpdater;\n","import Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport Event from '../Core/Event.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\nimport ClassificationType from '../Scene/ClassificationType.js';\nimport ShadowMode from '../Scene/ShadowMode.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport ConstantProperty from './ConstantProperty.js';\nimport Entity from './Entity.js';\nimport Property from './Property.js';\n\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultShow = new ConstantProperty(true);\n    var defaultFill = new ConstantProperty(true);\n    var defaultOutline = new ConstantProperty(false);\n    var defaultOutlineColor = new ConstantProperty(Color.BLACK);\n    var defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\n    var defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\n    var defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n    /**\n     * An abstract class for updating geometry entities.\n     * @alias GeometryUpdater\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {Entity} options.entity The entity containing the geometry to be visualized.\n     * @param {Scene} options.scene The scene where visualization is taking place.\n     * @param {Object} options.geometryOptions Options for the geometry\n     * @param {String} options.geometryPropertyName The geometry property name\n     * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n     */\n    function GeometryUpdater(options) {\n        \n\n        var entity = options.entity;\n        var geometryPropertyName = options.geometryPropertyName;\n\n        this._entity = entity;\n        this._scene = options.scene;\n        this._fillEnabled = false;\n        this._isClosed = false;\n        this._onTerrain = false;\n        this._dynamic = false;\n        this._outlineEnabled = false;\n        this._geometryChanged = new Event();\n        this._showProperty = undefined;\n        this._materialProperty = undefined;\n        this._showOutlineProperty = undefined;\n        this._outlineColorProperty = undefined;\n        this._outlineWidth = 1.0;\n        this._shadowsProperty = undefined;\n        this._distanceDisplayConditionProperty = undefined;\n        this._classificationTypeProperty = undefined;\n        this._options = options.geometryOptions;\n        this._geometryPropertyName = geometryPropertyName;\n        this._id = geometryPropertyName + '-' + entity.id;\n        this._observedPropertyNames = options.observedPropertyNames;\n        this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(options.scene);\n    }\n\n    Object.defineProperties(GeometryUpdater.prototype, {\n        /**\n         * Gets the unique ID associated with this updater\n         * @memberof GeometryUpdater.prototype\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n        /**\n         * Gets the entity associated with this geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Entity}\n         * @readonly\n         */\n        entity : {\n            get : function() {\n                return this._entity;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has a fill component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        fillEnabled : {\n            get : function() {\n                return this._fillEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if fill visibility varies with simulation time.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantFill : {\n            get : function() {\n                return !this._fillEnabled ||\n                       (!defined(this._entity.availability) &&\n                        Property.isConstant(this._showProperty) &&\n                        Property.isConstant(this._fillProperty));\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        fillMaterialProperty : {\n            get : function() {\n                return this._materialProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        outlineEnabled : {\n            get : function() {\n                return this._outlineEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantOutline : {\n            get : function() {\n                return !this._outlineEnabled ||\n                       (!defined(this._entity.availability) &&\n                        Property.isConstant(this._showProperty) &&\n                        Property.isConstant(this._showOutlineProperty));\n            }\n        },\n        /**\n         * Gets the {@link Color} property for the geometry outline.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        outlineColorProperty : {\n            get : function() {\n                return this._outlineColorProperty;\n            }\n        },\n        /**\n         * Gets the constant with of the geometry outline, in pixels.\n         * This value is only valid if isDynamic is false.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        outlineWidth : {\n            get : function() {\n                return this._outlineWidth;\n            }\n        },\n        /**\n         * Gets the property specifying whether the geometry\n         * casts or receives shadows from light sources.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        shadowsProperty : {\n            get : function() {\n                return this._shadowsProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        distanceDisplayConditionProperty : {\n            get : function() {\n                return this._distanceDisplayConditionProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        classificationTypeProperty : {\n            get : function() {\n                return this._classificationTypeProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is time-varying.\n         * If true, all visualization is delegated to a DynamicGeometryUpdater\n         * returned by GeometryUpdater#createDynamicUpdater.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isDynamic : {\n            get : function() {\n                return this._dynamic;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is closed.\n         * This property is only valid for static geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isClosed : {\n            get : function() {\n                return this._isClosed;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry should be drawn on terrain.\n         * @memberof EllipseGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        onTerrain : {\n            get : function() {\n                return this._onTerrain;\n            }\n        },\n        /**\n         * Gets an event that is raised whenever the public properties\n         * of this updater change.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        geometryChanged : {\n            get : function() {\n                return this._geometryChanged;\n            }\n        }\n    });\n\n    /**\n     * Checks if the geometry is outlined at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n     */\n    GeometryUpdater.prototype.isOutlineVisible = function(time) {\n        var entity = this._entity;\n        var visible = this._outlineEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Checks if the geometry is filled at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n     */\n    GeometryUpdater.prototype.isFilled = function(time) {\n        var entity = this._entity;\n        var visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._fillProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @function\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    GeometryUpdater.prototype.createFillGeometryInstance = DeveloperError.throwInstantiationError;\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @function\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    GeometryUpdater.prototype.createOutlineGeometryInstance = DeveloperError.throwInstantiationError;\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    GeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    GeometryUpdater.prototype.destroy = function() {\n        destroyObject(this);\n    };\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isHidden = function(entity, geometry) {\n        var show = geometry.show;\n        return defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE);\n    };\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isOnTerrain = function(entity, geometry) {\n        return false;\n    };\n\n    /**\n     * @param {GeometryOptions} options\n     * @private\n     */\n    GeometryUpdater.prototype._getIsClosed = function(options) {\n        return true;\n    };\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._setStaticOptions = DeveloperError.throwInstantiationError;\n\n    /**\n     * @param {Entity} entity\n     * @param {String} propertyName\n     * @param {*} newValue\n     * @param {*} oldValue\n     * @private\n     */\n    GeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n\n        if (!defined(geometry)) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var fillProperty = geometry.fill;\n        var fillEnabled = defined(fillProperty) && fillProperty.isConstant ? fillProperty.getValue(Iso8601.MINIMUM_VALUE) : true;\n\n        var outlineProperty = geometry.outline;\n        var outlineEnabled = defined(outlineProperty);\n        if (outlineEnabled && outlineProperty.isConstant) {\n            outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n        }\n\n        if (!fillEnabled && !outlineEnabled) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var show = geometry.show;\n        if (this._isHidden(entity, geometry)) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n        this._fillProperty = defaultValue(fillProperty, defaultFill);\n        this._showProperty = defaultValue(show, defaultShow);\n        this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n        this._outlineColorProperty = outlineEnabled ? defaultValue(geometry.outlineColor, defaultOutlineColor) : undefined;\n        this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n        this._distanceDisplayConditionProperty = defaultValue(geometry.distanceDisplayCondition, defaultDistanceDisplayCondition);\n        this._classificationTypeProperty = defaultValue(geometry.classificationType, defaultClassificationType);\n\n        this._fillEnabled = fillEnabled;\n\n        var onTerrain = this._isOnTerrain(entity, geometry) &&\n            (this._supportsMaterialsforEntitiesOnTerrain || this._materialProperty instanceof ColorMaterialProperty);\n\n        if (outlineEnabled && onTerrain) {\n            oneTimeWarning(oneTimeWarning.geometryOutlines);\n            outlineEnabled = false;\n        }\n\n        this._onTerrain = onTerrain;\n        this._outlineEnabled = outlineEnabled;\n\n        if (this._isDynamic(entity, geometry)) {\n            if (!this._dynamic) {\n                this._dynamic = true;\n                this._geometryChanged.raiseEvent(this);\n            }\n        } else {\n            this._setStaticOptions(entity, geometry);\n            this._isClosed = this._getIsClosed(this._options);\n            var outlineWidth = geometry.outlineWidth;\n            this._outlineWidth = defined(outlineWidth) ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE) : 1.0;\n            this._dynamic = false;\n            this._geometryChanged.raiseEvent(this);\n        }\n    };\n\n    /**\n     * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n     *\n     * @param {PrimitiveCollection} primitives The primitive collection to use.\n     * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n     *\n     * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n     *\n     * @exception {DeveloperError} This instance does not represent dynamic geometry.\n     */\n    GeometryUpdater.prototype.createDynamicUpdater = function(primitives, groundPrimitives) {\n        \n\n        return new this.constructor.DynamicGeometryUpdater(this, primitives, groundPrimitives);\n    };\nexport default GeometryUpdater;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Check from '../Core/Check.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Event from '../Core/Event.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport CesiumMath from '../Core/Math.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport SceneMode from '../Scene/SceneMode.js';\nimport Property from './Property.js';\n\n    var scratchPosition = new Cartesian3();\n    var scratchCarto = new Cartographic();\n\n    /**\n     * @private\n     */\n    function TerrainOffsetProperty(scene, positionProperty, heightReferenceProperty, extrudedHeightReferenceProperty) {\n        \n\n        this._scene = scene;\n        this._heightReference = heightReferenceProperty;\n        this._extrudedHeightReference = extrudedHeightReferenceProperty;\n        this._positionProperty = positionProperty;\n\n        this._position = new Cartesian3();\n        this._cartographicPosition = new Cartographic();\n        this._normal = new Cartesian3();\n\n        this._definitionChanged = new Event();\n        this._terrainHeight = 0;\n        this._removeCallbackFunc = undefined;\n        this._removeEventListener = undefined;\n        this._removeModeListener = undefined;\n\n        var that = this;\n        if (defined(scene.globe)) {\n            this._removeEventListener = scene.terrainProviderChanged.addEventListener(function() {\n                that._updateClamping();\n            });\n            this._removeModeListener = scene.morphComplete.addEventListener(function() {\n                that._updateClamping();\n            });\n        }\n\n        if (positionProperty.isConstant) {\n            var position = positionProperty.getValue(Iso8601.MINIMUM_VALUE, scratchPosition);\n            if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n                return;\n            }\n            this._position = Cartesian3.clone(position, this._position);\n\n            this._updateClamping();\n\n            this._normal = scene.globe.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n        }\n    }\n\n    Object.defineProperties(TerrainOffsetProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.\n         * @memberof TerrainOffsetProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return false;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * @memberof TerrainOffsetProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    TerrainOffsetProperty.prototype._updateClamping = function() {\n        if (defined(this._removeCallbackFunc)) {\n            this._removeCallbackFunc();\n        }\n\n        var scene = this._scene;\n        var globe = scene.globe;\n        var position = this._position;\n\n        if (!defined(globe) || Cartesian3.equals(position, Cartesian3.ZERO)) {\n            this._terrainHeight = 0;\n            return;\n        }\n        var ellipsoid = globe.ellipsoid;\n        var surface = globe._surface;\n\n        var that = this;\n        var cartographicPosition = ellipsoid.cartesianToCartographic(position, this._cartographicPosition);\n        var height = globe.getHeight(cartographicPosition);\n        if (defined(height)) {\n            this._terrainHeight = height;\n        } else {\n            this._terrainHeight = 0;\n        }\n\n        function updateFunction(clampedPosition) {\n            if (scene.mode === SceneMode.SCENE3D) {\n                var carto = ellipsoid.cartesianToCartographic(clampedPosition, scratchCarto);\n                that._terrainHeight = carto.height;\n            } else {\n                that._terrainHeight = clampedPosition.x;\n            }\n            that.definitionChanged.raiseEvent();\n        }\n        this._removeCallbackFunc = surface.updateHeight(cartographicPosition, updateFunction);\n    };\n\n    /**\n     * Gets the height relative to the terrain based on the positions.\n     *\n     * @returns {Cartesian3} The offset\n     */\n    TerrainOffsetProperty.prototype.getValue = function(time, result) {\n        var heightReference = Property.getValueOrDefault(this._heightReference, time, HeightReference.NONE);\n        var extrudedHeightReference = Property.getValueOrDefault(this._extrudedHeightReference, time, HeightReference.NONE);\n\n        if (heightReference === HeightReference.NONE && extrudedHeightReference !== HeightReference.RELATIVE_TO_GROUND) {\n            this._position = Cartesian3.clone(Cartesian3.ZERO, this._position);\n            return Cartesian3.clone(Cartesian3.ZERO, result);\n        }\n\n        if (this._positionProperty.isConstant) {\n            return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n        }\n\n        var scene = this._scene;\n        var position = this._positionProperty.getValue(time, scratchPosition);\n        if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n            return Cartesian3.clone(Cartesian3.ZERO, result);\n        }\n\n        if (Cartesian3.equalsEpsilon(this._position, position, CesiumMath.EPSILON10)) {\n            return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n        }\n\n        this._position = Cartesian3.clone(position, this._position);\n\n        this._updateClamping();\n\n        var normal = scene.globe.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n        return Cartesian3.multiplyByScalar(normal, this._terrainHeight, result);\n    };\n\n    TerrainOffsetProperty.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    TerrainOffsetProperty.prototype.destroy = function() {\n        if (defined(this._removeEventListener)) {\n            this._removeEventListener();\n        }\n        if (defined(this._removeModeListener)) {\n            this._removeModeListener();\n        }\n        if (defined(this._removeCallbackFunc)) {\n            this._removeCallbackFunc();\n        }\n        return destroyObject(this);\n    };\n\n    /**\n     * A function which creates one or more providers.\n     * @callback TerrainOffsetProperty~PositionFunction\n     * @param {JulianDate} time The clock time at which to retrieve the position\n     * @param {Cartesian3} result The result position\n     * @returns {Cartesian3} The position at which to do the terrain height check\n     */\nexport default TerrainOffsetProperty;\n","import defined from '../Core/defined.js';\nimport CallbackProperty from './CallbackProperty.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport TerrainOffsetProperty from './TerrainOffsetProperty.js';\n\n    function heightReferenceOnEntityPropertyChanged(entity, propertyName, newValue, oldValue) {\n        GeometryUpdater.prototype._onEntityPropertyChanged.call(this, entity, propertyName, newValue, oldValue);\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n        if (!defined(geometry)) {\n            return;\n        }\n\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        var heightReferenceProperty = geometry.heightReference;\n\n        if (defined(heightReferenceProperty)) {\n            var centerPosition = new CallbackProperty(this._computeCenter.bind(this), !this._dynamic);\n            this._terrainOffsetProperty = new TerrainOffsetProperty(this._scene, centerPosition, heightReferenceProperty);\n        }\n    }\nexport default heightReferenceOnEntityPropertyChanged;\n","import BoxGeometry from '../Core/BoxGeometry.js';\nimport BoxOutlineGeometry from '../Core/BoxOutlineGeometry.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport GeometryOffsetAttribute from '../Core/GeometryOffsetAttribute.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport heightReferenceOnEntityPropertyChanged from './heightReferenceOnEntityPropertyChanged.js';\nimport Property from './Property.js';\n\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function BoxGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.dimensions = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for boxes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias BoxGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function BoxGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new BoxGeometryOptions(entity),\n            geometryPropertyName : 'box',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'box']\n        });\n\n        this._onEntityPropertyChanged(entity, 'box', entity.box, undefined);\n    }\n\n    if (defined(Object.create)) {\n        BoxGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        BoxGeometryUpdater.prototype.constructor = BoxGeometryUpdater;\n    }\n\n    Object.defineProperties(BoxGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof BoxGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    BoxGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset: undefined\n        };\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : BoxGeometry.fromDimensions(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    BoxGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : BoxOutlineGeometry.fromDimensions(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    BoxGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    BoxGeometryUpdater.prototype._isHidden = function(entity, box) {\n        return !defined(box.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, box);\n    };\n\n    BoxGeometryUpdater.prototype._isDynamic = function(entity, box) {\n        return !entity.position.isConstant ||  !Property.isConstant(entity.orientation) ||  !box.dimensions.isConstant ||  !Property.isConstant(box.outlineWidth);\n    };\n\n    BoxGeometryUpdater.prototype._setStaticOptions = function(entity, box) {\n        var heightReference = Property.getValueOrDefault(box.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.dimensions = box.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    BoxGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    BoxGeometryUpdater.DynamicGeometryUpdater = DynamicBoxGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicBoxGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicBoxGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicBoxGeometryUpdater.prototype.constructor = DynamicBoxGeometryUpdater;\n    }\n\n    DynamicBoxGeometryUpdater.prototype._isHidden = function(entity, box, time) {\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        var dimensions = this._options.dimensions;\n        return !defined(position) || !defined(dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, box, time);\n    };\n\n    DynamicBoxGeometryUpdater.prototype._setOptions = function(entity, box, time) {\n        var heightReference = Property.getValueOrDefault(box.heightReference, time, HeightReference.NONE);\n        var options = this._options;\n        options.dimensions = Property.getValueOrUndefined(box.dimensions, time, options.dimensions);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\nexport default BoxGeometryUpdater;\n","import Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport EllipsoidGeodesic from './EllipsoidGeodesic.js';\nimport EllipsoidRhumbLine from './EllipsoidRhumbLine.js';\nimport IntersectionTests from './IntersectionTests.js';\nimport CesiumMath from './Math.js';\nimport Matrix4 from './Matrix4.js';\nimport Plane from './Plane.js';\n\n    /**\n     * @private\n     */\n    var PolylinePipeline = {};\n\n    PolylinePipeline.numberOfPoints = function(p0, p1, minDistance) {\n        var distance = Cartesian3.distance(p0, p1);\n        return Math.ceil(distance / minDistance);\n    };\n\n    PolylinePipeline.numberOfPointsRhumbLine = function(p0, p1, granularity) {\n        var radiansDistanceSquared = Math.pow((p0.longitude - p1.longitude), 2) + Math.pow((p0.latitude - p1.latitude), 2);\n        return Math.ceil(Math.sqrt(radiansDistanceSquared / (granularity * granularity)));\n    };\n\n    var cartoScratch = new Cartographic();\n    PolylinePipeline.extractHeights = function(positions, ellipsoid) {\n        var length = positions.length;\n        var heights = new Array(length);\n        for (var i = 0; i < length; i++) {\n            var p = positions[i];\n            heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;\n        }\n        return heights;\n    };\n\n    var wrapLongitudeInversMatrix = new Matrix4();\n    var wrapLongitudeOrigin = new Cartesian3();\n    var wrapLongitudeXZNormal = new Cartesian3();\n    var wrapLongitudeXZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\n    var wrapLongitudeYZNormal = new Cartesian3();\n    var wrapLongitudeYZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\n    var wrapLongitudeIntersection = new Cartesian3();\n    var wrapLongitudeOffset = new Cartesian3();\n\n    var subdivideHeightsScratchArray = [];\n\n    function subdivideHeights(numPoints, h0, h1) {\n        var heights = subdivideHeightsScratchArray;\n        heights.length = numPoints;\n\n        var i;\n        if (h0 === h1) {\n            for (i = 0; i < numPoints; i++) {\n                heights[i] = h0;\n            }\n            return heights;\n        }\n\n        var dHeight = h1 - h0;\n        var heightPerVertex = dHeight / numPoints;\n\n        for (i = 0; i < numPoints; i++) {\n            var h = h0 + i*heightPerVertex;\n            heights[i] = h;\n        }\n\n        return heights;\n    }\n\n    var carto1 = new Cartographic();\n    var carto2 = new Cartographic();\n    var cartesian = new Cartesian3();\n    var scaleFirst = new Cartesian3();\n    var scaleLast = new Cartesian3();\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\n    var ellipsoidRhumb = new EllipsoidRhumbLine();\n\n    //Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\n    //Result includes p1, but not include p2.  This function is called for a sequence of line segments,\n    //and this prevents duplication of end point.\n    function generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, array, offset) {\n        var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\n        var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\n        var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\n        var start = ellipsoid.cartesianToCartographic(first, carto1);\n        var end = ellipsoid.cartesianToCartographic(last, carto2);\n        var heights = subdivideHeights(numPoints, h0, h1);\n\n        ellipsoidGeodesic.setEndPoints(start, end);\n        var surfaceDistanceBetweenPoints = ellipsoidGeodesic.surfaceDistance / numPoints;\n\n        var index = offset;\n        start.height = h0;\n        var cart = ellipsoid.cartographicToCartesian(start, cartesian);\n        Cartesian3.pack(cart, array, index);\n        index += 3;\n\n        for (var i = 1; i < numPoints; i++) {\n            var carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(i * surfaceDistanceBetweenPoints, carto2);\n            carto.height = heights[i];\n            cart = ellipsoid.cartographicToCartesian(carto, cartesian);\n            Cartesian3.pack(cart, array, index);\n            index += 3;\n        }\n\n        return index;\n    }\n\n    //Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\n    //Result includes p1, but not include p2.  This function is called for a sequence of line segments,\n    //and this prevents duplication of end point.\n    function generateCartesianRhumbArc(p0, p1, granularity, ellipsoid, h0, h1, array, offset) {\n        var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\n        var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\n        var start = ellipsoid.cartesianToCartographic(first, carto1);\n        var end = ellipsoid.cartesianToCartographic(last, carto2);\n\n        var numPoints = PolylinePipeline.numberOfPointsRhumbLine(start, end, granularity);\n        var heights = subdivideHeights(numPoints, h0, h1);\n\n        if (!ellipsoidRhumb.ellipsoid.equals(ellipsoid)) {\n            ellipsoidRhumb = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\n        }\n        ellipsoidRhumb.setEndPoints(start, end);\n        var surfaceDistanceBetweenPoints = ellipsoidRhumb.surfaceDistance / numPoints;\n\n        var index = offset;\n        start.height = h0;\n        var cart = ellipsoid.cartographicToCartesian(start, cartesian);\n        Cartesian3.pack(cart, array, index);\n        index += 3;\n\n        for (var i = 1; i < numPoints; i++) {\n            var carto = ellipsoidRhumb.interpolateUsingSurfaceDistance(i * surfaceDistanceBetweenPoints, carto2);\n            carto.height = heights[i];\n            cart = ellipsoid.cartographicToCartesian(carto, cartesian);\n            Cartesian3.pack(cart, array, index);\n            index += 3;\n        }\n\n        return index;\n    }\n\n    /**\n     * Breaks a {@link Polyline} into segments such that it does not cross the &plusmn;180 degree meridian of an ellipsoid.\n     *\n     * @param {Cartesian3[]} positions The polyline's Cartesian positions.\n     * @param {Matrix4} [modelMatrix=Matrix4.IDENTITY] The polyline's model matrix. Assumed to be an affine\n     * transformation matrix, where the upper left 3x3 elements are a rotation matrix, and\n     * the upper three elements in the fourth column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\n     * The matrix is not verified to be in the proper form.\n     * @returns {Object} An object with a <code>positions</code> property that is an array of positions and a\n     * <code>segments</code> property.\n     *\n     *\n     * @example\n     * var polylines = new Cesium.PolylineCollection();\n     * var polyline = polylines.add(...);\n     * var positions = polyline.positions;\n     * var modelMatrix = polylines.modelMatrix;\n     * var segments = Cesium.PolylinePipeline.wrapLongitude(positions, modelMatrix);\n     *\n     * @see PolygonPipeline.wrapLongitude\n     * @see Polyline\n     * @see PolylineCollection\n     */\n    PolylinePipeline.wrapLongitude = function(positions, modelMatrix) {\n        var cartesians = [];\n        var segments = [];\n\n        if (defined(positions) && positions.length > 0) {\n            modelMatrix = defaultValue(modelMatrix, Matrix4.IDENTITY);\n            var inverseModelMatrix = Matrix4.inverseTransformation(modelMatrix, wrapLongitudeInversMatrix);\n\n            var origin = Matrix4.multiplyByPoint(inverseModelMatrix, Cartesian3.ZERO, wrapLongitudeOrigin);\n            var xzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_Y, wrapLongitudeXZNormal), wrapLongitudeXZNormal);\n            var xzPlane = Plane.fromPointNormal(origin, xzNormal, wrapLongitudeXZPlane);\n            var yzNormal = Cartesian3.normalize(Matrix4.multiplyByPointAsVector(inverseModelMatrix, Cartesian3.UNIT_X, wrapLongitudeYZNormal), wrapLongitudeYZNormal);\n            var yzPlane = Plane.fromPointNormal(origin, yzNormal, wrapLongitudeYZPlane);\n\n            var count = 1;\n            cartesians.push(Cartesian3.clone(positions[0]));\n            var prev = cartesians[0];\n\n            var length = positions.length;\n            for (var i = 1; i < length; ++i) {\n                var cur = positions[i];\n\n                // intersects the IDL if either endpoint is on the negative side of the yz-plane\n                if (Plane.getPointDistance(yzPlane, prev) < 0.0 || Plane.getPointDistance(yzPlane, cur) < 0.0) {\n                    // and intersects the xz-plane\n                    var intersection = IntersectionTests.lineSegmentPlane(prev, cur, xzPlane, wrapLongitudeIntersection);\n                    if (defined(intersection)) {\n                        // move point on the xz-plane slightly away from the plane\n                        var offset = Cartesian3.multiplyByScalar(xzNormal, 5.0e-9, wrapLongitudeOffset);\n                        if (Plane.getPointDistance(xzPlane, prev) < 0.0) {\n                            Cartesian3.negate(offset, offset);\n                        }\n\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\n                        segments.push(count + 1);\n\n                        Cartesian3.negate(offset, offset);\n                        cartesians.push(Cartesian3.add(intersection, offset, new Cartesian3()));\n                        count = 1;\n                    }\n                }\n\n                cartesians.push(Cartesian3.clone(positions[i]));\n                count++;\n\n                prev = cur;\n            }\n\n            segments.push(count);\n        }\n\n        return {\n            positions : cartesians,\n            lengths : segments\n        };\n    };\n\n    /**\n     * Subdivides polyline and raises all points to the specified height.  Returns an array of numbers to represent the positions.\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\n     * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\n     *\n     * @example\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\n     *   -105.0, 40.0,\n     *   -100.0, 38.0,\n     *   -105.0, 35.0,\n     *   -100.0, 32.0\n     * ]);\n     * var surfacePositions = Cesium.PolylinePipeline.generateArc({\n     *   positons: positions\n     * });\n     */\n    PolylinePipeline.generateArc = function(options) {\n        if (!defined(options)) {\n            options = {};\n        }\n        var positions = options.positions;\n        \n\n        var length = positions.length;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var height = defaultValue(options.height, 0);\n        var hasHeightArray = Array.isArray(height);\n\n        if (length < 1) {\n            return [];\n        } else if (length === 1) {\n            var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\n            height = hasHeightArray ? height[0] : height;\n            if (height !== 0) {\n                var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\n                Cartesian3.multiplyByScalar(n, height, n);\n                Cartesian3.add(p, n, p);\n            }\n\n            return [p.x, p.y, p.z];\n        }\n\n        var minDistance = options.minDistance;\n        if (!defined(minDistance)) {\n            var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n            minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n        }\n\n        var numPoints = 0;\n        var i;\n\n        for (i = 0; i < length -1; i++) {\n            numPoints += PolylinePipeline.numberOfPoints(positions[i], positions[i+1], minDistance);\n        }\n\n        var arrayLength = (numPoints + 1) * 3;\n        var newPositions = new Array(arrayLength);\n        var offset = 0;\n\n        for (i = 0; i < length - 1; i++) {\n            var p0 = positions[i];\n            var p1 = positions[i + 1];\n\n            var h0 = hasHeightArray ? height[i] : height;\n            var h1 = hasHeightArray ? height[i + 1] : height;\n\n            offset = generateCartesianArc(p0, p1, minDistance, ellipsoid, h0, h1, newPositions, offset);\n        }\n\n        subdivideHeightsScratchArray.length = 0;\n\n        var lastPoint = positions[length - 1];\n        var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\n        carto.height = hasHeightArray ? height[length - 1] : height;\n        var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\n        Cartesian3.pack(cart, newPositions, arrayLength - 3);\n\n        return newPositions;\n    };\n\n    var scratchCartographic0 = new Cartographic();\n    var scratchCartographic1 = new Cartographic();\n\n    /**\n     * Subdivides polyline and raises all points to the specified height using Rhumb lines.  Returns an array of numbers to represent the positions.\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\n     * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\n     *\n     * @example\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\n     *   -105.0, 40.0,\n     *   -100.0, 38.0,\n     *   -105.0, 35.0,\n     *   -100.0, 32.0\n     * ]);\n     * var surfacePositions = Cesium.PolylinePipeline.generateRhumbArc({\n     *   positons: positions\n     * });\n     */\n    PolylinePipeline.generateRhumbArc = function(options) {\n        if (!defined(options)) {\n            options = {};\n        }\n        var positions = options.positions;\n        \n\n        var length = positions.length;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var height = defaultValue(options.height, 0);\n        var hasHeightArray = Array.isArray(height);\n\n        if (length < 1) {\n            return [];\n        } else if (length === 1) {\n            var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\n            height = hasHeightArray ? height[0] : height;\n            if (height !== 0) {\n                var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\n                Cartesian3.multiplyByScalar(n, height, n);\n                Cartesian3.add(p, n, p);\n            }\n\n            return [p.x, p.y, p.z];\n        }\n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n\n        var numPoints = 0;\n        var i;\n\n        var c0 = ellipsoid.cartesianToCartographic(positions[0], scratchCartographic0);\n        var c1;\n        for (i = 0; i < length - 1; i++) {\n            c1 = ellipsoid.cartesianToCartographic(positions[i + 1], scratchCartographic1);\n            numPoints += PolylinePipeline.numberOfPointsRhumbLine(c0, c1, granularity);\n            c0 = Cartographic.clone(c1, scratchCartographic0);\n        }\n\n        var arrayLength = (numPoints + 1) * 3;\n        var newPositions = new Array(arrayLength);\n        var offset = 0;\n\n        for (i = 0; i < length - 1; i++) {\n            var p0 = positions[i];\n            var p1 = positions[i + 1];\n\n            var h0 = hasHeightArray ? height[i] : height;\n            var h1 = hasHeightArray ? height[i + 1] : height;\n\n            offset = generateCartesianRhumbArc(p0, p1, granularity, ellipsoid, h0, h1, newPositions, offset);\n        }\n\n        subdivideHeightsScratchArray.length = 0;\n\n        var lastPoint = positions[length - 1];\n        var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\n        carto.height = hasHeightArray ? height[length - 1] : height;\n        var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\n        Cartesian3.pack(cart, newPositions, arrayLength - 3);\n\n        return newPositions;\n    };\n\n    /**\n     * Subdivides polyline and raises all points to the specified height. Returns an array of new {Cartesian3} positions.\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\n     * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\n     *\n     * @example\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\n     *   -105.0, 40.0,\n     *   -100.0, 38.0,\n     *   -105.0, 35.0,\n     *   -100.0, 32.0\n     * ]);\n     * var surfacePositions = Cesium.PolylinePipeline.generateCartesianArc({\n     *   positons: positions\n     * });\n     */\n    PolylinePipeline.generateCartesianArc = function(options) {\n        var numberArray = PolylinePipeline.generateArc(options);\n        var size = numberArray.length/3;\n        var newPositions = new Array(size);\n        for (var i = 0; i < size; i++) {\n            newPositions[i] = Cartesian3.unpack(numberArray, i*3);\n        }\n        return newPositions;\n    };\n\n    /**\n     * Subdivides polyline and raises all points to the specified height using Rhumb Lines. Returns an array of new {Cartesian3} positions.\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\n     * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\n     * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\n     * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\n     *\n     * @example\n     * var positions = Cesium.Cartesian3.fromDegreesArray([\n     *   -105.0, 40.0,\n     *   -100.0, 38.0,\n     *   -105.0, 35.0,\n     *   -100.0, 32.0\n     * ]);\n     * var surfacePositions = Cesium.PolylinePipeline.generateCartesianRhumbArc({\n     *   positons: positions\n     * });\n     */\n    PolylinePipeline.generateCartesianRhumbArc = function(options) {\n        var numberArray = PolylinePipeline.generateRhumbArc(options);\n        var size = numberArray.length/3;\n        var newPositions = new Array(size);\n        for (var i = 0; i < size; i++) {\n            newPositions[i] = Cartesian3.unpack(numberArray, i*3);\n        }\n        return newPositions;\n    };\nexport default PolylinePipeline;\n","import Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartesian4 from './Cartesian4.js';\nimport Cartographic from './Cartographic.js';\nimport CornerType from './CornerType.js';\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport Matrix4 from './Matrix4.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport Quaternion from './Quaternion.js';\nimport Transforms from './Transforms.js';\n\n    var scratch2Array = [new Cartesian3(), new Cartesian3()];\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var scratchCartesian5 = new Cartesian3();\n    var scratchCartesian6 = new Cartesian3();\n    var scratchCartesian7 = new Cartesian3();\n    var scratchCartesian8 = new Cartesian3();\n    var scratchCartesian9 = new Cartesian3();\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n\n    /**\n     * @private\n     */\n    var PolylineVolumeGeometryLibrary = {};\n\n    var cartographic = new Cartographic();\n    function scaleToSurface(positions, ellipsoid) {\n        var heights = new Array(positions.length);\n        for (var i = 0; i < positions.length; i++) {\n            var pos = positions[i];\n            cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\n            heights[i] = cartographic.height;\n            positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\n        }\n        return heights;\n    }\n\n    function subdivideHeights(points, h0, h1, granularity) {\n        var p0 = points[0];\n        var p1 = points[1];\n        var angleBetween = Cartesian3.angleBetween(p0, p1);\n        var numPoints = Math.ceil(angleBetween / granularity);\n        var heights = new Array(numPoints);\n        var i;\n        if (h0 === h1) {\n            for (i = 0; i < numPoints; i++) {\n                heights[i] = h0;\n            }\n            heights.push(h1);\n            return heights;\n        }\n\n        var dHeight = h1 - h0;\n        var heightPerVertex = dHeight / (numPoints);\n\n        for (i = 1; i < numPoints; i++) {\n            var h = h0 + i * heightPerVertex;\n            heights[i] = h;\n        }\n\n        heights[0] = h0;\n        heights.push(h1);\n        return heights;\n    }\n\n    var nextScratch = new Cartesian3();\n    var prevScratch = new Cartesian3();\n\n    function computeRotationAngle(start, end, position, ellipsoid) {\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, start, nextScratch), nextScratch);\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, end, prevScratch), prevScratch);\n        var angle = Cartesian2.angleBetween(next, prev);\n\n        return (prev.x * next.y - prev.y * next.x >= 0.0) ? -angle : angle;\n    }\n\n    var negativeX = new Cartesian3(-1, 0, 0);\n    var transform = new Matrix4();\n    var translation = new Matrix4();\n    var rotationZ = new Matrix3();\n    var scaleMatrix = Matrix3.IDENTITY.clone();\n    var westScratch = new Cartesian3();\n    var finalPosScratch = new Cartesian4();\n    var heightCartesian = new Cartesian3();\n    function addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {\n        var west = westScratch;\n        var finalPosition = finalPosScratch;\n        transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\n\n        west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\n        west = Cartesian3.normalize(west, west);\n        var angle = computeRotationAngle(west, left, center, ellipsoid);\n        rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\n\n        heightCartesian.z = height;\n        transform = Matrix4.multiplyTransformation(transform, Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation), transform);\n        var scale = scaleMatrix;\n        scale[0] = xScalar;\n\n        for (var j = 0; j < repeat; j++) {\n            for (var i = 0; i < shape.length; i += 3) {\n                finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\n                finalPosition = Matrix3.multiplyByVector(scale, finalPosition, finalPosition);\n                finalPosition = Matrix4.multiplyByPoint(transform, finalPosition, finalPosition);\n                finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\n            }\n        }\n\n        return finalPositions;\n    }\n\n    var centerScratch = new Cartesian3();\n    function addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {\n        for (var i = 0; i < centers.length; i += 3) {\n            var center = Cartesian3.fromArray(centers, i, centerScratch);\n            finalPositions = addPosition(center, left, shape, finalPositions, ellipsoid, heights[i / 3], xScalar, 1);\n        }\n        return finalPositions;\n    }\n\n    function convertShapeTo3DDuplicate(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\n        var length = shape2D.length;\n        var shape = new Array(length * 6);\n        var index = 0;\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n        var point = shape2D[0];\n        shape[index++] = point.x - xOffset;\n        shape[index++] = 0.0;\n        shape[index++] = point.y - yOffset;\n        for (var i = 1; i < length; i++) {\n            point = shape2D[i];\n            var x = point.x - xOffset;\n            var z = point.y - yOffset;\n            shape[index++] = x;\n            shape[index++] = 0.0;\n            shape[index++] = z;\n\n            shape[index++] = x;\n            shape[index++] = 0.0;\n            shape[index++] = z;\n        }\n        point = shape2D[0];\n        shape[index++] = point.x - xOffset;\n        shape[index++] = 0.0;\n        shape[index++] = point.y - yOffset;\n\n        return shape;\n    }\n\n    function convertShapeTo3D(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0)\n        var length = shape2D.length;\n        var shape = new Array(length * 3);\n        var index = 0;\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n        for (var i = 0; i < length; i++) {\n            shape[index++] = shape2D[i].x - xOffset;\n            shape[index++] = 0;\n            shape[index++] = shape2D[i].y - yOffset;\n        }\n\n        return shape;\n    }\n\n    var quaterion = new Quaternion();\n    var startPointScratch = new Cartesian3();\n    var rotMatrix = new Matrix3();\n    function computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, pivot, scratch1), Cartesian3.subtract(endPoint, pivot, scratch2));\n        var granularity = (cornerType === CornerType.BEVELED) ? 0 : Math.ceil(angle / CesiumMath.toRadians(5));\n\n        var m;\n        if (leftIsOutside) {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(pivot, scratch1), angle / (granularity + 1), quaterion), rotMatrix);\n        } else {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion), rotMatrix);\n        }\n\n        var left;\n        var surfacePoint;\n        startPoint = Cartesian3.clone(startPoint, startPointScratch);\n        if (granularity > 0) {\n            var repeat = duplicatePoints ? 2 : 1;\n            for (var i = 0; i < granularity; i++) {\n                startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n                left = Cartesian3.subtract(startPoint, pivot, scratch1);\n                left = Cartesian3.normalize(left, left);\n                if (!leftIsOutside) {\n                    left = Cartesian3.negate(left, left);\n                }\n                surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n                finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, repeat);\n            }\n        } else {\n            left = Cartesian3.subtract(startPoint, pivot, scratch1);\n            left = Cartesian3.normalize(left, left);\n            if (!leftIsOutside) {\n                left = Cartesian3.negate(left, left);\n            }\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\n\n            endPoint = Cartesian3.clone(endPoint, startPointScratch);\n            left = Cartesian3.subtract(endPoint, pivot, scratch1);\n            left = Cartesian3.normalize(left, left);\n            if (!leftIsOutside) {\n                left = Cartesian3.negate(left, left);\n            }\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\n        }\n\n        return finalPositions;\n    }\n\n    PolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function(shapePositions) {\n        var length = shapePositions.length;\n        var cleanedPositions = [];\n        for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\n            var v0 = shapePositions[i0];\n            var v1 = shapePositions[i1];\n\n            if (!Cartesian2.equals(v0, v1)) {\n                cleanedPositions.push(v1); // Shallow copy!\n            }\n        }\n\n        return cleanedPositions;\n    };\n\n    PolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function(forward, backward, position, ellipsoid) {\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, forward, nextScratch), nextScratch);\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, backward, prevScratch), prevScratch);\n\n        return ((prev.x * next.y) - (prev.y * next.x)) >= 0.0;\n    };\n\n    var scratchForwardProjection = new Cartesian3();\n    var scratchBackwardProjection = new Cartesian3();\n\n    PolylineVolumeGeometryLibrary.computePositions = function(positions, shape2D, boundingRectangle, geometry, duplicatePoints) {\n        var ellipsoid = geometry._ellipsoid;\n        var heights = scaleToSurface(positions, ellipsoid);\n        var granularity = geometry._granularity;\n        var cornerType = geometry._cornerType;\n        var shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);\n        var shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : undefined;\n        var heightOffset = boundingRectangle.height / 2;\n        var width = boundingRectangle.width / 2;\n        var length = positions.length;\n        var finalPositions = [];\n        var ends = duplicatePoints ? [] : undefined;\n\n        var forward = scratchCartesian1;\n        var backward = scratchCartesian2;\n        var cornerDirection = scratchCartesian3;\n        var surfaceNormal = scratchCartesian4;\n        var pivot = scratchCartesian5;\n        var start = scratchCartesian6;\n        var end = scratchCartesian7;\n        var left = scratchCartesian8;\n        var previousPosition = scratchCartesian9;\n\n        var position = positions[0];\n        var nextPosition = positions[1];\n        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n        forward = Cartesian3.subtract(nextPosition, position, forward);\n        forward = Cartesian3.normalize(forward, forward);\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        var h0 = heights[0];\n        var h1 = heights[1];\n        if (duplicatePoints) {\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h0 + heightOffset, 1, 1);\n        }\n        previousPosition = Cartesian3.clone(position, previousPosition);\n        position = nextPosition;\n        backward = Cartesian3.negate(forward, backward);\n        var subdividedHeights;\n        var subdividedPositions;\n        for (var i = 1; i < length - 1; i++) {\n            var repeat = duplicatePoints ? 2 : 1;\n            nextPosition = positions[i + 1];\n            forward = Cartesian3.subtract(nextPosition, position, forward);\n            forward = Cartesian3.normalize(forward, forward);\n            cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n            surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n\n            var forwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(forward, surfaceNormal), scratchForwardProjection);\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n            Cartesian3.normalize(forwardProjection, forwardProjection);\n\n            var backwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(backward, surfaceNormal), scratchBackwardProjection);\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n            Cartesian3.normalize(backwardProjection, backwardProjection);\n\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\n\n            if (doCorner) {\n                cornerDirection = Cartesian3.cross(cornerDirection, surfaceNormal, cornerDirection);\n                cornerDirection = Cartesian3.cross(surfaceNormal, cornerDirection, cornerDirection);\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n                var scalar = 1 / Math.max(0.25, (Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1))));\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\n                if (leftIsOutside) {\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, start), start);\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scratch2Array,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\n                    left = Cartesian3.normalize(left, left);\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, end), end);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\n                    } else {\n                        cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\n                    }\n                    previousPosition = Cartesian3.clone(end, previousPosition);\n                } else {\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, start), start);\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scratch2Array,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\n                    left = Cartesian3.normalize(left, left);\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, end), end);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\n                    } else {\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\n                    }\n                    previousPosition = Cartesian3.clone(end, previousPosition);\n                }\n                backward = Cartesian3.negate(forward, backward);\n            } else {\n                finalPositions = addPosition(previousPosition, left, shapeForSides, finalPositions, ellipsoid, h0 + heightOffset, 1, 1);\n                previousPosition = position;\n            }\n            h0 = h1;\n            h1 = heights[i + 1];\n            position = nextPosition;\n        }\n\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n        subdividedPositions = PolylinePipeline.generateArc({\n            positions: scratch2Array,\n            granularity: granularity,\n            ellipsoid: ellipsoid\n        });\n        finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n        if (duplicatePoints) {\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h1 + heightOffset, 1, 1);\n        }\n\n        length = finalPositions.length;\n        var posLength = duplicatePoints ? length + ends.length : length;\n        var combinedPositions = new Float64Array(posLength);\n        combinedPositions.set(finalPositions);\n        if (duplicatePoints) {\n            combinedPositions.set(ends, length);\n        }\n\n        return combinedPositions;\n    };\nexport default PolylineVolumeGeometryLibrary;\n","import Cartesian3 from './Cartesian3.js';\nimport CornerType from './CornerType.js';\nimport defined from './defined.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\nimport Quaternion from './Quaternion.js';\n\n    /**\n     * @private\n     */\n    var CorridorGeometryLibrary = {};\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n    var scratch3 = new Cartesian3();\n    var scratch4 = new Cartesian3();\n\n    var scaleArray2 = [new Cartesian3(), new Cartesian3()];\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n    var cartesian4 = new Cartesian3();\n    var cartesian5 = new Cartesian3();\n    var cartesian6 = new Cartesian3();\n    var cartesian7 = new Cartesian3();\n    var cartesian8 = new Cartesian3();\n    var cartesian9 = new Cartesian3();\n    var cartesian10 = new Cartesian3();\n\n    var quaterion = new Quaternion();\n    var rotMatrix = new Matrix3();\n    function computeRoundCorner(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, cornerPoint, scratch1), Cartesian3.subtract(endPoint, cornerPoint, scratch2));\n        var granularity = (cornerType === CornerType.BEVELED) ? 1 : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\n\n        var size = granularity * 3;\n        var array = new Array(size);\n\n        array[size - 3] = endPoint.x;\n        array[size - 2] = endPoint.y;\n        array[size - 1] = endPoint.z;\n\n        var m;\n        if (leftIsOutside) {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(cornerPoint, scratch1), angle / granularity, quaterion), rotMatrix);\n        } else {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion), rotMatrix);\n        }\n\n        var index = 0;\n        startPoint = Cartesian3.clone(startPoint, scratch1);\n        for (var i = 0; i < granularity; i++) {\n            startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n            array[index++] = startPoint.x;\n            array[index++] = startPoint.y;\n            array[index++] = startPoint.z;\n        }\n\n        return array;\n    }\n\n    function addEndCaps(calculatedPositions) {\n        var cornerPoint = cartesian1;\n        var startPoint = cartesian2;\n        var endPoint = cartesian3;\n\n        var leftEdge = calculatedPositions[1];\n        startPoint = Cartesian3.fromArray(calculatedPositions[1], leftEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var firstEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        var length = calculatedPositions.length - 1;\n        var rightEdge = calculatedPositions[length - 1];\n        leftEdge = calculatedPositions[length];\n        startPoint = Cartesian3.fromArray(rightEdge, rightEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var lastEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        return [firstEndCap, lastEndCap];\n    }\n\n    function computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {\n        var cornerPoint = scratch1;\n        if (leftIsOutside) {\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        } else {\n            leftCornerDirection = Cartesian3.negate(leftCornerDirection, leftCornerDirection);\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        }\n        return [cornerPoint.x, cornerPoint.y, cornerPoint.z, lastPoint.x, lastPoint.y, lastPoint.z];\n    }\n\n    function addShiftedPositions(positions, left, scalar, calculatedPositions) {\n        var rightPositions = new Array(positions.length);\n        var leftPositions = new Array(positions.length);\n        var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\n        var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\n        var rightIndex = 0;\n        var leftIndex = positions.length - 1;\n\n        for (var i = 0; i < positions.length; i += 3) {\n            var pos = Cartesian3.fromArray(positions, i, scratch3);\n            var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\n            rightPositions[rightIndex++] = rightPos.x;\n            rightPositions[rightIndex++] = rightPos.y;\n            rightPositions[rightIndex++] = rightPos.z;\n\n            var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\n            leftPositions[leftIndex--] = leftPos.z;\n            leftPositions[leftIndex--] = leftPos.y;\n            leftPositions[leftIndex--] = leftPos.x;\n        }\n        calculatedPositions.push(rightPositions, leftPositions);\n\n        return calculatedPositions;\n    }\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.addAttribute = function(attribute, value, front, back) {\n        var x = value.x;\n        var y = value.y;\n        var z = value.z;\n        if (defined(front)) {\n            attribute[front] = x;\n            attribute[front + 1] = y;\n            attribute[front + 2] = z;\n        }\n        if (defined(back)) {\n            attribute[back] = z;\n            attribute[back - 1] = y;\n            attribute[back - 2] = x;\n        }\n    };\n\n    var scratchForwardProjection = new Cartesian3();\n    var scratchBackwardProjection = new Cartesian3();\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.computePositions = function(params) {\n        var granularity = params.granularity;\n        var positions = params.positions;\n        var ellipsoid = params.ellipsoid;\n        var width = params.width / 2;\n        var cornerType = params.cornerType;\n        var saveAttributes = params.saveAttributes;\n        var normal = cartesian1;\n        var forward = cartesian2;\n        var backward = cartesian3;\n        var left = cartesian4;\n        var cornerDirection = cartesian5;\n        var startPoint = cartesian6;\n        var previousPos = cartesian7;\n        var rightPos = cartesian8;\n        var leftPos = cartesian9;\n        var center = cartesian10;\n        var calculatedPositions = [];\n        var calculatedLefts = (saveAttributes) ? [] : undefined;\n        var calculatedNormals = (saveAttributes) ? [] : undefined;\n        var position = positions[0]; //add first point\n        var nextPosition = positions[1];\n\n        forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n        previousPos = Cartesian3.clone(position, previousPos);\n        position = nextPosition;\n        backward = Cartesian3.negate(forward, backward);\n\n        var subdividedPositions;\n        var corners = [];\n        var i;\n        var length = positions.length;\n        for (i = 1; i < length - 1; i++) { // add middle points and corners\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n            nextPosition = positions[i + 1];\n            forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n            cornerDirection = Cartesian3.normalize(Cartesian3.add(forward, backward, cornerDirection), cornerDirection);\n\n            var forwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(forward, normal), scratchForwardProjection);\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n            Cartesian3.normalize(forwardProjection, forwardProjection);\n\n            var backwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(backward, normal), scratchBackwardProjection);\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n            Cartesian3.normalize(backwardProjection, backwardProjection);\n\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\n\n            if (doCorner) {\n                cornerDirection = Cartesian3.cross(cornerDirection, normal, cornerDirection);\n                cornerDirection = Cartesian3.cross(normal, cornerDirection, cornerDirection);\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n                var scalar = width / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\n                cornerDirection = Cartesian3.multiplyByScalar(cornerDirection, scalar, cornerDirection);\n                if (leftIsOutside) {\n                    rightPos = Cartesian3.add(position, cornerDirection, rightPos);\n                    center = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, center), center);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(leftPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    previousPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            leftPositions : computeRoundCorner(rightPos, startPoint, leftPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            leftPositions : computeMiteredCorner(position, Cartesian3.negate(cornerDirection, cornerDirection), leftPos, leftIsOutside)\n                        });\n                    }\n                } else {\n                    leftPos = Cartesian3.add(position, cornerDirection, leftPos);\n                    center = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, center), center), center);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(rightPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    previousPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, previousPos), previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            rightPositions : computeRoundCorner(leftPos, startPoint, rightPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            rightPositions : computeMiteredCorner(position, cornerDirection, rightPos, leftIsOutside)\n                        });\n                    }\n                }\n                backward = Cartesian3.negate(forward, backward);\n            }\n            position = nextPosition;\n        }\n\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n        scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\n        subdividedPositions = PolylinePipeline.generateArc({\n            positions: scaleArray2,\n            granularity: granularity,\n            ellipsoid: ellipsoid\n        });\n        calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n\n        var endPositions;\n        if (cornerType === CornerType.ROUNDED) {\n            endPositions = addEndCaps(calculatedPositions);\n        }\n\n        return {\n            positions : calculatedPositions,\n            corners : corners,\n            lefts : calculatedLefts,\n            normals : calculatedNormals,\n            endPositions : endPositions\n        };\n    };\nexport default CorridorGeometryLibrary;\n","import arrayFill from './arrayFill.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport CorridorGeometryLibrary from './CorridorGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Rectangle from './Rectangle.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n    var cartesian4 = new Cartesian3();\n    var cartesian5 = new Cartesian3();\n    var cartesian6 = new Cartesian3();\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n\n    function scaleToSurface(positions, ellipsoid) {\n        for (var i = 0; i < positions.length; i++) {\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n        }\n        return positions;\n    }\n\n    function addNormals(attr, normal, left, front, back, vertexFormat) {\n        var normals = attr.normals;\n        var tangents = attr.tangents;\n        var bitangents = attr.bitangents;\n        var forward = Cartesian3.normalize(Cartesian3.cross(left, normal, scratch1), scratch1);\n        if (vertexFormat.normal) {\n            CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\n        }\n        if (vertexFormat.tangent) {\n            CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\n        }\n        if (vertexFormat.bitangent) {\n            CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\n        }\n    }\n\n    function combine(computedPositions, vertexFormat, ellipsoid) {\n        var positions = computedPositions.positions;\n        var corners = computedPositions.corners;\n        var endPositions = computedPositions.endPositions;\n        var computedLefts = computedPositions.lefts;\n        var computedNormals = computedPositions.normals;\n        var attributes = new GeometryAttributes();\n        var corner;\n        var leftCount = 0;\n        var rightCount = 0;\n        var i;\n        var indicesLength = 0;\n        var length;\n        for (i = 0; i < positions.length; i += 2) {\n            length = positions[i].length - 3;\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\n            indicesLength += length*2;\n            rightCount += positions[i + 1].length - 3;\n        }\n        leftCount += 3; //add back count for end positions\n        rightCount += 3;\n        for (i = 0; i < corners.length; i++) {\n            corner = corners[i];\n            var leftSide = corners[i].leftPositions;\n            if (defined(leftSide)) {\n                length = leftSide.length;\n                leftCount += length;\n                indicesLength += length;\n            } else {\n                length = corners[i].rightPositions.length;\n                rightCount += length;\n                indicesLength += length;\n            }\n        }\n\n        var addEndPositions = defined(endPositions);\n        var endPositionLength;\n        if (addEndPositions) {\n            endPositionLength = endPositions[0].length - 3;\n            leftCount += endPositionLength;\n            rightCount += endPositionLength;\n            endPositionLength /= 3;\n            indicesLength += endPositionLength * 6;\n        }\n        var size = leftCount + rightCount;\n        var finalPositions = new Float64Array(size);\n        var normals = (vertexFormat.normal) ? new Float32Array(size) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size) : undefined;\n        var attr = {\n            normals : normals,\n            tangents : tangents,\n            bitangents : bitangents\n        };\n        var front = 0;\n        var back = size - 1;\n        var UL, LL, UR, LR;\n        var normal = cartesian1;\n        var left = cartesian2;\n        var rightPos, leftPos;\n        var halfLength = endPositionLength / 2;\n\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\n        var index = 0;\n        if (addEndPositions) { // add rounded end\n            leftPos = cartesian3;\n            rightPos = cartesian4;\n            var firstEndPositions = endPositions[0];\n            normal = Cartesian3.fromArray(computedNormals, 0, normal);\n            left = Cartesian3.fromArray(computedLefts, 0, left);\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LL = front / 3;\n                LR = LL + 1;\n                UL = (back - 2) / 3;\n                UR = UL - 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        var posIndex = 0;\n        var compIndex = 0;\n        var rightEdge = positions[posIndex++]; //add first two edges\n        var leftEdge = positions[posIndex++];\n        finalPositions.set(rightEdge, front);\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n        left = Cartesian3.fromArray(computedLefts, compIndex, left);\n        var rightNormal;\n        var leftNormal;\n        length = leftEdge.length - 3;\n        for (i = 0; i < length; i += 3) {\n            rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, i, scratch1), scratch1);\n            leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - i, scratch2), scratch2);\n            normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n            addNormals(attr, normal, left, front, back, vertexFormat);\n\n            LL = front / 3;\n            LR = LL + 1;\n            UL = (back - 2) / 3;\n            UR = UL - 1;\n            indices[index++] = UL;\n            indices[index++] = LL;\n            indices[index++] = UR;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n\n            front += 3;\n            back -= 3;\n        }\n\n        rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, length, scratch1), scratch1);\n        leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length, scratch2), scratch2);\n        normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n        compIndex += 3;\n        for (i = 0; i < corners.length; i++) {\n            var j;\n            corner = corners[i];\n            var l = corner.leftPositions;\n            var r = corner.rightPositions;\n            var pivot;\n            var start;\n            var outsidePoint = cartesian6;\n            var previousPoint = cartesian3;\n            var nextPoint = cartesian4;\n            normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\n            if (defined(l)) {\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\n                back -= 3;\n                pivot = LR;\n                start = UR;\n                for (j = 0; j < l.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n                    indices[index++] = pivot;\n                    indices[index++] = start - j - 1;\n                    indices[index++] = start - j;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\n                    previousPoint = Cartesian3.fromArray(finalPositions, (start - j - 1) * 3, previousPoint);\n                    nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\n                    addNormals(attr, normal, left, undefined, back, vertexFormat);\n                    back -= 3;\n                }\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start) * 3, previousPoint), outsidePoint, previousPoint);\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint), outsidePoint, nextPoint);\n                left = Cartesian3.normalize(Cartesian3.add(previousPoint, nextPoint, left), left);\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\n                front += 3;\n            } else {\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\n                front += 3;\n                pivot = UR;\n                start = LR;\n                for (j = 0; j < r.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n                    indices[index++] = pivot;\n                    indices[index++] = start + j;\n                    indices[index++] = start + j + 1;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\n                    previousPoint = Cartesian3.fromArray(finalPositions, pivot * 3, previousPoint);\n                    nextPoint = Cartesian3.fromArray(finalPositions, (start + j) * 3, nextPoint);\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\n                    addNormals(attr, normal, left, front, undefined, vertexFormat);\n                    front += 3;\n                }\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint), outsidePoint, previousPoint);\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, start * 3, nextPoint), outsidePoint, nextPoint);\n                left = Cartesian3.normalize(Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left), left);\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\n                back -= 3;\n            }\n            rightEdge = positions[posIndex++];\n            leftEdge = positions[posIndex++];\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\n            leftEdge.splice(leftEdge.length - 3, 3);\n            finalPositions.set(rightEdge, front);\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\n            length = leftEdge.length - 3;\n\n            compIndex += 3;\n            left = Cartesian3.fromArray(computedLefts, compIndex, left);\n            for (j = 0; j < leftEdge.length; j += 3) {\n                rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, j, scratch1), scratch1);\n                leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - j, scratch2), scratch2);\n                normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n            front -= 3;\n            back += 3;\n        }\n        normal = Cartesian3.fromArray(computedNormals, computedNormals.length - 3, normal);\n        addNormals(attr, normal, left, front, back, vertexFormat);\n\n        if (addEndPositions) { // add rounded end\n            front += 3;\n            back -= 3;\n            leftPos = cartesian3;\n            rightPos = cartesian4;\n            var lastEndPositions = endPositions[1];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        if (vertexFormat.st) {\n            var st = new Float32Array(size / 3 * 2);\n            var rightSt;\n            var leftSt;\n            var stIndex = 0;\n            if (addEndPositions) {\n                leftCount /= 3;\n                rightCount /= 3;\n                var theta = Math.PI / (endPositionLength + 1);\n                leftSt = 1 / (leftCount - endPositionLength + 1);\n                rightSt = 1 / (rightCount - endPositionLength + 1);\n                var a;\n                var halfEndPos = endPositionLength / 2;\n                for (i = halfEndPos + 1; i < endPositionLength + 1; i++) { // lower left rounded end\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\n                    st[stIndex++] = rightSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = 1; i < rightCount - endPositionLength + 1; i++) { // bottom edge\n                    st[stIndex++] = i * rightSt;\n                    st[stIndex++] = 0;\n                }\n                for (i = endPositionLength; i > halfEndPos; i--) { // lower right rounded end\n                    a = CesiumMath.PI_OVER_TWO - i * theta;\n                    st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = halfEndPos; i > 0; i--) { // upper right rounded end\n                    a = CesiumMath.PI_OVER_TWO - theta * i;\n                    st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = leftCount - endPositionLength; i > 0; i--) { // top edge\n                    st[stIndex++] = i * leftSt;\n                    st[stIndex++] = 1;\n                }\n                for (i = 1; i < halfEndPos + 1; i++) { // upper left rounded end\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\n                    st[stIndex++] = leftSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n            } else {\n                leftCount /= 3;\n                rightCount /= 3;\n                leftSt = 1 / (leftCount - 1);\n                rightSt = 1 / (rightCount - 1);\n                for (i = 0; i < rightCount; i++) { // bottom edge\n                    st[stIndex++] = i * rightSt;\n                    st[stIndex++] = 0;\n                }\n                for (i = leftCount; i > 0; i--) { // top edge\n                    st[stIndex++] = (i - 1) * leftSt;\n                    st[stIndex++] = 1;\n                }\n            }\n\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.bitangents\n            });\n        }\n\n        return {\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    function extrudedAttributes(attributes, vertexFormat) {\n        if (!vertexFormat.normal && !vertexFormat.tangent && !vertexFormat.bitangent && !vertexFormat.st) {\n            return attributes;\n        }\n        var positions = attributes.position.values;\n        var topNormals;\n        var topBitangents;\n        if (vertexFormat.normal || vertexFormat.bitangent) {\n            topNormals = attributes.normal.values;\n            topBitangents = attributes.bitangent.values;\n        }\n        var size = attributes.position.values.length / 18;\n        var threeSize = size * 3;\n        var twoSize = size * 2;\n        var sixSize = threeSize * 2;\n        var i;\n        if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\n            var normals = (vertexFormat.normal) ? new Float32Array(threeSize * 6) : undefined;\n            var tangents = (vertexFormat.tangent) ? new Float32Array(threeSize * 6) : undefined;\n            var bitangents = (vertexFormat.bitangent) ? new Float32Array(threeSize * 6) : undefined;\n            var topPosition = cartesian1;\n            var bottomPosition = cartesian2;\n            var previousPosition = cartesian3;\n            var normal = cartesian4;\n            var tangent = cartesian5;\n            var bitangent = cartesian6;\n            var attrIndex = sixSize;\n            for (i = 0; i < threeSize; i += 3) {\n                var attrIndexOffset = attrIndex + sixSize;\n                topPosition      = Cartesian3.fromArray(positions, i, topPosition);\n                bottomPosition   = Cartesian3.fromArray(positions, i + threeSize, bottomPosition);\n                previousPosition = Cartesian3.fromArray(positions, (i + 3) % threeSize, previousPosition);\n                bottomPosition   = Cartesian3.subtract(bottomPosition,   topPosition, bottomPosition);\n                previousPosition = Cartesian3.subtract(previousPosition, topPosition, previousPosition);\n                normal = Cartesian3.normalize(Cartesian3.cross(bottomPosition, previousPosition, normal), normal);\n                if (vertexFormat.normal) {\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset + 3);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\n                }\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\n                    if (vertexFormat.bitangent) {\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset + 3);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex + 3);\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset + 3);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex + 3);\n                    }\n                }\n                attrIndex += 6;\n            }\n\n            if (vertexFormat.normal) {\n                normals.set(topNormals); //top\n                for (i = 0; i < threeSize; i += 3) { //bottom normals\n                    normals[i + threeSize] = -topNormals[i];\n                    normals[i + threeSize + 1] = -topNormals[i + 1];\n                    normals[i + threeSize + 2] = -topNormals[i + 2];\n                }\n                attributes.normal.values = normals;\n            } else {\n                attributes.normal = undefined;\n            }\n\n            if (vertexFormat.bitangent) {\n                bitangents.set(topBitangents); //top\n                bitangents.set(topBitangents, threeSize); //bottom\n                attributes.bitangent.values = bitangents;\n            } else {\n                attributes.bitangent = undefined;\n            }\n\n            if (vertexFormat.tangent) {\n                var topTangents = attributes.tangent.values;\n                tangents.set(topTangents); //top\n                tangents.set(topTangents, threeSize); //bottom\n                attributes.tangent.values = tangents;\n            }\n        }\n        if (vertexFormat.st) {\n            var topSt = attributes.st.values;\n            var st = new Float32Array(twoSize * 6);\n            st.set(topSt); //top\n            st.set(topSt, twoSize); //bottom\n            var index = twoSize * 2;\n\n            for ( var j = 0; j < 2; j++) {\n                st[index++] = topSt[0];\n                st[index++] = topSt[1];\n                for (i = 2; i < twoSize; i += 2) {\n                    var s = topSt[i];\n                    var t = topSt[i + 1];\n                    st[index++] = s;\n                    st[index++] = t;\n                    st[index++] = s;\n                    st[index++] = t;\n                }\n                st[index++] = topSt[0];\n                st[index++] = topSt[1];\n            }\n            attributes.st.values = st;\n        }\n\n        return attributes;\n    }\n\n    function addWallPositions(positions, index, wallPositions) {\n        wallPositions[index++] = positions[0];\n        wallPositions[index++] = positions[1];\n        wallPositions[index++] = positions[2];\n        for ( var i = 3; i < positions.length; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n            wallPositions[index++] = x;\n            wallPositions[index++] = y;\n            wallPositions[index++] = z;\n            wallPositions[index++] = x;\n            wallPositions[index++] = y;\n            wallPositions[index++] = z;\n        }\n        wallPositions[index++] = positions[0];\n        wallPositions[index++] = positions[1];\n        wallPositions[index++] = positions[2];\n\n        return wallPositions;\n    }\n\n    function computePositionsExtruded(params, vertexFormat) {\n        var topVertexFormat = new VertexFormat({\n            position : vertexFormat.position,\n            normal : (vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume),\n            tangent : vertexFormat.tangent,\n            bitangent : (vertexFormat.normal || vertexFormat.bitangent),\n            st : vertexFormat.st\n        });\n        var ellipsoid = params.ellipsoid;\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\n        var attr = combine(computedPositions, topVertexFormat, ellipsoid);\n        var height = params.height;\n        var extrudedHeight = params.extrudedHeight;\n        var attributes = attr.attributes;\n        var indices = attr.indices;\n        var positions = attributes.position.values;\n        var length = positions.length;\n        var newPositions = new Float64Array(length * 6);\n        var extrudedPositions = new Float64Array(length);\n        extrudedPositions.set(positions);\n        var wallPositions = new Float64Array(length * 4);\n\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\n        wallPositions = addWallPositions(positions, 0, wallPositions);\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\n        wallPositions = addWallPositions(extrudedPositions, length * 2, wallPositions);\n        newPositions.set(positions);\n        newPositions.set(extrudedPositions, length);\n        newPositions.set(wallPositions, length * 2);\n        attributes.position.values = newPositions;\n\n        attributes = extrudedAttributes(attributes, vertexFormat);\n        var i;\n        var size = length / 3;\n        if (params.shadowVolume) {\n            var topNormals = attributes.normal.values;\n            length = topNormals.length;\n\n            var extrudeNormals = new Float32Array(length * 6);\n            for (i = 0; i < length; i ++) {\n                topNormals[i] = -topNormals[i];\n            }\n            //only get normals for bottom layer that's going to be pushed down\n            extrudeNormals.set(topNormals, length); //bottom face\n            extrudeNormals = addWallPositions(topNormals, length*4, extrudeNormals); //bottom wall\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n            if (!vertexFormat.normal) {\n                attributes.normal = undefined;\n            }\n        }\n        if (defined(params.offsetAttribute)) {\n            var applyOffset = new Uint8Array(size * 6);\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\n                applyOffset = arrayFill(applyOffset, 1, size*2, size * 4); // top wall\n            } else {\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\n            }\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var iLength = indices.length;\n        var twoSize = size + size;\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, iLength * 2 + twoSize * 3);\n        newIndices.set(indices);\n        var index = iLength;\n        for (i = 0; i < iLength; i += 3) { // bottom indices\n            var v0 = indices[i];\n            var v1 = indices[i + 1];\n            var v2 = indices[i + 2];\n            newIndices[index++] = v2 + size;\n            newIndices[index++] = v1 + size;\n            newIndices[index++] = v0 + size;\n        }\n\n        var UL, LL, UR, LR;\n\n        for (i = 0; i < twoSize; i += 2) { //wall indices\n            UL = i + twoSize;\n            LL = UL + twoSize;\n            UR = UL + 1;\n            LR = LL + 1;\n            newIndices[index++] = UL;\n            newIndices[index++] = LL;\n            newIndices[index++] = UR;\n            newIndices[index++] = UR;\n            newIndices[index++] = LL;\n            newIndices[index++] = LR;\n        }\n\n        return {\n            attributes : attributes,\n            indices : newIndices\n        };\n    }\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n\n    function computeOffsetPoints(position1, position2, ellipsoid, halfWidth, min, max) {\n        // Compute direction of offset the point\n        var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\n        Cartesian3.normalize(direction, direction);\n        var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\n        var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\n        Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\n\n        var minLat = min.latitude;\n        var minLon = min.longitude;\n        var maxLat = max.latitude;\n        var maxLon = max.longitude;\n\n        // Compute 2 offset points\n        Cartesian3.add(position1, offsetDirection, scratchCartesian2);\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n        var lat = scratchCartographic.latitude;\n        var lon = scratchCartographic.longitude;\n        minLat = Math.min(minLat, lat);\n        minLon = Math.min(minLon, lon);\n        maxLat = Math.max(maxLat, lat);\n        maxLon = Math.max(maxLon, lon);\n\n        Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n        lat = scratchCartographic.latitude;\n        lon = scratchCartographic.longitude;\n        minLat = Math.min(minLat, lat);\n        minLon = Math.min(minLon, lon);\n        maxLat = Math.max(maxLat, lat);\n        maxLon = Math.max(maxLon, lon);\n\n        min.latitude = minLat;\n        min.longitude = minLon;\n        max.latitude = maxLat;\n        max.longitude = maxLon;\n    }\n\n    var scratchCartesianOffset = new Cartesian3();\n    var scratchCartesianEnds = new Cartesian3();\n    var scratchCartographicMin = new Cartographic();\n    var scratchCartographicMax = new Cartographic();\n\n    function computeRectangle(positions, ellipsoid, width, cornerType, result) {\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var length = cleanPositions.length;\n        if (length < 2 || width <= 0) {\n            return new Rectangle();\n        }\n        var halfWidth = width * 0.5;\n\n        scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\n        scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\n        scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\n        scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\n\n        var lat, lon;\n        if (cornerType === CornerType.ROUNDED) {\n            // Compute start cap\n            var first = cleanPositions[0];\n            Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\n            Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n            Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\n            Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\n\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\n            lat = scratchCartographic.latitude;\n            lon = scratchCartographic.longitude;\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\n        }\n\n        // Compute the rest\n        for (var i = 0; i < length-1; ++i) {\n            computeOffsetPoints(cleanPositions[i], cleanPositions[i+1], ellipsoid, halfWidth,\n                scratchCartographicMin, scratchCartographicMax);\n        }\n\n        // Compute ending point\n        var last = cleanPositions[length-1];\n        Cartesian3.subtract(last, cleanPositions[length-2], scratchCartesianOffset);\n        Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n        Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\n        Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\n        computeOffsetPoints(last, scratchCartesianEnds, ellipsoid, halfWidth,\n            scratchCartographicMin, scratchCartographicMax);\n\n        if (cornerType === CornerType.ROUNDED) {\n            // Compute end cap\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\n            lat = scratchCartographic.latitude;\n            lon = scratchCartographic.longitude;\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\n        }\n\n        var rectangle = defined(result) ? result : new Rectangle();\n        rectangle.north = scratchCartographicMax.latitude;\n        rectangle.south = scratchCartographicMin.latitude;\n        rectangle.east = scratchCartographicMax.longitude;\n        rectangle.west = scratchCartographicMin.longitude;\n\n        return rectangle;\n    }\n\n    /**\n     * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias CorridorGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see CorridorGeometry.createGeometry\n     * @see Packable\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n     *\n     * @example\n     * var corridor = new Cesium.CorridorGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n     *   width : 100000\n     * });\n     */\n    function CorridorGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._positions = positions;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._width = width;\n        this._height = Math.max(height, extrudedHeight);\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createCorridorGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n        this._rectangle = undefined;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CorridorGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CorridorGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        width : undefined,\n        height : undefined,\n        extrudedHeight : undefined,\n        cornerType : undefined,\n        granularity : undefined,\n        shadowVolume: undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CorridorGeometry} [result] The object into which to store the result.\n     * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\n     */\n    CorridorGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var width = array[startingIndex++];\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.width = width;\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new CorridorGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._width = width;\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle given the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     * @param {Rectangle} [result] An object in which to store the result.\n     *\n     * @returns {Rectangle} The result rectangle.\n     */\n    CorridorGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n\n        return computeRectangle(positions, ellipsoid, width, cornerType, result);\n    };\n\n    /**\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CorridorGeometry} corridorGeometry A description of the corridor.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CorridorGeometry.createGeometry = function(corridorGeometry) {\n        var positions = corridorGeometry._positions;\n        var width = corridorGeometry._width;\n        var ellipsoid = corridorGeometry._ellipsoid;\n\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if ((cleanPositions.length < 2) || (width <= 0)) {\n            return;\n        }\n\n        var height = corridorGeometry._height;\n        var extrudedHeight = corridorGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var vertexFormat = corridorGeometry._vertexFormat;\n        var params = {\n            ellipsoid : ellipsoid,\n            positions : cleanPositions,\n            width : width,\n            cornerType : corridorGeometry._cornerType,\n            granularity : corridorGeometry._granularity,\n            saveAttributes: true\n        };\n        var attr;\n        if (extrude) {\n            params.height = height;\n            params.extrudedHeight = extrudedHeight;\n            params.shadowVolume = corridorGeometry._shadowVolume;\n            params.offsetAttribute = corridorGeometry._offsetAttribute;\n            attr = computePositionsExtruded(params, vertexFormat);\n        } else {\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\n            attr = combine(computedPositions, vertexFormat, ellipsoid);\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\n\n            if (defined(corridorGeometry._offsetAttribute)) {\n                var applyOffsetValue = corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                var length = attr.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                arrayFill(applyOffset, applyOffsetValue);\n                attr.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n        var attributes = attr.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\n        if (!vertexFormat.position) {\n            attr.attributes.position.values = undefined;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : attr.indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : corridorGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    CorridorGeometry.createShadowVolume = function(corridorGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = corridorGeometry._granularity;\n        var ellipsoid = corridorGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new CorridorGeometry({\n            positions : corridorGeometry._positions,\n            width : corridorGeometry._width,\n            cornerType : corridorGeometry._cornerType,\n            ellipsoid : ellipsoid,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    Object.defineProperties(CorridorGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    this._rectangle = computeRectangle(this._positions, this._ellipsoid, this._width, this._cornerType);\n                }\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\n         *\n         * Corridors don't support stRotation,\n         * so just return the corners of the original system.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                return [0, 0, 0, 1, 1, 0];\n            }\n        }\n    });\nexport default CorridorGeometry;\n","import arrayFill from './arrayFill.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport CorridorGeometryLibrary from './CorridorGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n\n    function scaleToSurface(positions, ellipsoid) {\n        for (var i = 0; i < positions.length; i++) {\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n        }\n        return positions;\n    }\n\n    function combine(computedPositions, cornerType) {\n        var wallIndices = [];\n        var positions = computedPositions.positions;\n        var corners = computedPositions.corners;\n        var endPositions = computedPositions.endPositions;\n        var attributes = new GeometryAttributes();\n        var corner;\n        var leftCount = 0;\n        var rightCount = 0;\n        var i;\n        var indicesLength = 0;\n        var length;\n        for (i = 0; i < positions.length; i += 2) {\n            length = positions[i].length - 3;\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\n            indicesLength += length / 3 * 4;\n            rightCount += positions[i + 1].length - 3;\n        }\n        leftCount += 3; //add back count for end positions\n        rightCount += 3;\n        for (i = 0; i < corners.length; i++) {\n            corner = corners[i];\n            var leftSide = corners[i].leftPositions;\n            if (defined(leftSide)) {\n                length = leftSide.length;\n                leftCount += length;\n                indicesLength += length / 3 * 2;\n            } else {\n                length = corners[i].rightPositions.length;\n                rightCount += length;\n                indicesLength += length / 3 * 2;\n            }\n        }\n\n        var addEndPositions = defined(endPositions);\n        var endPositionLength;\n        if (addEndPositions) {\n            endPositionLength = endPositions[0].length - 3;\n            leftCount += endPositionLength;\n            rightCount += endPositionLength;\n            endPositionLength /= 3;\n            indicesLength += endPositionLength * 4;\n        }\n        var size = leftCount + rightCount;\n        var finalPositions = new Float64Array(size);\n        var front = 0;\n        var back = size - 1;\n        var UL, LL, UR, LR;\n        var rightPos, leftPos;\n        var halfLength = endPositionLength / 2;\n\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\n        var index = 0;\n\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n        if (addEndPositions) { // add rounded end\n            wallIndices.push(front / 3);\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var firstEndPositions = endPositions[0];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n\n                LL = front / 3;\n                LR = LL + 1;\n                UL = (back - 2) / 3;\n                UR = UL - 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        var posIndex = 0;\n        var rightEdge = positions[posIndex++]; //add first two edges\n        var leftEdge = positions[posIndex++];\n        finalPositions.set(rightEdge, front);\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n        length = leftEdge.length - 3;\n        wallIndices.push(front / 3, (back - 2) / 3);\n        for (i = 0; i < length; i += 3) {\n            LL = front / 3;\n            LR = LL + 1;\n            UL = (back - 2) / 3;\n            UR = UL - 1;\n            indices[index++] = UL;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n\n            front += 3;\n            back -= 3;\n        }\n\n        for (i = 0; i < corners.length; i++) {\n            var j;\n            corner = corners[i];\n            var l = corner.leftPositions;\n            var r = corner.rightPositions;\n            var start;\n            var outsidePoint = cartesian3;\n            if (defined(l)) {\n                back -= 3;\n                start = UR;\n                wallIndices.push(LR);\n                for (j = 0; j < l.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n                    indices[index++] = start - j - 1;\n                    indices[index++] = start - j;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\n                    back -= 3;\n                }\n                wallIndices.push(start - Math.floor(l.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push((back - 2) / 3 + 1);\n                }\n                front += 3;\n            } else {\n                front += 3;\n                start = LR;\n                wallIndices.push(UR);\n                for (j = 0; j < r.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n                    indices[index++] = start + j;\n                    indices[index++] = start + j + 1;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\n                    front += 3;\n                }\n                wallIndices.push(start + Math.floor(r.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push(front / 3 - 1);\n                }\n                back -= 3;\n            }\n            rightEdge = positions[posIndex++];\n            leftEdge = positions[posIndex++];\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\n            leftEdge.splice(leftEdge.length - 3, 3);\n            finalPositions.set(rightEdge, front);\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\n            length = leftEdge.length - 3;\n\n            for (j = 0; j < leftEdge.length; j += 3) {\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n                front += 3;\n                back -= 3;\n            }\n            front -= 3;\n            back += 3;\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n\n        if (addEndPositions) { // add rounded end\n            front += 3;\n            back -= 3;\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var lastEndPositions = endPositions[1];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n\n            wallIndices.push(front / 3);\n        } else {\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        return {\n            attributes : attributes,\n            indices : indices,\n            wallIndices : wallIndices\n        };\n    }\n\n    function computePositionsExtruded(params) {\n        var ellipsoid = params.ellipsoid;\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\n        var attr = combine(computedPositions, params.cornerType);\n        var wallIndices = attr.wallIndices;\n        var height = params.height;\n        var extrudedHeight = params.extrudedHeight;\n        var attributes = attr.attributes;\n        var indices = attr.indices;\n        var positions = attributes.position.values;\n        var length = positions.length;\n        var extrudedPositions = new Float64Array(length);\n        extrudedPositions.set(positions);\n        var newPositions = new Float64Array(length * 2);\n\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\n        newPositions.set(positions);\n        newPositions.set(extrudedPositions, length);\n        attributes.position.values = newPositions;\n\n        length /= 3;\n        if (defined(params.offsetAttribute)) {\n            var applyOffset = new Uint8Array(length * 2);\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, length);\n            } else {\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var i;\n        var iLength = indices.length;\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, (iLength + wallIndices.length) * 2);\n        newIndices.set(indices);\n        var index = iLength;\n        for (i = 0; i < iLength; i += 2) { // bottom indices\n            var v0 = indices[i];\n            var v1 = indices[i + 1];\n            newIndices[index++] = v0 + length;\n            newIndices[index++] = v1 + length;\n        }\n\n        var UL, LL;\n        for (i = 0; i < wallIndices.length; i++) { //wall indices\n            UL = wallIndices[i];\n            LL = UL + length;\n            newIndices[index++] = UL;\n            newIndices[index++] = LL;\n        }\n\n        return {\n            attributes : attributes,\n            indices : newIndices\n        };\n    }\n\n    /**\n     * A description of a corridor outline.\n     *\n     * @alias CorridorOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\n     * @param {Number} options.width The distance between the edges of the corridor outline.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see CorridorOutlineGeometry.createGeometry\n     *\n     * @example\n     * var corridor = new Cesium.CorridorOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n     *   width : 100000\n     * });\n     */\n    function CorridorOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._positions = positions;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._width = width;\n        this._height = Math.max(height, extrudedHeight);\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCorridorOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CorridorOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CorridorOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        positions : undefined,\n        ellipsoid : scratchEllipsoid,\n        width : undefined,\n        height : undefined,\n        extrudedHeight : undefined,\n        cornerType : undefined,\n        granularity : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\n     */\n    CorridorOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var width = array[startingIndex++];\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.width = width;\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CorridorOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._width = width;\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CorridorOutlineGeometry.createGeometry = function(corridorOutlineGeometry) {\n        var positions = corridorOutlineGeometry._positions;\n        var width = corridorOutlineGeometry._width;\n        var ellipsoid = corridorOutlineGeometry._ellipsoid;\n\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if ((cleanPositions.length < 2) || (width <= 0)) {\n            return;\n        }\n\n        var height = corridorOutlineGeometry._height;\n        var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var params = {\n            ellipsoid : ellipsoid,\n            positions : cleanPositions,\n            width : width,\n            cornerType : corridorOutlineGeometry._cornerType,\n            granularity : corridorOutlineGeometry._granularity,\n            saveAttributes : false\n        };\n        var attr;\n        if (extrude) {\n            params.height = height;\n            params.extrudedHeight = extrudedHeight;\n            params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\n            attr = computePositionsExtruded(params);\n        } else {\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\n            attr = combine(computedPositions, params.cornerType);\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\n\n            if (defined(corridorOutlineGeometry._offsetAttribute)) {\n                var length = attr.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                attr.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n        var attributes = attr.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\n\n        return new Geometry({\n            attributes : attributes,\n            indices : attr.indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : corridorOutlineGeometry._offsetAttribute\n        });\n    };\nexport default CorridorOutlineGeometry;\n","import Check from '../Core/Check.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport GeometryOffsetAttribute from '../Core/GeometryOffsetAttribute.js';\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\nimport GroundPrimitive from '../Scene/GroundPrimitive.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport CallbackProperty from './CallbackProperty.js';\nimport ConstantProperty from './ConstantProperty.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport TerrainOffsetProperty from './TerrainOffsetProperty.js';\n\n    var defaultZIndex = new ConstantProperty(0);\n\n    /**\n     * An abstract class for updating ground geometry entities.\n     * @constructor\n     * @alias GroundGeometryUpdater\n     * @param {Object} options An object with the following properties:\n     * @param {Entity} options.entity The entity containing the geometry to be visualized.\n     * @param {Scene} options.scene The scene where visualization is taking place.\n     * @param {Object} options.geometryOptions Options for the geometry\n     * @param {String} options.geometryPropertyName The geometry property name\n     * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n     */\n    function GroundGeometryUpdater(options) {\n        GeometryUpdater.call(this, options);\n\n        this._zIndex = 0;\n        this._terrainOffsetProperty = undefined;\n    }\n\n    if (defined(Object.create)) {\n        GroundGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        GroundGeometryUpdater.prototype.constructor = GroundGeometryUpdater;\n    }\n\n    Object.defineProperties(GroundGeometryUpdater.prototype, {\n        /**\n         * Gets the zindex\n         * @type {Number}\n         * @memberof GroundGeometryUpdater.prototype\n         * @readonly\n         */\n        zIndex: {\n            get: function() {\n                return this._zIndex;\n            }\n        },\n\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof GroundGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    GroundGeometryUpdater.prototype._isOnTerrain = function(entity, geometry) {\n        return this._fillEnabled && !defined(geometry.height) && !defined(geometry.extrudedHeight) && GroundPrimitive.isSupported(this._scene);\n    };\n\n    GroundGeometryUpdater.prototype._getIsClosed = function(options) {\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        return height === 0 || (defined(extrudedHeight) && extrudedHeight !== height);\n    };\n\n    GroundGeometryUpdater.prototype._computeCenter = DeveloperError.throwInstantiationError;\n\n    GroundGeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        GeometryUpdater.prototype._onEntityPropertyChanged.call(this, entity, propertyName, newValue, oldValue);\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n        if (!defined(geometry)) {\n            return;\n        }\n        if (defined(geometry.zIndex) && (defined(geometry.height) || defined(geometry.extrudedHeight))) {\n            oneTimeWarning(oneTimeWarning.geometryZIndex);\n        }\n\n        this._zIndex = defaultValue(geometry.zIndex, defaultZIndex);\n\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        var heightReferenceProperty = geometry.heightReference;\n        var extrudedHeightReferenceProperty = geometry.extrudedHeightReference;\n\n        if (defined(heightReferenceProperty) || defined(extrudedHeightReferenceProperty)) {\n            var centerPosition = new CallbackProperty(this._computeCenter.bind(this), !this._dynamic);\n            this._terrainOffsetProperty = new TerrainOffsetProperty(this._scene, centerPosition, heightReferenceProperty, extrudedHeightReferenceProperty);\n        }\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    GroundGeometryUpdater.prototype.destroy = function() {\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        GeometryUpdater.prototype.destroy.call(this);\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.getGeometryHeight = function(height, heightReference) {\n        \n        if (!defined(height)) {\n            if (heightReference !== HeightReference.NONE) {\n                oneTimeWarning(oneTimeWarning.geometryHeightReference);\n            }\n            return;\n        }\n\n        if (heightReference !== HeightReference.CLAMP_TO_GROUND) {\n            return height;\n        }\n        return 0.0;\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.getGeometryExtrudedHeight = function(extrudedHeight, extrudedHeightReference) {\n        \n        if (!defined(extrudedHeight)) {\n            if (extrudedHeightReference !== HeightReference.NONE) {\n                oneTimeWarning(oneTimeWarning.geometryExtrudedHeightReference);\n            }\n            return;\n        }\n        if (extrudedHeightReference !== HeightReference.CLAMP_TO_GROUND) {\n            return extrudedHeight;\n        }\n\n        return GroundGeometryUpdater.CLAMP_TO_GROUND;\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.CLAMP_TO_GROUND = 'clamp';\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.computeGeometryOffsetAttribute = function(height, heightReference, extrudedHeight, extrudedHeightReference) {\n        if (!defined(height) || !defined(heightReference)) {\n            heightReference = HeightReference.NONE;\n        }\n        if (!defined(extrudedHeight) || !defined(extrudedHeightReference)) {\n            extrudedHeightReference = HeightReference.NONE;\n        }\n        var n = 0;\n        if (heightReference !== HeightReference.NONE) {\n            n++;\n        }\n        if (extrudedHeightReference === HeightReference.RELATIVE_TO_GROUND) {\n            n++;\n        }\n        if (n === 2) {\n            return GeometryOffsetAttribute.ALL;\n        }\n        if (n === 1) {\n            return GeometryOffsetAttribute.TOP;\n        }\n\n        return undefined;\n    };\nexport default GroundGeometryUpdater;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport CorridorGeometry from '../Core/CorridorGeometry.js';\nimport CorridorOutlineGeometry from '../Core/CorridorOutlineGeometry.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport GroundGeometryUpdater from './GroundGeometryUpdater.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n\n    function CorridorGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.width = undefined;\n        this.cornerType = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for corridors.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias CorridorGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function CorridorGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new CorridorGeometryOptions(entity),\n            geometryPropertyName : 'corridor',\n            observedPropertyNames : ['availability', 'corridor']\n        });\n\n        this._onEntityPropertyChanged(entity, 'corridor', entity.corridor, undefined);\n    }\n\n    if (defined(Object.create)) {\n        CorridorGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        CorridorGeometryUpdater.prototype.constructor = CorridorGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    CorridorGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CorridorGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    CorridorGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CorridorOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    CorridorGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var positions = Property.getValueOrUndefined(this._entity.corridor.positions, time);\n        if (!defined(positions) || positions.length === 0) {\n            return;\n        }\n        return Cartesian3.clone(positions[Math.floor(positions.length / 2.0)], result);\n    };\n\n    CorridorGeometryUpdater.prototype._isHidden = function(entity, corridor) {\n        return !defined(corridor.positions) || !defined(corridor.width) || GeometryUpdater.prototype._isHidden.call(this, entity, corridor);\n    };\n\n    CorridorGeometryUpdater.prototype._isDynamic = function(entity, corridor) {\n        return !corridor.positions.isConstant || //\n               !Property.isConstant(corridor.height) || //\n               !Property.isConstant(corridor.extrudedHeight) || //\n               !Property.isConstant(corridor.granularity) || //\n               !Property.isConstant(corridor.width) || //\n               !Property.isConstant(corridor.outlineWidth) || //\n               !Property.isConstant(corridor.cornerType) || //\n               !Property.isConstant(corridor.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty));\n    };\n\n    CorridorGeometryUpdater.prototype._setStaticOptions = function(entity, corridor) {\n        var heightValue = Property.getValueOrUndefined(corridor.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = (this._materialProperty instanceof ColorMaterialProperty) ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.positions = corridor.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n        options.width = corridor.width.getValue(Iso8601.MINIMUM_VALUE);\n        options.granularity = Property.getValueOrUndefined(corridor.granularity, Iso8601.MINIMUM_VALUE);\n        options.cornerType = Property.getValueOrUndefined(corridor.cornerType, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    CorridorGeometryUpdater.DynamicGeometryUpdater = DynamicCorridorGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicCorridorGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicCorridorGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicCorridorGeometryUpdater.prototype.constructor = DynamicCorridorGeometryUpdater;\n    }\n\n    DynamicCorridorGeometryUpdater.prototype._isHidden = function(entity, corridor, time) {\n        var options = this._options;\n        return !defined(options.positions) || !defined(options.width) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, corridor, time);\n    };\n\n    DynamicCorridorGeometryUpdater.prototype._setOptions = function(entity, corridor, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(corridor.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.positions = Property.getValueOrUndefined(corridor.positions, time);\n        options.width = Property.getValueOrUndefined(corridor.width, time);\n        options.granularity = Property.getValueOrUndefined(corridor.granularity, time);\n        options.cornerType = Property.getValueOrUndefined(corridor.cornerType, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\nexport default CorridorGeometryUpdater;\n","import CesiumMath from './Math.js';\n\n    /**\n     * @private\n     */\n    var CylinderGeometryLibrary = {};\n\n    /**\n     * @private\n     */\n    CylinderGeometryLibrary.computePositions = function(length, topRadius, bottomRadius, slices, fill){\n        var topZ = length * 0.5;\n        var bottomZ = -topZ;\n\n        var twoSlice = slices + slices;\n        var size = (fill) ? 2 * twoSlice : twoSlice;\n        var positions = new Float64Array(size*3);\n        var i;\n        var index = 0;\n        var tbIndex = 0;\n        var bottomOffset = (fill) ? twoSlice*3 : 0;\n        var topOffset = (fill) ? (twoSlice + slices)*3 : slices*3;\n\n        for (i = 0; i < slices; i++) {\n            var angle = i / slices * CesiumMath.TWO_PI;\n            var x = Math.cos(angle);\n            var y = Math.sin(angle);\n            var bottomX = x * bottomRadius;\n            var bottomY = y * bottomRadius;\n            var topX = x * topRadius;\n            var topY = y * topRadius;\n\n            positions[tbIndex + bottomOffset] = bottomX;\n            positions[tbIndex + bottomOffset + 1] = bottomY;\n            positions[tbIndex + bottomOffset + 2] = bottomZ;\n\n            positions[tbIndex + topOffset] = topX;\n            positions[tbIndex + topOffset + 1] = topY;\n            positions[tbIndex + topOffset + 2] = topZ;\n            tbIndex += 3;\n            if (fill) {\n                positions[index++] = bottomX;\n                positions[index++] = bottomY;\n                positions[index++] = bottomZ;\n                positions[index++] = topX;\n                positions[index++] = topY;\n                positions[index++] = topZ;\n            }\n        }\n\n        return positions;\n    };\nexport default CylinderGeometryLibrary;\n","import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CylinderGeometryLibrary from './CylinderGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var radiusScratch = new Cartesian2();\n    var normalScratch = new Cartesian3();\n    var bitangentScratch = new Cartesian3();\n    var tangentScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n\n    /**\n     * A description of a cylinder.\n     *\n     * @alias CylinderGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number} options.length The length of the cylinder.\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\n     *\n     * @see CylinderGeometry.createGeometry\n     *\n     * @example\n     * // create cylinder geometry\n     * var cylinder = new Cesium.CylinderGeometry({\n     *     length: 200000,\n     *     topRadius: 80000,\n     *     bottomRadius: 200000,\n     * });\n     * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\n     */\n    function CylinderGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var length = options.length;\n        var topRadius = options.topRadius;\n        var bottomRadius = options.bottomRadius;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var slices = defaultValue(options.slices, 128);\n\n        \n\n        this._length = length;\n        this._topRadius = topRadius;\n        this._bottomRadius = bottomRadius;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._slices = slices;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCylinderGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    CylinderGeometry.packedLength = VertexFormat.packedLength + 5;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CylinderGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CylinderGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._length;\n        array[startingIndex++] = value._topRadius;\n        array[startingIndex++] = value._bottomRadius;\n        array[startingIndex++] = value._slices;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        vertexFormat : scratchVertexFormat,\n        length : undefined,\n        topRadius : undefined,\n        bottomRadius : undefined,\n        slices : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CylinderGeometry} [result] The object into which to store the result.\n     * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\n     */\n    CylinderGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var length = array[startingIndex++];\n        var topRadius = array[startingIndex++];\n        var bottomRadius = array[startingIndex++];\n        var slices = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.length = length;\n            scratchOptions.topRadius = topRadius;\n            scratchOptions.bottomRadius = bottomRadius;\n            scratchOptions.slices = slices;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CylinderGeometry(scratchOptions);\n        }\n\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._length = length;\n        result._topRadius = topRadius;\n        result._bottomRadius = bottomRadius;\n        result._slices = slices;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CylinderGeometry.createGeometry = function(cylinderGeometry) {\n        var length = cylinderGeometry._length;\n        var topRadius = cylinderGeometry._topRadius;\n        var bottomRadius = cylinderGeometry._bottomRadius;\n        var vertexFormat = cylinderGeometry._vertexFormat;\n        var slices = cylinderGeometry._slices;\n\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\n            return;\n        }\n\n        var twoSlices = slices + slices;\n        var threeSlices = slices + twoSlices;\n        var numVertices = twoSlices + twoSlices;\n\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, true);\n\n        var st = (vertexFormat.st) ? new Float32Array(numVertices * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(numVertices * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(numVertices * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(numVertices * 3) : undefined;\n\n        var i;\n        var computeNormal = (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent);\n\n        if (computeNormal) {\n            var computeTangent = (vertexFormat.tangent || vertexFormat.bitangent);\n\n            var normalIndex = 0;\n            var tangentIndex = 0;\n            var bitangentIndex = 0;\n\n            var theta = Math.atan2(bottomRadius - topRadius, length);\n            var normal = normalScratch;\n            normal.z = Math.sin(theta);\n            var normalScale = Math.cos(theta);\n            var tangent = tangentScratch;\n            var bitangent = bitangentScratch;\n\n            for (i = 0; i < slices; i++) {\n                var angle = i / slices * CesiumMath.TWO_PI;\n                var x = normalScale * Math.cos(angle);\n                var y = normalScale * Math.sin(angle);\n                if (computeNormal) {\n                    normal.x = x;\n                    normal.y = y;\n\n                    if (computeTangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\n                    }\n\n                    if (vertexFormat.normal) {\n                        normals[normalIndex++] = normal.x;\n                        normals[normalIndex++] = normal.y;\n                        normals[normalIndex++] = normal.z;\n                        normals[normalIndex++] = normal.x;\n                        normals[normalIndex++] = normal.y;\n                        normals[normalIndex++] = normal.z;\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                    }\n                }\n            }\n\n            for (i = 0; i < slices; i++) {\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = -1;\n                }\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = 1;\n                    tangents[tangentIndex++] = 0;\n                    tangents[tangentIndex++] = 0;\n                }\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = 0;\n                    bitangents[bitangentIndex++] = -1;\n                    bitangents[bitangentIndex++] = 0;\n                }\n            }\n\n            for (i = 0; i < slices; i++) {\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 1;\n                }\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = 1;\n                    tangents[tangentIndex++] = 0;\n                    tangents[tangentIndex++] = 0;\n                }\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = 0;\n                    bitangents[bitangentIndex++] = 1;\n                    bitangents[bitangentIndex++] = 0;\n                }\n            }\n        }\n\n        var numIndices = 12 * slices - 12;\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\n        var index = 0;\n        var j = 0;\n        for (i = 0; i < slices - 1; i++) {\n            indices[index++] = j;\n            indices[index++] = j + 2;\n            indices[index++] = j + 3;\n\n            indices[index++] = j;\n            indices[index++] = j + 3;\n            indices[index++] = j + 1;\n\n            j += 2;\n        }\n\n        indices[index++] = twoSlices - 2;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = twoSlices - 2;\n        indices[index++] = 1;\n        indices[index++] = twoSlices - 1;\n\n        for (i = 1; i < slices - 1; i++) {\n            indices[index++] = twoSlices + i + 1;\n            indices[index++] = twoSlices + i;\n            indices[index++] = twoSlices;\n        }\n\n        for (i = 1; i < slices - 1; i++) {\n            indices[index++] = threeSlices;\n            indices[index++] = threeSlices + i;\n            indices[index++] = threeSlices + i + 1;\n        }\n\n        var textureCoordIndex = 0;\n        if (vertexFormat.st) {\n            var rad = Math.max(topRadius, bottomRadius);\n            for (i = 0; i < numVertices; i++) {\n                var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\n                st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\n                st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.DOUBLE,\n                componentsPerAttribute: 3,\n                values: positions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        radiusScratch.x = length * 0.5;\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\n\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\n\n        if (defined(cylinderGeometry._offsetAttribute)) {\n            length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : cylinderGeometry._offsetAttribute\n        });\n    };\n\n    var unitCylinderGeometry;\n\n    /**\n     * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\n     * @returns {Geometry} The computed vertices and indices.\n     *\n     * @private\n     */\n    CylinderGeometry.getUnitCylinder = function() {\n        if (!defined(unitCylinderGeometry)) {\n            unitCylinderGeometry = CylinderGeometry.createGeometry(new CylinderGeometry({\n                topRadius : 1.0,\n                bottomRadius : 1.0,\n                length : 1.0,\n                vertexFormat : VertexFormat.POSITION_ONLY\n            }));\n        }\n        return unitCylinderGeometry;\n    };\nexport default CylinderGeometry;\n","import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CylinderGeometryLibrary from './CylinderGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    var radiusScratch = new Cartesian2();\n\n    /**\n     * A description of the outline of a cylinder.\n     *\n     * @alias CylinderOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number} options.length The length of the cylinder.\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surfaces of the cylinder.\n     *\n     * @exception {DeveloperError} options.length must be greater than 0.\n     * @exception {DeveloperError} options.topRadius must be greater than 0.\n     * @exception {DeveloperError} options.bottomRadius must be greater than 0.\n     * @exception {DeveloperError} bottomRadius and topRadius cannot both equal 0.\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\n     *\n     * @see CylinderOutlineGeometry.createGeometry\n     *\n     * @example\n     * // create cylinder geometry\n     * var cylinder = new Cesium.CylinderOutlineGeometry({\n     *     length: 200000,\n     *     topRadius: 80000,\n     *     bottomRadius: 200000,\n     * });\n     * var geometry = Cesium.CylinderOutlineGeometry.createGeometry(cylinder);\n     */\n    function CylinderOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var length = options.length;\n        var topRadius = options.topRadius;\n        var bottomRadius = options.bottomRadius;\n        var slices = defaultValue(options.slices, 128);\n        var numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\n\n        \n\n        this._length = length;\n        this._topRadius = topRadius;\n        this._bottomRadius = bottomRadius;\n        this._slices = slices;\n        this._numberOfVerticalLines = numberOfVerticalLines;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCylinderOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    CylinderOutlineGeometry.packedLength = 6;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CylinderOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CylinderOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value._length;\n        array[startingIndex++] = value._topRadius;\n        array[startingIndex++] = value._bottomRadius;\n        array[startingIndex++] = value._slices;\n        array[startingIndex++] = value._numberOfVerticalLines;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchOptions = {\n        length : undefined,\n        topRadius : undefined,\n        bottomRadius : undefined,\n        slices : undefined,\n        numberOfVerticalLines : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CylinderOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CylinderOutlineGeometry} The modified result parameter or a new CylinderOutlineGeometry instance if one was not provided.\n     */\n    CylinderOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var topRadius = array[startingIndex++];\n        var bottomRadius = array[startingIndex++];\n        var slices = array[startingIndex++];\n        var numberOfVerticalLines = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.length = length;\n            scratchOptions.topRadius = topRadius;\n            scratchOptions.bottomRadius = bottomRadius;\n            scratchOptions.slices = slices;\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CylinderOutlineGeometry(scratchOptions);\n        }\n\n        result._length = length;\n        result._topRadius = topRadius;\n        result._bottomRadius = bottomRadius;\n        result._slices = slices;\n        result._numberOfVerticalLines = numberOfVerticalLines;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of a cylinder, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CylinderOutlineGeometry} cylinderGeometry A description of the cylinder outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CylinderOutlineGeometry.createGeometry = function(cylinderGeometry) {\n        var length = cylinderGeometry._length;\n        var topRadius = cylinderGeometry._topRadius;\n        var bottomRadius = cylinderGeometry._bottomRadius;\n        var slices = cylinderGeometry._slices;\n        var numberOfVerticalLines = cylinderGeometry._numberOfVerticalLines;\n\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\n            return;\n        }\n\n        var numVertices = slices * 2;\n\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, false);\n        var numIndices = slices * 2;\n        var numSide;\n        if (numberOfVerticalLines > 0) {\n            var numSideLines = Math.min(numberOfVerticalLines, slices);\n            numSide = Math.round(slices / numSideLines);\n            numIndices += numSideLines;\n        }\n\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices * 2);\n        var index = 0;\n        var i;\n        for (i = 0; i < slices - 1; i++) {\n            indices[index++] = i;\n            indices[index++] = i + 1;\n            indices[index++] = i + slices;\n            indices[index++] = i + 1 + slices;\n        }\n\n        indices[index++] = slices - 1;\n        indices[index++] = 0;\n        indices[index++] = slices + slices - 1;\n        indices[index++] = slices;\n\n        if (numberOfVerticalLines > 0) {\n            for (i = 0; i < slices; i += numSide) {\n                indices[index++] = i;\n                indices[index++] = i + slices;\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        radiusScratch.x = length * 0.5;\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\n\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\n\n        if (defined(cylinderGeometry._offsetAttribute)) {\n            length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : cylinderGeometry._offsetAttribute\n        });\n    };\nexport default CylinderOutlineGeometry;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport CylinderGeometry from '../Core/CylinderGeometry.js';\nimport CylinderOutlineGeometry from '../Core/CylinderOutlineGeometry.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport GeometryOffsetAttribute from '../Core/GeometryOffsetAttribute.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport heightReferenceOnEntityPropertyChanged from './heightReferenceOnEntityPropertyChanged.js';\nimport Property from './Property.js';\n\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function CylinderGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.length = undefined;\n        this.topRadius = undefined;\n        this.bottomRadius = undefined;\n        this.slices = undefined;\n        this.numberOfVerticalLines = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for cylinders.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias CylinderGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function CylinderGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity: entity,\n            scene: scene,\n            geometryOptions: new CylinderGeometryOptions(entity),\n            geometryPropertyName: 'cylinder',\n            observedPropertyNames: ['availability', 'position', 'orientation', 'cylinder']\n        });\n\n        this._onEntityPropertyChanged(entity, 'cylinder', entity.cylinder, undefined);\n    }\n\n    if (defined(Object.create)) {\n        CylinderGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        CylinderGeometryUpdater.prototype.constructor = CylinderGeometryUpdater;\n    }\n\n    Object.defineProperties(CylinderGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof CylinderGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    CylinderGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset: undefined\n        };\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CylinderGeometry(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    CylinderGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CylinderOutlineGeometry(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    CylinderGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    CylinderGeometryUpdater.prototype._isHidden = function(entity, cylinder) {\n        return !defined(entity.position) || !defined(cylinder.length) || !defined(cylinder.topRadius) || !defined(cylinder.bottomRadius) || GeometryUpdater.prototype._isHidden.call(this, entity, cylinder);\n    };\n\n    CylinderGeometryUpdater.prototype._isDynamic = function(entity, cylinder) {\n        return !entity.position.isConstant || //\n                !Property.isConstant(entity.orientation) || //\n                !cylinder.length.isConstant || //\n                !cylinder.topRadius.isConstant || //\n                !cylinder.bottomRadius.isConstant || //\n                !Property.isConstant(cylinder.slices) || //\n                !Property.isConstant(cylinder.outlineWidth) || //\n                !Property.isConstant(cylinder.numberOfVerticalLines);\n    };\n\n    CylinderGeometryUpdater.prototype._setStaticOptions = function(entity, cylinder) {\n        var heightReference = Property.getValueOrDefault(cylinder.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.length = cylinder.length.getValue(Iso8601.MINIMUM_VALUE);\n        options.topRadius = cylinder.topRadius.getValue(Iso8601.MINIMUM_VALUE);\n        options.bottomRadius = cylinder.bottomRadius.getValue(Iso8601.MINIMUM_VALUE);\n        options.slices = Property.getValueOrUndefined(cylinder.slices, Iso8601.MINIMUM_VALUE);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    CylinderGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    CylinderGeometryUpdater.DynamicGeometryUpdater = DynamicCylinderGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicCylinderGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicCylinderGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicCylinderGeometryUpdater.prototype.constructor = DynamicCylinderGeometryUpdater;\n    }\n\n    DynamicCylinderGeometryUpdater.prototype._isHidden = function(entity, cylinder, time) {\n        var options = this._options;\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        return !defined(position) || !defined(options.length) || !defined(options.topRadius) || //\n               !defined(options.bottomRadius) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, cylinder, time);\n    };\n\n    DynamicCylinderGeometryUpdater.prototype._setOptions = function(entity, cylinder, time) {\n        var heightReference = Property.getValueOrDefault(cylinder.heightReference, time, HeightReference.NONE);\n        var options = this._options;\n        options.length = Property.getValueOrUndefined(cylinder.length, time);\n        options.topRadius = Property.getValueOrUndefined(cylinder.topRadius, time);\n        options.bottomRadius = Property.getValueOrUndefined(cylinder.bottomRadius, time);\n        options.slices = Property.getValueOrUndefined(cylinder.slices, time);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, time);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\nexport default CylinderGeometryUpdater;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport defined from '../Core/defined.js';\nimport BoundingSphereState from './BoundingSphereState.js';\n\n    /**\n     * @private\n     */\n    function DynamicGeometryBatch(primitives, orderedGroundPrimitives) {\n        this._primitives = primitives;\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._dynamicUpdaters = new AssociativeArray();\n    }\n\n    DynamicGeometryBatch.prototype.add = function(time, updater) {\n        this._dynamicUpdaters.set(updater.id, updater.createDynamicUpdater(this._primitives, this._orderedGroundPrimitives));\n    };\n\n    DynamicGeometryBatch.prototype.remove = function(updater) {\n        var id = updater.id;\n        var dynamicUpdater = this._dynamicUpdaters.get(id);\n        if (defined(dynamicUpdater)) {\n            this._dynamicUpdaters.remove(id);\n            dynamicUpdater.destroy();\n        }\n    };\n\n    DynamicGeometryBatch.prototype.update = function(time) {\n        var geometries = this._dynamicUpdaters.values;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            geometries[i].update(time);\n        }\n        return true;\n    };\n\n    DynamicGeometryBatch.prototype.removeAllPrimitives = function() {\n        var geometries = this._dynamicUpdaters.values;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            geometries[i].destroy();\n        }\n        this._dynamicUpdaters.removeAll();\n    };\n\n    DynamicGeometryBatch.prototype.getBoundingSphere = function(updater, result) {\n        updater = this._dynamicUpdaters.get(updater.id);\n        if (defined(updater) && defined(updater.getBoundingSphere)) {\n            return updater.getBoundingSphere(result);\n        }\n        return BoundingSphereState.FAILED;\n    };\nexport default DynamicGeometryBatch;\n","import Cartesian3 from './Cartesian3.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport Quaternion from './Quaternion.js';\n\n    var EllipseGeometryLibrary = {};\n\n    var rotAxis = new Cartesian3();\n    var tempVec = new Cartesian3();\n    var unitQuat = new Quaternion();\n    var rotMtx = new Matrix3();\n\n    function pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, result) {\n        var azimuth = theta + rotation;\n\n        Cartesian3.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);\n        Cartesian3.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);\n        Cartesian3.add(rotAxis, tempVec, rotAxis);\n\n        var cosThetaSquared = Math.cos(theta);\n        cosThetaSquared = cosThetaSquared * cosThetaSquared;\n\n        var sinThetaSquared = Math.sin(theta);\n        sinThetaSquared = sinThetaSquared * sinThetaSquared;\n\n        var radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);\n        var angle = radius / mag;\n\n        // Create the quaternion to rotate the position vector to the boundary of the ellipse.\n        Quaternion.fromAxisAngle(rotAxis, angle, unitQuat);\n        Matrix3.fromQuaternion(unitQuat, rotMtx);\n\n        Matrix3.multiplyByVector(rotMtx, unitPos, result);\n        Cartesian3.normalize(result, result);\n        Cartesian3.multiplyByScalar(result, mag, result);\n        return result;\n    }\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    /**\n     * Returns the positions raised to the given heights\n     * @private\n     */\n    EllipseGeometryLibrary.raisePositionsToHeight = function(positions, options, extrude) {\n        var ellipsoid = options.ellipsoid;\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\n\n        var finalPositions = new Float64Array(size * 3);\n\n        var length = positions.length;\n        var bottomOffset = (extrude) ? length : 0;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n            ellipsoid.scaleToGeodeticSurface(position, position);\n\n            var extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n            var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian3);\n            Cartesian3.add(position, scaledNormal, position);\n\n            if (extrude) {\n                Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n                Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n                finalPositions[i + bottomOffset] = extrudedPosition.x;\n                finalPositions[i1 + bottomOffset] = extrudedPosition.y;\n                finalPositions[i2 + bottomOffset] = extrudedPosition.z;\n            }\n\n            finalPositions[i] = position.x;\n            finalPositions[i1] = position.y;\n            finalPositions[i2] = position.z;\n        }\n\n        return finalPositions;\n    };\n\n    var unitPosScratch = new Cartesian3();\n    var eastVecScratch = new Cartesian3();\n    var northVecScratch = new Cartesian3();\n    /**\n     * Returns an array of positions that make up the ellipse.\n     * @private\n     */\n    EllipseGeometryLibrary.computeEllipsePositions = function(options, addFillPositions, addEdgePositions) {\n        var semiMinorAxis = options.semiMinorAxis;\n        var semiMajorAxis = options.semiMajorAxis;\n        var rotation = options.rotation;\n        var center = options.center;\n\n        // Computing the arc-length of the ellipse is too expensive to be practical. Estimating it using the\n        // arc length of the sphere is too inaccurate and creates sharp edges when either the semi-major or\n        // semi-minor axis is much bigger than the other. Instead, scale the angle delta to make\n        // the distance along the ellipse boundary more closely match the granularity.\n        var granularity = options.granularity * 8.0;\n\n        var aSqr = semiMinorAxis * semiMinorAxis;\n        var bSqr = semiMajorAxis * semiMajorAxis;\n        var ab = semiMajorAxis * semiMinorAxis;\n\n        var mag = Cartesian3.magnitude(center);\n\n        var unitPos = Cartesian3.normalize(center, unitPosScratch);\n        var eastVec = Cartesian3.cross(Cartesian3.UNIT_Z, center, eastVecScratch);\n        eastVec = Cartesian3.normalize(eastVec, eastVec);\n        var northVec = Cartesian3.cross(unitPos, eastVec, northVecScratch);\n\n        // The number of points in the first quadrant\n        var numPts = 1 + Math.ceil(CesiumMath.PI_OVER_TWO / granularity);\n\n        var deltaTheta = CesiumMath.PI_OVER_TWO / (numPts - 1);\n        var theta = CesiumMath.PI_OVER_TWO - numPts * deltaTheta;\n        if (theta < 0.0) {\n            numPts -= Math.ceil(Math.abs(theta) / deltaTheta);\n        }\n\n        // If the number of points were three, the ellipse\n        // would be tessellated like below:\n        //\n        //         *---*\n        //       / | \\ | \\\n        //     *---*---*---*\n        //   / | \\ | \\ | \\ | \\\n        //  / .*---*---*---*. \\\n        // * ` | \\ | \\ | \\ | `*\n        //  \\`.*---*---*---*.`/\n        //   \\ | \\ | \\ | \\ | /\n        //     *---*---*---*\n        //       \\ | \\ | /\n        //         *---*\n        // The first and last column have one position and fan to connect to the adjacent column.\n        // Each other vertical column contains an even number of positions.\n        var size = 2 * (numPts * (numPts + 2));\n        var positions = (addFillPositions) ? new Array(size * 3) : undefined;\n        var positionIndex = 0;\n        var position = scratchCartesian1;\n        var reflectedPosition = scratchCartesian2;\n\n        var outerPositionsLength = (numPts * 4) * 3;\n        var outerRightIndex = outerPositionsLength - 1;\n        var outerLeftIndex = 0;\n        var outerPositions = (addEdgePositions) ? new Array(outerPositionsLength) : undefined;\n\n        var i;\n        var j;\n        var numInterior;\n        var t;\n        var interiorPosition;\n\n        // Compute points in the 'eastern' half of the ellipse\n        theta = CesiumMath.PI_OVER_TWO;\n        position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n        if (addFillPositions) {\n            positions[positionIndex++] = position.x;\n            positions[positionIndex++] = position.y;\n            positions[positionIndex++] = position.z;\n        }\n        if (addEdgePositions) {\n            outerPositions[outerRightIndex--] = position.z;\n            outerPositions[outerRightIndex--] = position.y;\n            outerPositions[outerRightIndex--] = position.x;\n        }\n        theta = CesiumMath.PI_OVER_TWO -  deltaTheta;\n        for (i = 1; i < numPts + 1; ++i) {\n            position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n            reflectedPosition = pointOnEllipsoid(Math.PI - theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\n\n            if (addFillPositions) {\n                positions[positionIndex++] = position.x;\n                positions[positionIndex++] = position.y;\n                positions[positionIndex++] = position.z;\n\n                numInterior = 2 * i + 2;\n                for (j = 1; j < numInterior - 1; ++j) {\n                    t = j / (numInterior - 1);\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\n                    positions[positionIndex++] = interiorPosition.x;\n                    positions[positionIndex++] = interiorPosition.y;\n                    positions[positionIndex++] = interiorPosition.z;\n                }\n\n                positions[positionIndex++] = reflectedPosition.x;\n                positions[positionIndex++] = reflectedPosition.y;\n                positions[positionIndex++] = reflectedPosition.z;\n            }\n\n            if (addEdgePositions) {\n                outerPositions[outerRightIndex--] = position.z;\n                outerPositions[outerRightIndex--] = position.y;\n                outerPositions[outerRightIndex--] = position.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\n            }\n\n            theta = CesiumMath.PI_OVER_TWO - (i + 1) * deltaTheta;\n        }\n\n        // Compute points in the 'western' half of the ellipse\n        for (i = numPts; i > 1; --i) {\n            theta = CesiumMath.PI_OVER_TWO - (i - 1) * deltaTheta;\n\n            position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n            reflectedPosition = pointOnEllipsoid(theta + Math.PI, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\n\n            if (addFillPositions) {\n                positions[positionIndex++] = position.x;\n                positions[positionIndex++] = position.y;\n                positions[positionIndex++] = position.z;\n\n                numInterior = 2 * (i - 1) + 2;\n                for (j = 1; j < numInterior - 1; ++j) {\n                    t = j / (numInterior - 1);\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\n                    positions[positionIndex++] = interiorPosition.x;\n                    positions[positionIndex++] = interiorPosition.y;\n                    positions[positionIndex++] = interiorPosition.z;\n                }\n\n                positions[positionIndex++] = reflectedPosition.x;\n                positions[positionIndex++] = reflectedPosition.y;\n                positions[positionIndex++] = reflectedPosition.z;\n            }\n\n            if (addEdgePositions) {\n                outerPositions[outerRightIndex--] = position.z;\n                outerPositions[outerRightIndex--] = position.y;\n                outerPositions[outerRightIndex--] = position.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\n            }\n        }\n\n        theta = CesiumMath.PI_OVER_TWO;\n        position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n\n        var r = {};\n        if (addFillPositions) {\n            positions[positionIndex++] = position.x;\n            positions[positionIndex++] = position.y;\n            positions[positionIndex++] = position.z;\n            r.positions = positions;\n            r.numPts = numPts;\n        }\n        if (addEdgePositions) {\n            outerPositions[outerRightIndex--] = position.z;\n            outerPositions[outerRightIndex--] = position.y;\n            outerPositions[outerRightIndex--] = position.x;\n            r.outerPositions = outerPositions;\n        }\n\n        return r;\n    };\nexport default EllipseGeometryLibrary;\n","import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport GeographicProjection from './GeographicProjection.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport Rectangle from './Rectangle.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var texCoordScratch = new Cartesian2();\n    var textureMatrixScratch = new Matrix3();\n    var tangentMatrixScratch = new Matrix3();\n    var quaternionScratch = new Quaternion();\n\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n\n    var scratchCartographic = new Cartographic();\n    var projectedCenterScratch = new Cartesian3();\n\n    var scratchMinTexCoord = new Cartesian2();\n    var scratchMaxTexCoord = new Cartesian2();\n\n    function computeTopBottomAttributes(positions, options, extrude) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var stRotation = options.stRotation;\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\n        var shadowVolume = options.shadowVolume;\n\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n\n        var textureMatrix = textureMatrixScratch;\n        var tangentMatrix = tangentMatrixScratch;\n        if (stRotation !== 0) {\n            var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\n            tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n            tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\n        }\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var bottomOffset = (extrude) ? length : 0;\n        var stOffset = bottomOffset / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                if (extrude) {\n                    textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                    textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n                }\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n                normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n                if (shadowVolume) {\n                    extrudeNormals[i + bottomOffset] = -normal.x;\n                    extrudeNormals[i1 + bottomOffset] = -normal.y;\n                    extrudeNormals[i2 + bottomOffset] = -normal.z;\n                }\n\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\n                        Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\n                    }\n                    if (vertexFormat.normal) {\n                        normals[i] = normal.x;\n                        normals[i1] = normal.y;\n                        normals[i2] = normal.z;\n                        if (extrude) {\n                            normals[i + bottomOffset] = -normal.x;\n                            normals[i1 + bottomOffset] = -normal.y;\n                            normals[i2 + bottomOffset] = -normal.z;\n                        }\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[i] = tangent.x;\n                        tangents[i1] = tangent.y;\n                        tangents[i2] = tangent.z;\n                        if (extrude) {\n                            tangents[i + bottomOffset] = -tangent.x;\n                            tangents[i1 + bottomOffset] = -tangent.y;\n                            tangents[i2 + bottomOffset] = -tangent.z;\n                        }\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                        bitangents[i ] = bitangent.x;\n                        bitangents[i1] = bitangent.y;\n                        bitangents[i2] = bitangent.z;\n                        if (extrude) {\n                            bitangents[i + bottomOffset] = bitangent.x;\n                            bitangents[i1 + bottomOffset] = bitangent.y;\n                            bitangents[i2 + bottomOffset] = bitangent.z;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (extrude && defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function topIndices(numPts) {\n        // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\n        //              = -1 + 4 * ((n * ( n + 1)) / 2)\n        // total triangles = 2 * numTrangles in half\n        // indices = total triangles * 3;\n        // Substitute numPts for n above\n\n        var indices = new Array(12 * (numPts * ( numPts + 1)) - 6);\n        var indicesIndex = 0;\n        var prevIndex;\n        var numInterior;\n        var positionIndex;\n        var i;\n        var j;\n        // Indices triangles to the 'right' of the north vector\n\n        prevIndex = 0;\n        positionIndex = 1;\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        for (i = 2; i < numPts + 1; ++i) {\n            positionIndex = i * (i + 1) - 1;\n            prevIndex = (i - 1) * i - 1;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        // Indices for center column of triangles\n        numInterior = numPts * 2;\n        ++positionIndex;\n        ++prevIndex;\n        for (i = 0; i < numInterior - 1; ++i) {\n            indices[indicesIndex++] = positionIndex;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        indices[indicesIndex++] = positionIndex;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        indices[indicesIndex++] = positionIndex++;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        // Reverse the process creating indices to the 'left' of the north vector\n        ++prevIndex;\n        for (i = numPts - 1; i > 1; --i) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = positionIndex++;\n        }\n\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n        return indices;\n    }\n\n    var boundingSphereCenter = new Cartesian3();\n\n    function computeEllipse(options) {\n        var center = options.center;\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var attributes = computeTopBottomAttributes(positions, options, false);\n        var indices = topIndices(numPts);\n        indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    function computeWallAttributes(positions, options) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var stRotation = options.stRotation;\n        var size = positions.length / 3 * 2;\n\n        var finalPositions = new Float64Array(size * 3);\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var shadowVolume = options.shadowVolume;\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n        var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var stOffset = length / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n            var extrudedPosition;\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            position = ellipsoid.scaleToGeodeticSurface(position, position);\n            extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n            if (shadowVolume) {\n                extrudeNormals[i + length] = -normal.x;\n                extrudeNormals[i1 + length] = -normal.y;\n                extrudeNormals[i2 + length] = -normal.z;\n            }\n\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\n            position = Cartesian3.add(position, scaledNormal, position);\n            scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n            extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n            if (vertexFormat.position) {\n                finalPositions[i + length] = extrudedPosition.x;\n                finalPositions[i1 + length] = extrudedPosition.y;\n                finalPositions[i2 + length] = extrudedPosition.z;\n\n                finalPositions[i] = position.x;\n                finalPositions[i1] = position.y;\n                finalPositions[i2] = position.z;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n\n                bitangent = Cartesian3.clone(normal, bitangent);\n                var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\n                Cartesian3.subtract(next, position, next);\n                var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\n\n                normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\n\n                if (vertexFormat.normal) {\n                    normals[i] = normal.x;\n                    normals[i1] = normal.y;\n                    normals[i2] = normal.z;\n\n                    normals[i + length] = normal.x;\n                    normals[i1 + length] = normal.y;\n                    normals[i2 + length] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                    tangents[i] = tangent.x;\n                    tangents[i1] = tangent.y;\n                    tangents[i2] = tangent.z;\n\n                    tangents[i + length] = tangent.x;\n                    tangents[i + 1 + length] = tangent.y;\n                    tangents[i + 2 + length] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[i ] = bitangent.x;\n                    bitangents[i1] = bitangent.y;\n                    bitangents[i2] = bitangent.z;\n\n                    bitangents[i + length] = bitangent.x;\n                    bitangents[i1 + length] = bitangent.y;\n                    bitangents[i2 + length] = bitangent.z;\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function computeWallIndices(positions) {\n        var length = positions.length / 3;\n        var indices = IndexDatatype.createTypedArray(length, length * 6);\n        var index = 0;\n        for (var i = 0; i < length; i++) {\n            var UL = i;\n            var LL = i + length;\n            var UR = (UL + 1) % length;\n            var LR = UR + length;\n            indices[index++] = UL;\n            indices[index++] = LL;\n            indices[index++] = UR;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n        }\n\n        return indices;\n    }\n\n    var topBoundingSphere = new BoundingSphere();\n    var bottomBoundingSphere = new BoundingSphere();\n\n    function computeExtrudedEllipse(options) {\n        var center = options.center;\n        var ellipsoid = options.ellipsoid;\n        var semiMajorAxis = options.semiMajorAxis;\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\n        topBoundingSphere.radius = semiMajorAxis;\n\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\n        bottomBoundingSphere.radius = semiMajorAxis;\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var outerPositions = cep.outerPositions;\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\n        var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\n        var indices = topIndices(numPts);\n        var length = indices.length;\n        indices.length = length * 2;\n        var posLength = positions.length / 3;\n        for (var i = 0; i < length; i += 3) {\n            indices[i + length] = indices[i + 2] + posLength;\n            indices[i + 1 + length] = indices[i + 1] + posLength;\n            indices[i + 2 + length] = indices[i] + posLength;\n        }\n\n        var topBottomIndices = IndexDatatype.createTypedArray(posLength * 2 / 3, indices);\n\n        var topBottomGeo = new Geometry({\n            attributes : topBottomAttributes,\n            indices : topBottomIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var wallAttributes = computeWallAttributes(outerPositions, options);\n        indices = computeWallIndices(outerPositions);\n        var wallIndices = IndexDatatype.createTypedArray(outerPositions.length * 2 / 3, indices);\n\n        var wallGeo = new Geometry({\n            attributes : wallAttributes,\n            indices : wallIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var geo = GeometryPipeline.combineInstances([\n            new GeometryInstance({\n                geometry : topBottomGeo\n            }),\n            new GeometryInstance({\n                geometry : wallGeo\n            })\n        ]);\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : geo[0].attributes,\n            indices : geo[0].indices\n        };\n    }\n\n    function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : center,\n            semiMajorAxis : semiMajorAxis,\n            semiMinorAxis : semiMinorAxis,\n            rotation : rotation,\n            granularity : granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n        var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\n        // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\n        // When this happens, make the rectangle into a \"circle\" around the pole\n        if (rectangle.width > CesiumMath.PI) {\n            rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\n            rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\n            rectangle.east = CesiumMath.PI;\n            rectangle.west = -CesiumMath.PI;\n        }\n        return rectangle;\n    }\n\n    /**\n     * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias EllipseGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     *\n     * @example\n     * // Create an ellipse.\n     * var ellipse = new Cesium.EllipseGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   semiMajorAxis : 500000.0,\n     *   semiMinorAxis : 300000.0,\n     *   rotation : Cesium.Math.toRadians(60.0)\n     * });\n     * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\n     *\n     * @see EllipseGeometry.createGeometry\n     */\n    function EllipseGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._center = Cartesian3.clone(center);\n        this._semiMajorAxis = semiMajorAxis;\n        this._semiMinorAxis = semiMinorAxis;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._height = Math.max(extrudedHeight, height);\n        this._granularity = granularity;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._extrudedHeight = Math.min(extrudedHeight, height);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createEllipseGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n\n        this._rectangle = undefined;\n        this._textureCoordinateRotationPoints = undefined;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipseGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipseGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._center, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._semiMajorAxis;\n        array[startingIndex++] = value._semiMinorAxis;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        center : scratchCenter,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        rotation : undefined,\n        stRotation : undefined,\n        height : undefined,\n        granularity : undefined,\n        extrudedHeight : undefined,\n        shadowVolume: undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipseGeometry} [result] The object into which to store the result.\n     * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\n     */\n    EllipseGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n        startingIndex += Cartesian3.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var semiMajorAxis = array[startingIndex++];\n        var semiMinorAxis = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var height = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.granularity = granularity;\n            scratchOptions.stRotation = stRotation;\n            scratchOptions.rotation = rotation;\n            scratchOptions.semiMajorAxis = semiMajorAxis;\n            scratchOptions.semiMinorAxis = semiMinorAxis;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new EllipseGeometry(scratchOptions);\n        }\n\n        result._center = Cartesian3.clone(center, result._center);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._semiMajorAxis = semiMajorAxis;\n        result._semiMinorAxis = semiMinorAxis;\n        result._rotation = rotation;\n        result._stRotation = stRotation;\n        result._height = height;\n        result._granularity = granularity;\n        result._extrudedHeight = extrudedHeight;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle based on the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {Rectangle} [result] An object in which to store the result\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    EllipseGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var rotation = defaultValue(options.rotation, 0.0);\n\n        \n\n        return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\n    };\n\n    /**\n     * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipseGeometry.createGeometry = function(ellipseGeometry) {\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\n            return;\n        }\n\n        var height = ellipseGeometry._height;\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\n        var options = {\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipseGeometry._ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            height : height,\n            granularity : ellipseGeometry._granularity,\n            vertexFormat : ellipseGeometry._vertexFormat,\n            stRotation : ellipseGeometry._stRotation\n        };\n        var geometry;\n        if (extrude) {\n            options.extrudedHeight = extrudedHeight;\n            options.shadowVolume = ellipseGeometry._shadowVolume;\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\n            geometry = computeExtrudedEllipse(options);\n        } else {\n            geometry = computeEllipse(options);\n\n            if (defined(ellipseGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : geometry.boundingSphere,\n            offsetAttribute : ellipseGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = ellipseGeometry._granularity;\n        var ellipsoid = ellipseGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new EllipseGeometry({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            stRotation : ellipseGeometry._stRotation,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    function textureCoordinateRotationPoints(ellipseGeometry) {\n        var stRotation = -ellipseGeometry._stRotation;\n        if (stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            rotation : ellipseGeometry._rotation,\n            granularity : ellipseGeometry._granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n\n        var ellipsoid = ellipseGeometry._ellipsoid;\n        var boundingRectangle = ellipseGeometry.rectangle;\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\n    }\n\n    Object.defineProperties(EllipseGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\n                }\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\nexport default EllipseGeometry;\n","import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport EllipseGeometryLibrary from './EllipseGeometryLibrary.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    var scratchCartesian1 = new Cartesian3();\n    var boundingSphereCenter = new Cartesian3();\n\n    function computeEllipse(options) {\n        var center = options.center;\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\n\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, false)\n            })\n        });\n\n        var length = positions.length / 3;\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\n        var index = 0;\n        for ( var i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n        }\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    var topBoundingSphere = new BoundingSphere();\n    var bottomBoundingSphere = new BoundingSphere();\n    function computeExtrudedEllipse(options) {\n        var center = options.center;\n        var ellipsoid = options.ellipsoid;\n        var semiMajorAxis = options.semiMajorAxis;\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\n        topBoundingSphere.radius = semiMajorAxis;\n\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\n        bottomBoundingSphere.radius = semiMajorAxis;\n\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, true)\n            })\n        });\n\n        positions = attributes.position.values;\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\n        var length = positions.length/3;\n\n        if (defined(options.offsetAttribute)) {\n            var applyOffset = new Uint8Array(length);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, length / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, offsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var numberOfVerticalLines = defaultValue(options.numberOfVerticalLines, 16);\n        numberOfVerticalLines = CesiumMath.clamp(numberOfVerticalLines, 0, length/2);\n\n        var indices = IndexDatatype.createTypedArray(length, length * 2 + numberOfVerticalLines * 2);\n\n        length /= 2;\n        var index = 0;\n        var i;\n        for (i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n            indices[index++] = i + length;\n            indices[index++] = ((i + 1) % length) + length;\n        }\n\n        var numSide;\n        if (numberOfVerticalLines > 0) {\n            var numSideLines = Math.min(numberOfVerticalLines, length);\n            numSide = Math.round(length / numSideLines);\n\n            var maxI = Math.min(numSide * numberOfVerticalLines, length);\n            for (i = 0; i < maxI; i += numSide) {\n                indices[index++] = i;\n                indices[index++] = i + length;\n            }\n        }\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    /**\n     * A description of the outline of an ellipse on an ellipsoid.\n     *\n     * @alias EllipseOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The angle from north (counter-clockwise) in radians.\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the ellipse in radians.\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surface of an extruded ellipse.\n     *\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     * @see EllipseOutlineGeometry.createGeometry\n     *\n     * @example\n     * var ellipse = new Cesium.EllipseOutlineGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   semiMajorAxis : 500000.0,\n     *   semiMinorAxis : 300000.0,\n     *   rotation : Cesium.Math.toRadians(60.0)\n     * });\n     * var geometry = Cesium.EllipseOutlineGeometry.createGeometry(ellipse);\n     */\n    function EllipseOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._center = Cartesian3.clone(center);\n        this._semiMajorAxis = semiMajorAxis;\n        this._semiMinorAxis = semiMinorAxis;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._height = Math.max(extrudedHeight, height);\n        this._granularity = granularity;\n        this._extrudedHeight = Math.min(extrudedHeight, height);\n        this._numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createEllipseOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipseOutlineGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + 8;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipseOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipseOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._center, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._semiMajorAxis;\n        array[startingIndex++] = value._semiMinorAxis;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++]   = value._numberOfVerticalLines;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchOptions = {\n        center : scratchCenter,\n        ellipsoid : scratchEllipsoid,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        rotation : undefined,\n        height : undefined,\n        granularity : undefined,\n        extrudedHeight : undefined,\n        numberOfVerticalLines : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipseOutlineGeometry} [result] The object into which to store the result.\n     * @returns {EllipseOutlineGeometry} The modified result parameter or a new EllipseOutlineGeometry instance if one was not provided.\n     */\n    EllipseOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n        startingIndex += Cartesian3.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var semiMajorAxis = array[startingIndex++];\n        var semiMinorAxis = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var height = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var numberOfVerticalLines = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.granularity = granularity;\n            scratchOptions.rotation = rotation;\n            scratchOptions.semiMajorAxis = semiMajorAxis;\n            scratchOptions.semiMinorAxis = semiMinorAxis;\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new EllipseOutlineGeometry(scratchOptions);\n        }\n\n        result._center = Cartesian3.clone(center, result._center);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._semiMajorAxis = semiMajorAxis;\n        result._semiMinorAxis = semiMinorAxis;\n        result._rotation = rotation;\n        result._height = height;\n        result._granularity = granularity;\n        result._extrudedHeight = extrudedHeight;\n        result._numberOfVerticalLines = numberOfVerticalLines;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of an ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipseOutlineGeometry} ellipseGeometry A description of the ellipse.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipseOutlineGeometry.createGeometry = function(ellipseGeometry) {\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\n            return;\n        }\n\n        var height = ellipseGeometry._height;\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\n        var options = {\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipseGeometry._ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            height : height,\n            granularity : ellipseGeometry._granularity,\n            numberOfVerticalLines : ellipseGeometry._numberOfVerticalLines\n        };\n        var geometry;\n        if (extrude) {\n            options.extrudedHeight = extrudedHeight;\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\n            geometry = computeExtrudedEllipse(options);\n        } else {\n            geometry = computeEllipse(options);\n\n            if (defined(ellipseGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : geometry.boundingSphere,\n            offsetAttribute : ellipseGeometry._offsetAttribute\n        });\n    };\nexport default EllipseOutlineGeometry;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport EllipseGeometry from '../Core/EllipseGeometry.js';\nimport EllipseOutlineGeometry from '../Core/EllipseOutlineGeometry.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport GroundGeometryUpdater from './GroundGeometryUpdater.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n\n    function EllipseGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.center = undefined;\n        this.semiMajorAxis = undefined;\n        this.semiMinorAxis = undefined;\n        this.rotation = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.numberOfVerticalLines = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for ellipses.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias EllipseGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function EllipseGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new EllipseGeometryOptions(entity),\n            geometryPropertyName : 'ellipse',\n            observedPropertyNames : ['availability', 'position', 'ellipse']\n        });\n\n        this._onEntityPropertyChanged(entity, 'ellipse', entity.ellipse, undefined);\n    }\n\n    if (defined(Object.create)) {\n        EllipseGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        EllipseGeometryUpdater.prototype.constructor = EllipseGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    EllipseGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipseGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    EllipseGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipseOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    EllipseGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    EllipseGeometryUpdater.prototype._isHidden = function(entity, ellipse) {\n        var position = entity.position;\n\n        return !defined(position) || !defined(ellipse.semiMajorAxis) || !defined(ellipse.semiMinorAxis) || GeometryUpdater.prototype._isHidden.call(this, entity, ellipse);\n    };\n\n    EllipseGeometryUpdater.prototype._isDynamic = function(entity, ellipse) {\n        return !entity.position.isConstant || //\n               !ellipse.semiMajorAxis.isConstant || //\n               !ellipse.semiMinorAxis.isConstant || //\n               !Property.isConstant(ellipse.rotation) || //\n               !Property.isConstant(ellipse.height) || //\n               !Property.isConstant(ellipse.extrudedHeight) || //\n               !Property.isConstant(ellipse.granularity) || //\n               !Property.isConstant(ellipse.stRotation) || //\n               !Property.isConstant(ellipse.outlineWidth) || //\n               !Property.isConstant(ellipse.numberOfVerticalLines) || //\n               !Property.isConstant(ellipse.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty));\n    };\n\n    EllipseGeometryUpdater.prototype._setStaticOptions = function(entity, ellipse) {\n        var heightValue = Property.getValueOrUndefined(ellipse.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(ellipse.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(ellipse.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(ellipse.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = (this._materialProperty instanceof ColorMaterialProperty) ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.center = entity.position.getValue(Iso8601.MINIMUM_VALUE, options.center);\n        options.semiMajorAxis = ellipse.semiMajorAxis.getValue(Iso8601.MINIMUM_VALUE, options.semiMajorAxis);\n        options.semiMinorAxis = ellipse.semiMinorAxis.getValue(Iso8601.MINIMUM_VALUE, options.semiMinorAxis);\n        options.rotation = Property.getValueOrUndefined(ellipse.rotation, Iso8601.MINIMUM_VALUE);\n        options.granularity = Property.getValueOrUndefined(ellipse.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(ellipse.stRotation, Iso8601.MINIMUM_VALUE);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(ellipse.numberOfVerticalLines, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(EllipseGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    EllipseGeometryUpdater.DynamicGeometryUpdater = DynamicEllipseGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicEllipseGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicEllipseGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicEllipseGeometryUpdater.prototype.constructor = DynamicEllipseGeometryUpdater;\n    }\n\n    DynamicEllipseGeometryUpdater.prototype._isHidden = function(entity, ellipse, time) {\n        var options = this._options;\n        return !defined(options.center) || !defined(options.semiMajorAxis) || !defined(options.semiMinorAxis) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, ellipse, time);\n    };\n\n    DynamicEllipseGeometryUpdater.prototype._setOptions = function(entity, ellipse, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(ellipse.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(ellipse.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(ellipse.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(ellipse.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.center = Property.getValueOrUndefined(entity.position, time, options.center);\n        options.semiMajorAxis = Property.getValueOrUndefined(ellipse.semiMajorAxis, time);\n        options.semiMinorAxis = Property.getValueOrUndefined(ellipse.semiMinorAxis, time);\n        options.rotation = Property.getValueOrUndefined(ellipse.rotation, time);\n        options.granularity = Property.getValueOrUndefined(ellipse.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(ellipse.stRotation, time);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(ellipse.numberOfVerticalLines, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(EllipseGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\nexport default EllipseGeometryUpdater;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport EllipsoidGeometry from '../Core/EllipsoidGeometry.js';\nimport EllipsoidOutlineGeometry from '../Core/EllipsoidOutlineGeometry.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport GeometryOffsetAttribute from '../Core/GeometryOffsetAttribute.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport Primitive from '../Scene/Primitive.js';\nimport SceneMode from '../Scene/SceneMode.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport heightReferenceOnEntityPropertyChanged from './heightReferenceOnEntityPropertyChanged.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var radiiScratch = new Cartesian3();\n    var innerRadiiScratch = new Cartesian3();\n    var scratchColor = new Color();\n    var unitSphere = new Cartesian3(1, 1, 1);\n\n    function EllipsoidGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.radii = undefined;\n        this.innerRadii = undefined;\n        this.minimumClock = undefined;\n        this.maximumClock = undefined;\n        this.minimumCone = undefined;\n        this.maximumCone = undefined;\n        this.stackPartitions = undefined;\n        this.slicePartitions = undefined;\n        this.subdivisions = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for ellipsoids.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias EllipsoidGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function EllipsoidGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new EllipsoidGeometryOptions(entity),\n            geometryPropertyName : 'ellipsoid',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'ellipsoid']\n        });\n\n        this._onEntityPropertyChanged(entity, 'ellipsoid', entity.ellipsoid, undefined);\n    }\n\n    if (defined(Object.create)) {\n        EllipsoidGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        EllipsoidGeometryUpdater.prototype.constructor = EllipsoidGeometryUpdater;\n    }\n\n    Object.defineProperties(EllipsoidGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof EllipsoidGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty : {\n            get : function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n     * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    EllipsoidGeometryUpdater.prototype.createFillGeometryInstance = function(time, skipModelMatrix, modelMatrixResult) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes.color = color;\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipsoidGeometry(this._options),\n            modelMatrix : skipModelMatrix ? undefined : entity.computeModelMatrixForHeightReference(time, entity.ellipsoid.heightReference, this._options.radii.z * 0.5, this._scene.mapProjection.ellipsoid, modelMatrixResult),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n     * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    EllipsoidGeometryUpdater.prototype.createOutlineGeometryInstance = function(time, skipModelMatrix, modelMatrixResult) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipsoidOutlineGeometry(this._options),\n            modelMatrix : skipModelMatrix ? undefined : entity.computeModelMatrixForHeightReference(time, entity.ellipsoid.heightReference, this._options.radii.z * 0.5, this._scene.mapProjection.ellipsoid, modelMatrixResult),\n            attributes : attributes\n        });\n    };\n\n    EllipsoidGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    EllipsoidGeometryUpdater.prototype._isHidden = function(entity, ellipsoid) {\n        return !defined(entity.position) || !defined(ellipsoid.radii) || GeometryUpdater.prototype._isHidden.call(this, entity, ellipsoid);\n    };\n\n    EllipsoidGeometryUpdater.prototype._isDynamic = function(entity, ellipsoid) {\n        return !entity.position.isConstant || //\n               !Property.isConstant(entity.orientation) || //\n               !ellipsoid.radii.isConstant || //\n               !Property.isConstant(ellipsoid.innerRadii) || //\n               !Property.isConstant(ellipsoid.stackPartitions) || //\n               !Property.isConstant(ellipsoid.slicePartitions) || //\n               !Property.isConstant(ellipsoid.outlineWidth) || //\n               !Property.isConstant(ellipsoid.minimumClock) || //\n               !Property.isConstant(ellipsoid.maximumClock) || //\n               !Property.isConstant(ellipsoid.minimumCone) || //\n               !Property.isConstant(ellipsoid.maximumCone) || //\n               !Property.isConstant(ellipsoid.subdivisions);\n    };\n\n    EllipsoidGeometryUpdater.prototype._setStaticOptions = function(entity, ellipsoid) {\n        var heightReference = Property.getValueOrDefault(ellipsoid.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.radii = ellipsoid.radii.getValue(Iso8601.MINIMUM_VALUE, options.radii);\n        options.innerRadii = Property.getValueOrUndefined(ellipsoid.innerRadii, options.radii);\n        options.minimumClock = Property.getValueOrUndefined(ellipsoid.minimumClock, Iso8601.MINIMUM_VALUE);\n        options.maximumClock = Property.getValueOrUndefined(ellipsoid.maximumClock, Iso8601.MINIMUM_VALUE);\n        options.minimumCone = Property.getValueOrUndefined(ellipsoid.minimumCone, Iso8601.MINIMUM_VALUE);\n        options.maximumCone = Property.getValueOrUndefined(ellipsoid.maximumCone, Iso8601.MINIMUM_VALUE);\n        options.stackPartitions = Property.getValueOrUndefined(ellipsoid.stackPartitions, Iso8601.MINIMUM_VALUE);\n        options.slicePartitions = Property.getValueOrUndefined(ellipsoid.slicePartitions, Iso8601.MINIMUM_VALUE);\n        options.subdivisions = Property.getValueOrUndefined(ellipsoid.subdivisions, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    EllipsoidGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    EllipsoidGeometryUpdater.DynamicGeometryUpdater = DynamicEllipsoidGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicEllipsoidGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n\n        this._scene = geometryUpdater._scene;\n        this._modelMatrix = new Matrix4();\n        this._attributes = undefined;\n        this._outlineAttributes = undefined;\n        this._lastSceneMode = undefined;\n        this._lastShow = undefined;\n        this._lastOutlineShow = undefined;\n        this._lastOutlineWidth = undefined;\n        this._lastOutlineColor = undefined;\n        this._lastOffset = new Cartesian3();\n        this._material = {};\n    }\n\n    if (defined(Object.create)) {\n        DynamicEllipsoidGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicEllipsoidGeometryUpdater.prototype.constructor = DynamicEllipsoidGeometryUpdater;\n    }\n\n    DynamicEllipsoidGeometryUpdater.prototype.update = function(time) {\n        \n\n        var entity = this._entity;\n        var ellipsoid = entity.ellipsoid;\n        if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(ellipsoid.show, time, true)) {\n            if (defined(this._primitive)) {\n                this._primitive.show = false;\n            }\n\n            if (defined(this._outlinePrimitive)) {\n                this._outlinePrimitive.show = false;\n            }\n            return;\n        }\n\n        var radii = Property.getValueOrUndefined(ellipsoid.radii, time, radiiScratch);\n        var modelMatrix = defined(radii) ? entity.computeModelMatrixForHeightReference(time, ellipsoid.heightReference, radii.z * 0.5, this._scene.mapProjection.ellipsoid, this._modelMatrix) : undefined;\n        if (!defined(modelMatrix) || !defined(radii)) {\n            if (defined(this._primitive)) {\n                this._primitive.show = false;\n            }\n\n            if (defined(this._outlinePrimitive)) {\n                this._outlinePrimitive.show = false;\n            }\n            return;\n        }\n\n        //Compute attributes and material.\n        var showFill = Property.getValueOrDefault(ellipsoid.fill, time, true);\n        var showOutline = Property.getValueOrDefault(ellipsoid.outline, time, false);\n        var outlineColor = Property.getValueOrClonedDefault(ellipsoid.outlineColor, time, Color.BLACK, scratchColor);\n        var material = MaterialProperty.getValue(time, defaultValue(ellipsoid.material, defaultMaterial), this._material);\n\n        // Check properties that could trigger a primitive rebuild.\n        var innerRadii = Property.getValueOrUndefined(ellipsoid.innerRadii, time, innerRadiiScratch);\n        var minimumClock = Property.getValueOrUndefined(ellipsoid.minimumClock, time);\n        var maximumClock = Property.getValueOrUndefined(ellipsoid.maximumClock, time);\n        var minimumCone = Property.getValueOrUndefined(ellipsoid.minimumCone, time);\n        var maximumCone = Property.getValueOrUndefined(ellipsoid.maximumCone, time);\n        var stackPartitions = Property.getValueOrUndefined(ellipsoid.stackPartitions, time);\n        var slicePartitions = Property.getValueOrUndefined(ellipsoid.slicePartitions, time);\n        var subdivisions = Property.getValueOrUndefined(ellipsoid.subdivisions, time);\n        var outlineWidth = Property.getValueOrDefault(ellipsoid.outlineWidth, time, 1.0);\n        var heightReference = Property.getValueOrDefault(ellipsoid.heightReference, time, HeightReference.NONE);\n        var offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n\n        //In 3D we use a fast path by modifying Primitive.modelMatrix instead of regenerating the primitive every frame.\n        //Also check for height reference because this method doesn't work when the height is relative to terrain.\n        var sceneMode = this._scene.mode;\n        var in3D = sceneMode === SceneMode.SCENE3D && heightReference === HeightReference.NONE;\n\n        var options = this._options;\n\n        var shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n\n        var distanceDisplayConditionProperty = this._geometryUpdater.distanceDisplayConditionProperty;\n        var distanceDisplayCondition = distanceDisplayConditionProperty.getValue(time);\n\n        var offset = Property.getValueOrDefault(this._geometryUpdater.terrainOffsetProperty, time, defaultOffset, offsetScratch);\n\n        //We only rebuild the primitive if something other than the radii has changed\n        //For the radii, we use unit sphere and then deform it with a scale matrix.\n        var rebuildPrimitives = !in3D || this._lastSceneMode !== sceneMode || !defined(this._primitive) || //\n                                options.stackPartitions !== stackPartitions || options.slicePartitions !== slicePartitions || //\n                                defined(innerRadii) && !Cartesian3.equals(options.innerRadii !== innerRadii) || options.minimumClock !== minimumClock || //\n                                options.maximumClock !== maximumClock || options.minimumCone !== minimumCone || //\n                                options.maximumCone !== maximumCone || options.subdivisions !== subdivisions || //\n                                this._lastOutlineWidth !== outlineWidth || options.offsetAttribute !== offsetAttribute;\n\n        if (rebuildPrimitives) {\n            var primitives = this._primitives;\n            primitives.removeAndDestroy(this._primitive);\n            primitives.removeAndDestroy(this._outlinePrimitive);\n            this._primitive = undefined;\n            this._outlinePrimitive = undefined;\n            this._lastSceneMode = sceneMode;\n            this._lastOutlineWidth = outlineWidth;\n\n            options.stackPartitions = stackPartitions;\n            options.slicePartitions = slicePartitions;\n            options.subdivisions = subdivisions;\n            options.offsetAttribute = offsetAttribute;\n            options.radii = Cartesian3.clone(in3D ? unitSphere : radii, options.radii);\n            if (defined(innerRadii)) {\n                if (in3D) {\n                    var mag = Cartesian3.magnitude(radii);\n                    options.innerRadii = Cartesian3.fromElements(innerRadii.x / mag, innerRadii.y / mag, innerRadii.z / mag, options.innerRadii);\n                } else {\n                    options.innerRadii = Cartesian3.clone(innerRadii, options.innerRadii);\n                }\n            } else {\n                options.innerRadii = undefined;\n            }\n            options.minimumClock = minimumClock;\n            options.maximumClock = maximumClock;\n            options.minimumCone = minimumCone;\n            options.maximumCone = maximumCone;\n\n            var appearance = new MaterialAppearance({\n                material : material,\n                translucent : material.isTranslucent(),\n                closed : true\n            });\n            options.vertexFormat = appearance.vertexFormat;\n\n            var fillInstance = this._geometryUpdater.createFillGeometryInstance(time, in3D, this._modelMatrix);\n\n            this._primitive = primitives.add(new Primitive({\n                geometryInstances : fillInstance,\n                appearance : appearance,\n                asynchronous : false,\n                shadows : shadows\n            }));\n\n            var outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(time, in3D, this._modelMatrix);\n            this._outlinePrimitive = primitives.add(new Primitive({\n                geometryInstances : outlineInstance,\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : outlineInstance.attributes.color.value[3] !== 255,\n                    renderState : {\n                        lineWidth : this._geometryUpdater._scene.clampLineWidth(outlineWidth)\n                    }\n                }),\n                asynchronous : false,\n                shadows : shadows\n            }));\n\n            this._lastShow = showFill;\n            this._lastOutlineShow = showOutline;\n            this._lastOutlineColor = Color.clone(outlineColor, this._lastOutlineColor);\n            this._lastDistanceDisplayCondition = distanceDisplayCondition;\n            this._lastOffset = Cartesian3.clone(offset, this._lastOffset);\n        } else if (this._primitive.ready) {\n            //Update attributes only.\n            var primitive = this._primitive;\n            var outlinePrimitive = this._outlinePrimitive;\n\n            primitive.show = true;\n            outlinePrimitive.show = true;\n            primitive.appearance.material = material;\n\n            var attributes = this._attributes;\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(entity);\n                this._attributes = attributes;\n            }\n            if (showFill !== this._lastShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(showFill, attributes.show);\n                this._lastShow = showFill;\n            }\n\n            var outlineAttributes = this._outlineAttributes;\n\n            if (!defined(outlineAttributes)) {\n                outlineAttributes = outlinePrimitive.getGeometryInstanceAttributes(entity);\n                this._outlineAttributes = outlineAttributes;\n            }\n\n            if (showOutline !== this._lastOutlineShow) {\n                outlineAttributes.show = ShowGeometryInstanceAttribute.toValue(showOutline, outlineAttributes.show);\n                this._lastOutlineShow = showOutline;\n            }\n\n            if (!Color.equals(outlineColor, this._lastOutlineColor)) {\n                outlineAttributes.color = ColorGeometryInstanceAttribute.toValue(outlineColor, outlineAttributes.color);\n                Color.clone(outlineColor, this._lastOutlineColor);\n            }\n\n            if (!DistanceDisplayCondition.equals(distanceDisplayCondition, this._lastDistanceDisplayCondition)) {\n                attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                outlineAttributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, outlineAttributes.distanceDisplayCondition);\n                DistanceDisplayCondition.clone(distanceDisplayCondition, this._lastDistanceDisplayCondition);\n            }\n\n            if (!Cartesian3.equals(offset, this._lastOffset)) {\n                attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                outlineAttributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                Cartesian3.clone(offset, this._lastOffset);\n            }\n        }\n\n        if (in3D) {\n            //Since we are scaling a unit sphere, we can't let any of the values go to zero.\n            //Instead we clamp them to a small value.  To the naked eye, this produces the same results\n            //that you get passing EllipsoidGeometry a radii with a zero component.\n            radii.x = Math.max(radii.x, 0.001);\n            radii.y = Math.max(radii.y, 0.001);\n            radii.z = Math.max(radii.z, 0.001);\n\n            modelMatrix = Matrix4.multiplyByScale(modelMatrix, radii, modelMatrix);\n            this._primitive.modelMatrix = modelMatrix;\n            this._outlinePrimitive.modelMatrix = modelMatrix;\n        }\n    };\nexport default EllipsoidGeometryUpdater;\n","import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    /**\n     * Describes geometry representing a plane centered at the origin, with a unit width and length.\n     *\n     * @alias PlaneGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @example\n     * var planeGeometry = new Cesium.PlaneGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n     * });\n     */\n    function PlaneGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        this._vertexFormat = vertexFormat;\n        this._workerName = 'createPlaneGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PlaneGeometry.packedLength = VertexFormat.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PlaneGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PlaneGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n        return array;\n    };\n\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        vertexFormat: scratchVertexFormat\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PlaneGeometry} [result] The object into which to store the result.\n     * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n     */\n    PlaneGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n\n        if (!defined(result)) {\n            return new PlaneGeometry(scratchOptions);\n        }\n\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n        return result;\n    };\n\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\n\n    /**\n     * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PlaneGeometry} planeGeometry A description of the plane.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PlaneGeometry.createGeometry = function(planeGeometry) {\n        var vertexFormat = planeGeometry._vertexFormat;\n\n        var attributes = new GeometryAttributes();\n        var indices;\n        var positions;\n\n        if (vertexFormat.position) {\n            // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n            positions = new Float64Array(4 * 3);\n\n            // +z face\n            positions[0]  = min.x;\n            positions[1]  = min.y;\n            positions[2]  = 0.0;\n            positions[3]  = max.x;\n            positions[4]  = min.y;\n            positions[5]  = 0.0;\n            positions[6]  = max.x;\n            positions[7]  = max.y;\n            positions[8]  = 0.0;\n            positions[9]  = min.x;\n            positions[10] = max.y;\n            positions[11] = 0.0;\n\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n\n            if (vertexFormat.normal) {\n                var normals = new Float32Array(4 * 3);\n\n                // +z face\n                normals[0]  = 0.0;\n                normals[1]  = 0.0;\n                normals[2]  = 1.0;\n                normals[3]  = 0.0;\n                normals[4]  = 0.0;\n                normals[5]  = 1.0;\n                normals[6]  = 0.0;\n                normals[7]  = 0.0;\n                normals[8]  = 1.0;\n                normals[9]  = 0.0;\n                normals[10] = 0.0;\n                normals[11] = 1.0;\n\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.st) {\n                var texCoords = new Float32Array(4 * 2);\n\n                // +z face\n                texCoords[0]  = 0.0;\n                texCoords[1]  = 0.0;\n                texCoords[2]  = 1.0;\n                texCoords[3]  = 0.0;\n                texCoords[4]  = 1.0;\n                texCoords[5]  = 1.0;\n                texCoords[6]  = 0.0;\n                texCoords[7]  = 1.0;\n\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : texCoords\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                var tangents = new Float32Array(4 * 3);\n\n                // +z face\n                tangents[0]  = 1.0;\n                tangents[1]  = 0.0;\n                tangents[2]  = 0.0;\n                tangents[3]  = 1.0;\n                tangents[4]  = 0.0;\n                tangents[5]  = 0.0;\n                tangents[6]  = 1.0;\n                tangents[7]  = 0.0;\n                tangents[8]  = 0.0;\n                tangents[9]  = 1.0;\n                tangents[10] = 0.0;\n                tangents[11] = 0.0;\n\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                var bitangents = new Float32Array(4 * 3);\n\n                // +z face\n                bitangents[0] = 0.0;\n                bitangents[1] = 1.0;\n                bitangents[2] = 0.0;\n                bitangents[3] = 0.0;\n                bitangents[4] = 1.0;\n                bitangents[5] = 0.0;\n                bitangents[6] = 0.0;\n                bitangents[7] = 1.0;\n                bitangents[8] = 0.0;\n                bitangents[9] = 0.0;\n                bitangents[10] = 1.0;\n                bitangents[11] = 0.0;\n\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            // 2 triangles\n            indices = new Uint16Array(2 * 3);\n\n            // +z face\n            indices[0] = 0;\n            indices[1] = 1;\n            indices[2] = 2;\n            indices[3] = 0;\n            indices[4] = 2;\n            indices[5] = 3;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n        });\n    };\nexport default PlaneGeometry;\n","import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defined from './defined.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    /**\n     * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n     *\n     * @alias PlaneOutlineGeometry\n     * @constructor\n     *\n     */\n    function PlaneOutlineGeometry() {\n        this._workerName = 'createPlaneOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PlaneOutlineGeometry.packedLength = 0;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PlaneOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PlaneOutlineGeometry.pack = function(value, array) {\n        \n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n     */\n    PlaneOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        if (!defined(result)) {\n            return new PlaneOutlineGeometry();\n        }\n\n        return result;\n    };\n\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\n\n    /**\n     * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n     *\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PlaneOutlineGeometry.createGeometry = function() {\n        var attributes = new GeometryAttributes();\n        var indices = new Uint16Array(4 * 2);\n        var positions = new Float64Array(4 * 3);\n\n        positions[0] = min.x;\n        positions[1] = min.y;\n        positions[2] = min.z;\n        positions[3] = max.x;\n        positions[4] = min.y;\n        positions[5] = min.z;\n        positions[6] = max.x;\n        positions[7] = max.y;\n        positions[8] = min.z;\n        positions[9] = min.x;\n        positions[10] = max.y;\n        positions[11] = min.z;\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        indices[0] = 0;\n        indices[1] = 1;\n        indices[2] = 1;\n        indices[3] = 2;\n        indices[4] = 2;\n        indices[5] = 3;\n        indices[6] = 3;\n        indices[7] = 0;\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n        });\n    };\nexport default PlaneOutlineGeometry;\n","import Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PlaneGeometry from '../Core/PlaneGeometry.js';\nimport PlaneOutlineGeometry from '../Core/PlaneOutlineGeometry.js';\nimport Quaternion from '../Core/Quaternion.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport Property from './Property.js';\n\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function PlaneGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.plane = undefined;\n        this.dimensions = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for planes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PlaneGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PlaneGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PlaneGeometryOptions(entity),\n            geometryPropertyName : 'plane',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'plane']\n        });\n\n        this._onEntityPropertyChanged(entity, 'plane', entity.plane, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PlaneGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        var planeGraphics = entity.plane;\n        var options = this._options;\n        var modelMatrix = entity.computeModelMatrix(time);\n        var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n        var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n\n        options.plane = plane;\n        options.dimensions = dimensions;\n\n        modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, this._scene.mapProjection.ellipsoid, modelMatrix);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PlaneGeometry(this._options),\n            modelMatrix : modelMatrix,\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var planeGraphics = entity.plane;\n        var options = this._options;\n        var modelMatrix = entity.computeModelMatrix(time);\n        var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n        var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n\n        options.plane = plane;\n        options.dimensions = dimensions;\n\n        modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, this._scene.mapProjection.ellipsoid, modelMatrix);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PlaneOutlineGeometry(),\n            modelMatrix : modelMatrix,\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    PlaneGeometryUpdater.prototype._isHidden = function(entity, plane) {\n        return !defined(plane.plane) || !defined(plane.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, plane);\n    };\n\n    PlaneGeometryUpdater.prototype._getIsClosed = function(options) {\n        return false;\n    };\n\n    PlaneGeometryUpdater.prototype._isDynamic = function(entity, plane) {\n        return !entity.position.isConstant || //\n               !Property.isConstant(entity.orientation) || //\n               !plane.plane.isConstant || //\n               !plane.dimensions.isConstant || //\n               !Property.isConstant(plane.outlineWidth);\n    };\n\n    PlaneGeometryUpdater.prototype._setStaticOptions = function(entity, plane) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n        options.dimensions = plane.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n    };\n\n    PlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicPlaneGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicPlaneGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n    }\n\n    DynamicPlaneGeometryUpdater.prototype._isHidden = function(entity, plane, time) {\n        var options = this._options;\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        return !defined(position) || !defined(options.plane) || !defined(options.dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time);\n    };\n\n    DynamicPlaneGeometryUpdater.prototype._setOptions = function(entity, plane, time) {\n        var options = this._options;\n        options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n        options.dimensions = Property.getValueOrUndefined(plane.dimensions, time, options.dimensions);\n    };\n\n    var scratchAxis = new Cartesian3();\n    var scratchAxis2 = new Cartesian3();\n    var scratchTranslation = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchScale = new Cartesian3();\n    var scratchQuaternion = new Quaternion();\n    var scratchMatrix3 = new Matrix3();\n    function createPrimitiveMatrix(plane, dimensions, transform, ellipsoid, result) {\n        var normal = plane.normal;\n        var distance = plane.distance;\n\n        var translation = Cartesian3.multiplyByScalar(normal, -distance, scratchTranslation);\n        translation = Matrix4.multiplyByPoint(transform, translation, translation);\n\n        var transformedNormal = Matrix4.multiplyByPointAsVector(transform, normal, scratchNormal);\n        Cartesian3.normalize(transformedNormal, transformedNormal);\n\n        var up = ellipsoid.geodeticSurfaceNormal(translation, scratchAxis2);\n        if (CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(up, transformedNormal)), 1.0, CesiumMath.EPSILON8)) {\n            up = Cartesian3.clone(Cartesian3.UNIT_Z, up);\n            if (CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(up, transformedNormal)), 1.0, CesiumMath.EPSILON8)) {\n                up = Cartesian3.clone(Cartesian3.UNIT_X, up);\n            }\n        }\n\n        var left = Cartesian3.cross(up, transformedNormal, scratchAxis);\n        up = Cartesian3.cross(transformedNormal, left, up);\n        Cartesian3.normalize(left, left);\n        Cartesian3.normalize(up, up);\n\n        var rotationMatrix = scratchMatrix3;\n        Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n        Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n        Matrix3.setColumn(rotationMatrix, 2, transformedNormal, rotationMatrix);\n        var rotation = Quaternion.fromRotationMatrix(rotationMatrix, scratchQuaternion);\n\n        var scale = Cartesian2.clone(dimensions, scratchScale);\n        scale.z = 1.0;\n\n        return Matrix4.fromTranslationQuaternionRotationScale(translation, rotation, scale, result);\n    }\n\n    /**\n     * @private\n     */\n    PlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\nexport default PlaneGeometryUpdater;\n","import Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport Matrix3 from './Matrix3.js';\nimport OrientedBoundingBox from './OrientedBoundingBox.js';\n\n    /**\n     * @private\n     */\n    var CoplanarPolygonGeometryLibrary = {};\n\n    var scratchIntersectionPoint = new Cartesian3();\n    var scratchXAxis = new Cartesian3();\n    var scratchYAxis = new Cartesian3();\n    var scratchZAxis = new Cartesian3();\n    var obbScratch = new OrientedBoundingBox();\n\n    CoplanarPolygonGeometryLibrary.validOutline = function(positions) {\n        \n\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\n        var halfAxes = orientedBoundingBox.halfAxes;\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n        var xMag = Cartesian3.magnitude(xAxis);\n        var yMag = Cartesian3.magnitude(yAxis);\n        var zMag = Cartesian3.magnitude(zAxis);\n\n        // If all the points are on a line return undefined because we can't draw a polygon\n        return !((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0));\n    };\n\n    // call after removeDuplicates\n    CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments = function(positions, centerResult, planeAxis1Result, planeAxis2Result) {\n        \n\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\n        var halfAxes = orientedBoundingBox.halfAxes;\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n        var xMag = Cartesian3.magnitude(xAxis);\n        var yMag = Cartesian3.magnitude(yAxis);\n        var zMag = Cartesian3.magnitude(zAxis);\n        var min = Math.min(xMag, yMag, zMag);\n\n        // If all the points are on a line return undefined because we can't draw a polygon\n        if ((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0)) {\n            return false;\n        }\n\n        var planeAxis1;\n        var planeAxis2;\n\n        if (min === yMag || min === zMag) {\n            planeAxis1 = xAxis;\n        }\n        if (min === xMag) {\n            planeAxis1 = yAxis;\n        } else if (min === zMag) {\n            planeAxis2 = yAxis;\n        }\n        if (min === xMag || min === yMag) {\n            planeAxis2 = zAxis;\n        }\n\n        Cartesian3.normalize(planeAxis1, planeAxis1Result);\n        Cartesian3.normalize(planeAxis2, planeAxis2Result);\n        Cartesian3.clone(orientedBoundingBox.center, centerResult);\n        return true;\n    };\n\n    function projectTo2D(position, center, axis1, axis2, result) {\n        var v = Cartesian3.subtract(position, center, scratchIntersectionPoint);\n        var x = Cartesian3.dot(axis1, v);\n        var y = Cartesian3.dot(axis2, v);\n\n        return Cartesian2.fromElements(x, y, result);\n    }\n\n    CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction = function(center, axis1, axis2) {\n        return function(positions) {\n            var positionResults = new Array(positions.length);\n            for (var i = 0; i < positions.length; i++) {\n                positionResults[i] = projectTo2D(positions[i], center, axis1, axis2);\n            }\n\n            return positionResults;\n        };\n    };\n\n    CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction = function(center, axis1, axis2) {\n        return function(position, result) {\n            return projectTo2D(position, center, axis1, axis2, result);\n        };\n    };\nexport default CoplanarPolygonGeometryLibrary;\n","import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingRectangle from './BoundingRectangle.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CoplanarPolygonGeometryLibrary from './CoplanarPolygonGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchPosition = new Cartesian3();\n    var scratchBR = new BoundingRectangle();\n    var stScratch = new Cartesian2();\n    var textureCoordinatesOrigin = new Cartesian2();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var centerScratch = new Cartesian3();\n    var axis1Scratch = new Cartesian3();\n    var axis2Scratch = new Cartesian3();\n    var quaternionScratch = new Quaternion();\n    var textureMatrixScratch = new Matrix3();\n    var tangentRotationScratch = new Matrix3();\n    var surfaceNormalScratch = new Cartesian3();\n\n    function createGeometryFromPolygon(polygon, vertexFormat, boundingRectangle, stRotation, projectPointTo2D, normal, tangent, bitangent) {\n        var positions = polygon.positions;\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n        /* If polygon is completely unrenderable, just use the first three vertices */\n        if (indices.length < 3) {\n            indices = [0, 1, 2];\n        }\n\n        var newIndices = IndexDatatype.createTypedArray(positions.length, indices.length);\n        newIndices.set(indices);\n\n        var textureMatrix = textureMatrixScratch;\n        if (stRotation !== 0.0) {\n            var rotation = Quaternion.fromAxisAngle(normal, stRotation, quaternionScratch);\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\n                rotation = Quaternion.fromAxisAngle(normal, -stRotation, quaternionScratch);\n                var tangentRotation = Matrix3.fromQuaternion(rotation, tangentRotationScratch);\n\n                tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotation, tangent, tangent), tangent);\n                if (vertexFormat.bitangent) {\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                }\n            }\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n        }\n\n        var stOrigin = textureCoordinatesOrigin;\n        if (vertexFormat.st) {\n            stOrigin.x = boundingRectangle.x;\n            stOrigin.y = boundingRectangle.y;\n        }\n\n        var length = positions.length;\n        var size = length * 3;\n        var flatPositions = new Float64Array(size);\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n        var textureCoordinates = vertexFormat.st ? new Float32Array(length * 2) : undefined;\n\n        var positionIndex = 0;\n        var normalIndex = 0;\n        var bitangentIndex = 0;\n        var tangentIndex = 0;\n        var stIndex = 0;\n\n        for (var i = 0; i < length; i++) {\n            var position = positions[i];\n            flatPositions[positionIndex++] = position.x;\n            flatPositions[positionIndex++] = position.y;\n            flatPositions[positionIndex++] = position.z;\n\n            if (vertexFormat.st) {\n                var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\n                var st = projectPointTo2D(p, stScratch);\n                Cartesian2.subtract(st, stOrigin, st);\n\n                var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n                var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n                textureCoordinates[stIndex++] = stx;\n                textureCoordinates[stIndex++] = sty;\n            }\n\n            if (vertexFormat.normal) {\n                normals[normalIndex++] = normal.x;\n                normals[normalIndex++] = normal.y;\n                normals[normalIndex++] = normal.z;\n            }\n\n            if (vertexFormat.tangent) {\n                tangents[tangentIndex++] = tangent.x;\n                tangents[tangentIndex++] = tangent.y;\n                tangents[tangentIndex++] = tangent.z;\n            }\n\n            if (vertexFormat.bitangent) {\n                bitangents[bitangentIndex++] = bitangent.x;\n                bitangents[bitangentIndex++] = bitangent.y;\n                bitangents[bitangentIndex++] = bitangent.z;\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : flatPositions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : newIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n    }\n\n    /**\n     * A description of a polygon composed of arbitrary coplanar positions.\n     *\n     * @alias CoplanarPolygonGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @example\n     * var polygon = new Cesium.CoplanarPolygonGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *      -90.0, 30.0, 0.0,\n     *      -90.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 0.0\n     *   ])\n     * });\n     * var geometry = Cesium.CoplanarPolygonGeometry.createGeometry(polygon);\n     *\n     * @see CoplanarPolygonGeometry.createGeometry\n     */\n    function CoplanarPolygonGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var polygonHierarchy = options.polygonHierarchy;\n        \n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._polygonHierarchy = polygonHierarchy;\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._workerName = 'createCoplanarPolygonGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + VertexFormat.packedLength + Ellipsoid.packedLength + 2;\n    }\n\n    /**\n     * A description of a coplanar polygon from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @returns {CoplanarPolygonGeometry}\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * @see PolygonGeometry#createGeometry\n     */\n    CoplanarPolygonGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            vertexFormat : options.vertexFormat,\n            stRotation : options.stRotation,\n            ellipsoid : options.ellipsoid\n        };\n        return new CoplanarPolygonGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CoplanarPolygonGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CoplanarPolygonGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        polygonHierarchy : {}\n    };\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n     * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n     */\n    CoplanarPolygonGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var stRotation = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new CoplanarPolygonGeometry(scratchOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._stRotation = stRotation;\n        result.packedLength = packedLength;\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CoplanarPolygonGeometry.createGeometry = function(polygonGeometry) {\n        var vertexFormat = polygonGeometry._vertexFormat;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var stRotation = polygonGeometry._stRotation;\n\n        var outerPositions = polygonHierarchy.positions;\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n        if (outerPositions.length < 3) {\n            return;\n        }\n\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var axis1 = axis1Scratch;\n        var axis2 = axis2Scratch;\n\n        var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(outerPositions, centerScratch, axis1, axis2);\n        if (!validGeometry) {\n            return undefined;\n        }\n\n        normal = Cartesian3.cross(axis1, axis2, normal);\n        normal = Cartesian3.normalize(normal, normal);\n\n        if (!Cartesian3.equalsEpsilon(centerScratch, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\n            var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(centerScratch, surfaceNormalScratch);\n            if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n                normal = Cartesian3.negate(normal, normal);\n                axis1 = Cartesian3.negate(axis1, axis1);\n            }\n        }\n\n        var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(centerScratch, axis1, axis2);\n        var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(centerScratch, axis1, axis2);\n\n        if (vertexFormat.tangent) {\n            tangent = Cartesian3.clone(axis1, tangent);\n        }\n        if (vertexFormat.bitangent) {\n            bitangent = Cartesian3.clone(axis2, bitangent);\n        }\n\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, projectPoints, false);\n        var hierarchy = results.hierarchy;\n        var polygons = results.polygons;\n\n        if (hierarchy.length === 0) {\n            return;\n        }\n        outerPositions = hierarchy[0].outerRing;\n\n        var boundingSphere = BoundingSphere.fromPoints(outerPositions);\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(normal, projectPoint, outerPositions, stRotation, scratchBR);\n\n        var geometries = [];\n        for (var i = 0; i < polygons.length; i++) {\n            var geometryInstance = new GeometryInstance({\n                geometry : createGeometryFromPolygon(polygons[i], vertexFormat, boundingRectangle, stRotation, projectPoint, normal, tangent, bitangent)\n            });\n\n            geometries.push(geometryInstance);\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\n\n        var attributes = geometry.attributes;\n        if (!vertexFormat.position) {\n            delete attributes.position;\n        }\n        return new Geometry({\n            attributes : attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere\n        });\n    };\nexport default CoplanarPolygonGeometry;\n","import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CoplanarPolygonGeometryLibrary from './CoplanarPolygonGeometryLibrary.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\nimport PrimitiveType from './PrimitiveType.js';\n\n    function createGeometryFromPositions(positions){\n        var length = positions.length;\n        var flatPositions = new Float64Array(length * 3);\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\n\n        var positionIndex = 0;\n        var index = 0;\n\n        for (var i = 0; i < length; i++) {\n            var position = positions[i];\n            flatPositions[positionIndex++] = position.x;\n            flatPositions[positionIndex++] = position.y;\n            flatPositions[positionIndex++] = position.z;\n\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n        }\n\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : flatPositions\n            })\n        });\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES\n        });\n    }\n\n    /**\n     * A description of the outline of a polygon composed of arbitrary coplanar positions.\n     *\n     * @alias CoplanarPolygonOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     *\n     * @see CoplanarPolygonOutlineGeometry.createGeometry\n     *\n     * @example\n     * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *      -90.0, 30.0, 0.0,\n     *      -90.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 0.0\n     *   ])\n     * });\n     * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n     */\n    function CoplanarPolygonOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var polygonHierarchy = options.polygonHierarchy;\n        \n\n        this._polygonHierarchy = polygonHierarchy;\n        this._workerName = 'createCoplanarPolygonOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\n    }\n\n    /**\n     * A description of a coplanar polygon outline from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @returns {CoplanarPolygonOutlineGeometry}\n     */\n    CoplanarPolygonOutlineGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            }\n        };\n        return new CoplanarPolygonOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CoplanarPolygonOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchOptions = {\n        polygonHierarchy : {}\n    };\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n     */\n    CoplanarPolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result.packedLength = packedLength;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CoplanarPolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n\n        var outerPositions = polygonHierarchy.positions;\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n        if (outerPositions.length < 3) {\n            return;\n        }\n        var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n        if (!isValid) {\n            return undefined;\n        }\n\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\n\n        if (polygons.length === 0) {\n            return undefined;\n        }\n\n        var geometries = [];\n\n        for (var i = 0; i < polygons.length; i++) {\n            var geometryInstance = new GeometryInstance({\n                geometry : createGeometryFromPositions(polygons[i])\n            });\n            geometries.push(geometryInstance);\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere\n        });\n    };\nexport default CoplanarPolygonOutlineGeometry;\n","import ArcType from './ArcType.js';\nimport arrayFill from './arrayFill.js';\nimport BoundingRectangle from './BoundingRectangle.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport EllipsoidGeodesic from './EllipsoidGeodesic.js';\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix3 from './Matrix3.js';\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport Quaternion from './Quaternion.js';\nimport Rectangle from './Rectangle.js';\nimport VertexFormat from './VertexFormat.js';\nimport WindingOrder from './WindingOrder.js';\n\n    var scratchCarto1 = new Cartographic();\n    var scratchCarto2 = new Cartographic();\n    function adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n        var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n        var height = carto1.height;\n        var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n        p1Carto.height = height;\n        ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n        var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n        p2Carto.height = height - 100;\n        ellipsoid.cartographicToCartesian(p2Carto, p2);\n    }\n\n    var scratchBoundingRectangle = new BoundingRectangle();\n    var scratchPosition = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var p1Scratch = new Cartesian3();\n    var p2Scratch = new Cartesian3();\n    var scratchPerPosNormal = new Cartesian3();\n    var scratchPerPosTangent = new Cartesian3();\n    var scratchPerPosBitangent = new Cartesian3();\n\n    var appendTextureCoordinatesOrigin = new Cartesian2();\n    var appendTextureCoordinatesCartesian2 = new Cartesian2();\n    var appendTextureCoordinatesCartesian3 = new Cartesian3();\n    var appendTextureCoordinatesQuaternion = new Quaternion();\n    var appendTextureCoordinatesMatrix3 = new Matrix3();\n    var tangentMatrixScratch = new Matrix3();\n\n    function computeAttributes(options) {\n        var vertexFormat = options.vertexFormat;\n        var geometry = options.geometry;\n        var shadowVolume = options.shadowVolume;\n        var flatPositions = geometry.attributes.position.values;\n        var length = flatPositions.length;\n        var wall = options.wall;\n        var top = options.top || wall;\n        var bottom = options.bottom || wall;\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n            // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n            // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n            var boundingRectangle = options.boundingRectangle;\n            var tangentPlane = options.tangentPlane;\n            var ellipsoid = options.ellipsoid;\n            var stRotation = options.stRotation;\n            var perPositionHeight = options.perPositionHeight;\n\n            var origin = appendTextureCoordinatesOrigin;\n            origin.x = boundingRectangle.x;\n            origin.y = boundingRectangle.y;\n\n            var textureCoordinates = vertexFormat.st ? new Float32Array(2 * (length / 3)) : undefined;\n            var normals;\n            if (vertexFormat.normal) {\n                if (perPositionHeight && top && !wall) {\n                    normals = geometry.attributes.normal.values;\n                } else {\n                    normals = new Float32Array(length);\n                }\n            }\n            var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\n            var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\n            var extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\n\n            var textureCoordIndex = 0;\n            var attrIndex = 0;\n\n            var normal = scratchNormal;\n            var tangent = scratchTangent;\n            var bitangent = scratchBitangent;\n            var recomputeNormal = true;\n\n            var textureMatrix = appendTextureCoordinatesMatrix3;\n            var tangentRotationMatrix = tangentMatrixScratch;\n            if (stRotation !== 0.0) {\n                var rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, stRotation, appendTextureCoordinatesQuaternion);\n                textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n                rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, -stRotation, appendTextureCoordinatesQuaternion);\n                tangentRotationMatrix = Matrix3.fromQuaternion(rotation, tangentRotationMatrix);\n            } else {\n                textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n                tangentRotationMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\n            }\n\n            var bottomOffset = 0;\n            var bottomOffset2 = 0;\n\n            if (top && bottom) {\n                bottomOffset = length / 2;\n                bottomOffset2 = length / 3;\n\n                length /= 2;\n            }\n\n            for ( var i = 0; i < length; i += 3) {\n                var position = Cartesian3.fromArray(flatPositions, i, appendTextureCoordinatesCartesian3);\n\n                if (vertexFormat.st) {\n                    var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\n                    p = ellipsoid.scaleToGeodeticSurface(p,p);\n                    var st = tangentPlane.projectPointOntoPlane(p, appendTextureCoordinatesCartesian2);\n                    Cartesian2.subtract(st, origin, st);\n\n                    var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n                    var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n                    if (bottom) {\n                        textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\n                        textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\n                    }\n                    if (top) {\n                        textureCoordinates[textureCoordIndex] = stx;\n                        textureCoordinates[textureCoordIndex + 1] = sty;\n                    }\n\n                    textureCoordIndex += 2;\n                }\n\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n                    var attrIndex1 = attrIndex + 1;\n                    var attrIndex2 = attrIndex + 2;\n\n                    if (wall) {\n                        if (i + 3 < length) {\n                            var p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\n\n                            if (recomputeNormal) {\n                                var p2 = Cartesian3.fromArray(flatPositions, i + length, p2Scratch);\n                                if (perPositionHeight) {\n                                    adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\n                                }\n                                Cartesian3.subtract(p1, position, p1);\n                                Cartesian3.subtract(p2, position, p2);\n                                normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\n                                recomputeNormal = false;\n                            }\n\n                            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) { // if we've reached a corner\n                                recomputeNormal = true;\n                            }\n                        }\n\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\n                            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\n                            if (vertexFormat.tangent) {\n                                tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                            }\n                        }\n                    } else {\n                        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\n                            if (perPositionHeight) {\n                                scratchPerPosNormal = Cartesian3.fromArray(normals, attrIndex, scratchPerPosNormal);\n                                scratchPerPosTangent = Cartesian3.cross(Cartesian3.UNIT_Z, scratchPerPosNormal, scratchPerPosTangent);\n                                scratchPerPosTangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, scratchPerPosTangent, scratchPerPosTangent), scratchPerPosTangent);\n                                if (vertexFormat.bitangent) {\n                                    scratchPerPosBitangent = Cartesian3.normalize(Cartesian3.cross(scratchPerPosNormal, scratchPerPosTangent, scratchPerPosBitangent), scratchPerPosBitangent);\n                                }\n                            }\n\n                            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n                            tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent), tangent);\n                            if (vertexFormat.bitangent) {\n                                bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                            }\n                        }\n                    }\n\n                    if (vertexFormat.normal) {\n                        if (options.wall) {\n                            normals[attrIndex + bottomOffset] = normal.x;\n                            normals[attrIndex1 + bottomOffset] = normal.y;\n                            normals[attrIndex2 + bottomOffset] = normal.z;\n                        } else if (bottom){\n                            normals[attrIndex + bottomOffset] = -normal.x;\n                            normals[attrIndex1 + bottomOffset] = -normal.y;\n                            normals[attrIndex2 + bottomOffset] = -normal.z;\n                        }\n\n                        if ((top && !perPositionHeight) || wall) {\n                            normals[attrIndex] = normal.x;\n                            normals[attrIndex1] = normal.y;\n                            normals[attrIndex2] = normal.z;\n                        }\n                    }\n\n                    if (shadowVolume) {\n                        if (wall) {\n                            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n                        }\n                        extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n                        extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n                        extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n                    }\n\n                    if (vertexFormat.tangent) {\n                        if (options.wall) {\n                            tangents[attrIndex + bottomOffset] = tangent.x;\n                            tangents[attrIndex1 + bottomOffset] = tangent.y;\n                            tangents[attrIndex2 + bottomOffset] = tangent.z;\n                        } else if (bottom) {\n                            tangents[attrIndex + bottomOffset] = -tangent.x;\n                            tangents[attrIndex1 + bottomOffset] = -tangent.y;\n                            tangents[attrIndex2 + bottomOffset] = -tangent.z;\n                        }\n\n                        if(top) {\n                            if (perPositionHeight) {\n                                tangents[attrIndex] = scratchPerPosTangent.x;\n                                tangents[attrIndex1] = scratchPerPosTangent.y;\n                                tangents[attrIndex2] = scratchPerPosTangent.z;\n                            } else {\n                                tangents[attrIndex] = tangent.x;\n                                tangents[attrIndex1] = tangent.y;\n                                tangents[attrIndex2] = tangent.z;\n                            }\n                        }\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        if (bottom) {\n                            bitangents[attrIndex + bottomOffset] = bitangent.x;\n                            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n                            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n                        }\n                        if (top) {\n                            if (perPositionHeight) {\n                                bitangents[attrIndex] = scratchPerPosBitangent.x;\n                                bitangents[attrIndex1] = scratchPerPosBitangent.y;\n                                bitangents[attrIndex2] = scratchPerPosBitangent.z;\n                            } else {\n                                bitangents[attrIndex] = bitangent.x;\n                                bitangents[attrIndex1] = bitangent.y;\n                                bitangents[attrIndex2] = bitangent.z;\n                            }\n                        }\n                    }\n                    attrIndex += 3;\n                }\n            }\n\n            if (vertexFormat.st) {\n                geometry.attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : textureCoordinates\n                });\n            }\n\n            if (vertexFormat.normal) {\n                geometry.attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                geometry.attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                geometry.attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            if (shadowVolume) {\n                geometry.attributes.extrudeDirection = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : extrudeNormals\n                });\n            }\n        }\n\n        if (options.extrude && defined(options.offsetAttribute)) {\n            var size = flatPositions.length / 3;\n            var offsetAttribute = new Uint8Array(size);\n\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                if ((top && bottom) || wall) {\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n                } else if (top) {\n                    offsetAttribute = arrayFill(offsetAttribute, 1);\n                }\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            geometry.attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return geometry;\n    }\n\n    var startCartographicScratch = new Cartographic();\n    var endCartographicScratch = new Cartographic();\n    var idlCross = {\n        westOverIDL : 0.0,\n        eastOverIDL : 0.0\n    };\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\n    function computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n        result = defaultValue(result, new Rectangle());\n        if (!defined(positions) || positions.length < 3) {\n            result.west = 0.0;\n            result.north = 0.0;\n            result.south = 0.0;\n            result.east = 0.0;\n            return result;\n        }\n\n        if (arcType === ArcType.RHUMB) {\n            return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n        }\n\n        if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n            ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n        }\n\n        result.west = Number.POSITIVE_INFINITY;\n        result.east = Number.NEGATIVE_INFINITY;\n        result.south = Number.POSITIVE_INFINITY;\n        result.north = Number.NEGATIVE_INFINITY;\n\n        idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n        idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n        var inverseChordLength = 1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n        var positionsLength = positions.length;\n        var endCartographic = ellipsoid.cartesianToCartographic(positions[0], endCartographicScratch);\n        var startCartographic = startCartographicScratch;\n        var swap;\n\n        for (var i = 1; i < positionsLength; i++) {\n            swap = startCartographic;\n            startCartographic = endCartographic;\n            endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n            ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n            interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\n        }\n\n        swap = startCartographic;\n        startCartographic = endCartographic;\n        endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n        ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n        interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\n\n        if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\n            result.west = idlCross.westOverIDL;\n            result.east = idlCross.eastOverIDL;\n\n            if (result.east > CesiumMath.PI) {\n                result.east = result.east - CesiumMath.TWO_PI;\n            }\n            if (result.west > CesiumMath.PI) {\n                result.west = result.west - CesiumMath.TWO_PI;\n            }\n        }\n\n        return result;\n    }\n\n    var interpolatedCartographicScratch = new Cartographic();\n    function interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross) {\n        var segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n        var numPoints = Math.ceil(segmentLength * inverseChordLength);\n        var subsegmentDistance = numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\n        var interpolationDistance = 0.0;\n\n        for (var i = 0; i < numPoints; i++) {\n            var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(interpolationDistance, interpolatedCartographicScratch);\n            interpolationDistance += subsegmentDistance;\n            var longitude = interpolatedCartographic.longitude;\n            var latitude = interpolatedCartographic.latitude;\n\n            result.west = Math.min(result.west, longitude);\n            result.east = Math.max(result.east, longitude);\n            result.south = Math.min(result.south, latitude);\n            result.north = Math.max(result.north, latitude);\n\n            var lonAdjusted = longitude >= 0 ?  longitude : longitude +  CesiumMath.TWO_PI;\n            idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n            idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n        }\n    }\n\n    var createGeometryFromPositionsExtrudedPositions = [];\n\n    function createGeometryFromPositionsExtruded(ellipsoid, polygon, granularity, hierarchy, perPositionHeight, closeTop, closeBottom, vertexFormat, arcType) {\n        var geos = {\n            walls : []\n        };\n        var i;\n\n        if (closeTop || closeBottom) {\n            var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType);\n\n            var edgePoints = topGeo.attributes.position.values;\n            var indices = topGeo.indices;\n            var numPositions;\n            var newIndices;\n\n            if (closeTop && closeBottom) {\n                var topBottomPositions = edgePoints.concat(edgePoints);\n\n                numPositions = topBottomPositions.length / 3;\n\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length * 2);\n                newIndices.set(indices);\n                var ilength = indices.length;\n\n                var length = numPositions / 2;\n\n                for (i = 0; i < ilength; i += 3) {\n                    var i0 = newIndices[i] + length;\n                    var i1 = newIndices[i + 1] + length;\n                    var i2 = newIndices[i + 2] + length;\n\n                    newIndices[i + ilength] = i2;\n                    newIndices[i + 1 + ilength] = i1;\n                    newIndices[i + 2 + ilength] = i0;\n                }\n\n                topGeo.attributes.position.values = topBottomPositions;\n                if (perPositionHeight && vertexFormat.normal) {\n                    var normals = topGeo.attributes.normal.values;\n                    topGeo.attributes.normal.values = new Float32Array(topBottomPositions.length);\n                    topGeo.attributes.normal.values.set(normals);\n                }\n                topGeo.indices = newIndices;\n            } else if (closeBottom) {\n                numPositions = edgePoints.length / 3;\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\n\n                for (i = 0; i < indices.length; i += 3) {\n                    newIndices[i] = indices[i + 2];\n                    newIndices[i + 1] = indices[i + 1];\n                    newIndices[i + 2] = indices[i];\n                }\n\n                topGeo.indices = newIndices;\n            }\n\n            geos.topAndBottom = new GeometryInstance({\n                geometry : topGeo\n            });\n        }\n\n        var outerRing = hierarchy.outerRing;\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(outerRing, createGeometryFromPositionsExtrudedPositions);\n\n        var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (windingOrder === WindingOrder.CLOCKWISE) {\n            outerRing = outerRing.slice().reverse();\n        }\n\n        var wallGeo = PolygonGeometryLibrary.computeWallGeometry(outerRing, ellipsoid, granularity, perPositionHeight, arcType);\n        geos.walls.push(new GeometryInstance({\n            geometry : wallGeo\n        }));\n\n        var holes = hierarchy.holes;\n        for (i = 0; i < holes.length; i++) {\n            var hole = holes[i];\n\n            tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n            positions2D = tangentPlane.projectPointsOntoPlane(hole, createGeometryFromPositionsExtrudedPositions);\n\n            windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n            if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n                hole = hole.slice().reverse();\n            }\n\n            wallGeo = PolygonGeometryLibrary.computeWallGeometry(hole, ellipsoid, granularity, perPositionHeight, arcType);\n            geos.walls.push(new GeometryInstance({\n                geometry : wallGeo\n            }));\n        }\n\n        return geos;\n    }\n\n    /**\n     * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias PolygonGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     *\n     * @see PolygonGeometry#createGeometry\n     * @see PolygonGeometry#fromPositions\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n     *\n     * @example\n     * // 1. create a polygon from points\n     * var polygon = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   )\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * // 2. create a nested polygon with holes\n     * var polygonWithHole = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -109.0, 30.0,\n     *       -95.0, 30.0,\n     *       -95.0, 40.0,\n     *       -109.0, 40.0\n     *     ]),\n     *     [new Cesium.PolygonHierarchy(\n     *       Cesium.Cartesian3.fromDegreesArray([\n     *         -107.0, 31.0,\n     *         -107.0, 39.0,\n     *         -97.0, 39.0,\n     *         -97.0, 31.0\n     *       ]),\n     *       [new Cesium.PolygonHierarchy(\n     *         Cesium.Cartesian3.fromDegreesArray([\n     *           -105.0, 33.0,\n     *           -99.0, 33.0,\n     *           -99.0, 37.0,\n     *           -105.0, 37.0\n     *         ]),\n     *         [new Cesium.PolygonHierarchy(\n     *           Cesium.Cartesian3.fromDegreesArray([\n     *             -103.0, 34.0,\n     *             -101.0, 34.0,\n     *             -101.0, 36.0,\n     *             -103.0, 36.0\n     *           ])\n     *         )]\n     *       )]\n     *     )]\n     *   )\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n     *\n     * // 3. create extruded polygon\n     * var extrudedPolygon = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   ),\n     *   extrudedHeight: 300000\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n     */\n    function PolygonGeometry(options) {\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var stRotation = defaultValue(options.stRotation, 0.0);\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        if (!perPositionHeightExtrude) {\n            var h = Math.max(height, extrudedHeight);\n            extrudedHeight = Math.min(height, extrudedHeight);\n            height = h;\n        }\n\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._granularity = granularity;\n        this._stRotation = stRotation;\n        this._height = height;\n        this._extrudedHeight = extrudedHeight;\n        this._closeTop = defaultValue(options.closeTop, true);\n        this._closeBottom = defaultValue(options.closeBottom, true);\n        this._polygonHierarchy = polygonHierarchy;\n        this._perPositionHeight = perPositionHeight;\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createPolygonGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n        this._rectangle = undefined;\n        this._textureCoordinateRotationPoints = undefined;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + VertexFormat.packedLength + 12;\n    }\n\n    /**\n     * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {Number} [options.height=0.0] The height of the polygon.\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @returns {PolygonGeometry}\n     *\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.PolygonGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * @see PolygonGeometry#createGeometry\n     */\n    PolygonGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            height : options.height,\n            extrudedHeight : options.extrudedHeight,\n            vertexFormat : options.vertexFormat,\n            stRotation : options.stRotation,\n            ellipsoid : options.ellipsoid,\n            granularity : options.granularity,\n            perPositionHeight : options.perPositionHeight,\n            closeTop : options.closeTop,\n            closeBottom : options.closeBottom,\n            offsetAttribute : options.offsetAttribute,\n            arcType : options.arcType\n        };\n        return new PolygonGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolygonGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolygonGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n        array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n        array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n        array[startingIndex++] = value._arcType;\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n\n    //Only used to avoid inability to default construct.\n    var dummyOptions = {\n        polygonHierarchy : {}\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolygonGeometry} [result] The object into which to store the result.\n     */\n    PolygonGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n        var perPositionHeight = array[startingIndex++] === 1.0;\n        var closeTop = array[startingIndex++] === 1.0;\n        var closeBottom = array[startingIndex++] === 1.0;\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex++];\n        var arcType = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new PolygonGeometry(dummyOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._granularity = granularity;\n        result._stRotation = stRotation;\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\n        result._perPositionHeight = perPositionHeight;\n        result._closeTop = closeTop;\n        result._closeBottom = closeBottom;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n        result._arcType = arcType;\n        result.packedLength = packedLength;\n        return result;\n    };\n\n    /**\n     * Returns the bounding rectangle given the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Rectangle} [result] An object in which to store the result.\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    PolygonGeometry.computeRectangle = function(options, result) {\n        \n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        return computeRectangle(polygonHierarchy.positions, ellipsoid, arcType, granularity, result);\n    };\n\n    /**\n     * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolygonGeometry.createGeometry = function(polygonGeometry) {\n        var vertexFormat = polygonGeometry._vertexFormat;\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var granularity = polygonGeometry._granularity;\n        var stRotation = polygonGeometry._stRotation;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var perPositionHeight = polygonGeometry._perPositionHeight;\n        var closeTop = polygonGeometry._closeTop;\n        var closeBottom = polygonGeometry._closeBottom;\n        var arcType = polygonGeometry._arcType;\n\n        var outerPositions = polygonHierarchy.positions;\n        if (outerPositions.length < 3) {\n            return;\n        }\n\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerPositions, ellipsoid);\n\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, tangentPlane.projectPointsOntoPlane.bind(tangentPlane), !perPositionHeight, ellipsoid);\n\n        var hierarchy = results.hierarchy;\n        var polygons = results.polygons;\n\n        if (hierarchy.length === 0) {\n            return;\n        }\n\n        outerPositions = hierarchy[0].outerRing;\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(tangentPlane.plane.normal, tangentPlane.projectPointOntoPlane.bind(tangentPlane), outerPositions, stRotation, scratchBoundingRectangle);\n\n        var geometries = [];\n\n        var height = polygonGeometry._height;\n        var extrudedHeight = polygonGeometry._extrudedHeight;\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var options = {\n            perPositionHeight: perPositionHeight,\n            vertexFormat: vertexFormat,\n            geometry: undefined,\n            tangentPlane: tangentPlane,\n            boundingRectangle: boundingRectangle,\n            ellipsoid: ellipsoid,\n            stRotation: stRotation,\n            bottom: false,\n            top: true,\n            wall: false,\n            extrude: false,\n            arcType: arcType\n        };\n\n        var i;\n\n        if (extrude) {\n            options.extrude = true;\n            options.top = closeTop;\n            options.bottom = closeBottom;\n            options.shadowVolume = polygonGeometry._shadowVolume;\n            options.offsetAttribute = polygonGeometry._offsetAttribute;\n            for (i = 0; i < polygons.length; i++) {\n                var splitGeometry = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], granularity, hierarchy[i], perPositionHeight, closeTop, closeBottom, vertexFormat, arcType);\n\n                var topAndBottom;\n                if (closeTop && closeBottom) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(topAndBottom.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                } else if (closeTop) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n                    options.geometry = topAndBottom.geometry;\n                } else if (closeBottom) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, extrudedHeight, ellipsoid, true);\n                    options.geometry = topAndBottom.geometry;\n                }\n                if (closeTop || closeBottom) {\n                    options.wall = false;\n                    topAndBottom.geometry = computeAttributes(options);\n                    geometries.push(topAndBottom);\n                }\n\n                var walls = splitGeometry.walls;\n                options.wall = true;\n                for ( var k = 0; k < walls.length; k++) {\n                    var wall = walls[k];\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(wall.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                    wall.geometry = computeAttributes(options);\n                    geometries.push(wall);\n                }\n            }\n        } else {\n            for (i = 0; i < polygons.length; i++) {\n                var geometryInstance = new GeometryInstance({\n                    geometry : PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygons[i], granularity, perPositionHeight, vertexFormat, arcType)\n                });\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n                options.geometry = geometryInstance.geometry;\n                geometryInstance.geometry = computeAttributes(options);\n\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var length = geometryInstance.geometry.attributes.position.values.length;\n                    var applyOffset = new Uint8Array(length / 3);\n                    var offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                    arrayFill(applyOffset, offsetValue);\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values: applyOffset\n                    });\n                }\n\n                geometries.push(geometryInstance);\n            }\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\n\n        var attributes = geometry.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\n\n        if (!vertexFormat.position) {\n            delete attributes.position;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere,\n            offsetAttribute : polygonGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    PolygonGeometry.createShadowVolume = function(polygonGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = polygonGeometry._granularity;\n        var ellipsoid = polygonGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new PolygonGeometry({\n            polygonHierarchy : polygonGeometry._polygonHierarchy,\n            ellipsoid : ellipsoid,\n            stRotation : polygonGeometry._stRotation,\n            granularity : granularity,\n            perPositionHeight : false,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true,\n            arcType : polygonGeometry._arcType\n        });\n    };\n\n    function textureCoordinateRotationPoints(polygonGeometry) {\n        var stRotation = -polygonGeometry._stRotation;\n        if (stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var positions = polygonGeometry._polygonHierarchy.positions;\n        var boundingRectangle = polygonGeometry.rectangle;\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\n    }\n\n    Object.defineProperties(PolygonGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    var positions = this._polygonHierarchy.positions;\n                    this._rectangle = computeRectangle(positions, this._ellipsoid, this._arcType, this._granularity);\n                }\n\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\nexport default PolygonGeometry;\n","import ArcType from './ArcType.js';\nimport arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolygonGeometryLibrary from './PolygonGeometryLibrary.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport WindingOrder from './WindingOrder.js';\n    var createGeometryFromPositionsPositions = [];\n    var createGeometryFromPositionsSubdivided = [];\n\n    function createGeometryFromPositions(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\n\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n            positions2D.reverse();\n            positions = positions.slice().reverse();\n        }\n\n        var subdividedPositions;\n        var i;\n\n        var length = positions.length;\n        var index = 0;\n\n        if (!perPositionHeight) {\n            var numVertices = 0;\n            if (arcType === ArcType.GEODESIC) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\n                }\n            } else if (arcType === ArcType.RHUMB) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\n                }\n            }\n            subdividedPositions = new Float64Array(numVertices * 3);\n            for (i = 0; i < length; i++) {\n                var tempPositions;\n                if (arcType === ArcType.GEODESIC) {\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                } else if (arcType === ArcType.RHUMB) {\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                }\n                var tempPositionsLength = tempPositions.length;\n                for (var j = 0; j < tempPositionsLength; ++j) {\n                    subdividedPositions[index++] = tempPositions[j];\n                }\n            }\n        } else {\n            subdividedPositions = new Float64Array(length * 2 * 3);\n            for (i = 0; i < length; i++) {\n                var p0 = positions[i];\n                var p1 = positions[(i + 1) % length];\n                subdividedPositions[index++] = p0.x;\n                subdividedPositions[index++] = p0.y;\n                subdividedPositions[index++] = p0.z;\n                subdividedPositions[index++] = p1.x;\n                subdividedPositions[index++] = p1.y;\n                subdividedPositions[index++] = p1.z;\n            }\n        }\n\n        length = subdividedPositions.length / 3;\n        var indicesSize = length * 2;\n        var indices = IndexDatatype.createTypedArray(length, indicesSize);\n        index = 0;\n        for (i = 0; i < length - 1; i++) {\n            indices[index++] = i;\n            indices[index++] = i + 1;\n        }\n        indices[index++] = length - 1;\n        indices[index++] = 0;\n\n        return new GeometryInstance({\n            geometry : new Geometry({\n                attributes : new GeometryAttributes({\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.DOUBLE,\n                        componentsPerAttribute : 3,\n                        values : subdividedPositions\n                    })\n                }),\n                indices : indices,\n                primitiveType : PrimitiveType.LINES\n            })\n        });\n    }\n\n    function createGeometryFromPositionsExtruded(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\n\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n            positions2D.reverse();\n            positions = positions.slice().reverse();\n        }\n\n        var subdividedPositions;\n        var i;\n\n        var length = positions.length;\n        var corners = new Array(length);\n        var index = 0;\n\n        if (!perPositionHeight) {\n            var numVertices = 0;\n            if (arcType === ArcType.GEODESIC) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\n                }\n            } else if (arcType === ArcType.RHUMB) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\n                }\n            }\n\n            subdividedPositions = new Float64Array(numVertices * 3 * 2);\n            for (i = 0; i < length; ++i) {\n                corners[i] = index / 3;\n                var tempPositions;\n                if (arcType === ArcType.GEODESIC) {\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                } else if (arcType === ArcType.RHUMB) {\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                }\n                var tempPositionsLength = tempPositions.length;\n                for (var j = 0; j < tempPositionsLength; ++j) {\n                    subdividedPositions[index++] = tempPositions[j];\n                }\n            }\n        } else {\n            subdividedPositions = new Float64Array(length * 2 * 3 * 2);\n            for (i = 0; i < length; ++i) {\n                corners[i] = index / 3;\n                var p0 = positions[i];\n                var p1 = positions[(i + 1) % length];\n\n                subdividedPositions[index++] = p0.x;\n                subdividedPositions[index++] = p0.y;\n                subdividedPositions[index++] = p0.z;\n                subdividedPositions[index++] = p1.x;\n                subdividedPositions[index++] = p1.y;\n                subdividedPositions[index++] = p1.z;\n            }\n        }\n\n        length = subdividedPositions.length / (3 * 2);\n        var cornersLength = corners.length;\n\n        var indicesSize = ((length * 2) + cornersLength) * 2;\n        var indices = IndexDatatype.createTypedArray(length + cornersLength, indicesSize);\n\n        index = 0;\n        for (i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n            indices[index++] = i + length;\n            indices[index++] = ((i + 1) % length) + length;\n        }\n\n        for (i = 0; i < cornersLength; i++) {\n            var corner = corners[i];\n            indices[index++] = corner;\n            indices[index++] = corner + length;\n        }\n\n        return new GeometryInstance({\n            geometry : new Geometry({\n                attributes : new GeometryAttributes({\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.DOUBLE,\n                        componentsPerAttribute : 3,\n                        values : subdividedPositions\n                    })\n                }),\n                indices : indices,\n                primitiveType : PrimitiveType.LINES\n            })\n        });\n    }\n\n    /**\n     * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\n     *\n     * @alias PolygonOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     *\n     * @see PolygonOutlineGeometry#createGeometry\n     * @see PolygonOutlineGeometry#fromPositions\n     *\n     * @example\n     * // 1. create a polygon outline from points\n     * var polygon = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   )\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n     *\n     * // 2. create a nested polygon with holes outline\n     * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -109.0, 30.0,\n     *       -95.0, 30.0,\n     *       -95.0, 40.0,\n     *       -109.0, 40.0\n     *     ]),\n     *     [new Cesium.PolygonHierarchy(\n     *       Cesium.Cartesian3.fromDegreesArray([\n     *         -107.0, 31.0,\n     *         -107.0, 39.0,\n     *         -97.0, 39.0,\n     *         -97.0, 31.0\n     *       ]),\n     *       [new Cesium.PolygonHierarchy(\n     *         Cesium.Cartesian3.fromDegreesArray([\n     *           -105.0, 33.0,\n     *           -99.0, 33.0,\n     *           -99.0, 37.0,\n     *           -105.0, 37.0\n     *         ]),\n     *         [new Cesium.PolygonHierarchy(\n     *           Cesium.Cartesian3.fromDegreesArray([\n     *             -103.0, 34.0,\n     *             -101.0, 34.0,\n     *             -101.0, 36.0,\n     *             -103.0, 36.0\n     *           ])\n     *         )]\n     *       )]\n     *     )]\n     *   )\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\n     *\n     * // 3. create extruded polygon outline\n     * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   ),\n     *   extrudedHeight: 300000\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\n     */\n    function PolygonOutlineGeometry(options) {\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        if (!perPositionHeightExtrude) {\n            var h = Math.max(height, extrudedHeight);\n            extrudedHeight = Math.min(height, extrudedHeight);\n            height = h;\n        }\n\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._granularity = granularity;\n        this._height = height;\n        this._extrudedHeight = extrudedHeight;\n        this._arcType = arcType;\n        this._polygonHierarchy = polygonHierarchy;\n        this._perPositionHeight = perPositionHeight;\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createPolygonOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + 8;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolygonOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolygonOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var dummyOptions = {\n        polygonHierarchy : {}\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\n     */\n    PolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n        var perPositionHeight = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var offsetAttribute = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new PolygonOutlineGeometry(dummyOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._granularity = granularity;\n        result._perPositionHeight = perPositionHeight;\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\n        result._arcType = arcType;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n        result.packedLength = packedLength;\n\n        return result;\n    };\n\n    /**\n     * A description of a polygon outline from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {Number} [options.height=0.0] The height of the polygon.\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link LinkType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @returns {PolygonOutlineGeometry}\n     *\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n     *\n     * @see PolygonOutlineGeometry#createGeometry\n     */\n    PolygonOutlineGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            height : options.height,\n            extrudedHeight : options.extrudedHeight,\n            ellipsoid : options.ellipsoid,\n            granularity : options.granularity,\n            perPositionHeight : options.perPositionHeight,\n            arcType: options.arcType,\n            offsetAttribute : options.offsetAttribute\n        };\n        return new PolygonOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var granularity = polygonGeometry._granularity;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var perPositionHeight = polygonGeometry._perPositionHeight;\n        var arcType = polygonGeometry._arcType;\n\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, !perPositionHeight, ellipsoid);\n\n        if (polygons.length === 0) {\n            return undefined;\n        }\n\n        var geometryInstance;\n        var geometries = [];\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n\n        var height = polygonGeometry._height;\n        var extrudedHeight = polygonGeometry._extrudedHeight;\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n        var offsetValue;\n        var i;\n        if (extrude) {\n            for (i = 0; i < polygons.length; i++) {\n                geometryInstance = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\n                geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(geometryInstance.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var size = geometryInstance.geometry.attributes.position.values.length / 3;\n                    var offsetAttribute = new Uint8Array(size);\n                    if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\n                        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n                    } else {\n                        offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                        offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n                    }\n\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values : offsetAttribute\n                    });\n                }\n                geometries.push(geometryInstance);\n            }\n        } else {\n            for (i = 0; i < polygons.length; i++) {\n                geometryInstance = createGeometryFromPositions(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var length = geometryInstance.geometry.attributes.position.values.length;\n                    var applyOffset = new Uint8Array(length / 3);\n                    offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                    arrayFill(applyOffset, offsetValue);\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values: applyOffset\n                    });\n                }\n\n                geometries.push(geometryInstance);\n            }\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        var boundingSphere = BoundingSphere.fromVertices(geometry.attributes.position.values);\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere,\n            offsetAttribute : polygonGeometry._offsetAttribute\n        });\n    };\nexport default PolygonOutlineGeometry;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport ArcType from '../Core/ArcType.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport CoplanarPolygonGeometry from '../Core/CoplanarPolygonGeometry.js';\nimport CoplanarPolygonOutlineGeometry from '../Core/CoplanarPolygonOutlineGeometry.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport EllipsoidTangentPlane from '../Core/EllipsoidTangentPlane.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\nimport PolygonGeometry from '../Core/PolygonGeometry.js';\nimport PolygonOutlineGeometry from '../Core/PolygonOutlineGeometry.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport GroundGeometryUpdater from './GroundGeometryUpdater.js';\nimport Property from './Property.js';\n\n    var heightAndPerPositionHeightWarning = 'Entity polygons cannot have both height and perPositionHeight.  height will be ignored';\n    var heightReferenceAndPerPositionHeightWarning = 'heightReference is not supported for entity polygons with perPositionHeight. heightReference will be ignored';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n    var scratch2DPositions = [];\n    var cart2Scratch = new Cartesian2();\n\n    function PolygonGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.polygonHierarchy = undefined;\n        this.perPositionHeight = undefined;\n        this.closeTop = undefined;\n        this.closeBottom = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.offsetAttribute = undefined;\n        this.arcType = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polygons.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolygonGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolygonGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PolygonGeometryOptions(entity),\n            geometryPropertyName : 'polygon',\n            observedPropertyNames : ['availability', 'polygon']\n        });\n\n        this._onEntityPropertyChanged(entity, 'polygon', entity.polygon, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PolygonGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        PolygonGeometryUpdater.prototype.constructor = PolygonGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolygonGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var options = this._options;\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        var geometry;\n        if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n            geometry = new CoplanarPolygonGeometry(options);\n        } else {\n            geometry = new PolygonGeometry(options);\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : geometry,\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolygonGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var options = this._options;\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        var geometry;\n        if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n            geometry = new CoplanarPolygonOutlineGeometry(options);\n        } else {\n            geometry = new PolygonOutlineGeometry(options);\n        }\n        return new GeometryInstance({\n            id : entity,\n            geometry : geometry,\n            attributes : attributes\n        });\n    };\n\n    PolygonGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var hierarchy = Property.getValueOrUndefined(this._entity.polygon.hierarchy, time);\n        if (!defined(hierarchy)) {\n            return;\n        }\n        var positions = hierarchy.positions;\n        if (positions.length === 0) {\n            return;\n        }\n        var ellipsoid = this._scene.mapProjection.ellipsoid;\n\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, scratch2DPositions);\n\n        var length = positions2D.length;\n        var area = 0;\n        var j = length - 1;\n        var centroid2D = new Cartesian2();\n        for (var i = 0; i < length; j = i++) {\n            var p1 = positions2D[i];\n            var p2 = positions2D[j];\n            var f = p1.x * p2.y - p2.x * p1.y;\n\n            var sum = Cartesian2.add(p1, p2, cart2Scratch);\n            sum = Cartesian2.multiplyByScalar(sum, f, sum);\n            centroid2D = Cartesian2.add(centroid2D, sum, centroid2D);\n\n            area += f;\n        }\n\n        var a = 1.0 / (area * 3.0);\n        centroid2D = Cartesian2.multiplyByScalar(centroid2D, a, centroid2D);\n        return tangentPlane.projectPointOntoEllipsoid(centroid2D, result);\n    };\n\n    PolygonGeometryUpdater.prototype._isHidden = function(entity, polygon) {\n        return !defined(polygon.hierarchy) || GeometryUpdater.prototype._isHidden.call(this, entity, polygon);\n    };\n\n    PolygonGeometryUpdater.prototype._isOnTerrain = function(entity, polygon) {\n        var onTerrain = GroundGeometryUpdater.prototype._isOnTerrain.call(this, entity, polygon);\n        var perPositionHeightProperty = polygon.perPositionHeight;\n        var perPositionHeightEnabled = defined(perPositionHeightProperty) && (perPositionHeightProperty.isConstant ? perPositionHeightProperty.getValue(Iso8601.MINIMUM_VALUE) : true);\n        return onTerrain && !perPositionHeightEnabled;\n    };\n\n    PolygonGeometryUpdater.prototype._isDynamic = function(entity, polygon) {\n        return !polygon.hierarchy.isConstant || //\n               !Property.isConstant(polygon.height) || //\n               !Property.isConstant(polygon.extrudedHeight) || //\n               !Property.isConstant(polygon.granularity) || //\n               !Property.isConstant(polygon.stRotation) || //\n               !Property.isConstant(polygon.outlineWidth) || //\n               !Property.isConstant(polygon.perPositionHeight) || //\n               !Property.isConstant(polygon.closeTop) || //\n               !Property.isConstant(polygon.closeBottom) || //\n               !Property.isConstant(polygon.zIndex) || //\n               !Property.isConstant(polygon.arcType) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty));\n    };\n\n    PolygonGeometryUpdater.prototype._setStaticOptions = function(entity, polygon) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n\n        var hierarchyValue = polygon.hierarchy.getValue(Iso8601.MINIMUM_VALUE);\n        var heightValue = Property.getValueOrUndefined(polygon.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var perPositionHeightValue = Property.getValueOrDefault(polygon.perPositionHeight, Iso8601.MINIMUM_VALUE, false);\n\n        heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        var offsetAttribute;\n        if (perPositionHeightValue) {\n            if (defined(heightValue)) {\n                heightValue = undefined;\n                oneTimeWarning(heightAndPerPositionHeightWarning);\n            }\n            if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n                heightValue = undefined;\n                oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n            }\n        } else {\n            if (defined(extrudedHeightValue) && !defined(heightValue)) {\n                heightValue = 0;\n            }\n            offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        }\n\n        options.polygonHierarchy = hierarchyValue;\n        options.granularity = Property.getValueOrUndefined(polygon.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(polygon.stRotation, Iso8601.MINIMUM_VALUE);\n        options.perPositionHeight = perPositionHeightValue;\n        options.closeTop = Property.getValueOrDefault(polygon.closeTop, Iso8601.MINIMUM_VALUE, true);\n        options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, Iso8601.MINIMUM_VALUE, true);\n        options.offsetAttribute = offsetAttribute;\n        options.height = heightValue;\n        options.arcType = Property.getValueOrDefault(polygon.arcType, Iso8601.MINIMUM_VALUE, ArcType.GEODESIC);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    PolygonGeometryUpdater.prototype._getIsClosed = function(options) {\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var isExtruded = defined(extrudedHeight) && extrudedHeight !== height;\n        return !options.perPositionHeight && (!isExtruded && height === 0 || (isExtruded && options.closeTop && options.closeBottom));\n    };\n\n    PolygonGeometryUpdater.DynamicGeometryUpdater = DyanmicPolygonGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DyanmicPolygonGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DyanmicPolygonGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DyanmicPolygonGeometryUpdater.prototype.constructor = DyanmicPolygonGeometryUpdater;\n    }\n\n    DyanmicPolygonGeometryUpdater.prototype._isHidden = function(entity, polygon, time) {\n        return !defined(this._options.polygonHierarchy) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polygon, time);\n    };\n\n    DyanmicPolygonGeometryUpdater.prototype._setOptions = function(entity, polygon, time) {\n        var options = this._options;\n\n        options.polygonHierarchy = Property.getValueOrUndefined(polygon.hierarchy, time);\n\n        var heightValue = Property.getValueOrUndefined(polygon.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, time, HeightReference.NONE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, time);\n        var perPositionHeightValue = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n\n        heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, extrudedHeightReferenceValue);\n\n        var offsetAttribute;\n        if (perPositionHeightValue) {\n            if (defined(heightValue)) {\n                heightValue = undefined;\n                oneTimeWarning(heightAndPerPositionHeightWarning);\n            }\n            if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n                heightValue = undefined;\n                oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n            }\n        } else {\n            if (defined(extrudedHeightValue) && !defined(heightValue)) {\n                heightValue = 0;\n            }\n\n            offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        }\n\n        options.granularity = Property.getValueOrUndefined(polygon.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(polygon.stRotation, time);\n        options.perPositionHeight = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n        options.closeTop = Property.getValueOrDefault(polygon.closeTop, time, true);\n        options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, time, true);\n        options.offsetAttribute = offsetAttribute;\n        options.height = heightValue;\n        options.arcType = Property.getValueOrDefault(polygon.arcType, time, ArcType.GEODESIC);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\nexport default PolygonGeometryUpdater;\n","import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingRectangle from './BoundingRectangle.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport oneTimeWarning from './oneTimeWarning.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\nimport WindingOrder from './WindingOrder.js';\n\n    function computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\n        var attributes = new GeometryAttributes();\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : combinedPositions\n            });\n        }\n        var shapeLength = shape.length;\n        var vertexCount = combinedPositions.length / 3;\n        var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n        var firstEndIndices = PolygonPipeline.triangulate(shape);\n\n        var indicesCount = (length - 1) * (shapeLength) * 6 + firstEndIndices.length * 2;\n        var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n        var i, j;\n        var ll, ul, ur, lr;\n        var offset = shapeLength * 2;\n        var index = 0;\n        for (i = 0; i < length - 1; i++) {\n            for (j = 0; j < shapeLength - 1; j++) {\n                ll = j * 2 + i * shapeLength * 2;\n                lr = ll + offset;\n                ul = ll + 1;\n                ur = ul + offset;\n\n                indices[index++] = ul;\n                indices[index++] = ll;\n                indices[index++] = ur;\n                indices[index++] = ur;\n                indices[index++] = ll;\n                indices[index++] = lr;\n            }\n            ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n            ul = ll + 1;\n            ur = ul + offset;\n            lr = ll + offset;\n\n            indices[index++] = ul;\n            indices[index++] = ll;\n            indices[index++] = ur;\n            indices[index++] = ur;\n            indices[index++] = ll;\n            indices[index++] = lr;\n        }\n\n        if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) { // st required for tangent/bitangent calculation\n            var st = new Float32Array(vertexCount * 2);\n            var lengthSt = 1 / (length - 1);\n            var heightSt = 1 / (boundingRectangle.height);\n            var heightOffset = boundingRectangle.height / 2;\n            var s, t;\n            var stindex = 0;\n            for (i = 0; i < length; i++) {\n                s = i * lengthSt;\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n                for (j = 1; j < shapeLength; j++) {\n                    t = heightSt * (shape[j].y + heightOffset);\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                }\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = 0;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = (length - 1) * lengthSt;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : new Float32Array(st)\n            });\n        }\n\n        var endOffset = vertexCount - shapeLength * 2;\n        for (i = 0; i < firstEndIndices.length; i += 3) {\n            var v0 = firstEndIndices[i] + endOffset;\n            var v1 = firstEndIndices[i + 1] + endOffset;\n            var v2 = firstEndIndices[i + 2] + endOffset;\n\n            indices[index++] = v0;\n            indices[index++] = v1;\n            indices[index++] = v2;\n            indices[index++] = v2 + shapeLength;\n            indices[index++] = v1 + shapeLength;\n            indices[index++] = v0 + shapeLength;\n        }\n\n        var geometry = new Geometry({\n            attributes : attributes,\n            indices : indices,\n            boundingSphere : BoundingSphere.fromVertices(combinedPositions),\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        if (vertexFormat.normal) {\n            geometry = GeometryPipeline.computeNormal(geometry);\n        }\n\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n            try {\n                geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n            } catch (e) {\n                oneTimeWarning('polyline-volume-tangent-bitangent', 'Unable to compute tangents and bitangents for polyline volume geometry');\n                //TODO https://github.com/CesiumGS/cesium/issues/3609\n            }\n\n            if (!vertexFormat.tangent) {\n                geometry.attributes.tangent = undefined;\n            }\n            if (!vertexFormat.bitangent) {\n                geometry.attributes.bitangent = undefined;\n            }\n            if (!vertexFormat.st) {\n                geometry.attributes.st = undefined;\n            }\n        }\n\n        return geometry;\n    }\n\n    /**\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n     *\n     * @alias PolylineVolumeGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\n     * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see PolylineVolumeGeometry#createGeometry\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n     *\n     * @example\n     * function computeCircle(radius) {\n     *   var positions = [];\n     *   for (var i = 0; i < 360; i++) {\n     *     var radians = Cesium.Math.toRadians(i);\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n     *   }\n     *   return positions;\n     * }\n     *\n     * var volume = new Cesium.PolylineVolumeGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0\n     *   ]),\n     *   shapePositions : computeCircle(100000.0)\n     * });\n     */\n    function PolylineVolumeGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.polylinePositions;\n        var shape = options.shapePositions;\n\n        \n\n        this._positions = positions;\n        this._shape = shape;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._workerName = 'createPolylineVolumeGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineVolumeGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineVolumeGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var shape = value._shape;\n        length = shape.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            Cartesian2.pack(shape[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        polylinePositions : undefined,\n        shapePositions : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        cornerType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n     * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n     */\n    PolylineVolumeGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var shape = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            shape[i] = Cartesian2.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.polylinePositions = positions;\n            scratchOptions.shapePositions = shape;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            return new PolylineVolumeGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._shape = shape;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var brScratch = new BoundingRectangle();\n\n    /**\n     * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineVolumeGeometry.createGeometry = function(polylineVolumeGeometry) {\n        var positions = polylineVolumeGeometry._positions;\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var shape2D = polylineVolumeGeometry._shape;\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\n            return undefined;\n        }\n\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n            shape2D.reverse();\n        }\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\n        return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\n    };\nexport default PolylineVolumeGeometry;\n","import arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingRectangle from './BoundingRectangle.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport CornerType from './CornerType.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PolylineVolumeGeometryLibrary from './PolylineVolumeGeometryLibrary.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport WindingOrder from './WindingOrder.js';\n\n    function computeAttributes(positions, shape) {\n        var attributes = new GeometryAttributes();\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        var shapeLength = shape.length;\n        var vertexCount = attributes.position.values.length / 3;\n        var positionLength = positions.length / 3;\n        var shapeCount = positionLength / shapeLength;\n        var indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\n        var i, j;\n        var index = 0;\n        i = 0;\n        var offset = i * shapeLength;\n        for (j = 0; j < shapeLength - 1; j++) {\n            indices[index++] = j + offset;\n            indices[index++] = j + offset + 1;\n        }\n        indices[index++] = shapeLength - 1 + offset;\n        indices[index++] = offset;\n\n        i = shapeCount - 1;\n        offset = i * shapeLength;\n        for (j = 0; j < shapeLength - 1; j++) {\n            indices[index++] = j + offset;\n            indices[index++] = j + offset + 1;\n        }\n        indices[index++] = shapeLength - 1 + offset;\n        indices[index++] = offset;\n\n        for (i = 0; i < shapeCount - 1; i++) {\n            var firstOffset = shapeLength * i;\n            var secondOffset = firstOffset + shapeLength;\n            for (j = 0; j < shapeLength; j++) {\n                indices[index++] = j + firstOffset;\n                indices[index++] = j + secondOffset;\n            }\n        }\n\n        var geometry = new Geometry({\n            attributes : attributes,\n            indices : IndexDatatype.createTypedArray(vertexCount, indices),\n            boundingSphere : BoundingSphere.fromVertices(positions),\n            primitiveType : PrimitiveType.LINES\n        });\n\n        return geometry;\n    }\n\n    /**\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n     *\n     * @alias PolylineVolumeOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n     * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see PolylineVolumeOutlineGeometry#createGeometry\n     *\n     * @example\n     * function computeCircle(radius) {\n     *   var positions = [];\n     *   for (var i = 0; i < 360; i++) {\n     *     var radians = Cesium.Math.toRadians(i);\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n     *   }\n     *   return positions;\n     * }\n     *\n     * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0\n     *   ]),\n     *   shapePositions : computeCircle(100000.0)\n     * });\n     */\n    function PolylineVolumeOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.polylinePositions;\n        var shape = options.shapePositions;\n\n        \n\n        this._positions = positions;\n        this._shape = shape;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._workerName = 'createPolylineVolumeOutlineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineVolumeOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var shape = value._shape;\n        length = shape.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            Cartesian2.pack(shape[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        polylinePositions : undefined,\n        shapePositions : undefined,\n        ellipsoid : scratchEllipsoid,\n        height : undefined,\n        cornerType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n     */\n    PolylineVolumeOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var shape = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            shape[i] = Cartesian2.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.polylinePositions = positions;\n            scratchOptions.shapePositions = shape;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            return new PolylineVolumeOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._shape = shape;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var brScratch = new BoundingRectangle();\n\n    /**\n     * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineVolumeOutlineGeometry.createGeometry = function(polylineVolumeOutlineGeometry) {\n        var positions = polylineVolumeOutlineGeometry._positions;\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var shape2D = polylineVolumeOutlineGeometry._shape;\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\n            return undefined;\n        }\n\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n            shape2D.reverse();\n        }\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\n        return computeAttributes(computedPositions, shape2D);\n    };\nexport default PolylineVolumeOutlineGeometry;\n","import Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport PolylineVolumeGeometry from '../Core/PolylineVolumeGeometry.js';\nimport PolylineVolumeOutlineGeometry from '../Core/PolylineVolumeOutlineGeometry.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n\n    function PolylineVolumeGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.polylinePositions = undefined;\n        this.shapePositions = undefined;\n        this.cornerType = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polyline volumes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolylineVolumeGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolylineVolumeGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PolylineVolumeGeometryOptions(entity),\n            geometryPropertyName : 'polylineVolume',\n            observedPropertyNames : ['availability', 'polylineVolume']\n        });\n\n        this._onEntityPropertyChanged(entity, 'polylineVolume', entity.polylineVolume, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PolylineVolumeGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineVolumeGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineVolumeOutlineGeometry(this._options),\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._isHidden = function(entity, polylineVolume) {\n        return !defined(polylineVolume.positions) || !defined(polylineVolume.shape) || GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume);\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._isDynamic = function(entity, polylineVolume) {\n        return !polylineVolume.positions.isConstant || //\n               !polylineVolume.shape.isConstant || //\n               !Property.isConstant(polylineVolume.granularity) || //\n               !Property.isConstant(polylineVolume.outlineWidth) || //\n               !Property.isConstant(polylineVolume.cornerType);\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._setStaticOptions = function(entity, polylineVolume) {\n        var granularity = polylineVolume.granularity;\n        var cornerType = polylineVolume.cornerType;\n\n        var options = this._options;\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.polylinePositions = polylineVolume.positions.getValue(Iso8601.MINIMUM_VALUE, options.polylinePositions);\n        options.shapePositions = polylineVolume.shape.getValue(Iso8601.MINIMUM_VALUE, options.shape);\n        options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n        options.cornerType = defined(cornerType) ? cornerType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n    };\n\n    PolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicPolylineVolumeGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n    }\n\n    DynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function(entity, polylineVolume, time) {\n        var options = this._options;\n        return !defined(options.polylinePositions) || !defined(options.shapePositions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume, time);\n    };\n\n    DynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function(entity, polylineVolume, time) {\n        var options = this._options;\n        options.polylinePositions = Property.getValueOrUndefined(polylineVolume.positions, time, options.polylinePositions);\n        options.shapePositions = Property.getValueOrUndefined(polylineVolume.shape, time);\n        options.granularity = Property.getValueOrUndefined(polylineVolume.granularity, time);\n        options.cornerType = Property.getValueOrUndefined(polylineVolume.cornerType, time);\n    };\nexport default PolylineVolumeGeometryUpdater;\n","import arrayFill from './arrayFill.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian2 from './Cartesian2.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Cartographic from './Cartographic.js';\nimport Check from './Check.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryInstance from './GeometryInstance.js';\nimport GeometryOffsetAttribute from './GeometryOffsetAttribute.js';\nimport GeometryPipeline from './GeometryPipeline.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport Matrix2 from './Matrix2.js';\nimport Matrix3 from './Matrix3.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport Quaternion from './Quaternion.js';\nimport Rectangle from './Rectangle.js';\nimport RectangleGeometryLibrary from './RectangleGeometryLibrary.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var positionScratch = new Cartesian3();\n    var normalScratch = new Cartesian3();\n    var tangentScratch = new Cartesian3();\n    var bitangentScratch = new Cartesian3();\n    var rectangleScratch = new Rectangle();\n    var stScratch = new Cartesian2();\n    var bottomBoundingSphere = new BoundingSphere();\n    var topBoundingSphere = new BoundingSphere();\n\n    function createAttributes(vertexFormat, attributes) {\n        var geo = new Geometry({\n            attributes : new GeometryAttributes(),\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        geo.attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : attributes.positions\n        });\n        if (vertexFormat.normal) {\n            geo.attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attributes.normals\n            });\n        }\n        if (vertexFormat.tangent) {\n            geo.attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attributes.tangents\n            });\n        }\n        if (vertexFormat.bitangent) {\n            geo.attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attributes.bitangents\n            });\n        }\n        return geo;\n    }\n\n    function calculateAttributes(positions, vertexFormat, ellipsoid, tangentRotationMatrix) {\n        var length = positions.length;\n\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\n\n        var attrIndex = 0;\n        var bitangent = bitangentScratch;\n        var tangent = tangentScratch;\n        var normal = normalScratch;\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n            for (var i = 0; i < length; i += 3) {\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\n                var attrIndex1 = attrIndex + 1;\n                var attrIndex2 = attrIndex + 2;\n\n                normal = ellipsoid.geodeticSurfaceNormal(p, normal);\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n                    Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent);\n                    Cartesian3.normalize(tangent, tangent);\n\n                    if (vertexFormat.bitangent) {\n                        Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    normals[attrIndex] = normal.x;\n                    normals[attrIndex1] = normal.y;\n                    normals[attrIndex2] = normal.z;\n                }\n                if (vertexFormat.tangent) {\n                    tangents[attrIndex] = tangent.x;\n                    tangents[attrIndex1] = tangent.y;\n                    tangents[attrIndex2] = tangent.z;\n                }\n                if (vertexFormat.bitangent) {\n                    bitangents[attrIndex] = bitangent.x;\n                    bitangents[attrIndex1] = bitangent.y;\n                    bitangents[attrIndex2] = bitangent.z;\n                }\n                attrIndex += 3;\n            }\n        }\n        return createAttributes(vertexFormat, {\n            positions : positions,\n            normals : normals,\n            tangents : tangents,\n            bitangents : bitangents\n        });\n    }\n\n    var v1Scratch = new Cartesian3();\n    var v2Scratch = new Cartesian3();\n\n    function calculateAttributesWall(positions, vertexFormat, ellipsoid) {\n        var length = positions.length;\n\n        var normals = (vertexFormat.normal) ? new Float32Array(length) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(length) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(length) : undefined;\n\n        var normalIndex = 0;\n        var tangentIndex = 0;\n        var bitangentIndex = 0;\n        var recomputeNormal = true;\n\n        var bitangent = bitangentScratch;\n        var tangent = tangentScratch;\n        var normal = normalScratch;\n        if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n            for (var i = 0; i < length; i += 6) {\n                var p = Cartesian3.fromArray(positions, i, positionScratch);\n                var p1 = Cartesian3.fromArray(positions, (i + 6) % length, v1Scratch);\n                if (recomputeNormal) {\n                    var p2 = Cartesian3.fromArray(positions, (i + 3) % length, v2Scratch);\n                    Cartesian3.subtract(p1, p, p1);\n                    Cartesian3.subtract(p2, p, p2);\n                    normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\n                    recomputeNormal = false;\n                }\n\n                if (Cartesian3.equalsEpsilon(p1, p, CesiumMath.EPSILON10)) { // if we've reached a corner\n                    recomputeNormal = true;\n                }\n\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    bitangent = ellipsoid.geodeticSurfaceNormal(p, bitangent);\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n                }\n            }\n        }\n\n        return createAttributes(vertexFormat, {\n            positions : positions,\n            normals : normals,\n            tangents : tangents,\n            bitangents : bitangents\n        });\n    }\n\n    function constructRectangle(rectangleGeometry, computedOptions) {\n        var vertexFormat = rectangleGeometry._vertexFormat;\n        var ellipsoid = rectangleGeometry._ellipsoid;\n        var height = computedOptions.height;\n        var width = computedOptions.width;\n        var northCap = computedOptions.northCap;\n        var southCap = computedOptions.southCap;\n\n        var rowStart = 0;\n        var rowEnd = height;\n        var rowHeight = height;\n        var size = 0;\n        if (northCap) {\n            rowStart = 1;\n            rowHeight -= 1;\n            size += 1;\n        }\n        if (southCap) {\n            rowEnd -= 1;\n            rowHeight -= 1;\n            size += 1;\n        }\n        size += (width * rowHeight);\n\n        var positions = (vertexFormat.position) ? new Float64Array(size * 3) : undefined;\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n\n        var posIndex = 0;\n        var stIndex = 0;\n\n        var position = positionScratch;\n        var st = stScratch;\n\n        var minX = Number.MAX_VALUE;\n        var minY = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        var maxY = -Number.MAX_VALUE;\n\n        for (var row = rowStart; row < rowEnd; ++row) {\n            for (var col = 0; col < width; ++col) {\n                RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, row, col, position, st);\n\n                positions[posIndex++] = position.x;\n                positions[posIndex++] = position.y;\n                positions[posIndex++] = position.z;\n\n                if (vertexFormat.st) {\n                    textureCoordinates[stIndex++] = st.x;\n                    textureCoordinates[stIndex++] = st.y;\n\n                    minX = Math.min(minX, st.x);\n                    minY = Math.min(minY, st.y);\n                    maxX = Math.max(maxX, st.x);\n                    maxY = Math.max(maxY, st.y);\n                }\n            }\n        }\n        if (northCap) {\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, 0, 0, position, st);\n\n            positions[posIndex++] = position.x;\n            positions[posIndex++] = position.y;\n            positions[posIndex++] = position.z;\n\n            if (vertexFormat.st) {\n                textureCoordinates[stIndex++] = st.x;\n                textureCoordinates[stIndex++] = st.y;\n\n                minX = st.x;\n                minY = st.y;\n                maxX = st.x;\n                maxY = st.y;\n            }\n        }\n        if (southCap) {\n            RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, vertexFormat.st, height - 1, 0, position, st);\n\n            positions[posIndex++] = position.x;\n            positions[posIndex++] = position.y;\n            positions[posIndex] = position.z;\n\n            if (vertexFormat.st) {\n                textureCoordinates[stIndex++] = st.x;\n                textureCoordinates[stIndex] = st.y;\n\n                minX = Math.min(minX, st.x);\n                minY = Math.min(minY, st.y);\n                maxX = Math.max(maxX, st.x);\n                maxY = Math.max(maxY, st.y);\n            }\n        }\n\n        if (vertexFormat.st && (minX < 0.0 || minY < 0.0 || maxX > 1.0 || maxY > 1.0)) {\n            for (var k = 0; k < textureCoordinates.length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minX) / (maxX - minX);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minY) / (maxY - minY);\n            }\n        }\n\n        var geo = calculateAttributes(positions, vertexFormat, ellipsoid, computedOptions.tangentRotationMatrix);\n\n        var indicesSize = 6 * (width - 1) * (rowHeight - 1);\n        if (northCap) {\n            indicesSize += 3 * (width - 1);\n        }\n        if (southCap) {\n            indicesSize += 3 * (width - 1);\n        }\n        var indices = IndexDatatype.createTypedArray(size, indicesSize);\n        var index = 0;\n        var indicesIndex = 0;\n        var i;\n        for (i = 0; i < rowHeight - 1; ++i) {\n            for (var j = 0; j < width - 1; ++j) {\n                var upperLeft = index;\n                var lowerLeft = upperLeft + width;\n                var lowerRight = lowerLeft + 1;\n                var upperRight = upperLeft + 1;\n                indices[indicesIndex++] = upperLeft;\n                indices[indicesIndex++] = lowerLeft;\n                indices[indicesIndex++] = upperRight;\n                indices[indicesIndex++] = upperRight;\n                indices[indicesIndex++] = lowerLeft;\n                indices[indicesIndex++] = lowerRight;\n                ++index;\n            }\n            ++index;\n        }\n        if (northCap || southCap) {\n            var northIndex = size - 1;\n            var southIndex = size - 1;\n            if (northCap && southCap) {\n                northIndex = size - 2;\n            }\n\n            var p1;\n            var p2;\n            index = 0;\n\n            if (northCap) {\n                for (i = 0; i < width - 1; i++) {\n                    p1 = index;\n                    p2 = p1 + 1;\n                    indices[indicesIndex++] = northIndex;\n                    indices[indicesIndex++] = p1;\n                    indices[indicesIndex++] = p2;\n                    ++index;\n                }\n            }\n            if (southCap) {\n                index = (rowHeight - 1) * (width);\n                for (i = 0; i < width - 1; i++) {\n                    p1 = index;\n                    p2 = p1 + 1;\n                    indices[indicesIndex++] = p1;\n                    indices[indicesIndex++] = southIndex;\n                    indices[indicesIndex++] = p2;\n                    ++index;\n                }\n            }\n        }\n\n        geo.indices = indices;\n        if (vertexFormat.st) {\n            geo.attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        return geo;\n    }\n\n    function addWallPositions(wallPositions, posIndex, i, topPositions, bottomPositions) {\n        wallPositions[posIndex++] = topPositions[i];\n        wallPositions[posIndex++] = topPositions[i + 1];\n        wallPositions[posIndex++] = topPositions[i + 2];\n        wallPositions[posIndex++] = bottomPositions[i];\n        wallPositions[posIndex++] = bottomPositions[i + 1];\n        wallPositions[posIndex] = bottomPositions[i + 2];\n        return wallPositions;\n    }\n\n    function addWallTextureCoordinates(wallTextures, stIndex, i, st) {\n        wallTextures[stIndex++] = st[i];\n        wallTextures[stIndex++] = st[i + 1];\n        wallTextures[stIndex++] = st[i];\n        wallTextures[stIndex] = st[i + 1];\n        return wallTextures;\n    }\n\n    var scratchVertexFormat = new VertexFormat();\n\n    function constructExtrudedRectangle(rectangleGeometry, computedOptions) {\n        var shadowVolume = rectangleGeometry._shadowVolume;\n        var offsetAttributeValue = rectangleGeometry._offsetAttribute;\n        var vertexFormat = rectangleGeometry._vertexFormat;\n        var minHeight = rectangleGeometry._extrudedHeight;\n        var maxHeight = rectangleGeometry._surfaceHeight;\n        var ellipsoid = rectangleGeometry._ellipsoid;\n\n        var height = computedOptions.height;\n        var width = computedOptions.width;\n\n        var i;\n\n        if (shadowVolume) {\n            var newVertexFormat = VertexFormat.clone(vertexFormat, scratchVertexFormat);\n            newVertexFormat.normal = true;\n            rectangleGeometry._vertexFormat = newVertexFormat;\n        }\n\n        var topBottomGeo = constructRectangle(rectangleGeometry, computedOptions);\n\n        if (shadowVolume) {\n            rectangleGeometry._vertexFormat = vertexFormat;\n        }\n\n        var topPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, maxHeight, ellipsoid, false);\n        topPositions = new Float64Array(topPositions);\n        var length = topPositions.length;\n        var newLength = length * 2;\n        var positions = new Float64Array(newLength);\n        positions.set(topPositions);\n        var bottomPositions = PolygonPipeline.scaleToGeodeticHeight(topBottomGeo.attributes.position.values, minHeight, ellipsoid);\n        positions.set(bottomPositions, length);\n        topBottomGeo.attributes.position.values = positions;\n\n        var normals = (vertexFormat.normal) ? new Float32Array(newLength) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(newLength) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(newLength) : undefined;\n        var textures = (vertexFormat.st) ? new Float32Array(newLength / 3 * 2) : undefined;\n        var topSt;\n        var topNormals;\n        if (vertexFormat.normal) {\n            topNormals = topBottomGeo.attributes.normal.values;\n            normals.set(topNormals);\n            for (i = 0; i < length; i++) {\n                topNormals[i] = -topNormals[i];\n            }\n            normals.set(topNormals, length);\n            topBottomGeo.attributes.normal.values = normals;\n        }\n        if (shadowVolume) {\n            topNormals = topBottomGeo.attributes.normal.values;\n            if (!vertexFormat.normal) {\n                topBottomGeo.attributes.normal = undefined;\n            }\n            var extrudeNormals = new Float32Array(newLength);\n            for (i = 0; i < length; i++) {\n                topNormals[i] = -topNormals[i];\n            }\n            extrudeNormals.set(topNormals, length); //only get normals for bottom layer that's going to be pushed down\n            topBottomGeo.attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        var offsetValue;\n        var hasOffsets = defined(offsetAttributeValue);\n        if (hasOffsets) {\n            var size = length / 3 * 2;\n            var offsetAttribute = new Uint8Array(size);\n            if (offsetAttributeValue === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                offsetValue = offsetAttributeValue === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            topBottomGeo.attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            var topTangents = topBottomGeo.attributes.tangent.values;\n            tangents.set(topTangents);\n            for (i = 0; i < length; i++) {\n                topTangents[i] = -topTangents[i];\n            }\n            tangents.set(topTangents, length);\n            topBottomGeo.attributes.tangent.values = tangents;\n        }\n        if (vertexFormat.bitangent) {\n            var topBitangents = topBottomGeo.attributes.bitangent.values;\n            bitangents.set(topBitangents);\n            bitangents.set(topBitangents, length);\n            topBottomGeo.attributes.bitangent.values = bitangents;\n        }\n        if (vertexFormat.st) {\n            topSt = topBottomGeo.attributes.st.values;\n            textures.set(topSt);\n            textures.set(topSt, length / 3 * 2);\n            topBottomGeo.attributes.st.values = textures;\n        }\n\n        var indices = topBottomGeo.indices;\n        var indicesLength = indices.length;\n        var posLength = length / 3;\n        var newIndices = IndexDatatype.createTypedArray(newLength / 3, indicesLength * 2);\n        newIndices.set(indices);\n        for (i = 0; i < indicesLength; i += 3) {\n            newIndices[i + indicesLength] = indices[i + 2] + posLength;\n            newIndices[i + 1 + indicesLength] = indices[i + 1] + posLength;\n            newIndices[i + 2 + indicesLength] = indices[i] + posLength;\n        }\n        topBottomGeo.indices = newIndices;\n\n        var northCap = computedOptions.northCap;\n        var southCap = computedOptions.southCap;\n\n        var rowHeight = height;\n        var widthMultiplier = 2;\n        var perimeterPositions = 0;\n        var corners = 4;\n        var dupliateCorners = 4;\n        if (northCap) {\n            widthMultiplier -= 1;\n            rowHeight -= 1;\n            perimeterPositions += 1;\n            corners -= 2;\n            dupliateCorners -= 1;\n        }\n        if (southCap) {\n            widthMultiplier -= 1;\n            rowHeight -= 1;\n            perimeterPositions += 1;\n            corners -= 2;\n            dupliateCorners -= 1;\n        }\n        perimeterPositions += (widthMultiplier * width + 2 * rowHeight - corners);\n\n        var wallCount = (perimeterPositions + dupliateCorners) * 2;\n\n        var wallPositions = new Float64Array(wallCount * 3);\n        var wallExtrudeNormals = shadowVolume ? new Float32Array(wallCount * 3) : undefined;\n        var wallOffsetAttribute = hasOffsets ? new Uint8Array(wallCount) : undefined;\n        var wallTextures = (vertexFormat.st) ? new Float32Array(wallCount * 2) : undefined;\n\n        var computeTopOffsets = offsetAttributeValue === GeometryOffsetAttribute.TOP;\n        if (hasOffsets && !computeTopOffsets) {\n            offsetValue = offsetAttributeValue === GeometryOffsetAttribute.ALL ? 1 : 0;\n            wallOffsetAttribute = arrayFill(wallOffsetAttribute, offsetValue);\n        }\n\n        var posIndex = 0;\n        var stIndex = 0;\n        var extrudeNormalIndex = 0;\n        var wallOffsetIndex = 0;\n        var area = width * rowHeight;\n        var threeI;\n        for (i = 0; i < area; i += width) {\n            threeI = i * 3;\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n            posIndex += 6;\n            if (vertexFormat.st) {\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\n                stIndex += 4;\n            }\n            if (shadowVolume) {\n                extrudeNormalIndex += 3;\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n            }\n            if (computeTopOffsets) {\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\n                wallOffsetIndex += 1;\n            }\n        }\n\n        if (!southCap) {\n            for (i = area - width; i < area; i++) {\n                threeI = i * 3;\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n                posIndex += 6;\n                if (vertexFormat.st) {\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\n                    stIndex += 4;\n                }\n                if (shadowVolume) {\n                    extrudeNormalIndex += 3;\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n                }\n                if (computeTopOffsets) {\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\n                    wallOffsetIndex += 1;\n                }\n            }\n        } else {\n            var southIndex = northCap ? area + 1 : area;\n            threeI = southIndex * 3;\n\n            for (i = 0; i < 2; i++) { // duplicate corner points\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n                posIndex += 6;\n                if (vertexFormat.st) {\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, southIndex * 2, topSt);\n                    stIndex += 4;\n                }\n                if (shadowVolume) {\n                    extrudeNormalIndex += 3;\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n                }\n                if (computeTopOffsets) {\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\n                    wallOffsetIndex += 1;\n                }\n            }\n        }\n\n        for (i = area - 1; i > 0; i -= width) {\n            threeI = i * 3;\n            wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n            posIndex += 6;\n            if (vertexFormat.st) {\n                wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\n                stIndex += 4;\n            }\n            if (shadowVolume) {\n                extrudeNormalIndex += 3;\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n            }\n            if (computeTopOffsets) {\n                wallOffsetAttribute[wallOffsetIndex++] = 1;\n                wallOffsetIndex += 1;\n            }\n\n        }\n\n        if (!northCap) {\n            for (i = width - 1; i >= 0; i--) {\n                threeI = i * 3;\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n                posIndex += 6;\n                if (vertexFormat.st) {\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, i * 2, topSt);\n                    stIndex += 4;\n                }\n                if (shadowVolume) {\n                    extrudeNormalIndex += 3;\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n                }\n                if (computeTopOffsets) {\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\n                    wallOffsetIndex += 1;\n                }\n            }\n        } else {\n            var northIndex = area;\n            threeI = northIndex * 3;\n\n            for (i = 0; i < 2; i++) { // duplicate corner points\n                wallPositions = addWallPositions(wallPositions, posIndex, threeI, topPositions, bottomPositions);\n                posIndex += 6;\n                if (vertexFormat.st) {\n                    wallTextures = addWallTextureCoordinates(wallTextures, stIndex, northIndex * 2, topSt);\n                    stIndex += 4;\n                }\n                if (shadowVolume) {\n                    extrudeNormalIndex += 3;\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 1];\n                    wallExtrudeNormals[extrudeNormalIndex++] = topNormals[threeI + 2];\n                }\n                if (computeTopOffsets) {\n                    wallOffsetAttribute[wallOffsetIndex++] = 1;\n                    wallOffsetIndex += 1;\n                }\n            }\n        }\n\n        var geo = calculateAttributesWall(wallPositions, vertexFormat, ellipsoid);\n\n        if (vertexFormat.st) {\n            geo.attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : wallTextures\n            });\n        }\n        if (shadowVolume) {\n            geo.attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : wallExtrudeNormals\n            });\n        }\n        if (hasOffsets) {\n            geo.attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : wallOffsetAttribute\n            });\n        }\n\n        var wallIndices = IndexDatatype.createTypedArray(wallCount, perimeterPositions * 6);\n\n        var upperLeft;\n        var lowerLeft;\n        var lowerRight;\n        var upperRight;\n        length = wallPositions.length / 3;\n        var index = 0;\n        for (i = 0; i < length - 1; i += 2) {\n            upperLeft = i;\n            upperRight = (upperLeft + 2) % length;\n            var p1 = Cartesian3.fromArray(wallPositions, upperLeft * 3, v1Scratch);\n            var p2 = Cartesian3.fromArray(wallPositions, upperRight * 3, v2Scratch);\n            if (Cartesian3.equalsEpsilon(p1, p2, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            lowerLeft = (upperLeft + 1) % length;\n            lowerRight = (lowerLeft + 2) % length;\n            wallIndices[index++] = upperLeft;\n            wallIndices[index++] = lowerLeft;\n            wallIndices[index++] = upperRight;\n            wallIndices[index++] = upperRight;\n            wallIndices[index++] = lowerLeft;\n            wallIndices[index++] = lowerRight;\n        }\n\n        geo.indices = wallIndices;\n\n        geo = GeometryPipeline.combineInstances([\n            new GeometryInstance({\n                geometry : topBottomGeo\n            }),\n            new GeometryInstance({\n                geometry : geo\n            })\n        ]);\n\n        return geo[0];\n    }\n\n    var scratchRectanglePoints = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\n    var nwScratch = new Cartographic();\n    var stNwScratch = new Cartographic();\n    function computeRectangle(rectangle, granularity, rotation, ellipsoid, result) {\n        if (rotation === 0.0) {\n            return Rectangle.clone(rectangle, result);\n        }\n\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, granularity, rotation, 0, rectangleScratch, nwScratch);\n\n        var height = computedOptions.height;\n        var width = computedOptions.width;\n\n        var positions = scratchRectanglePoints;\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, 0, positions[0]);\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, 0, width - 1, positions[1]);\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, 0, positions[2]);\n        RectangleGeometryLibrary.computePosition(computedOptions, ellipsoid, false, height - 1, width - 1, positions[3]);\n\n        return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n    }\n\n    /**\n     * A description of a cartographic rectangle on an ellipsoid centered at the origin. Rectangle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias RectangleGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0.0] The distance in meters between the rectangle and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the rectangle's extruded face and the ellipsoid surface.\n     *\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n     * @exception {DeveloperError} <code>options.rectangle.south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\n     * @exception {DeveloperError} <code>options.rectangle.east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n     * @exception {DeveloperError} <code>options.rectangle.west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\n     * @exception {DeveloperError} <code>options.rectangle.north</code> must be greater than <code>options.rectangle.south</code>.\n     *\n     * @see RectangleGeometry#createGeometry\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Rectangle.html|Cesium Sandcastle Rectangle Demo}\n     *\n     * @example\n     * // 1. create a rectangle\n     * var rectangle = new Cesium.RectangleGeometry({\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\n     *   height : 10000.0\n     * });\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\n     *\n     * // 2. create an extruded rectangle without a top\n     * var rectangle = new Cesium.RectangleGeometry({\n     *   ellipsoid : Cesium.Ellipsoid.WGS84,\n     *   rectangle : Cesium.Rectangle.fromDegrees(-80.0, 39.0, -74.0, 42.0),\n     *   height : 10000.0,\n     *   extrudedHeight: 300000\n     * });\n     * var geometry = Cesium.RectangleGeometry.createGeometry(rectangle);\n     */\n    function RectangleGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var rectangle = options.rectangle;\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._rectangle = Rectangle.clone(rectangle);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._surfaceHeight = Math.max(height, extrudedHeight);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createRectangleGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n        this._rotatedRectangle = undefined;\n\n        this._textureCoordinateRotationPoints = undefined;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    RectangleGeometry.packedLength = Rectangle.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {RectangleGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    RectangleGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Rectangle.pack(value._rectangle, array, startingIndex);\n        startingIndex += Rectangle.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._surfaceHeight;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchRectangle = new Rectangle();\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        rectangle : scratchRectangle,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        granularity : undefined,\n        height : undefined,\n        rotation : undefined,\n        stRotation : undefined,\n        extrudedHeight : undefined,\n        shadowVolume : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {RectangleGeometry} [result] The object into which to store the result.\n     * @returns {RectangleGeometry} The modified result parameter or a new RectangleGeometry instance if one was not provided.\n     */\n    RectangleGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var rectangle = Rectangle.unpack(array, startingIndex, scratchRectangle);\n        startingIndex += Rectangle.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var granularity = array[startingIndex++];\n        var surfaceHeight = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.granularity = granularity;\n            scratchOptions.height = surfaceHeight;\n            scratchOptions.rotation = rotation;\n            scratchOptions.stRotation = stRotation;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new RectangleGeometry(scratchOptions);\n        }\n\n        result._rectangle = Rectangle.clone(rectangle, result._rectangle);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._granularity = granularity;\n        result._surfaceHeight = surfaceHeight;\n        result._rotation = rotation;\n        result._stRotation = stRotation;\n        result._extrudedHeight = extrudedHeight;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle based on the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Rectangle} options.rectangle A cartographic rectangle with north, south, east and west properties in radians.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the rectangle lies.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.rotation=0.0] The rotation of the rectangle, in radians. A positive rotation is counter-clockwise.\n     * @param {Rectangle} [result] An object in which to store the result.\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    RectangleGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var rectangle = options.rectangle;\n\n        \n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var rotation = defaultValue(options.rotation, 0.0);\n\n        return computeRectangle(rectangle, granularity, rotation, ellipsoid, result);\n    };\n\n    var tangentRotationMatrixScratch = new Matrix3();\n    var quaternionScratch = new Quaternion();\n    var centerScratch = new Cartographic();\n    /**\n     * Computes the geometric representation of a rectangle, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {RectangleGeometry} rectangleGeometry A description of the rectangle.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     *\n     * @exception {DeveloperError} Rotated rectangle is invalid.\n     */\n    RectangleGeometry.createGeometry = function(rectangleGeometry) {\n        if ((CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.north, rectangleGeometry._rectangle.south, CesiumMath.EPSILON10) ||\n             (CesiumMath.equalsEpsilon(rectangleGeometry._rectangle.east, rectangleGeometry._rectangle.west, CesiumMath.EPSILON10)))) {\n            return undefined;\n        }\n\n        var rectangle = rectangleGeometry._rectangle;\n        var ellipsoid = rectangleGeometry._ellipsoid;\n        var rotation = rectangleGeometry._rotation;\n        var stRotation = rectangleGeometry._stRotation;\n        var vertexFormat = rectangleGeometry._vertexFormat;\n\n        var computedOptions = RectangleGeometryLibrary.computeOptions(rectangle, rectangleGeometry._granularity, rotation, stRotation, rectangleScratch, nwScratch, stNwScratch);\n\n        var tangentRotationMatrix = tangentRotationMatrixScratch;\n        if (stRotation !== 0 || rotation !== 0) {\n            var center = Rectangle.center(rectangle, centerScratch);\n            var axis = ellipsoid.geodeticSurfaceNormalCartographic(center, v1Scratch);\n            Quaternion.fromAxisAngle(axis, -stRotation, quaternionScratch);\n            Matrix3.fromQuaternion(quaternionScratch, tangentRotationMatrix);\n        } else {\n            Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\n        }\n\n        var surfaceHeight = rectangleGeometry._surfaceHeight;\n        var extrudedHeight = rectangleGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(surfaceHeight, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        computedOptions.lonScalar = 1.0 / rectangleGeometry._rectangle.width;\n        computedOptions.latScalar = 1.0 / rectangleGeometry._rectangle.height;\n        computedOptions.tangentRotationMatrix = tangentRotationMatrix;\n\n        var geometry;\n        var boundingSphere;\n        rectangle = rectangleGeometry._rectangle;\n        if (extrude) {\n            geometry = constructExtrudedRectangle(rectangleGeometry, computedOptions);\n            var topBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight, topBoundingSphere);\n            var bottomBS = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, extrudedHeight, bottomBoundingSphere);\n            boundingSphere = BoundingSphere.union(topBS, bottomBS);\n        } else {\n            geometry = constructRectangle(rectangleGeometry, computedOptions);\n            geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometry.attributes.position.values, surfaceHeight, ellipsoid, false);\n\n            if (defined(rectangleGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = rectangleGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n\n            boundingSphere = BoundingSphere.fromRectangle3D(rectangle, ellipsoid, surfaceHeight);\n        }\n\n        if (!vertexFormat.position) {\n            delete geometry.attributes.position;\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere,\n            offsetAttribute : rectangleGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    RectangleGeometry.createShadowVolume = function(rectangleGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = rectangleGeometry._granularity;\n        var ellipsoid = rectangleGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new RectangleGeometry({\n            rectangle : rectangleGeometry._rectangle,\n            rotation : rectangleGeometry._rotation,\n            ellipsoid : ellipsoid,\n            stRotation : rectangleGeometry._stRotation,\n            granularity : granularity,\n            extrudedHeight : maxHeight,\n            height : minHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume : true\n        });\n    };\n\n    var unrotatedTextureRectangleScratch = new Rectangle();\n    var points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\n    var rotation2DScratch = new Matrix2();\n    var rectangleCenterScratch = new Cartographic();\n\n    function textureCoordinateRotationPoints(rectangleGeometry) {\n        if (rectangleGeometry._stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n\n        var rectangle = Rectangle.clone(rectangleGeometry._rectangle, unrotatedTextureRectangleScratch);\n        var granularity = rectangleGeometry._granularity;\n        var ellipsoid = rectangleGeometry._ellipsoid;\n\n        // Rotate to align the texture coordinates with ENU\n        var rotation = rectangleGeometry._rotation - rectangleGeometry._stRotation;\n\n        var unrotatedTextureRectangle = computeRectangle(rectangle, granularity, rotation, ellipsoid, unrotatedTextureRectangleScratch);\n\n        // Assume a computed \"east-north\" texture coordinate system based on spherical or planar tricks, bounded by `boundingRectangle`.\n        // The \"desired\" texture coordinate system forms an oriented rectangle (un-oriented computed) around the geometry that completely and tightly bounds it.\n        // We want to map from the \"east-north\" texture coordinate system into the \"desired\" system using a pair of lines (analagous planes in 2D)\n        // Compute 3 corners of the \"desired\" texture coordinate system in \"east-north\" texture space by the following in cartographic space:\n        // - rotate 3 of the corners in unrotatedTextureRectangle by stRotation around the center of the bounding rectangle\n        // - apply the \"east-north\" system's normalization formula to the rotated cartographics, even though this is likely to produce values outside [0-1].\n        // This gives us a set of points in the \"east-north\" texture coordinate system that can be used to map \"east-north\" texture coordinates to \"desired.\"\n\n        var points2D = points2DScratch;\n        points2D[0].x = unrotatedTextureRectangle.west;\n        points2D[0].y = unrotatedTextureRectangle.south;\n\n        points2D[1].x = unrotatedTextureRectangle.west;\n        points2D[1].y = unrotatedTextureRectangle.north;\n\n        points2D[2].x = unrotatedTextureRectangle.east;\n        points2D[2].y = unrotatedTextureRectangle.south;\n\n        var boundingRectangle = rectangleGeometry.rectangle;\n        var toDesiredInComputed = Matrix2.fromRotation(rectangleGeometry._stRotation, rotation2DScratch);\n        var boundingRectangleCenter = Rectangle.center(boundingRectangle, rectangleCenterScratch);\n\n        for (var i = 0; i < 3; ++i) {\n            var point2D = points2D[i];\n            point2D.x -= boundingRectangleCenter.longitude;\n            point2D.y -= boundingRectangleCenter.latitude;\n            Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\n            point2D.x += boundingRectangleCenter.longitude;\n            point2D.y += boundingRectangleCenter.latitude;\n\n            // Convert point into east-north texture coordinate space\n            point2D.x = (point2D.x - boundingRectangle.west) / boundingRectangle.width;\n            point2D.y = (point2D.y - boundingRectangle.south) / boundingRectangle.height;\n        }\n\n        var minXYCorner = points2D[0];\n        var maxYCorner = points2D[1];\n        var maxXCorner = points2D[2];\n        var result = new Array(6);\n        Cartesian2.pack(minXYCorner, result);\n        Cartesian2.pack(maxYCorner, result, 2);\n        Cartesian2.pack(maxXCorner, result, 4);\n        return result;\n    }\n\n    Object.defineProperties(RectangleGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rotatedRectangle)) {\n                    this._rotatedRectangle = computeRectangle(this._rectangle, this._granularity, this._rotation, this._ellipsoid);\n                }\n                return this._rotatedRectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering RectangleGeometries as GroundPrimitives.\n         * This version permits skew in textures by computing offsets directly in cartographic space and\n         * more accurately approximates rendering RectangleGeometries with height as standard Primitives.\n         * @see Geometry#_textureCoordinateRotationPoints\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\nexport default RectangleGeometry;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport RectangleGeometry from '../Core/RectangleGeometry.js';\nimport RectangleOutlineGeometry from '../Core/RectangleOutlineGeometry.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport GroundGeometryUpdater from './GroundGeometryUpdater.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n    var scratchCenterRect = new Rectangle();\n    var scratchCarto = new Cartographic();\n\n    function RectangleGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.rectangle = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.rotation = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for rectangles.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias RectangleGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function RectangleGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new RectangleGeometryOptions(entity),\n            geometryPropertyName : 'rectangle',\n            observedPropertyNames : ['availability', 'rectangle']\n        });\n\n        this._onEntityPropertyChanged(entity, 'rectangle', entity.rectangle, undefined);\n    }\n\n    if (defined(Object.create)) {\n        RectangleGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        RectangleGeometryUpdater.prototype.constructor = RectangleGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    RectangleGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new RectangleGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    RectangleGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new RectangleOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    RectangleGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var rect = Property.getValueOrUndefined(this._entity.rectangle.coordinates, time, scratchCenterRect);\n        if (!defined(rect)) {\n            return;\n        }\n        var center = Rectangle.center(rect, scratchCarto);\n        return Cartographic.toCartesian(center, Ellipsoid.WGS84, result);\n    };\n\n    RectangleGeometryUpdater.prototype._isHidden = function(entity, rectangle) {\n        return !defined(rectangle.coordinates) || GeometryUpdater.prototype._isHidden.call(this, entity, rectangle);\n    };\n\n    RectangleGeometryUpdater.prototype._isDynamic = function(entity, rectangle) {\n        return !rectangle.coordinates.isConstant || //\n               !Property.isConstant(rectangle.height) || //\n               !Property.isConstant(rectangle.extrudedHeight) || //\n               !Property.isConstant(rectangle.granularity) || //\n               !Property.isConstant(rectangle.stRotation) || //\n               !Property.isConstant(rectangle.rotation) || //\n               !Property.isConstant(rectangle.outlineWidth) || //\n               !Property.isConstant(rectangle.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty) && !(this._materialProperty instanceof ColorMaterialProperty));\n    };\n\n    RectangleGeometryUpdater.prototype._setStaticOptions = function(entity, rectangle) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var heightValue = Property.getValueOrUndefined(rectangle.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.rectangle = rectangle.coordinates.getValue(Iso8601.MINIMUM_VALUE, options.rectangle);\n        options.granularity = Property.getValueOrUndefined(rectangle.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, Iso8601.MINIMUM_VALUE);\n        options.rotation = Property.getValueOrUndefined(rectangle.rotation, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    RectangleGeometryUpdater.DynamicGeometryUpdater = DynamicRectangleGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicRectangleGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicRectangleGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicRectangleGeometryUpdater.prototype.constructor = DynamicRectangleGeometryUpdater;\n    }\n\n    DynamicRectangleGeometryUpdater.prototype._isHidden = function(entity, rectangle, time) {\n        return  !defined(this._options.rectangle) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, rectangle, time);\n    };\n\n    DynamicRectangleGeometryUpdater.prototype._setOptions = function(entity, rectangle, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(rectangle.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.rectangle = Property.getValueOrUndefined(rectangle.coordinates, time, options.rectangle);\n        options.granularity = Property.getValueOrUndefined(rectangle.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, time);\n        options.rotation = Property.getValueOrUndefined(rectangle.rotation, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\nexport default RectangleGeometryUpdater;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport Primitive from '../Scene/Primitive.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, translucent, appearanceType, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n        this.translucent = translucent;\n        this.appearanceType = appearanceType;\n        this.depthFailAppearanceType = depthFailAppearanceType;\n        this.depthFailMaterialProperty = depthFailMaterialProperty;\n        this.depthFailMaterial = undefined;\n        this.closed = closed;\n        this.shadows = shadows;\n        this.primitives = primitives;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.invalidated = false;\n\n        var removeMaterialSubscription;\n        if (defined(depthFailMaterialProperty)) {\n            removeMaterialSubscription = depthFailMaterialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        }\n        this.removeMaterialSubscription = removeMaterialSubscription;\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.depthFailMaterialProperty;\n        var updaterMaterial = updater.depthFailMaterialProperty;\n        if (updaterMaterial === material) {\n            return true;\n        }\n        if (defined(material)) {\n            return material.equals(updaterMaterial);\n        }\n        return false;\n    };\n\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                var depthFailAppearance;\n                if (defined(this.depthFailAppearanceType)) {\n                    if (defined(this.depthFailMaterialProperty)) {\n                        this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                    }\n                    depthFailAppearance = new this.depthFailAppearanceType({\n                        material : this.depthFailMaterial,\n                        translucent : this.translucent,\n                        closed : this.closed\n                    });\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries.slice(),\n                    appearance : new this.appearanceType({\n                        translucent : this.translucent,\n                        closed : this.closed\n                    }),\n                    depthFailAppearance : depthFailAppearance,\n                    shadows : this.shadows\n                });\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastColor, resultColor)) {\n                        attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n                        if ((this.translucent && attributes.color[3] === 255) || (!this.translucent && attributes.color[3] !== 255)) {\n                            this.itemsToRemove[removedCount++] = updater;\n                        }\n                    }\n                }\n\n                if (defined(this.depthFailAppearanceType) && updater.depthFailMaterialProperty instanceof ColorMaterialProperty && (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)) {\n                    var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n                    var depthColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n                        attributes._lastDepthFailColor = Color.clone(depthColor, attributes._lastDepthFailColor);\n                        attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthColor, attributes.depthFailColor);\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||//\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        if (defined(this.removeMaterialSubscription)) {\n            this.removeMaterialSubscription();\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticGeometryColorBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n        this._solidItems = [];\n        this._translucentItems = [];\n        this._primitives = primitives;\n        this._appearanceType = appearanceType;\n        this._depthFailAppearanceType = depthFailAppearanceType;\n        this._closed = closed;\n        this._shadows = shadows;\n    }\n\n    StaticGeometryColorBatch.prototype.add = function(time, updater) {\n        var items;\n        var translucent;\n        var instance = updater.createFillGeometryInstance(time);\n        if (instance.attributes.color.value[3] === 255) {\n            items = this._solidItems;\n            translucent = false;\n        } else {\n            items = this._translucentItems;\n            translucent = true;\n        }\n\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.isMaterial(updater)) {\n                item.add(updater, instance);\n                return;\n            }\n        }\n        var batch = new Batch(this._primitives, translucent, this._appearanceType, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n        batch.add(updater, instance);\n        items.push(batch);\n    };\n\n    function removeItem(items, updater) {\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    StaticGeometryColorBatch.prototype.remove = function(updater) {\n        if (!removeItem(this._solidItems, updater)) {\n            removeItem(this._translucentItems, updater);\n        }\n    };\n\n    function moveItems(batch, items, time) {\n        var itemsMoved = false;\n        var length = items.length;\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            var itemsToRemove = item.itemsToRemove;\n            var itemsToMoveLength = itemsToRemove.length;\n            if (itemsToMoveLength > 0) {\n                for (i = 0; i < itemsToMoveLength; i++) {\n                    var updater = itemsToRemove[i];\n                    item.remove(updater);\n                    batch.add(time, updater);\n                    itemsMoved = true;\n                }\n            }\n        }\n        return itemsMoved;\n    }\n\n    function updateItems(batch, items, time, isUpdated) {\n        var length = items.length;\n        var i;\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    batch.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        length = items.length;\n        for (i = 0; i < length; ++i) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    }\n\n    StaticGeometryColorBatch.prototype.update = function(time) {\n        //Perform initial update\n        var isUpdated = updateItems(this, this._solidItems, time, true);\n        isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n\n        //If any items swapped between solid/translucent, we need to\n        //move them between batches\n        var solidsMoved = moveItems(this, this._solidItems, time);\n        var translucentsMoved = moveItems(this, this._translucentItems, time);\n\n        //If we moved anything around, we need to re-build the primitive\n        if (solidsMoved || translucentsMoved) {\n            isUpdated = updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n            isUpdated = updateItems(this, this._translucentItems, time, isUpdated)&& isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    function getBoundingSphere(items, updater, result) {\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    }\n\n    StaticGeometryColorBatch.prototype.getBoundingSphere = function(updater, result) {\n        var boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n        if (boundingSphere === BoundingSphereState.FAILED) {\n            return getBoundingSphere(this._translucentItems, updater, result);\n        }\n        return boundingSphere;\n    };\n\n    function removeAllPrimitives(items) {\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        items.length = 0;\n    }\n\n    StaticGeometryColorBatch.prototype.removeAllPrimitives = function() {\n        removeAllPrimitives(this._solidItems);\n        removeAllPrimitives(this._translucentItems);\n    };\nexport default StaticGeometryColorBatch;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport Primitive from '../Scene/Primitive.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, appearanceType, materialProperty, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n        this.primitives = primitives;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.depthFailAppearanceType = depthFailAppearanceType;\n        this.depthFailMaterialProperty = depthFailMaterialProperty;\n        this.closed = closed;\n        this.shadows = shadows;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.depthFailMaterial = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n        var depthFailMaterial = this.depthFailMaterialProperty;\n        var updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n\n        if (updaterMaterial === material && updaterDepthFailMaterial === depthFailMaterial) {\n            return true;\n        }\n        var equals = defined(material) && material.equals(updaterMaterial);\n        equals = ((!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial)) || (defined(depthFailMaterial) && depthFailMaterial.equals(updaterDepthFailMaterial))) && equals;\n        return equals;\n    };\n\n    Batch.prototype.add = function(time, updater) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, updater.createFillGeometryInstance(time));\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)  || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    var colorScratch = new Color();\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n\n                var depthFailAppearance;\n                if (defined(this.depthFailMaterialProperty)) {\n                    this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                    depthFailAppearance = new this.depthFailAppearanceType({\n                        material : this.depthFailMaterial,\n                        translucent : this.depthFailMaterial.isTranslucent(),\n                        closed : this.closed\n                    });\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries.slice(),\n                    appearance : new this.appearanceType({\n                        material : this.material,\n                        translucent : this.material.isTranslucent(),\n                        closed : this.closed\n                    }),\n                    depthFailAppearance : depthFailAppearance,\n                    shadows : this.shadows\n                });\n\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n            this.primitive.appearance.material = this.material;\n\n            if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (defined(this.depthFailAppearanceType) && this.depthFailMaterialProperty instanceof ColorMaterialProperty && !updater.depthFailMaterialProperty.isConstant) {\n                    var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n                    var depthFailColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n                        attributes._lastDepthFailColor = Color.clone(depthFailColor, attributes._lastDepthFailColor);\n                        attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthFailColor, attributes.depthFailColor);\n                    }\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGeometryPerMaterialBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n        this._items = [];\n        this._primitives = primitives;\n        this._appearanceType = appearanceType;\n        this._depthFailAppearanceType = depthFailAppearanceType;\n        this._closed = closed;\n        this._shadows = shadows;\n    }\n\n    StaticGeometryPerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.isMaterial(updater)) {\n                item.add(time, updater);\n                return;\n            }\n        }\n        var batch = new Batch(this._primitives, this._appearanceType, updater.fillMaterialProperty, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n        batch.add(time, updater);\n        items.push(batch);\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\nexport default StaticGeometryPerMaterialBatch;\n","\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n};\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nexport default quickselect;\n","import quickselect from './quickselect.js';\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n\nexport default rbush;\n","import rbush from '../ThirdParty/rbush.js';\nimport Check from './Check.js';\n\n    /**\n     * Wrapper around rbush for use with Rectangle types.\n     * @private\n     */\n    function RectangleCollisionChecker() {\n        this._tree = rbush();\n    }\n\n    function RectangleWithId() {\n        this.minX = 0.0;\n        this.minY = 0.0;\n        this.maxX = 0.0;\n        this.maxY = 0.0;\n        this.id = '';\n    }\n\n    RectangleWithId.fromRectangleAndId = function(id, rectangle, result) {\n        result.minX = rectangle.west;\n        result.minY = rectangle.south;\n        result.maxX = rectangle.east;\n        result.maxY = rectangle.north;\n        result.id = id;\n        return result;\n    };\n\n    /**\n     * Insert a rectangle into the collision checker.\n     *\n     * @param {String} id Unique string ID for the rectangle being inserted.\n     * @param {Rectangle} rectangle A Rectangle\n     * @private\n     */\n    RectangleCollisionChecker.prototype.insert = function(id, rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId(id, rectangle, new RectangleWithId());\n        this._tree.insert(withId);\n    };\n\n    function idCompare(a, b) {\n        return a.id === b.id;\n    }\n\n    var removalScratch = new RectangleWithId();\n    /**\n     * Remove a rectangle from the collision checker.\n     *\n     * @param {String} id Unique string ID for the rectangle being removed.\n     * @param {Rectangle} rectangle A Rectangle\n     * @private\n     */\n    RectangleCollisionChecker.prototype.remove = function(id, rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId(id, rectangle, removalScratch);\n        this._tree.remove(withId, idCompare);\n    };\n\n    var collisionScratch = new RectangleWithId();\n    /**\n     * Checks if a given rectangle collides with any of the rectangles in the collection.\n     *\n     * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n     * @returns {Boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n     */\n    RectangleCollisionChecker.prototype.collides = function(rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId('', rectangle, collisionScratch);\n        return this._tree.collides(withId);\n    };\nexport default RectangleCollisionChecker;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport GroundPrimitive from '../Scene/GroundPrimitive.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\nimport RectangleCollisionChecker from '../Core/RectangleCollisionChecker.js';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    function Batch(primitives, classificationType, color, zIndex) {\n        this.primitives = primitives;\n        this.zIndex = zIndex;\n        this.classificationType = classificationType;\n        this.color = color;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.isDirty = false;\n        this.rectangleCollisionCheck = new RectangleCollisionChecker();\n    }\n\n    Batch.prototype.overlapping = function(rectangle) {\n        return this.rectangleCollisionCheck.collides(rectangle);\n    };\n\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        this.rectangleCollisionCheck.insert(id, instance.geometry.rectangle);\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        var geometryInstance = this.geometry.get(id);\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.rectangleCollisionCheck.remove(id, geometryInstance.geometry.rectangle);\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                primitive = new GroundPrimitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries.slice(),\n                    classificationType : this.classificationType\n                });\n                primitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var fillColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n\n                    if (!Color.equals(attributes._lastColor, fillColor)) {\n                        attributes._lastColor = Color.clone(fillColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(fillColor, attributes.color);\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        var bs = primitive.getBoundingSphere(updater.entity);\n        if (!defined(bs)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        bs.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.removeAllPrimitives = function() {\n        var primitives = this.primitives;\n\n        var primitive = this.primitive;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n            this.primitive = undefined;\n            this.geometry.removeAll();\n            this.updaters.removeAll();\n        }\n\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n            this.oldPrimitive = undefined;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundGeometryColorBatch(primitives, classificationType) {\n        this._batches = [];\n        this._primitives = primitives;\n        this._classificationType = classificationType;\n    }\n\n    StaticGroundGeometryColorBatch.prototype.add = function(time, updater) {\n        var instance = updater.createFillGeometryInstance(time);\n        var batches = this._batches;\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        var batch;\n        var length = batches.length;\n        for (var i = 0; i < length; ++i) {\n            var item = batches[i];\n            if (item.zIndex === zIndex &&\n                !item.overlapping(instance.geometry.rectangle)) {\n                batch = item;\n                break;\n            }\n        }\n\n        if (!defined(batch)) {\n            batch = new Batch(this._primitives, this._classificationType, instance.attributes.color.value, zIndex);\n            batches.push(batch);\n        }\n        batch.add(updater, instance);\n        return batch;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.remove = function(updater) {\n        var batches = this._batches;\n        var count = batches.length;\n        for (var i = 0; i < count; ++i) {\n            if (batches[i].remove(updater)) {\n                return;\n            }\n        }\n    };\n\n    StaticGroundGeometryColorBatch.prototype.update = function(time) {\n        var i;\n        var updater;\n\n        //Perform initial update\n        var isUpdated = true;\n        var batches = this._batches;\n        var batchCount = batches.length;\n        for (i = 0; i < batchCount; ++i) {\n            isUpdated = batches[i].update(time) && isUpdated;\n        }\n\n        //If any items swapped between batches we need to move them\n        for (i = 0; i < batchCount; ++i) {\n            var oldBatch = batches[i];\n            var itemsToRemove = oldBatch.itemsToRemove;\n            var itemsToMoveLength = itemsToRemove.length;\n            for (var j = 0; j < itemsToMoveLength; j++) {\n                updater = itemsToRemove[j];\n                oldBatch.remove(updater);\n                var newBatch = this.add(time, updater);\n                oldBatch.isDirty = true;\n                newBatch.isDirty = true;\n            }\n        }\n\n        //If we moved anything around, we need to re-build the primitive and remove empty batches\n        for (i = batchCount - 1; i >= 0; --i) {\n            var batch = batches[i];\n            if (batch.isDirty) {\n                isUpdated = batches[i].update(time) && isUpdated;\n                batch.isDirty = false;\n            }\n            if (batch.geometry.length === 0) {\n                batches.splice(i, 1);\n            }\n        }\n\n        return isUpdated;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.getBoundingSphere = function(updater, result) {\n        var batches = this._batches;\n        var batchCount = batches.length;\n        for (var i = 0; i < batchCount; ++i) {\n            var batch = batches[i];\n            if (batch.contains(updater)) {\n                return batch.getBoundingSphere(updater, result);\n            }\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.removeAllPrimitives = function() {\n        var batches = this._batches;\n        var batchCount = batches.length;\n        for (var i = 0; i < batchCount; ++i) {\n            batches[i].removeAllPrimitives();\n        }\n    };\nexport default StaticGroundGeometryColorBatch;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport RectangleCollisionChecker from '../Core/RectangleCollisionChecker.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport GroundPrimitive from '../Scene/GroundPrimitive.js';\nimport ShadowVolumeAppearance from '../Scene/ShadowVolumeAppearance.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    // Encapsulates a Primitive and all the entities that it represents.\n    function Batch(primitives, classificationType, appearanceType, materialProperty, usingSphericalTextureCoordinates, zIndex) {\n        this.primitives = primitives; // scene level primitive collection\n        this.classificationType = classificationType;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined; // a GroundPrimitive encapsulating all the entities\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.usingSphericalTextureCoordinates = usingSphericalTextureCoordinates;\n        this.zIndex = zIndex;\n        this.rectangleCollisionCheck = new RectangleCollisionChecker();\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.overlapping = function(rectangle) {\n        return this.rectangleCollisionCheck.collides(rectangle);\n    };\n\n    // Check if the given updater's material is compatible with this batch\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n\n        if (updaterMaterial === material ||\n            (updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty)) {\n            return true;\n        }\n        return defined(material) && material.equals(updaterMaterial);\n    };\n\n    Batch.prototype.add = function(time, updater, geometryInstance) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, geometryInstance);\n        this.rectangleCollisionCheck.insert(id, geometryInstance.geometry.rectangle);\n        // Updaters with dynamic attributes must be tracked separately, may exit the batch\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            // Listen for show changes. These will be synchronized in updateShows.\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        var geometryInstance = this.geometry.get(id);\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.rectangleCollisionCheck.remove(id, geometryInstance.geometry.rectangle);\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        // For if the new primitive changes again before it is ready.\n                        primitives.remove(primitive);\n                    }\n                }\n\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n\n                primitive = new GroundPrimitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries.slice(),\n                    appearance : new this.appearanceType({\n                        material : this.material\n                        // translucent and closed properties overridden\n                    }),\n                    classificationType : this.classificationType\n                });\n\n                primitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n            this.primitive.appearance.material = this.material;\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundGeometryPerMaterialBatch(primitives, classificationType, appearanceType) {\n        this._items = [];\n        this._primitives = primitives;\n        this._classificationType = classificationType;\n        this._appearanceType = appearanceType;\n    }\n\n    StaticGroundGeometryPerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        var geometryInstance = updater.createFillGeometryInstance(time);\n        var usingSphericalTextureCoordinates = ShadowVolumeAppearance.shouldUseSphericalCoordinates(geometryInstance.geometry.rectangle);\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        // Check if the Entity represented by the updater can be placed in an existing batch. Requirements:\n        // * compatible material (same material or same color)\n        // * same type of texture coordinates (spherical vs. planar)\n        // * conservatively non-overlapping with any entities in the existing batch\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            if (item.isMaterial(updater) &&\n                item.usingSphericalTextureCoordinates === usingSphericalTextureCoordinates &&\n                item.zIndex === zIndex &&\n                !item.overlapping(geometryInstance.geometry.rectangle)) {\n                item.add(time, updater, geometryInstance);\n                return;\n            }\n        }\n        // If a compatible batch wasn't found, create a new batch.\n        var batch = new Batch(this._primitives, this._classificationType, this._appearanceType, updater.fillMaterialProperty, usingSphericalTextureCoordinates, zIndex);\n        batch.add(time, updater, geometryInstance);\n        items.push(batch);\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\nexport default StaticGroundGeometryPerMaterialBatch;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport OffsetGeometryInstanceAttribute from '../Core/OffsetGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport Primitive from '../Scene/Primitive.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, translucent, width, shadows) {\n        this.translucent = translucent;\n        this.width = width;\n        this.shadows = shadows;\n        this.primitives = primitives;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n    }\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        if (!updater.hasConstantOutline || !updater.outlineColorProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries.slice(),\n                    appearance : new PerInstanceColorAppearance({\n                        flat : true,\n                        translucent : this.translucent,\n                        renderState : {\n                            lineWidth : this.width\n                        }\n                    }),\n                    shadows : this.shadows\n                });\n\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.outlineColorProperty.isConstant || waitingOnCreate) {\n                    var outlineColorProperty = updater.outlineColorProperty;\n                    var outlineColor = Property.getValueOrDefault(outlineColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastColor, outlineColor)) {\n                        attributes._lastColor = Color.clone(outlineColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(outlineColor, attributes.color);\n                        if ((this.translucent && attributes.color[3] === 255) || (!this.translucent && attributes.color[3] !== 255)) {\n                            this.itemsToRemove[removedCount++] = updater;\n                        }\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantOutline || updater.isOutlineVisible(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||//\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.removeAllPrimitives = function() {\n        var primitives = this.primitives;\n\n        var primitive = this.primitive;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n            this.primitive = undefined;\n            this.geometry.removeAll();\n            this.updaters.removeAll();\n        }\n\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n            this.oldPrimitive = undefined;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticOutlineGeometryBatch(primitives, scene, shadows) {\n        this._primitives = primitives;\n        this._scene = scene;\n        this._shadows = shadows;\n        this._solidBatches = new AssociativeArray();\n        this._translucentBatches = new AssociativeArray();\n    }\n    StaticOutlineGeometryBatch.prototype.add = function(time, updater) {\n        var instance = updater.createOutlineGeometryInstance(time);\n        var width = this._scene.clampLineWidth(updater.outlineWidth);\n        var batches;\n        var batch;\n        if (instance.attributes.color.value[3] === 255) {\n            batches = this._solidBatches;\n            batch = batches.get(width);\n            if (!defined(batch)) {\n                batch = new Batch(this._primitives, false, width, this._shadows);\n                batches.set(width, batch);\n            }\n            batch.add(updater, instance);\n        } else {\n            batches = this._translucentBatches;\n            batch = batches.get(width);\n            if (!defined(batch)) {\n                batch = new Batch(this._primitives, true, width, this._shadows);\n                batches.set(width, batch);\n            }\n            batch.add(updater, instance);\n        }\n    };\n\n    StaticOutlineGeometryBatch.prototype.remove = function(updater) {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            if (solidBatches[i].remove(updater)) {\n                return;\n            }\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            if (translucentBatches[i].remove(updater)) {\n                return;\n            }\n        }\n    };\n\n    StaticOutlineGeometryBatch.prototype.update = function(time) {\n        var i;\n        var x;\n        var updater;\n        var batch;\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        var itemsToRemove;\n        var isUpdated = true;\n        var needUpdate = false;\n\n        do {\n            needUpdate = false;\n            for (x = 0; x < solidBatchesLength; x++) {\n                batch = solidBatches[x];\n                //Perform initial update\n                isUpdated = batch.update(time);\n\n                //If any items swapped between solid/translucent, we need to\n                //move them between batches\n                itemsToRemove = batch.itemsToRemove;\n                var solidsToMoveLength = itemsToRemove.length;\n                if (solidsToMoveLength > 0) {\n                    needUpdate = true;\n                    for (i = 0; i < solidsToMoveLength; i++) {\n                        updater = itemsToRemove[i];\n                        batch.remove(updater);\n                        this.add(time, updater);\n                    }\n                }\n            }\n            for (x = 0; x < translucentBatchesLength; x++) {\n                batch = translucentBatches[x];\n                //Perform initial update\n                isUpdated = batch.update(time);\n\n                //If any items swapped between solid/translucent, we need to\n                //move them between batches\n                itemsToRemove = batch.itemsToRemove;\n                var translucentToMoveLength = itemsToRemove.length;\n                if (translucentToMoveLength > 0) {\n                    needUpdate = true;\n                    for (i = 0; i < translucentToMoveLength; i++) {\n                        updater = itemsToRemove[i];\n                        batch.remove(updater);\n                        this.add(time, updater);\n                    }\n                }\n            }\n        } while (needUpdate);\n\n        return isUpdated;\n    };\n\n    StaticOutlineGeometryBatch.prototype.getBoundingSphere = function(updater, result) {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            var solidBatch = solidBatches[i];\n            if (solidBatch.contains(updater)){\n                return solidBatch.getBoundingSphere(updater, result);\n            }\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            var translucentBatch = translucentBatches[i];\n            if (translucentBatch.contains(updater)){\n                return translucentBatch.getBoundingSphere(updater, result);\n            }\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticOutlineGeometryBatch.prototype.removeAllPrimitives = function() {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            solidBatches[i].removeAllPrimitives();\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            translucentBatches[i].removeAllPrimitives();\n        }\n    };\nexport default StaticOutlineGeometryBatch;\n","import Cartographic from './Cartographic.js';\nimport defined from './defined.js';\nimport EllipsoidTangentPlane from './EllipsoidTangentPlane.js';\nimport CesiumMath from './Math.js';\nimport PolygonPipeline from './PolygonPipeline.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport WindingOrder from './WindingOrder.js';\n\n    /**\n     * private\n     */\n    var WallGeometryLibrary = {};\n\n    function latLonEquals(c0, c1) {\n        return ((CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON14)) && (CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON14)));\n    }\n\n    var scratchCartographic1 = new Cartographic();\n    var scratchCartographic2 = new Cartographic();\n    function removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n        var length = positions.length;\n        if (length < 2) {\n            return;\n        }\n\n        var hasBottomHeights = defined(bottomHeights);\n        var hasTopHeights = defined(topHeights);\n        var hasAllZeroHeights = true;\n\n        var cleanedPositions = new Array(length);\n        var cleanedTopHeights = new Array(length);\n        var cleanedBottomHeights = new Array(length);\n\n        var v0 = positions[0];\n        cleanedPositions[0] = v0;\n\n        var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n        if (hasTopHeights) {\n            c0.height = topHeights[0];\n        }\n\n        hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\n\n        cleanedTopHeights[0] = c0.height;\n\n        if (hasBottomHeights) {\n            cleanedBottomHeights[0] = bottomHeights[0];\n        } else {\n            cleanedBottomHeights[0] = 0.0;\n        }\n\n        var index = 1;\n        for (var i = 1; i < length; ++i) {\n            var v1 = positions[i];\n            var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n            if (hasTopHeights) {\n                c1.height = topHeights[i];\n            }\n            hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\n\n            if (!latLonEquals(c0, c1)) {\n                cleanedPositions[index] = v1; // Shallow copy!\n                cleanedTopHeights[index] = c1.height;\n\n                if (hasBottomHeights) {\n                    cleanedBottomHeights[index] = bottomHeights[i];\n                } else {\n                    cleanedBottomHeights[index] = 0.0;\n                }\n\n                Cartographic.clone(c1, c0);\n                ++index;\n            } else if (c0.height < c1.height) {\n                cleanedTopHeights[index - 1] = c1.height;\n            }\n        }\n\n        if (hasAllZeroHeights || index < 2) {\n            return;\n        }\n\n        cleanedPositions.length = index;\n        cleanedTopHeights.length = index;\n        cleanedBottomHeights.length = index;\n\n        return {\n            positions: cleanedPositions,\n            topHeights: cleanedTopHeights,\n            bottomHeights: cleanedBottomHeights\n        };\n    }\n\n    var positionsArrayScratch = new Array(2);\n    var heightsArrayScratch = new Array(2);\n    var generateArcOptionsScratch = {\n        positions : undefined,\n        height : undefined,\n        granularity : undefined,\n        ellipsoid : undefined\n    };\n\n    /**\n     * @private\n     */\n    WallGeometryLibrary.computePositions = function(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {\n        var o = removeDuplicates(ellipsoid, wallPositions, maximumHeights, minimumHeights);\n\n        if (!defined(o)) {\n            return;\n        }\n\n        wallPositions = o.positions;\n        maximumHeights = o.topHeights;\n        minimumHeights = o.bottomHeights;\n\n        if (wallPositions.length >= 3) {\n            // Order positions counter-clockwise\n            var tangentPlane = EllipsoidTangentPlane.fromPoints(wallPositions, ellipsoid);\n            var positions2D = tangentPlane.projectPointsOntoPlane(wallPositions);\n\n            if (PolygonPipeline.computeWindingOrder2D(positions2D) === WindingOrder.CLOCKWISE) {\n                wallPositions.reverse();\n                maximumHeights.reverse();\n                minimumHeights.reverse();\n            }\n        }\n\n        var length = wallPositions.length;\n        var numCorners = length - 2;\n        var topPositions;\n        var bottomPositions;\n\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n\n        var generateArcOptions = generateArcOptionsScratch;\n        generateArcOptions.minDistance = minDistance;\n        generateArcOptions.ellipsoid = ellipsoid;\n\n        if (duplicateCorners) {\n            var count = 0;\n            var i;\n\n            for (i = 0; i < length - 1; i++) {\n                count += PolylinePipeline.numberOfPoints(wallPositions[i], wallPositions[i+1], minDistance) + 1;\n            }\n\n            topPositions = new Float64Array(count * 3);\n            bottomPositions = new Float64Array(count * 3);\n\n            var generateArcPositions = positionsArrayScratch;\n            var generateArcHeights = heightsArrayScratch;\n            generateArcOptions.positions = generateArcPositions;\n            generateArcOptions.height = generateArcHeights;\n\n            var offset = 0;\n            for (i = 0; i < length - 1; i++) {\n                generateArcPositions[0] = wallPositions[i];\n                generateArcPositions[1] = wallPositions[i + 1];\n\n                generateArcHeights[0] = maximumHeights[i];\n                generateArcHeights[1] = maximumHeights[i + 1];\n\n                var pos = PolylinePipeline.generateArc(generateArcOptions);\n                topPositions.set(pos, offset);\n\n                generateArcHeights[0] = minimumHeights[i];\n                generateArcHeights[1] = minimumHeights[i + 1];\n\n                bottomPositions.set(PolylinePipeline.generateArc(generateArcOptions), offset);\n\n                offset += pos.length;\n            }\n        } else {\n            generateArcOptions.positions = wallPositions;\n            generateArcOptions.height = maximumHeights;\n            topPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\n\n            generateArcOptions.height = minimumHeights;\n            bottomPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\n        }\n\n        return {\n            bottomPositions: bottomPositions,\n            topPositions: topPositions,\n            numCorners: numCorners\n        };\n    };\nexport default WallGeometryLibrary;\n","import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\nimport WallGeometryLibrary from './WallGeometryLibrary.js';\n\n    var scratchCartesian3Position1 = new Cartesian3();\n    var scratchCartesian3Position2 = new Cartesian3();\n    var scratchCartesian3Position3 = new Cartesian3();\n    var scratchCartesian3Position4 = new Cartesian3();\n    var scratchCartesian3Position5 = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @alias WallGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\n     *\n     * @see WallGeometry#createGeometry\n     * @see WallGeometry#fromConstantHeight\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n     *\n     * @example\n     * // create a wall that spans from ground level to 10000 meters\n     * var wall = new Cesium.WallGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *     19.0, 47.0, 10000.0,\n     *     19.0, 48.0, 10000.0,\n     *     20.0, 48.0, 10000.0,\n     *     20.0, 47.0, 10000.0,\n     *     19.0, 47.0, 10000.0\n     *   ])\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     */\n    function WallGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var wallPositions = options.positions;\n        var maximumHeights = options.maximumHeights;\n        var minimumHeights = options.minimumHeights;\n\n        \n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._positions = wallPositions;\n        this._minimumHeights = minimumHeights;\n        this._maximumHeights = maximumHeights;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._granularity = granularity;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._workerName = 'createWallGeometry';\n\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n        if (defined(minimumHeights)) {\n            numComponents += minimumHeights.length;\n        }\n        if (defined(maximumHeights)) {\n            numComponents += maximumHeights.length;\n        }\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {WallGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    WallGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var minimumHeights = value._minimumHeights;\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(minimumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = minimumHeights[i];\n            }\n        }\n\n        var maximumHeights = value._maximumHeights;\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(maximumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = maximumHeights[i];\n            }\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex] = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        minimumHeights : undefined,\n        maximumHeights : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {WallGeometry} [result] The object into which to store the result.\n     * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n     */\n    WallGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var minimumHeights;\n\n        if (length > 0) {\n            minimumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                minimumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        length = array[startingIndex++];\n        var maximumHeights;\n\n        if (length > 0) {\n            maximumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                maximumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.minimumHeights = minimumHeights;\n            scratchOptions.maximumHeights = maximumHeights;\n            scratchOptions.granularity = granularity;\n            return new WallGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._minimumHeights = minimumHeights;\n        result._maximumHeights = maximumHeights;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @returns {WallGeometry}\n     *\n     *\n     * @example\n     * // create a wall that spans from 10000 meters to 20000 meters\n     * var wall = Cesium.WallGeometry.fromConstantHeights({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     19.0, 47.0,\n     *     19.0, 48.0,\n     *     20.0, 48.0,\n     *     20.0, 47.0,\n     *     19.0, 47.0,\n     *   ]),\n     *   minimumHeight : 20000.0,\n     *   maximumHeight : 10000.0\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     *\n     * @see WallGeometry#createGeometry\n     */\n    WallGeometry.fromConstantHeights = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n\n        \n\n        var minHeights;\n        var maxHeights;\n\n        var min = options.minimumHeight;\n        var max = options.maximumHeight;\n\n        var doMin = defined(min);\n        var doMax = defined(max);\n        if (doMin || doMax) {\n            var length = positions.length;\n            minHeights = (doMin) ? new Array(length) : undefined;\n            maxHeights = (doMax) ? new Array(length) : undefined;\n\n            for (var i = 0; i < length; ++i) {\n                if (doMin) {\n                    minHeights[i] = min;\n                }\n\n                if (doMax) {\n                    maxHeights[i] = max;\n                }\n            }\n        }\n\n        var newOptions = {\n            positions : positions,\n            maximumHeights : maxHeights,\n            minimumHeights : minHeights,\n            ellipsoid : options.ellipsoid,\n            vertexFormat : options.vertexFormat\n        };\n        return new WallGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {WallGeometry} wallGeometry A description of the wall.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    WallGeometry.createGeometry = function(wallGeometry) {\n        var wallPositions = wallGeometry._positions;\n        var minimumHeights = wallGeometry._minimumHeights;\n        var maximumHeights = wallGeometry._maximumHeights;\n        var vertexFormat = wallGeometry._vertexFormat;\n        var granularity = wallGeometry._granularity;\n        var ellipsoid = wallGeometry._ellipsoid;\n\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\n        if (!defined(pos)) {\n            return;\n        }\n\n        var bottomPositions = pos.bottomPositions;\n        var topPositions = pos.topPositions;\n        var numCorners = pos.numCorners;\n\n        var length = topPositions.length;\n        var size = length * 2;\n\n        var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n        var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\n\n        var positionIndex = 0;\n        var normalIndex = 0;\n        var bitangentIndex = 0;\n        var tangentIndex = 0;\n        var stIndex = 0;\n\n        // add lower and upper points one after the other, lower\n        // points being even and upper points being odd\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var recomputeNormal = true;\n        length /= 3;\n        var i;\n        var s = 0;\n        var ds = 1/(length - wallPositions.length + 1);\n        for (i = 0; i < length; ++i) {\n            var i3 = i * 3;\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n            if (vertexFormat.position) {\n                // insert the lower point\n                positions[positionIndex++] = bottomPosition.x;\n                positions[positionIndex++] = bottomPosition.y;\n                positions[positionIndex++] = bottomPosition.z;\n\n                // insert the upper point\n                positions[positionIndex++] = topPosition.x;\n                positions[positionIndex++] = topPosition.y;\n                positions[positionIndex++] = topPosition.z;\n            }\n\n            if (vertexFormat.st) {\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 0.0;\n\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 1.0;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                var nextPosition;\n                var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\n                var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\n                if (i + 1 < length) {\n                    nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\n                    nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\n                }\n\n                if (recomputeNormal) {\n                    var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\n                    var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\n                    normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\n                    recomputeNormal = false;\n                }\n\n                if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\n                    recomputeNormal = true;\n                } else {\n                    s += ds;\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\n                    }\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        // prepare the side walls, two triangles for each wall\n        //\n        //    A (i+1)  B (i+3) E\n        //    +--------+-------+\n        //    |      / |      /|    triangles:  A C B\n        //    |     /  |     / |                B C D\n        //    |    /   |    /  |\n        //    |   /    |   /   |\n        //    |  /     |  /    |\n        //    | /      | /     |\n        //    +--------+-------+\n        //    C (i)    D (i+2) F\n        //\n\n        var numVertices = size / 3;\n        size -= 6 * (numCorners + 1);\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n        var edgeIndex = 0;\n        for (i = 0; i < numVertices - 2; i += 2) {\n            var LL = i;\n            var LR = i + 2;\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            var UL = i + 1;\n            var UR = i + 3;\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere.fromVertices(positions)\n        });\n    };\nexport default WallGeometry;\n","import BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport WallGeometryLibrary from './WallGeometryLibrary.js';\n\n    var scratchCartesian3Position1 = new Cartesian3();\n    var scratchCartesian3Position2 = new Cartesian3();\n\n    /**\n     * A description of a wall outline. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @alias WallOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     *\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\n     *\n     * @see WallGeometry#createGeometry\n     * @see WallGeometry#fromConstantHeight\n     *\n     * @example\n     * // create a wall outline that spans from ground level to 10000 meters\n     * var wall = new Cesium.WallOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *     19.0, 47.0, 10000.0,\n     *     19.0, 48.0, 10000.0,\n     *     20.0, 48.0, 10000.0,\n     *     20.0, 47.0, 10000.0,\n     *     19.0, 47.0, 10000.0\n     *   ])\n     * });\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n     */\n    function WallOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var wallPositions = options.positions;\n        var maximumHeights = options.maximumHeights;\n        var minimumHeights = options.minimumHeights;\n\n        \n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._positions = wallPositions;\n        this._minimumHeights = minimumHeights;\n        this._maximumHeights = maximumHeights;\n        this._granularity = granularity;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._workerName = 'createWallOutlineGeometry';\n\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n        if (defined(minimumHeights)) {\n            numComponents += minimumHeights.length;\n        }\n        if (defined(maximumHeights)) {\n            numComponents += maximumHeights.length;\n        }\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + 1;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {WallOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    WallOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var minimumHeights = value._minimumHeights;\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(minimumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = minimumHeights[i];\n            }\n        }\n\n        var maximumHeights = value._maximumHeights;\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(maximumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = maximumHeights[i];\n            }\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        positions : undefined,\n        minimumHeights : undefined,\n        maximumHeights : undefined,\n        ellipsoid : scratchEllipsoid,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {WallOutlineGeometry} [result] The object into which to store the result.\n     * @returns {WallOutlineGeometry} The modified result parameter or a new WallOutlineGeometry instance if one was not provided.\n     */\n    WallOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var minimumHeights;\n\n        if (length > 0) {\n            minimumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                minimumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        length = array[startingIndex++];\n        var maximumHeights;\n\n        if (length > 0) {\n            maximumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                maximumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.minimumHeights = minimumHeights;\n            scratchOptions.maximumHeights = maximumHeights;\n            scratchOptions.granularity = granularity;\n            return new WallOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._minimumHeights = minimumHeights;\n        result._maximumHeights = maximumHeights;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    /**\n     * A description of a walloutline. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @returns {WallOutlineGeometry}\n     *\n     *\n     * @example\n     * // create a wall that spans from 10000 meters to 20000 meters\n     * var wall = Cesium.WallOutlineGeometry.fromConstantHeights({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     19.0, 47.0,\n     *     19.0, 48.0,\n     *     20.0, 48.0,\n     *     20.0, 47.0,\n     *     19.0, 47.0,\n     *   ]),\n     *   minimumHeight : 20000.0,\n     *   maximumHeight : 10000.0\n     * });\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n     *\n     * @see WallOutlineGeometry#createGeometry\n     */\n    WallOutlineGeometry.fromConstantHeights = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n\n        \n\n        var minHeights;\n        var maxHeights;\n\n        var min = options.minimumHeight;\n        var max = options.maximumHeight;\n\n        var doMin = defined(min);\n        var doMax = defined(max);\n        if (doMin || doMax) {\n            var length = positions.length;\n            minHeights = (doMin) ? new Array(length) : undefined;\n            maxHeights = (doMax) ? new Array(length) : undefined;\n\n            for (var i = 0; i < length; ++i) {\n                if (doMin) {\n                    minHeights[i] = min;\n                }\n\n                if (doMax) {\n                    maxHeights[i] = max;\n                }\n            }\n        }\n\n        var newOptions = {\n            positions : positions,\n            maximumHeights : maxHeights,\n            minimumHeights : minHeights,\n            ellipsoid : options.ellipsoid\n        };\n        return new WallOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a wall outline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {WallOutlineGeometry} wallGeometry A description of the wall outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    WallOutlineGeometry.createGeometry = function(wallGeometry) {\n        var wallPositions = wallGeometry._positions;\n        var minimumHeights = wallGeometry._minimumHeights;\n        var maximumHeights = wallGeometry._maximumHeights;\n        var granularity = wallGeometry._granularity;\n        var ellipsoid = wallGeometry._ellipsoid;\n\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, false);\n        if (!defined(pos)) {\n            return;\n        }\n\n        var bottomPositions = pos.bottomPositions;\n        var topPositions = pos.topPositions;\n\n        var length = topPositions.length;\n        var size = length * 2;\n\n        var positions = new Float64Array(size);\n        var positionIndex = 0;\n\n        // add lower and upper points one after the other, lower\n        // points being even and upper points being odd\n        length /= 3;\n        var i;\n        for (i = 0; i < length; ++i) {\n            var i3 = i * 3;\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n\n            // insert the lower point\n            positions[positionIndex++] = bottomPosition.x;\n            positions[positionIndex++] = bottomPosition.y;\n            positions[positionIndex++] = bottomPosition.z;\n\n            // insert the upper point\n            positions[positionIndex++] = topPosition.x;\n            positions[positionIndex++] = topPosition.y;\n            positions[positionIndex++] = topPosition.z;\n        }\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        var numVertices = size / 3;\n        size = 2 * numVertices - 4 + numVertices;\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n        var edgeIndex = 0;\n        for (i = 0; i < numVertices - 2; i += 2) {\n            var LL = i;\n            var LR = i + 2;\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            var UL = i + 1;\n            var UR = i + 3;\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        indices[edgeIndex++] = numVertices - 2;\n        indices[edgeIndex++] = numVertices - 1;\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : new BoundingSphere.fromVertices(positions)\n        });\n    };\nexport default WallOutlineGeometry;\n","import Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport WallGeometry from '../Core/WallGeometry.js';\nimport WallOutlineGeometry from '../Core/WallOutlineGeometry.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryUpdater from './DynamicGeometryUpdater.js';\nimport GeometryUpdater from './GeometryUpdater.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n\n    function WallGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.minimumHeights = undefined;\n        this.maximumHeights = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for walls.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias WallGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function WallGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new WallGeometryOptions(entity),\n            geometryPropertyName : 'wall',\n            observedPropertyNames : ['availability', 'wall']\n        });\n\n        this._onEntityPropertyChanged(entity, 'wall', entity.wall, undefined);\n    }\n\n    if (defined(Object.create)) {\n        WallGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        WallGeometryUpdater.prototype.constructor = WallGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    WallGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new WallGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    WallGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new WallOutlineGeometry(this._options),\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    WallGeometryUpdater.prototype._isHidden = function(entity, wall) {\n        return !defined(wall.positions) || GeometryUpdater.prototype._isHidden.call(this, entity, wall);\n    };\n\n    WallGeometryUpdater.prototype._getIsClosed = function(options) {\n        return false;\n    };\n\n    WallGeometryUpdater.prototype._isDynamic = function(entity, wall) {\n        return !wall.positions.isConstant || //\n               !Property.isConstant(wall.minimumHeights) || //\n               !Property.isConstant(wall.maximumHeights) || //\n               !Property.isConstant(wall.outlineWidth) || //\n               !Property.isConstant(wall.granularity);\n    };\n\n    WallGeometryUpdater.prototype._setStaticOptions = function(entity, wall) {\n        var minimumHeights = wall.minimumHeights;\n        var maximumHeights = wall.maximumHeights;\n        var granularity = wall.granularity;\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.positions = wall.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n        options.minimumHeights = defined(minimumHeights) ? minimumHeights.getValue(Iso8601.MINIMUM_VALUE, options.minimumHeights) : undefined;\n        options.maximumHeights = defined(maximumHeights) ? maximumHeights.getValue(Iso8601.MINIMUM_VALUE, options.maximumHeights) : undefined;\n        options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n    };\n\n    WallGeometryUpdater.DynamicGeometryUpdater = DynamicWallGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicWallGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicWallGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicWallGeometryUpdater.prototype.constructor = DynamicWallGeometryUpdater;\n    }\n\n    DynamicWallGeometryUpdater.prototype._isHidden = function(entity, wall, time) {\n        return  !defined(this._options.positions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, wall, time);\n    };\n\n    DynamicWallGeometryUpdater.prototype._setOptions = function(entity, wall, time) {\n        var options = this._options;\n        options.positions = Property.getValueOrUndefined(wall.positions, time, options.positions);\n        options.minimumHeights = Property.getValueOrUndefined(wall.minimumHeights, time, options.minimumHeights);\n        options.maximumHeights = Property.getValueOrUndefined(wall.maximumHeights, time, options.maximumHeights);\n        options.granularity = Property.getValueOrUndefined(wall.granularity, time);\n    };\nexport default WallGeometryUpdater;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Check from '../Core/Check.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Event from '../Core/Event.js';\nimport EventHelper from '../Core/EventHelper.js';\nimport ClassificationType from '../Scene/ClassificationType.js';\nimport MaterialAppearance from '../Scene/MaterialAppearance.js';\nimport PerInstanceColorAppearance from '../Scene/PerInstanceColorAppearance.js';\nimport ShadowMode from '../Scene/ShadowMode.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport BoxGeometryUpdater from './BoxGeometryUpdater.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport CorridorGeometryUpdater from './CorridorGeometryUpdater.js';\nimport CylinderGeometryUpdater from './CylinderGeometryUpdater.js';\nimport DynamicGeometryBatch from './DynamicGeometryBatch.js';\nimport EllipseGeometryUpdater from './EllipseGeometryUpdater.js';\nimport EllipsoidGeometryUpdater from './EllipsoidGeometryUpdater.js';\nimport Entity from './Entity.js';\nimport PlaneGeometryUpdater from './PlaneGeometryUpdater.js';\nimport PolygonGeometryUpdater from './PolygonGeometryUpdater.js';\nimport PolylineVolumeGeometryUpdater from './PolylineVolumeGeometryUpdater.js';\nimport RectangleGeometryUpdater from './RectangleGeometryUpdater.js';\nimport StaticGeometryColorBatch from './StaticGeometryColorBatch.js';\nimport StaticGeometryPerMaterialBatch from './StaticGeometryPerMaterialBatch.js';\nimport StaticGroundGeometryColorBatch from './StaticGroundGeometryColorBatch.js';\nimport StaticGroundGeometryPerMaterialBatch from './StaticGroundGeometryPerMaterialBatch.js';\nimport StaticOutlineGeometryBatch from './StaticOutlineGeometryBatch.js';\nimport WallGeometryUpdater from './WallGeometryUpdater.js';\n\n    var emptyArray = [];\n\n    var geometryUpdaters = [BoxGeometryUpdater, CylinderGeometryUpdater, CorridorGeometryUpdater, EllipseGeometryUpdater, EllipsoidGeometryUpdater, PlaneGeometryUpdater,\n                            PolygonGeometryUpdater, PolylineVolumeGeometryUpdater, RectangleGeometryUpdater, WallGeometryUpdater];\n\n    function GeometryUpdaterSet(entity, scene) {\n        this.entity = entity;\n        this.scene = scene;\n        var updaters = new Array(geometryUpdaters.length);\n        var geometryChanged = new Event();\n        function raiseEvent(geometry) {\n            geometryChanged.raiseEvent(geometry);\n        }\n        var eventHelper = new EventHelper();\n        for (var i = 0; i < updaters.length; i++) {\n            var updater = new geometryUpdaters[i](entity, scene);\n            eventHelper.add(updater.geometryChanged, raiseEvent);\n            updaters[i] = updater;\n        }\n        this.updaters = updaters;\n        this.geometryChanged = geometryChanged;\n        this.eventHelper = eventHelper;\n\n        this._removeEntitySubscription = entity.definitionChanged.addEventListener(GeometryUpdaterSet.prototype._onEntityPropertyChanged, this);\n    }\n\n    GeometryUpdaterSet.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            updaters[i]._onEntityPropertyChanged(entity, propertyName, newValue, oldValue);\n        }\n    };\n\n    GeometryUpdaterSet.prototype.forEach = function (callback) {\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            callback(updaters[i]);\n        }\n    };\n\n    GeometryUpdaterSet.prototype.destroy = function() {\n        this.eventHelper.removeAll();\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            updaters[i].destroy();\n        }\n        this._removeEntitySubscription();\n        destroyObject(this);\n    };\n\n    /**\n     * A general purpose visualizer for geometry represented by {@link Primitive} instances.\n     * @alias GeometryVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n     * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n     */\n    function GeometryVisualizer(scene, entityCollection, primitives, groundPrimitives) {\n        \n\n        primitives = defaultValue(primitives, scene.primitives);\n        groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n\n        this._scene = scene;\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n        this._entityCollection = undefined;\n        this._addedObjects = new AssociativeArray();\n        this._removedObjects = new AssociativeArray();\n        this._changedObjects = new AssociativeArray();\n\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        this._outlineBatches = new Array(numberOfShadowModes*2);\n        this._closedColorBatches = new Array(numberOfShadowModes*2);\n        this._closedMaterialBatches = new Array(numberOfShadowModes*2);\n        this._openColorBatches = new Array(numberOfShadowModes*2);\n        this._openMaterialBatches = new Array(numberOfShadowModes*2);\n\n        var supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(scene);\n        this._supportsMaterialsforEntitiesOnTerrain = supportsMaterialsforEntitiesOnTerrain;\n\n        var i;\n        for (i = 0; i < numberOfShadowModes; ++i) {\n            this._outlineBatches[i] = new StaticOutlineGeometryBatch(primitives, scene, i, false);\n            this._outlineBatches[numberOfShadowModes + i] = new StaticOutlineGeometryBatch(primitives, scene, i, true);\n\n            this._closedColorBatches[i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, true, i, true);\n            this._closedColorBatches[numberOfShadowModes + i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, true, i, false);\n\n            this._closedMaterialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, true, i, true);\n            this._closedMaterialBatches[numberOfShadowModes + i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, true, i, false);\n\n            this._openColorBatches[i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, false, i, true);\n            this._openColorBatches[numberOfShadowModes + i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, false, i, false);\n\n            this._openMaterialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, false, i, true);\n            this._openMaterialBatches[numberOfShadowModes + i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, false, i, false);\n        }\n\n        var numberOfClassificationTypes = ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n        var groundColorBatches = new Array(numberOfClassificationTypes);\n        var groundMaterialBatches = [];\n        if (supportsMaterialsforEntitiesOnTerrain) {\n            for (i = 0; i < numberOfClassificationTypes; ++i) {\n                groundMaterialBatches.push(new StaticGroundGeometryPerMaterialBatch(groundPrimitives, i, MaterialAppearance));\n                groundColorBatches[i] = new StaticGroundGeometryColorBatch(groundPrimitives, i);\n            }\n        } else {\n            for (i = 0; i < numberOfClassificationTypes; ++i) {\n                groundColorBatches[i] = new StaticGroundGeometryColorBatch(groundPrimitives, i);\n            }\n        }\n\n        this._groundColorBatches = groundColorBatches;\n        this._groundMaterialBatches = groundMaterialBatches;\n\n        this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n        this._batches = this._outlineBatches.concat(this._closedColorBatches, this._closedMaterialBatches, this._openColorBatches, this._openMaterialBatches, this._groundColorBatches, this._groundMaterialBatches, this._dynamicBatch);\n\n        this._subscriptions = new AssociativeArray();\n        this._updaterSets = new AssociativeArray();\n\n        this._entityCollection = entityCollection;\n        entityCollection.collectionChanged.addEventListener(GeometryVisualizer.prototype._onCollectionChanged, this);\n        this._onCollectionChanged(entityCollection, entityCollection.values, emptyArray);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n     * false if the visualizer is waiting for asynchronous primitives to be created.\n     */\n    GeometryVisualizer.prototype.update = function(time) {\n        \n\n        var addedObjects = this._addedObjects;\n        var added = addedObjects.values;\n        var removedObjects = this._removedObjects;\n        var removed = removedObjects.values;\n        var changedObjects = this._changedObjects;\n        var changed = changedObjects.values;\n\n        var i;\n        var entity;\n        var id;\n        var updaterSet;\n        var that = this;\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            id = entity.id;\n            updaterSet = this._updaterSets.get(id);\n\n            //If in a single update, an entity gets removed and a new instance\n            //re-added with the same id, the updater no longer tracks the\n            //correct entity, we need to both remove the old one and\n            //add the new one, which is done by pushing the entity\n            //onto the removed/added lists.\n            if (updaterSet.entity === entity) {\n                updaterSet.forEach(function(updater) {\n                    that._removeUpdater(updater);\n                    that._insertUpdaterIntoBatch(time, updater);\n                });\n            } else {\n                removed.push(entity);\n                added.push(entity);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            updaterSet = this._updaterSets.get(id);\n            updaterSet.forEach(this._removeUpdater.bind(this));\n            updaterSet.destroy();\n            this._updaterSets.remove(id);\n            this._subscriptions.get(id)();\n            this._subscriptions.remove(id);\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            updaterSet = new GeometryUpdaterSet(entity, this._scene);\n            this._updaterSets.set(id, updaterSet);\n            updaterSet.forEach(function(updater) {\n                that._insertUpdaterIntoBatch(time, updater);\n            });\n            this._subscriptions.set(id, updaterSet.geometryChanged.addEventListener(GeometryVisualizer._onGeometryChanged, this));\n        }\n\n        addedObjects.removeAll();\n        removedObjects.removeAll();\n        changedObjects.removeAll();\n\n        var isUpdated = true;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            isUpdated = batches[i].update(time) && isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    GeometryVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var batches = this._batches;\n        var batchesLength = batches.length;\n\n        var id = entity.id;\n        var updaters = this._updaterSets.get(id).updaters;\n\n        for (var j = 0; j < updaters.length; j++) {\n            var updater = updaters[j];\n            for (var i = 0; i < batchesLength; i++) {\n                state = batches[i].getBoundingSphere(updater, tmp);\n                if (state === BoundingSphereState.PENDING) {\n                    return BoundingSphereState.PENDING;\n                } else if (state === BoundingSphereState.DONE) {\n                    boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                    count++;\n                }\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    GeometryVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    GeometryVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(GeometryVisualizer.prototype._onCollectionChanged, this);\n        this._addedObjects.removeAll();\n        this._removedObjects.removeAll();\n\n        var i;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            batches[i].removeAllPrimitives();\n        }\n\n        var subscriptions = this._subscriptions.values;\n        length = subscriptions.length;\n        for (i = 0; i < length; i++) {\n            subscriptions[i]();\n        }\n        this._subscriptions.removeAll();\n\n        var updaterSets = this._updaterSets.values;\n        length = updaterSets.length;\n        for (i = 0; i < length; i++) {\n            updaterSets[i].destroy();\n        }\n        this._updaterSets.removeAll();\n        return destroyObject(this);\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._removeUpdater = function(updater) {\n        //We don't keep track of which batch an updater is in, so just remove it from all of them.\n        var batches = this._batches;\n        var length = batches.length;\n        for (var i = 0; i < length; i++) {\n            batches[i].remove(updater);\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._insertUpdaterIntoBatch = function(time, updater) {\n        if (updater.isDynamic) {\n            this._dynamicBatch.add(time, updater);\n            return;\n        }\n\n        var shadows;\n        if (updater.outlineEnabled || updater.fillEnabled) {\n            shadows = updater.shadowsProperty.getValue(time);\n        }\n\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        if (updater.outlineEnabled) {\n            if (defined(updater.terrainOffsetProperty)) {\n                this._outlineBatches[numberOfShadowModes + shadows].add(time, updater);\n            } else {\n                this._outlineBatches[shadows].add(time, updater);\n            }\n        }\n\n        if (updater.fillEnabled) {\n            if (updater.onTerrain) {\n                var classificationType = updater.classificationTypeProperty.getValue(time);\n                if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                    this._groundColorBatches[classificationType].add(time, updater);\n                } else {\n                    // If unsupported, updater will not be on terrain.\n                    this._groundMaterialBatches[classificationType].add(time, updater);\n                }\n            } else if (updater.isClosed) {\n                if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                    if (defined(updater.terrainOffsetProperty)) {\n                        this._closedColorBatches[numberOfShadowModes + shadows].add(time, updater);\n                    } else {\n                        this._closedColorBatches[shadows].add(time, updater);\n                    }\n                } else if (defined(updater.terrainOffsetProperty)) {\n                    this._closedMaterialBatches[numberOfShadowModes + shadows].add(time, updater);\n                } else {\n                    this._closedMaterialBatches[shadows].add(time, updater);\n                }\n            } else if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                if (defined(updater.terrainOffsetProperty)) {\n                    this._openColorBatches[numberOfShadowModes + shadows].add(time, updater);\n                } else {\n                    this._openColorBatches[shadows].add(time, updater);\n                }\n            } else if (defined(updater.terrainOffsetProperty)) {\n                this._openMaterialBatches[numberOfShadowModes + shadows].add(time, updater);\n            } else {\n                this._openMaterialBatches[shadows].add(time, updater);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer._onGeometryChanged = function(updater) {\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var entity = updater.entity;\n        var id = entity.id;\n\n        if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n            changedObjects.set(id, entity);\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed) {\n        var addedObjects = this._addedObjects;\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var i;\n        var id;\n        var entity;\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            if (!addedObjects.remove(id)) {\n                removedObjects.set(id, entity);\n                changedObjects.remove(id);\n            }\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            if (removedObjects.remove(id)) {\n                changedObjects.set(id, entity);\n            } else {\n                addedObjects.set(id, entity);\n            }\n        }\n    };\nexport default GeometryVisualizer;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport NearFarScalar from '../Core/NearFarScalar.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport HorizontalOrigin from '../Scene/HorizontalOrigin.js';\nimport LabelStyle from '../Scene/LabelStyle.js';\nimport VerticalOrigin from '../Scene/VerticalOrigin.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\n    var defaultScale = 1.0;\n    var defaultFont = '30px sans-serif';\n    var defaultStyle = LabelStyle.FILL;\n    var defaultFillColor = Color.WHITE;\n    var defaultOutlineColor = Color.BLACK;\n    var defaultOutlineWidth = 1.0;\n    var defaultShowBackground = false;\n    var defaultBackgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\n    var defaultBackgroundPadding = new Cartesian2(7, 5);\n    var defaultPixelOffset = Cartesian2.ZERO;\n    var defaultEyeOffset = Cartesian3.ZERO;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultHorizontalOrigin = HorizontalOrigin.CENTER;\n    var defaultVerticalOrigin = VerticalOrigin.CENTER;\n\n    var positionScratch = new Cartesian3();\n    var fillColorScratch = new Color();\n    var outlineColorScratch = new Color();\n    var backgroundColorScratch = new Color();\n    var backgroundPaddingScratch = new Cartesian2();\n    var eyeOffsetScratch = new Cartesian3();\n    var pixelOffsetScratch = new Cartesian2();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var pixelOffsetScaleByDistanceScratch = new NearFarScalar();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.label = undefined;\n        this.index = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps the {@link LabelGraphics} instance\n     * in {@link Entity#label} to a {@link Label}.\n     * @alias LabelVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function LabelVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    LabelVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var labelGraphics = entity._label;\n            var text;\n            var label = item.label;\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(labelGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                text = Property.getValueOrUndefined(labelGraphics._text, time);\n                show = defined(position) && defined(text);\n            }\n\n            if (!show) {\n                //don't bother creating or updating anything else\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            var updateClamping = false;\n            var heightReference = Property.getValueOrDefault(labelGraphics._heightReference, time, defaultHeightReference);\n\n            if (!defined(label)) {\n                label = cluster.getLabel(entity);\n                label.id = entity;\n                item.label = label;\n\n                // If this new label happens to have a position and height reference that match our new values,\n                // label._updateClamping will not be called automatically. That's a problem because the clamped\n                // height may be based on different terrain than is now loaded. So we'll manually call\n                // _updateClamping below.\n                updateClamping = Cartesian3.equals(label.position, position) && label.heightReference === heightReference;\n            }\n\n            label.show = true;\n            label.position = position;\n            label.text = text;\n            label.scale = Property.getValueOrDefault(labelGraphics._scale, time, defaultScale);\n            label.font = Property.getValueOrDefault(labelGraphics._font, time, defaultFont);\n            label.style = Property.getValueOrDefault(labelGraphics._style, time, defaultStyle);\n            label.fillColor = Property.getValueOrDefault(labelGraphics._fillColor, time, defaultFillColor, fillColorScratch);\n            label.outlineColor = Property.getValueOrDefault(labelGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n            label.outlineWidth = Property.getValueOrDefault(labelGraphics._outlineWidth, time, defaultOutlineWidth);\n            label.showBackground = Property.getValueOrDefault(labelGraphics._showBackground, time, defaultShowBackground);\n            label.backgroundColor = Property.getValueOrDefault(labelGraphics._backgroundColor, time, defaultBackgroundColor, backgroundColorScratch);\n            label.backgroundPadding = Property.getValueOrDefault(labelGraphics._backgroundPadding, time, defaultBackgroundPadding, backgroundPaddingScratch);\n            label.pixelOffset = Property.getValueOrDefault(labelGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n            label.eyeOffset = Property.getValueOrDefault(labelGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n            label.heightReference = heightReference;\n            label.horizontalOrigin = Property.getValueOrDefault(labelGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n            label.verticalOrigin = Property.getValueOrDefault(labelGraphics._verticalOrigin, time, defaultVerticalOrigin);\n            label.translucencyByDistance = Property.getValueOrUndefined(labelGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n            label.pixelOffsetScaleByDistance = Property.getValueOrUndefined(labelGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n            label.scaleByDistance = Property.getValueOrUndefined(labelGraphics._scaleByDistance, time, scaleByDistanceScratch);\n            label.distanceDisplayCondition = Property.getValueOrUndefined(labelGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n            label.disableDepthTestDistance = Property.getValueOrUndefined(labelGraphics._disableDepthTestDistance, time);\n\n            if (updateClamping) {\n                label._updateClamping();\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    LabelVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !defined(item.label)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var label = item.label;\n        result.center = Cartesian3.clone(defaultValue(label._clampedPosition, label.position), result.center);\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    LabelVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    LabelVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removeLabel(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    LabelVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._label) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._label) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            item.label = undefined;\n            cluster.removeLabel(entity);\n        }\n    }\nexport default LabelVisualizer;\n","import Check from '../Core/Check.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\n\n    /**\n     * An enum describing the x, y, and z axes and helper conversion functions.\n     *\n     * @exports Axis\n     * @private\n     */\n    var Axis = {\n        /**\n         * Denotes the x-axis.\n         *\n         * @type {Number}\n         * @constant\n         */\n        X : 0,\n\n        /**\n         * Denotes the y-axis.\n         *\n         * @type {Number}\n         * @constant\n         */\n        Y : 1,\n\n        /**\n         * Denotes the z-axis.\n         *\n         * @type {Number}\n         * @constant\n         */\n        Z : 2,\n\n        /**\n         * Matrix used to convert from y-up to z-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        Y_UP_TO_Z_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationX(CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Matrix used to convert from z-up to y-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        Z_UP_TO_Y_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationX(-CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Matrix used to convert from x-up to z-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        X_UP_TO_Z_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationY(-CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Matrix used to convert from z-up to x-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        Z_UP_TO_X_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationY(CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Matrix used to convert from x-up to y-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        X_UP_TO_Y_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationZ(CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Matrix used to convert from y-up to x-up\n         *\n         * @type {Matrix4}\n         * @constant\n         */\n        Y_UP_TO_X_UP : Matrix4.fromRotationTranslation(Matrix3.fromRotationZ(-CesiumMath.PI_OVER_TWO)),\n\n        /**\n         * Gets the axis by name\n         *\n         * @param {String} name The name of the axis.\n         * @returns {Number} The axis enum.\n         */\n        fromName : function(name) {\n            \n\n            return Axis[name];\n        }\n    };\nexport default Object.freeze(Axis);\n","import defaultValue from './defaultValue.js';\nimport getStringFromTypedArray from './getStringFromTypedArray.js';\n\n    /**\n     * @private\n     */\n    function getMagic(uint8Array, byteOffset) {\n        byteOffset = defaultValue(byteOffset, 0);\n        return getStringFromTypedArray(uint8Array, byteOffset, Math.min(4, uint8Array.length));\n    }\nexport default getMagic;\n","import when from '../ThirdParty/when.js';\nimport Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport Resource from './Resource.js';\n\n    /**\n     * @private\n     */\n    function loadImageFromTypedArray(options) {\n        var uint8Array = options.uint8Array;\n        var format = options.format;\n        var request = options.request;\n        var flipY = defaultValue(options.flipY, false);\n        \n\n        var blob = new Blob([uint8Array], {\n            type : format\n        });\n\n        var blobUrl;\n        return Resource.supportsImageBitmapOptions()\n            .then(function(result) {\n                if (result) {\n                    return when(Resource.createImageBitmapFromBlob(blob, {\n                        flipY: flipY,\n                        premultiplyAlpha: false\n                    }));\n                }\n\n                blobUrl = window.URL.createObjectURL(blob);\n                var resource = new Resource({\n                    url: blobUrl,\n                    request: request\n                });\n\n                return resource.fetchImage({\n                    flipY : flipY\n                });\n            })\n            .then(function(result) {\n                if (defined(blobUrl)) {\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n                return result;\n            })\n            .otherwise(function(error) {\n                if (defined(blobUrl)) {\n                    window.URL.revokeObjectURL(blobUrl);\n                }\n                return when.reject(error);\n            });\n    }\nexport default loadImageFromTypedArray;\n","import defaultValue from '../../Core/defaultValue.js'\n\n    /**\n     * Adds an element to an array and returns the element's index.\n     *\n     * @param {Array} array The array to add to.\n     * @param {Object} element The element to add.\n     * @param {Boolean} [checkDuplicates=false] When <code>true</code>, if a duplicate element is found its index is returned and <code>element</code> is not added to the array.\n     *\n     * @private\n     */\n    function addToArray(array, element, checkDuplicates) {\n        checkDuplicates = defaultValue(checkDuplicates, false);\n        if (checkDuplicates) {\n            var index = array.indexOf(element);\n            if (index > -1) {\n                return index;\n            }\n        }\n\n        array.push(element);\n        return array.length - 1;\n    }\n\n    export default addToArray;\n","import defined from '../../Core/defined.js'\n\n    /**\n     * Checks whether the glTF has the given extension.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String} extension The name of the extension.\n     * @returns {Boolean} Whether the glTF has the given extension.\n     *\n     * @private\n     */\n    function hasExtension(gltf, extension) {\n        return defined(gltf.extensionsUsed) && (gltf.extensionsUsed.indexOf(extension) >= 0);\n    }\n\n    export default hasExtension;\n","import hasExtension from './hasExtension.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Contains traversal functions for processing elements of the glTF hierarchy.\n     * @constructor\n     *\n     * @private\n     */\n    function ForEach() {\n    }\n\n    /**\n     * Fallback for glTF 1.0\n     * @private\n     */\n    ForEach.objectLegacy = function(objects, handler) {\n        if (defined(objects)) {\n            for (var objectId in objects) {\n                if (Object.prototype.hasOwnProperty.call(objects, objectId)) {\n                    var object = objects[objectId];\n                    var value = handler(object, objectId);\n\n                    if (defined(value)) {\n                        return value;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    ForEach.object = function(arrayOfObjects, handler) {\n        if (defined(arrayOfObjects)) {\n            var length = arrayOfObjects.length;\n            for (var i = 0; i < length; i++) {\n                var object = arrayOfObjects[i];\n                var value = handler(object, i);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Supports glTF 1.0 and 2.0\n     * @private\n     */\n    ForEach.topLevel = function(gltf, name, handler) {\n        var gltfProperty = gltf[name];\n        if (defined(gltfProperty) && !Array.isArray(gltfProperty)) {\n            return ForEach.objectLegacy(gltfProperty, handler);\n        }\n\n        return ForEach.object(gltfProperty, handler);\n    };\n\n    ForEach.accessor = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'accessors', handler);\n    };\n\n    ForEach.accessorWithSemantic = function(gltf, semantic, handler) {\n        var visited = {};\n        return ForEach.mesh(gltf, function(mesh) {\n            return ForEach.meshPrimitive(mesh, function(primitive) {\n                var valueForEach = ForEach.meshPrimitiveAttribute(primitive, function(accessorId, attributeSemantic) {\n                    if (attributeSemantic.indexOf(semantic) === 0 && !defined(visited[accessorId])) {\n                        visited[accessorId] = true;\n                        var value = handler(accessorId);\n\n                        if (defined(value)) {\n                            return value;\n                        }\n                    }\n                });\n\n                if (defined(valueForEach)) {\n                    return valueForEach;\n                }\n\n                return ForEach.meshPrimitiveTarget(primitive, function(target) {\n                    return ForEach.meshPrimitiveTargetAttribute(target, function(accessorId, attributeSemantic) {\n                        if (attributeSemantic.indexOf(semantic) === 0 && !defined(visited[accessorId])) {\n                            visited[accessorId] = true;\n                            var value = handler(accessorId);\n\n                            if (defined(value)) {\n                                return value;\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    };\n\n    ForEach.accessorContainingVertexAttributeData = function(gltf, handler) {\n        var visited = {};\n        return ForEach.mesh(gltf, function(mesh) {\n            return ForEach.meshPrimitive(mesh, function(primitive) {\n                var valueForEach = ForEach.meshPrimitiveAttribute(primitive, function(accessorId) {\n                    if (!defined(visited[accessorId])) {\n                        visited[accessorId] = true;\n                        var value = handler(accessorId);\n\n                        if (defined(value)) {\n                            return value;\n                        }\n                    }\n                });\n\n                if (defined(valueForEach)) {\n                    return valueForEach;\n                }\n\n                return ForEach.meshPrimitiveTarget(primitive, function(target) {\n                    return ForEach.meshPrimitiveTargetAttribute(target, function(accessorId) {\n                        if (!defined(visited[accessorId])) {\n                            visited[accessorId] = true;\n                            var value = handler(accessorId);\n\n                            if (defined(value)) {\n                                return value;\n                            }\n                        }\n                    });\n                });\n            });\n        });\n    };\n\n    ForEach.accessorContainingIndexData = function(gltf, handler) {\n        var visited = {};\n        return ForEach.mesh(gltf, function(mesh) {\n            return ForEach.meshPrimitive(mesh, function(primitive) {\n                var indices = primitive.indices;\n                if (defined(indices) && !defined(visited[indices])) {\n                    visited[indices] = true;\n                    var value = handler(indices);\n\n                    if (defined(value)) {\n                        return value;\n                    }\n                }\n            });\n        });\n    };\n\n    ForEach.animation = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'animations', handler);\n    };\n\n    ForEach.animationChannel = function(animation, handler) {\n        var channels = animation.channels;\n        return ForEach.object(channels, handler);\n    };\n\n    ForEach.animationSampler = function(animation, handler) {\n        var samplers = animation.samplers;\n        return ForEach.object(samplers, handler);\n    };\n\n    ForEach.buffer = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'buffers', handler);\n    };\n\n    ForEach.bufferView = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'bufferViews', handler);\n    };\n\n    ForEach.camera = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'cameras', handler);\n    };\n\n    ForEach.image = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'images', handler);\n    };\n\n    ForEach.compressedImage = function(image, handler) {\n        if (defined(image.extras)) {\n            var compressedImages = image.extras.compressedImage3DTiles;\n            for (var type in compressedImages) {\n                if (Object.prototype.hasOwnProperty.call(compressedImages, type)) {\n                    var compressedImage = compressedImages[type];\n                    var value = handler(compressedImage, type);\n\n                    if (defined(value)) {\n                        return value;\n                    }\n                }\n            }\n        }\n    };\n\n    ForEach.material = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'materials', handler);\n    };\n\n    ForEach.materialValue = function(material, handler) {\n        var values = material.values;\n        if (defined(material.extensions) && defined(material.extensions.KHR_techniques_webgl)) {\n            values = material.extensions.KHR_techniques_webgl.values;\n        }\n\n        for (var name in values) {\n            if (Object.prototype.hasOwnProperty.call(values, name)) {\n                var value = handler(values[name], name);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.mesh = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'meshes', handler);\n    };\n\n    ForEach.meshPrimitive = function(mesh, handler) {\n        var primitives = mesh.primitives;\n        if (defined(primitives)) {\n            var primitivesLength = primitives.length;\n            for (var i = 0; i < primitivesLength; i++) {\n                var primitive = primitives[i];\n                var value = handler(primitive, i);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.meshPrimitiveAttribute = function(primitive, handler) {\n        var attributes = primitive.attributes;\n        for (var semantic in attributes) {\n            if (Object.prototype.hasOwnProperty.call(attributes, semantic)) {\n                var value = handler(attributes[semantic], semantic);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.meshPrimitiveTarget = function(primitive, handler) {\n        var targets = primitive.targets;\n        if (defined(targets)) {\n            var length = targets.length;\n            for (var i = 0; i < length; ++i) {\n                var value = handler(targets[i], i);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.meshPrimitiveTargetAttribute = function(target, handler) {\n        for (var semantic in target) {\n            if (Object.prototype.hasOwnProperty.call(target, semantic)) {\n                var accessorId = target[semantic];\n                var value = handler(accessorId, semantic);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.node = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'nodes', handler);\n    };\n\n    ForEach.nodeInTree = function(gltf, nodeIds, handler) {\n        var nodes = gltf.nodes;\n        if (defined(nodes)) {\n            var length = nodeIds.length;\n            for (var i = 0; i < length; i++) {\n                var nodeId = nodeIds[i];\n                var node = nodes[nodeId];\n                if (defined(node)) {\n                    var value = handler(node, nodeId);\n\n                    if (defined(value)) {\n                        return value;\n                    }\n\n                    var children = node.children;\n                    if (defined(children)) {\n                        value = ForEach.nodeInTree(gltf, children, handler);\n\n                        if (defined(value)) {\n                            return value;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    ForEach.nodeInScene = function(gltf, scene, handler) {\n        var sceneNodeIds = scene.nodes;\n        if (defined(sceneNodeIds)) {\n            return ForEach.nodeInTree(gltf, sceneNodeIds, handler);\n        }\n    };\n\n    ForEach.program = function(gltf, handler) {\n        if (hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return ForEach.object(gltf.extensions.KHR_techniques_webgl.programs, handler);\n        }\n\n        return ForEach.topLevel(gltf, 'programs', handler);\n    };\n\n    ForEach.sampler = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'samplers', handler);\n    };\n\n    ForEach.scene = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'scenes', handler);\n    };\n\n    ForEach.shader = function(gltf, handler) {\n        if (hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return ForEach.object(gltf.extensions.KHR_techniques_webgl.shaders, handler);\n        }\n\n        return ForEach.topLevel(gltf, 'shaders', handler);\n    };\n\n    ForEach.skin = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'skins', handler);\n    };\n\n    ForEach.skinJoint = function(skin, handler) {\n        var joints = skin.joints;\n        if (defined(joints)) {\n            var jointsLength = joints.length;\n            for (var i = 0; i < jointsLength; i++) {\n                var joint = joints[i];\n                var value = handler(joint);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.techniqueAttribute = function(technique, handler) {\n        var attributes = technique.attributes;\n        for (var attributeName in attributes) {\n            if (Object.prototype.hasOwnProperty.call(attributes, attributeName)) {\n                var value = handler(attributes[attributeName], attributeName);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.techniqueUniform = function(technique, handler) {\n        var uniforms = technique.uniforms;\n        for (var uniformName in uniforms) {\n            if (Object.prototype.hasOwnProperty.call(uniforms, uniformName)) {\n                var value = handler(uniforms[uniformName], uniformName);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.techniqueParameter = function(technique, handler) {\n        var parameters = technique.parameters;\n        for (var parameterName in parameters) {\n            if (Object.prototype.hasOwnProperty.call(parameters, parameterName)) {\n                var value = handler(parameters[parameterName], parameterName);\n\n                if (defined(value)) {\n                    return value;\n                }\n            }\n        }\n    };\n\n    ForEach.technique = function(gltf, handler) {\n        if (hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return ForEach.object(gltf.extensions.KHR_techniques_webgl.techniques, handler);\n        }\n\n        return ForEach.topLevel(gltf, 'techniques', handler);\n    };\n\n    ForEach.texture = function(gltf, handler) {\n        return ForEach.topLevel(gltf, 'textures', handler);\n    };\n\n    export default ForEach;\n","\n\n    /**\n     * Utility function for retrieving the number of components in a given type.\n     *\n     * @param {String} type glTF type\n     * @returns {Number} The number of components in that type.\n     *\n     * @private\n     */\n    function numberOfComponentsForType(type) {\n        switch (type) {\n            case 'SCALAR':\n                return 1;\n            case 'VEC2':\n                return 2;\n            case 'VEC3':\n                return 3;\n            case 'VEC4':\n            case 'MAT2':\n                return 4;\n            case 'MAT3':\n                return 9;\n            case 'MAT4':\n                return 16;\n        }\n    }\n\n    export default numberOfComponentsForType;\n","import numberOfComponentsForType from './numberOfComponentsForType.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Returns the byte stride of the provided accessor.\n     * If the byteStride is 0, it is calculated based on type and componentType\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} accessor The accessor.\n     * @returns {Number} The byte stride of the accessor.\n     *\n     * @private\n     */\n    function getAccessorByteStride(gltf, accessor) {\n        var bufferViewId = accessor.bufferView;\n        if (defined(bufferViewId)) {\n            var bufferView = gltf.bufferViews[bufferViewId];\n            if (defined(bufferView.byteStride) && bufferView.byteStride > 0) {\n                return bufferView.byteStride;\n            }\n        }\n        return ComponentDatatype.getSizeInBytes(accessor.componentType) * numberOfComponentsForType(accessor.type);\n    }\n\n    export default getAccessorByteStride;\n","import addToArray from './addToArray.js'\nimport ForEach from './ForEach.js'\nimport getAccessorByteStride from './getAccessorByteStride.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    /**\n     * Adds default glTF values if they don't exist.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The modified glTF.\n     *\n     * @private\n     */\n    function addDefaults(gltf) {\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView)) {\n                accessor.byteOffset = defaultValue(accessor.byteOffset, 0);\n            }\n        });\n\n        ForEach.bufferView(gltf, function(bufferView) {\n            if (defined(bufferView.buffer)) {\n                bufferView.byteOffset = defaultValue(bufferView.byteOffset, 0);\n            }\n        });\n\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                primitive.mode = defaultValue(primitive.mode, WebGLConstants.TRIANGLES);\n                if (!defined(primitive.material)) {\n                    if (!defined(gltf.materials)) {\n                        gltf.materials = [];\n                    }\n                    var defaultMaterial = {\n                        name: 'default'\n                    };\n                    primitive.material = addToArray(gltf.materials, defaultMaterial);\n                }\n            });\n        });\n\n        ForEach.accessorContainingVertexAttributeData(gltf, function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            var bufferViewId = accessor.bufferView;\n            accessor.normalized = defaultValue(accessor.normalized, false);\n            if (defined(bufferViewId)) {\n                var bufferView = gltf.bufferViews[bufferViewId];\n                bufferView.byteStride = getAccessorByteStride(gltf, accessor);\n                bufferView.target = WebGLConstants.ARRAY_BUFFER;\n            }\n        });\n\n        ForEach.accessorContainingIndexData(gltf, function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            var bufferViewId = accessor.bufferView;\n            if (defined(bufferViewId)) {\n                var bufferView = gltf.bufferViews[bufferViewId];\n                bufferView.target = WebGLConstants.ELEMENT_ARRAY_BUFFER;\n            }\n        });\n\n        ForEach.material(gltf, function(material) {\n            var extensions = defaultValue(material.extensions, defaultValue.EMPTY_OBJECT);\n            var materialsCommon = extensions.KHR_materials_common;\n            if (defined(materialsCommon)) {\n                var technique = materialsCommon.technique;\n                var values = defined(materialsCommon.values) ? materialsCommon.values : {};\n                materialsCommon.values = values;\n\n                values.ambient = defined(values.ambient) ? values.ambient : [0.0, 0.0, 0.0, 1.0];\n                values.emission = defined(values.emission) ? values.emission : [0.0, 0.0, 0.0, 1.0];\n\n                values.transparency = defaultValue(values.transparency, 1.0);\n                values.transparent = defaultValue(values.transparent, false);\n                values.doubleSided = defaultValue(values.doubleSided, false);\n\n                if (technique !== 'CONSTANT') {\n                    values.diffuse = defined(values.diffuse) ? values.diffuse : [0.0, 0.0, 0.0, 1.0];\n                    if (technique !== 'LAMBERT') {\n                        values.specular = defined(values.specular) ? values.specular : [0.0, 0.0, 0.0, 1.0];\n                        values.shininess = defaultValue(values.shininess, 0.0);\n                    }\n                }\n                return;\n            }\n\n            material.emissiveFactor = defaultValue(material.emissiveFactor, [0.0, 0.0, 0.0]);\n            material.alphaMode = defaultValue(material.alphaMode, 'OPAQUE');\n            material.doubleSided = defaultValue(material.doubleSided, false);\n\n            if (material.alphaMode === 'MASK') {\n                material.alphaCutoff = defaultValue(material.alphaCutoff, 0.5);\n            }\n\n            var techniquesExtension = extensions.KHR_techniques_webgl;\n            if (defined(techniquesExtension)) {\n                ForEach.materialValue(material, function (materialValue) {\n                    // Check if material value is a TextureInfo object\n                    if (defined(materialValue.index)) {\n                        addTextureDefaults(materialValue);\n                    }\n                });\n            }\n\n            addTextureDefaults(material.emissiveTexture);\n            addTextureDefaults(material.normalTexture);\n            addTextureDefaults(material.occlusionTexture);\n\n            var pbrMetallicRoughness = material.pbrMetallicRoughness;\n            if (defined(pbrMetallicRoughness)) {\n                pbrMetallicRoughness.baseColorFactor = defaultValue(pbrMetallicRoughness.baseColorFactor, [1.0, 1.0, 1.0, 1.0]);\n                pbrMetallicRoughness.metallicFactor = defaultValue(pbrMetallicRoughness.metallicFactor, 1.0);\n                pbrMetallicRoughness.roughnessFactor = defaultValue(pbrMetallicRoughness.roughnessFactor, 1.0);\n                addTextureDefaults(pbrMetallicRoughness.baseColorTexture);\n                addTextureDefaults(pbrMetallicRoughness.metallicRoughnessTexture);\n            }\n\n            var pbrSpecularGlossiness = extensions.pbrSpecularGlossiness;\n            if (defined(pbrSpecularGlossiness)) {\n                pbrSpecularGlossiness.diffuseFactor = defaultValue(pbrSpecularGlossiness.diffuseFactor, [1.0, 1.0, 1.0, 1.0]);\n                pbrSpecularGlossiness.specularFactor = defaultValue(pbrSpecularGlossiness.specularFactor, [1.0, 1.0, 1.0]);\n                pbrSpecularGlossiness.glossinessFactor = defaultValue(pbrSpecularGlossiness.glossinessFactor, 1.0);\n                addTextureDefaults(pbrSpecularGlossiness.specularGlossinessTexture);\n            }\n        });\n\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                sampler.interpolation = defaultValue(sampler.interpolation, 'LINEAR');\n            });\n        });\n\n        var animatedNodes = getAnimatedNodes(gltf);\n        ForEach.node(gltf, function(node, id) {\n            var animated = defined(animatedNodes[id]);\n            if (animated || defined(node.translation) || defined(node.rotation) || defined(node.scale)) {\n                node.translation = defaultValue(node.translation, [0.0, 0.0, 0.0]);\n                node.rotation = defaultValue(node.rotation, [0.0, 0.0, 0.0, 1.0]);\n                node.scale = defaultValue(node.scale, [1.0, 1.0, 1.0]);\n            } else {\n                node.matrix = defaultValue(node.matrix, [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n            }\n        });\n\n        ForEach.sampler(gltf, function(sampler) {\n            sampler.wrapS = defaultValue(sampler.wrapS, WebGLConstants.REPEAT);\n            sampler.wrapT = defaultValue(sampler.wrapT, WebGLConstants.REPEAT);\n        });\n\n        if (defined(gltf.scenes) && !defined(gltf.scene)) {\n            gltf.scene = 0;\n        }\n\n        return gltf;\n    }\n\n    function getAnimatedNodes(gltf) {\n        var nodes = {};\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationChannel(animation, function(channel) {\n                var target = channel.target;\n                var nodeId = target.node;\n                var path = target.path;\n                // Ignore animations that target 'weights'\n                if (path === 'translation' || path === 'rotation' || path === 'scale') {\n                    nodes[nodeId] = true;\n                }\n            });\n        });\n        return nodes;\n    }\n\n    function addTextureDefaults(texture) {\n        if (defined(texture)) {\n            texture.texCoord = defaultValue(texture.texCoord, 0);\n        }\n    }\n\n    export default addDefaults;\n","import ForEach from './ForEach.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Adds extras._pipeline to each object that can have extras in the glTF asset.\n     * This stage runs before updateVersion and handles both glTF 1.0 and glTF 2.0 assets.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The glTF asset with the added pipeline extras.\n     *\n     * @private\n     */\n    function addPipelineExtras(gltf) {\n        ForEach.shader(gltf, function(shader) {\n            addExtras(shader);\n        });\n        ForEach.buffer(gltf, function(buffer) {\n            addExtras(buffer);\n        });\n        ForEach.image(gltf, function (image) {\n            addExtras(image);\n            ForEach.compressedImage(image, function(compressedImage) {\n                addExtras(compressedImage);\n            });\n        });\n\n        addExtras(gltf);\n\n        return gltf;\n    }\n\n    function addExtras(object) {\n        object.extras = defined(object.extras) ? object.extras : {};\n        object.extras._pipeline = defined(object.extras._pipeline) ? object.extras._pipeline : {};\n    }\n\n    export default addPipelineExtras;\n","import defined from '../../Core/defined.js'\n\n    /**\n     * Removes an extension from gltf.extensionsRequired if it is present.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String} extension The extension to remove.\n     *\n     * @private\n     */\n    function removeExtensionsRequired(gltf, extension) {\n        var extensionsRequired = gltf.extensionsRequired;\n        if (defined(extensionsRequired)) {\n            var index = extensionsRequired.indexOf(extension);\n            if (index >= 0) {\n                extensionsRequired.splice(index, 1);\n            }\n            if (extensionsRequired.length === 0) {\n                delete gltf.extensionsRequired;\n            }\n        }\n    }\n\n    export default removeExtensionsRequired;\n","import removeExtensionsRequired from './removeExtensionsRequired.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Removes an extension from gltf.extensionsUsed and gltf.extensionsRequired if it is present.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String} extension The extension to remove.\n     *\n     * @private\n     */\n    function removeExtensionsUsed(gltf, extension) {\n        var extensionsUsed = gltf.extensionsUsed;\n        if (defined(extensionsUsed)) {\n            var index = extensionsUsed.indexOf(extension);\n            if (index >= 0) {\n                extensionsUsed.splice(index, 1);\n            }\n            removeExtensionsRequired(gltf, extension);\n            if (extensionsUsed.length === 0) {\n                delete gltf.extensionsUsed;\n            }\n        }\n    }\n\n    export default removeExtensionsUsed;\n","import addPipelineExtras from './addPipelineExtras.js'\nimport removeExtensionsUsed from './removeExtensionsUsed.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport getMagic from '../../Core/getMagic.js'\nimport getStringFromTypedArray from '../../Core/getStringFromTypedArray.js'\nimport RuntimeError from '../../Core/RuntimeError.js'\n\n    var sizeOfUint32 = 4;\n\n    /**\n     * Convert a binary glTF to glTF.\n     *\n     * The returned glTF has pipeline extras included. The embedded binary data is stored in gltf.buffers[0].extras._pipeline.source.\n     *\n     * @param {Buffer} glb The glb data to parse.\n     * @returns {Object} A javascript object containing a glTF asset with pipeline extras included.\n     *\n     * @private\n     */\n    function parseGlb(glb) {\n        // Check that the magic string is present\n        var magic = getMagic(glb);\n        if (magic !== 'glTF') {\n            throw new RuntimeError('File is not valid binary glTF');\n        }\n\n        var header = readHeader(glb, 0, 5);\n        var version = header[1];\n        if (version !== 1 && version !== 2) {\n            throw new RuntimeError('Binary glTF version is not 1 or 2');\n        }\n\n        if (version === 1) {\n            return parseGlbVersion1(glb, header);\n        }\n\n        return parseGlbVersion2(glb, header);\n    }\n\n    function readHeader(glb, byteOffset, count) {\n        var dataView = new DataView(glb.buffer);\n        var header = new Array(count);\n        for (var i = 0; i < count; ++i) {\n            header[i] = dataView.getUint32(glb.byteOffset + byteOffset + i * sizeOfUint32, true);\n        }\n        return header;\n    }\n\n    function parseGlbVersion1(glb, header) {\n        var length = header[2];\n        var contentLength = header[3];\n        var contentFormat = header[4];\n\n        // Check that the content format is 0, indicating that it is JSON\n        if (contentFormat !== 0) {\n            throw new RuntimeError('Binary glTF scene format is not JSON');\n        }\n\n        var jsonStart = 20;\n        var binaryStart = jsonStart + contentLength;\n\n        var contentString = getStringFromTypedArray(glb, jsonStart, contentLength);\n        var gltf = JSON.parse(contentString);\n        addPipelineExtras(gltf);\n\n        var binaryBuffer = glb.subarray(binaryStart, length);\n\n        var buffers = gltf.buffers;\n        if (defined(buffers) && Object.keys(buffers).length > 0) {\n            // In some older models, the binary glTF buffer is named KHR_binary_glTF\n            var binaryGltfBuffer = defaultValue(buffers.binary_glTF, buffers.KHR_binary_glTF);\n            if (defined(binaryGltfBuffer)) {\n                binaryGltfBuffer.extras._pipeline.source = binaryBuffer;\n            }\n        }\n        // Remove the KHR_binary_glTF extension\n        removeExtensionsUsed(gltf, 'KHR_binary_glTF');\n        return gltf;\n    }\n\n    function parseGlbVersion2(glb, header) {\n        var length = header[2];\n        var byteOffset = 12;\n        var gltf;\n        var binaryBuffer;\n        while (byteOffset < length) {\n            var chunkHeader = readHeader(glb, byteOffset, 2);\n            var chunkLength = chunkHeader[0];\n            var chunkType = chunkHeader[1];\n            byteOffset += 8;\n            var chunkBuffer = glb.subarray(byteOffset, byteOffset + chunkLength);\n            byteOffset += chunkLength;\n            // Load JSON chunk\n            if (chunkType === 0x4E4F534A) {\n                var jsonString = getStringFromTypedArray(chunkBuffer);\n                gltf = JSON.parse(jsonString);\n                addPipelineExtras(gltf);\n            }\n            // Load Binary chunk\n            else if (chunkType === 0x004E4942) {\n                binaryBuffer = chunkBuffer;\n            }\n        }\n        if (defined(gltf) && defined(binaryBuffer)) {\n            var buffers = gltf.buffers;\n            if (defined(buffers) && buffers.length > 0) {\n                var buffer = buffers[0];\n                buffer.extras._pipeline.source = binaryBuffer;\n            }\n        }\n        return gltf;\n    }\n\n    export default parseGlb;\n","import addToArray from './addToArray.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Adds an extension to gltf.extensionsUsed if it does not already exist.\n     * Initializes extensionsUsed if it is not defined.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String} extension The extension to add.\n     *\n     * @private\n     */\n    function addExtensionsUsed(gltf, extension) {\n        var extensionsUsed = gltf.extensionsUsed;\n        if (!defined(extensionsUsed)) {\n            extensionsUsed = [];\n            gltf.extensionsUsed = extensionsUsed;\n        }\n        addToArray(extensionsUsed, extension, true);\n    }\n\n    export default addExtensionsUsed;\n","import ComponentDatatype from '../../Core/ComponentDatatype.js'\n\n    /**\n     * Returns a function to read and convert data from a DataView into an array.\n     *\n     * @param {Number} componentType Type to convert the data to.\n     * @returns {ComponentReader} Function that reads and converts data.\n     *\n     * @private\n     */\n    function getComponentReader(componentType) {\n        switch (componentType) {\n            case ComponentDatatype.BYTE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt8(byteOffset + i * componentTypeByteLength);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_BYTE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint8(byteOffset + i * componentTypeByteLength);\n                    }\n                };\n            case ComponentDatatype.SHORT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt16(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_SHORT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint16(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.INT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getInt32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.UNSIGNED_INT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getUint32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.FLOAT:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getFloat32(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n            case ComponentDatatype.DOUBLE:\n                return function (dataView, byteOffset, numberOfComponents, componentTypeByteLength, result) {\n                    for (var i = 0; i < numberOfComponents; ++i) {\n                        result[i] = dataView.getFloat64(byteOffset + i * componentTypeByteLength, true);\n                    }\n                };\n        }\n    }\n\n    /**\n     * A callback function that logs messages.\n     * @callback ComponentReader\n     *\n     * @param {DataView} dataView The data view to read from.\n     * @param {Number} byteOffset The byte offset applied when reading from the data view.\n     * @param {Number} numberOfComponents The number of components to read.\n     * @param {Number} componentTypeByteLength The byte length of each component.\n     * @param {Number} result An array storing the components that are read.\n     */\n\n    export default getComponentReader;\n","import getAccessorByteStride from './getAccessorByteStride.js'\nimport getComponentReader from './getComponentReader.js'\nimport numberOfComponentsForType from './numberOfComponentsForType.js'\nimport arrayFill from '../../Core/arrayFill.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Finds the min and max values of the accessor.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} accessor The accessor object from the glTF asset to read.\n     * @returns {{min: Array, max: Array}} min holding the array of minimum values and max holding the array of maximum values.\n     *\n     * @private\n     */\n    function findAccessorMinMax(gltf, accessor) {\n        var bufferViews = gltf.bufferViews;\n        var buffers = gltf.buffers;\n        var bufferViewId = accessor.bufferView;\n        var numberOfComponents = numberOfComponentsForType(accessor.type);\n\n        // According to the spec, when bufferView is not defined, accessor must be initialized with zeros\n        if (!defined(accessor.bufferView)) {\n            return {\n                min: arrayFill(new Array(numberOfComponents), 0.0),\n                max: arrayFill(new Array(numberOfComponents), 0.0)\n            };\n        }\n\n        var min = arrayFill(new Array(numberOfComponents), Number.POSITIVE_INFINITY);\n        var max = arrayFill(new Array(numberOfComponents), Number.NEGATIVE_INFINITY);\n\n        var bufferView = bufferViews[bufferViewId];\n        var bufferId = bufferView.buffer;\n        var buffer = buffers[bufferId];\n        var source = buffer.extras._pipeline.source;\n\n        var count = accessor.count;\n        var byteStride = getAccessorByteStride(gltf, accessor);\n        var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n        var componentType = accessor.componentType;\n        var componentTypeByteLength = ComponentDatatype.getSizeInBytes(componentType);\n        var dataView = new DataView(source.buffer);\n        var components = new Array(numberOfComponents);\n        var componentReader = getComponentReader(componentType);\n\n        for (var i = 0; i < count; i++) {\n            componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n            for (var j = 0; j < numberOfComponents; j++) {\n                var value = components[j];\n                min[j] = Math.min(min[j], value);\n                max[j] = Math.max(max[j], value);\n            }\n            byteOffset += byteStride;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    }\n\n    export default findAccessorMinMax;\n","import addExtensionsUsed from './addExtensionsUsed.js'\nimport ForEach from './ForEach.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    var defaultBlendEquation = [\n        WebGLConstants.FUNC_ADD,\n        WebGLConstants.FUNC_ADD\n    ];\n\n    var defaultBlendFactors = [\n        WebGLConstants.ONE,\n        WebGLConstants.ZERO,\n        WebGLConstants.ONE,\n        WebGLConstants.ZERO\n    ];\n\n    function isStateEnabled(renderStates, state) {\n        var enabled = renderStates.enable;\n        if (!defined(enabled)) {\n            return false;\n        }\n\n        return (enabled.indexOf(state) > -1);\n    }\n\n    var supportedBlendFactors = [\n        WebGLConstants.ZERO,\n        WebGLConstants.ONE,\n        WebGLConstants.SRC_COLOR,\n        WebGLConstants.ONE_MINUS_SRC_COLOR,\n        WebGLConstants.SRC_ALPHA,\n        WebGLConstants.ONE_MINUS_SRC_ALPHA,\n        WebGLConstants.DST_ALPHA,\n        WebGLConstants.ONE_MINUS_DST_ALPHA,\n        WebGLConstants.DST_COLOR,\n        WebGLConstants.ONE_MINUS_DST_COLOR\n    ];\n\n    // If any of the blend factors are not supported, return the default\n    function getSupportedBlendFactors(value, defaultValue) {\n        if (!defined(value)) {\n            return defaultValue;\n        }\n\n        for (var i = 0; i < 4; i++) {\n            if (supportedBlendFactors.indexOf(value[i]) === -1) {\n                return defaultValue;\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * Move glTF 1.0 technique render states to glTF 2.0 materials properties and KHR_blend extension.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The updated glTF asset.\n     *\n     * @private\n     */\n    function moveTechniqueRenderStates(gltf) {\n        var blendingForTechnique = {};\n        var materialPropertiesForTechnique = {};\n        var techniquesLegacy = gltf.techniques;\n        if (!defined(techniquesLegacy)) {\n            return gltf;\n        }\n\n        ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n            var renderStates = techniqueLegacy.states;\n            if (defined(renderStates)) {\n                var materialProperties = materialPropertiesForTechnique[techniqueIndex] = {};\n\n                // If BLEND is enabled, the material should have alpha mode BLEND\n                if (isStateEnabled(renderStates, WebGLConstants.BLEND)) {\n                    materialProperties.alphaMode = 'BLEND';\n\n                    var blendFunctions = renderStates.functions;\n                    if (defined(blendFunctions) && (defined(blendFunctions.blendEquationSeparate)\n                            || defined(blendFunctions.blendFuncSeparate))) {\n                        blendingForTechnique[techniqueIndex] = {\n                            blendEquation: defaultValue(blendFunctions.blendEquationSeparate, defaultBlendEquation),\n                            blendFactors: getSupportedBlendFactors(blendFunctions.blendFuncSeparate, defaultBlendFactors)\n                        };\n                    }\n                }\n\n                // If CULL_FACE is not enabled, the material should be doubleSided\n                if (!isStateEnabled(renderStates, WebGLConstants.CULL_FACE)) {\n                    materialProperties.doubleSided = true;\n                }\n\n                delete techniqueLegacy.states;\n            }\n        });\n\n        if (Object.keys(blendingForTechnique).length > 0) {\n            if (!defined(gltf.extensions)) {\n                gltf.extensions = {};\n            }\n\n            addExtensionsUsed(gltf, 'KHR_blend');\n        }\n\n        ForEach.material(gltf, function (material) {\n            if (defined(material.technique)) {\n                var materialProperties = materialPropertiesForTechnique[material.technique];\n                ForEach.objectLegacy(materialProperties, function (value, property) {\n                    material[property] = value;\n                });\n\n                var blending = blendingForTechnique[material.technique];\n                if (defined(blending)) {\n                    if (!defined(material.extensions)) {\n                        material.extensions = {};\n                    }\n\n                    material.extensions.KHR_blend = blending;\n                }\n            }\n        });\n\n        return gltf;\n    }\n\n    export default moveTechniqueRenderStates;\n","import addExtensionsUsed from './addExtensionsUsed.js'\nimport addToArray from './addToArray.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Adds an extension to gltf.extensionsRequired if it does not already exist.\n     * Initializes extensionsRequired if it is not defined.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String} extension The extension to add.\n     *\n     * @private\n     */\n    function addExtensionsRequired(gltf, extension) {\n        var extensionsRequired = gltf.extensionsRequired;\n        if (!defined(extensionsRequired)) {\n            extensionsRequired = [];\n            gltf.extensionsRequired = extensionsRequired;\n        }\n        addToArray(extensionsRequired, extension, true);\n        addExtensionsUsed(gltf, extension);\n    }\n\n    export default addExtensionsRequired;\n","import addExtensionsUsed from './addExtensionsUsed.js'\nimport addExtensionsRequired from './addExtensionsRequired.js'\nimport addToArray from './addToArray.js'\nimport ForEach from './ForEach.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Move glTF 1.0 material techniques to glTF 2.0 KHR_techniques_webgl extension.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The updated glTF asset.\n     *\n     * @private\n     */\n    function moveTechniquesToExtension(gltf) {\n        var techniquesLegacy = gltf.techniques;\n        var mappedUniforms = {};\n        var updatedTechniqueIndices = {};\n        if (defined(techniquesLegacy)) {\n            var extension = {\n                programs: [],\n                shaders: [],\n                techniques: []\n            };\n\n            // Some 1.1 models have a glExtensionsUsed property that can be transferred to program.glExtensions\n            var glExtensions = gltf.glExtensionsUsed;\n            delete gltf.glExtensionsUsed;\n\n            ForEach.technique(gltf, function (techniqueLegacy, techniqueIndex) {\n                var technique = {\n                    name: techniqueLegacy.name,\n                    program: undefined,\n                    attributes: {},\n                    uniforms: {}\n                };\n\n                var parameterLegacy;\n                ForEach.techniqueAttribute(techniqueLegacy, function (parameterName, attributeName) {\n                    parameterLegacy = techniqueLegacy.parameters[parameterName];\n                    technique.attributes[attributeName] = {\n                        semantic: parameterLegacy.semantic\n                    };\n                });\n\n                ForEach.techniqueUniform(techniqueLegacy, function (parameterName, uniformName) {\n                    parameterLegacy = techniqueLegacy.parameters[parameterName];\n                    technique.uniforms[uniformName] = {\n                        count: parameterLegacy.count,\n                        node: parameterLegacy.node,\n                        type: parameterLegacy.type,\n                        semantic: parameterLegacy.semantic,\n                        value: parameterLegacy.value\n                    };\n\n                    // Store the name of the uniform to update material values.\n                    mappedUniforms[parameterName] = uniformName;\n                });\n\n                var programLegacy = gltf.programs[techniqueLegacy.program];\n                var program = {\n                    name: programLegacy.name,\n                    fragmentShader: undefined,\n                    vertexShader: undefined,\n                    glExtensions: glExtensions\n                };\n\n                var fs = gltf.shaders[programLegacy.fragmentShader];\n                program.fragmentShader = addToArray(extension.shaders, fs, true);\n\n                var vs = gltf.shaders[programLegacy.vertexShader];\n                program.vertexShader = addToArray(extension.shaders, vs, true);\n\n                technique.program = addToArray(extension.programs, program);\n\n                // Store the index of the new technique to reference instead.\n                updatedTechniqueIndices[techniqueIndex] = addToArray(extension.techniques, technique);\n            });\n\n            if (extension.techniques.length > 0) {\n                if (!defined(gltf.extensions)) {\n                    gltf.extensions = {};\n                }\n\n                gltf.extensions.KHR_techniques_webgl = extension;\n                addExtensionsUsed(gltf, 'KHR_techniques_webgl');\n                addExtensionsRequired(gltf, 'KHR_techniques_webgl');\n            }\n        }\n\n        ForEach.material(gltf, function (material) {\n            if (defined(material.technique)) {\n                var materialExtension = {\n                    technique: updatedTechniqueIndices[material.technique]\n                };\n\n                ForEach.objectLegacy(material.values, function (value, parameterName) {\n                    if (!defined(materialExtension.values)) {\n                        materialExtension.values = {};\n                    }\n\n                    var uniformName = mappedUniforms[parameterName];\n                    materialExtension.values[uniformName] = value;\n                });\n\n                if (!defined(material.extensions)) {\n                    material.extensions = {};\n                }\n\n                material.extensions.KHR_techniques_webgl = materialExtension;\n            }\n\n            delete material.technique;\n            delete material.values;\n        });\n\n        delete gltf.techniques;\n        delete gltf.programs;\n        delete gltf.shaders;\n\n        return gltf;\n    }\n\n    export default moveTechniquesToExtension;\n","import ForEach from './ForEach.js'\nimport hasExtension from './hasExtension.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\n\n    var allElementTypes = ['mesh', 'node', 'material', 'accessor', 'bufferView', 'buffer'];\n\n    /**\n     * Removes unused elements from gltf.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {String[]} [elementTypes=['mesh', 'node', 'material', 'accessor', 'bufferView', 'buffer']] Element types to be removed. Needs to be a subset of ['mesh', 'node', 'material', 'accessor', 'bufferView', 'buffer'], other items will be ignored.\n     *\n     * @private\n     */\n    function removeUnusedElements(gltf, elementTypes) {\n        elementTypes = defaultValue(elementTypes, allElementTypes);\n        allElementTypes.forEach(function(type) {\n            if (elementTypes.indexOf(type) > -1) {\n                removeUnusedElementsByType(gltf, type);\n            }\n        });\n        return gltf;\n    }\n\n    var TypeToGltfElementName = {\n        accessor: 'accessors',\n        buffer: 'buffers',\n        bufferView: 'bufferViews',\n        node: 'nodes',\n        material: 'materials',\n        mesh: 'meshes'\n    };\n\n    function removeUnusedElementsByType(gltf, type) {\n        var name = TypeToGltfElementName[type];\n        var arrayOfObjects = gltf[name];\n\n        if (defined(arrayOfObjects)) {\n            var removed = 0;\n            var usedIds = getListOfElementsIdsInUse[type](gltf);\n            var length = arrayOfObjects.length;\n\n            for (var i = 0; i < length; ++i) {\n                if (!usedIds[i]) {\n                    Remove[type](gltf, i - removed);\n                    removed++;\n                }\n            }\n        }\n    }\n\n    /**\n     * Contains functions for removing elements from a glTF hierarchy.\n     * Since top-level glTF elements are arrays, when something is removed, referring\n     * indices need to be updated.\n     * @constructor\n     *\n     * @private\n     */\n    function Remove() {}\n\n    Remove.accessor = function(gltf, accessorId) {\n        var accessors = gltf.accessors;\n\n        accessors.splice(accessorId, 1);\n\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                // Update accessor ids for the primitives.\n                ForEach.meshPrimitiveAttribute(primitive, function(attributeAccessorId, semantic) {\n                    if (attributeAccessorId > accessorId) {\n                        primitive.attributes[semantic]--;\n                    }\n                });\n\n                // Update accessor ids for the targets.\n                ForEach.meshPrimitiveTarget(primitive, function(target) {\n                    ForEach.meshPrimitiveTargetAttribute(target, function(attributeAccessorId, semantic) {\n                        if (attributeAccessorId > accessorId) {\n                            target[semantic]--;\n                        }\n                    });\n                });\n                var indices = primitive.indices;\n                if (defined(indices) && indices > accessorId) {\n                    primitive.indices--;\n                }\n            });\n        });\n\n        ForEach.skin(gltf, function(skin) {\n            if (defined(skin.inverseBindMatrices) && skin.inverseBindMatrices > accessorId) {\n                skin.inverseBindMatrices--;\n            }\n        });\n\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                if (defined(sampler.input) && sampler.input > accessorId) {\n                    sampler.input--;\n                }\n                if (defined(sampler.output) && sampler.output > accessorId) {\n                    sampler.output--;\n                }\n            });\n        });\n    };\n\n    Remove.buffer = function(gltf, bufferId) {\n        var buffers = gltf.buffers;\n\n        buffers.splice(bufferId, 1);\n\n        ForEach.bufferView(gltf, function(bufferView) {\n            if (defined(bufferView.buffer) && bufferView.buffer > bufferId) {\n                bufferView.buffer--;\n            }\n        });\n    };\n\n    Remove.bufferView = function(gltf, bufferViewId) {\n        var bufferViews = gltf.bufferViews;\n\n        bufferViews.splice(bufferViewId, 1);\n\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView) && accessor.bufferView > bufferViewId) {\n                accessor.bufferView--;\n            }\n        });\n\n        ForEach.shader(gltf, function(shader) {\n            if (defined(shader.bufferView) && shader.bufferView > bufferViewId) {\n                shader.bufferView--;\n            }\n        });\n\n        ForEach.image(gltf, function(image) {\n            if (defined(image.bufferView) && image.bufferView > bufferViewId) {\n                image.bufferView--;\n            }\n            ForEach.compressedImage(image, function(compressedImage) {\n                var compressedImageBufferView = compressedImage.bufferView;\n                if (defined(compressedImageBufferView) && compressedImageBufferView > bufferViewId) {\n                    compressedImage.bufferView--;\n                }\n            });\n        });\n\n        if (hasExtension(gltf, 'KHR_draco_mesh_compression')) {\n            ForEach.mesh(gltf, function(mesh) {\n                ForEach.meshPrimitive(mesh, function(primitive) {\n                    if (defined(primitive.extensions) &&\n                        defined(primitive.extensions.KHR_draco_mesh_compression)) {\n                        if (primitive.extensions.KHR_draco_mesh_compression.bufferView > bufferViewId) {\n                            primitive.extensions.KHR_draco_mesh_compression.bufferView--;\n                        }\n                    }\n                });\n            });\n        }\n    };\n\n    Remove.mesh = function(gltf, meshId) {\n        var meshes = gltf.meshes;\n        meshes.splice(meshId, 1);\n\n        ForEach.node(gltf, function(node) {\n            if (defined(node.mesh)) {\n                if (node.mesh > meshId) {\n                    node.mesh--;\n                } else if (node.mesh === meshId) {\n                    // Remove reference to deleted mesh\n                    delete node.mesh;\n                }\n            }\n        });\n    };\n\n    Remove.node = function(gltf, nodeId) {\n        var nodes = gltf.nodes;\n        nodes.splice(nodeId, 1);\n\n        // Shift all node references\n        ForEach.skin(gltf, function(skin) {\n            if (defined(skin.skeleton) && skin.skeleton > nodeId) {\n                skin.skeleton--;\n            }\n\n            skin.joints = skin.joints.map(function(x) {\n                return x > nodeId ? x - 1 : x;\n            });\n        });\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationChannel(animation, function(channel) {\n                if (defined(channel.target) && defined(channel.target.node) && (channel.target.node > nodeId)) {\n                    channel.target.node--;\n                }\n            });\n        });\n        ForEach.technique(gltf, function(technique) {\n            ForEach.techniqueUniform(technique, function(uniform) {\n                if (defined(uniform.node) && uniform.node > nodeId) {\n                    uniform.node--;\n                }\n            });\n        });\n        ForEach.node(gltf, function(node) {\n            if (!defined(node.children)) {\n                return;\n            }\n\n            node.children = node.children\n                .filter(function(x) {\n                    return x !== nodeId; // Remove\n                })\n                .map(function(x) {\n                    return x > nodeId ? x - 1 : x; // Shift indices\n                });\n        });\n        ForEach.scene(gltf, function(scene) {\n            scene.nodes = scene.nodes\n                .filter(function(x) {\n                    return x !== nodeId; // Remove\n                })\n                .map(function(x) {\n                    return x > nodeId ? x - 1 : x; // Shift indices\n                });\n        });\n    };\n\n    Remove.material = function(gltf, materialId) {\n        var materials = gltf.materials;\n        materials.splice(materialId, 1);\n\n        // Shift other material ids\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                if (defined(primitive.material) && primitive.material > materialId) {\n                    primitive.material--;\n                }\n            });\n        });\n    };\n\n    /**\n     * Contains functions for getting a list of element ids in use by the glTF asset.\n     * @constructor\n     *\n     * @private\n     */\n    function getListOfElementsIdsInUse() {}\n\n    getListOfElementsIdsInUse.accessor = function(gltf) {\n        // Calculate accessor's that are currently in use.\n        var usedAccessorIds = {};\n\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                ForEach.meshPrimitiveAttribute(primitive, function(accessorId) {\n                    usedAccessorIds[accessorId] = true;\n                });\n                ForEach.meshPrimitiveTarget(primitive, function(target) {\n                    ForEach.meshPrimitiveTargetAttribute(target, function(accessorId) {\n                        usedAccessorIds[accessorId] = true;\n                    });\n                });\n                var indices = primitive.indices;\n                if (defined(indices)) {\n                    usedAccessorIds[indices] = true;\n                }\n            });\n        });\n\n        ForEach.skin(gltf, function(skin) {\n            if (defined(skin.inverseBindMatrices)) {\n                usedAccessorIds[skin.inverseBindMatrices] = true;\n            }\n        });\n\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                if (defined(sampler.input)) {\n                    usedAccessorIds[sampler.input] = true;\n                }\n                if (defined(sampler.output)) {\n                    usedAccessorIds[sampler.output] = true;\n                }\n            });\n        });\n\n        return usedAccessorIds;\n    };\n\n    getListOfElementsIdsInUse.buffer = function(gltf) {\n        // Calculate buffer's that are currently in use.\n        var usedBufferIds = {};\n\n        ForEach.bufferView(gltf, function(bufferView) {\n            if (defined(bufferView.buffer)) {\n                usedBufferIds[bufferView.buffer] = true;\n            }\n        });\n\n        return usedBufferIds;\n    };\n\n    getListOfElementsIdsInUse.bufferView = function(gltf) {\n        // Calculate bufferView's that are currently in use.\n        var usedBufferViewIds = {};\n\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView)) {\n                usedBufferViewIds[accessor.bufferView] = true;\n            }\n        });\n\n        ForEach.shader(gltf, function(shader) {\n            if (defined(shader.bufferView)) {\n                usedBufferViewIds[shader.bufferView] = true;\n            }\n        });\n\n        ForEach.image(gltf, function(image) {\n            if (defined(image.bufferView)) {\n                usedBufferViewIds[image.bufferView] = true;\n            }\n            ForEach.compressedImage(image, function(compressedImage) {\n                if (defined(compressedImage.bufferView)) {\n                    usedBufferViewIds[compressedImage.bufferView] = true;\n                }\n            });\n        });\n\n        if (hasExtension(gltf, 'KHR_draco_mesh_compression')) {\n            ForEach.mesh(gltf, function(mesh) {\n                ForEach.meshPrimitive(mesh, function(primitive) {\n                    if (defined(primitive.extensions) &&\n                        defined(primitive.extensions.KHR_draco_mesh_compression)) {\n                        usedBufferViewIds[primitive.extensions.KHR_draco_mesh_compression.bufferView] = true;\n                    }\n                });\n            });\n        }\n\n        return usedBufferViewIds;\n    };\n\n    getListOfElementsIdsInUse.mesh = function(gltf) {\n        var usedMeshIds = {};\n        ForEach.node(gltf, function(node) {\n            if (defined(node.mesh && defined(gltf.meshes))) {\n                var mesh = gltf.meshes[node.mesh];\n                if (defined(mesh) && defined(mesh.primitives) && (mesh.primitives.length > 0)) {\n                    usedMeshIds[node.mesh] = true;\n                }\n            }\n        });\n\n        return usedMeshIds;\n    };\n\n    // Check if node is empty. It is considered empty if neither referencing\n    // mesh, camera, extensions and has no children\n    function nodeIsEmpty(gltf, node) {\n        if (defined(node.mesh) || defined(node.camera) || defined(node.skin)\n            || defined(node.weights) || defined(node.extras)\n            || (defined(node.extensions) && node.extensions.length !== 0)) {\n            return false;\n        }\n\n        // Empty if no children or children are all empty nodes\n        return !defined(node.children)\n            || node.children.filter(function(n) {\n                return !nodeIsEmpty(gltf, gltf.nodes[n]);\n            }).length === 0;\n    }\n\n    getListOfElementsIdsInUse.node = function(gltf) {\n        var usedNodeIds = {};\n        ForEach.node(gltf, function(node, nodeId) {\n            if (!nodeIsEmpty(gltf, node)) {\n                usedNodeIds[nodeId] = true;\n            }\n        });\n        ForEach.skin(gltf, function(skin) {\n            if (defined(skin.skeleton)) {\n                usedNodeIds[skin.skeleton] = true;\n            }\n\n            ForEach.skinJoint(skin, function(joint) {\n                usedNodeIds[joint] = true;\n            });\n        });\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationChannel(animation, function(channel) {\n                if (defined(channel.target) && defined(channel.target.node)) {\n                    usedNodeIds[channel.target.node] = true;\n                }\n            });\n        });\n        ForEach.technique(gltf, function(technique) {\n            ForEach.techniqueUniform(technique, function(uniform) {\n                if (defined(uniform.node)) {\n                    usedNodeIds[uniform.node] = true;\n                }\n            });\n        });\n\n        return usedNodeIds;\n    };\n\n    getListOfElementsIdsInUse.material = function(gltf) {\n        var usedMaterialIds = {};\n\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                if (defined(primitive.material)) {\n                    usedMaterialIds[primitive.material] = true;\n                }\n            });\n        });\n\n        return usedMaterialIds;\n    };\n\n    export default removeUnusedElements;\n","import addToArray from './addToArray.js'\n\n    /**\n     * Adds buffer to gltf.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Buffer} buffer A Buffer object which will be added to gltf.buffers.\n     * @returns {Number} The bufferView id of the newly added bufferView.\n     *\n     * @private\n     */\n    function addBuffer(gltf, buffer) {\n        var newBuffer = {\n            byteLength: buffer.length,\n            extras: {\n                _pipeline: {\n                    source: buffer\n                }\n            }\n        };\n        var bufferId = addToArray(gltf.buffers, newBuffer);\n        var bufferView = {\n            buffer: bufferId,\n            byteOffset: 0,\n            byteLength: buffer.length\n        };\n        return addToArray(gltf.bufferViews, bufferView);\n    }\n\n    export default addBuffer;\n","import getAccessorByteStride from './getAccessorByteStride.js'\nimport getComponentReader from './getComponentReader.js'\nimport numberOfComponentsForType from './numberOfComponentsForType.js'\nimport arrayFill from '../../Core/arrayFill.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defined from '../../Core/defined.js'\n\n    /**\n     * Returns the accessor data in a contiguous array.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} accessor The accessor.\n     * @returns {Array} The accessor values in a contiguous array.\n     *\n     * @private\n     */\n    function readAccessorPacked(gltf, accessor) {\n        var byteStride = getAccessorByteStride(gltf, accessor);\n        var componentTypeByteLength = ComponentDatatype.getSizeInBytes(accessor.componentType);\n        var numberOfComponents = numberOfComponentsForType(accessor.type);\n        var count = accessor.count;\n        var values = new Array(numberOfComponents * count);\n\n        if (!defined(accessor.bufferView)) {\n            arrayFill(values, 0);\n            return values;\n        }\n\n        var bufferView = gltf.bufferViews[accessor.bufferView];\n        var source = gltf.buffers[bufferView.buffer].extras._pipeline.source;\n        var byteOffset = accessor.byteOffset + bufferView.byteOffset + source.byteOffset;\n\n        var dataView = new DataView(source.buffer);\n        var components = new Array(numberOfComponents);\n        var componentReader = getComponentReader(accessor.componentType);\n\n        for (var i = 0; i < count; ++i) {\n            componentReader(dataView, byteOffset, numberOfComponents, componentTypeByteLength, components);\n            for (var j = 0; j < numberOfComponents; ++j) {\n                values[i * numberOfComponents + j] = components[j];\n            }\n            byteOffset += byteStride;\n        }\n        return values;\n    }\n\n    export default readAccessorPacked;\n","import addBuffer from './addBuffer.js'\nimport ForEach from './ForEach.js'\nimport readAccessorPacked from './readAccessorPacked.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    /**\n     * Update accessors referenced by JOINTS_0 and WEIGHTS_0 attributes to use correct component types.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The glTF asset with compressed meshes.\n     *\n     * @private\n     */\n    function updateAccessorComponentTypes(gltf) {\n        var componentType;\n        ForEach.accessorWithSemantic(gltf, 'JOINTS_0', function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            componentType = accessor.componentType;\n            if (componentType === WebGLConstants.BYTE) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n            } else if (componentType !== WebGLConstants.UNSIGNED_BYTE\n                    && componentType !== WebGLConstants.UNSIGNED_SHORT) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n            }\n        });\n        ForEach.accessorWithSemantic(gltf, 'WEIGHTS_0', function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            componentType = accessor.componentType;\n            if (componentType === WebGLConstants.BYTE) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_BYTE);\n            } else if (componentType === WebGLConstants.SHORT) {\n                convertType(gltf, accessor, ComponentDatatype.UNSIGNED_SHORT);\n            }\n        });\n\n        return gltf;\n    }\n\n    function convertType(gltf, accessor, updatedComponentType) {\n        var typedArray = ComponentDatatype.createTypedArray(updatedComponentType, readAccessorPacked(gltf, accessor));\n        var newBuffer = new Uint8Array(typedArray.buffer);\n        accessor.bufferView = addBuffer(gltf, newBuffer);\n        accessor.componentType = updatedComponentType;\n        accessor.byteOffset = 0;\n    }\n\n    export default updateAccessorComponentTypes;\n","import addExtensionsUsed from './addExtensionsUsed.js'\nimport addToArray from './addToArray.js'\nimport findAccessorMinMax from './findAccessorMinMax.js'\nimport ForEach from './ForEach.js'\nimport getAccessorByteStride from './getAccessorByteStride.js'\nimport numberOfComponentsForType from './numberOfComponentsForType.js'\nimport moveTechniqueRenderStates from './moveTechniqueRenderStates.js'\nimport moveTechniquesToExtension from './moveTechniquesToExtension.js'\nimport removeUnusedElements from './removeUnusedElements.js'\nimport updateAccessorComponentTypes from './updateAccessorComponentTypes.js'\nimport Cartesian3 from '../../Core/Cartesian3.js'\nimport Cartesian4 from '../../Core/Cartesian4.js'\nimport clone from '../../Core/clone.js'\nimport ComponentDatatype from '../../Core/ComponentDatatype.js'\nimport defaultValue from '../../Core/defaultValue.js'\nimport defined from '../../Core/defined.js'\nimport Matrix4 from '../../Core/Matrix4.js'\nimport Quaternion from '../../Core/Quaternion.js'\nimport WebGLConstants from '../../Core/WebGLConstants.js'\n\n    var updateFunctions = {\n        '0.8': glTF08to10,\n        '1.0': glTF10to20,\n        '2.0': undefined\n    };\n\n    /**\n     * Update the glTF version to the latest version (2.0), or targetVersion if specified.\n     * Applies changes made to the glTF spec between revisions so that the core library\n     * only has to handle the latest version.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @param {Object} [options] Options for updating the glTF.\n     * @param {String} [options.targetVersion] The glTF will be upgraded until it hits the specified version.\n     * @returns {Object} The updated glTF asset.\n     *\n     * @private\n     */\n    function updateVersion(gltf, options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var targetVersion = options.targetVersion;\n        var version = gltf.version;\n\n        gltf.asset = defaultValue(gltf.asset, {\n            version: '1.0'\n        });\n\n        gltf.asset.version = defaultValue(gltf.asset.version, '1.0');\n        version = defaultValue(version, gltf.asset.version).toString();\n\n        // Invalid version\n        if (!Object.prototype.hasOwnProperty.call(updateFunctions, version)) {\n            // Try truncating trailing version numbers, could be a number as well if it is 0.8\n            if (defined(version)) {\n                version = version.substring(0, 3);\n            }\n            // Default to 1.0 if it cannot be determined\n            if (!Object.prototype.hasOwnProperty.call(updateFunctions, version)) {\n                version = '1.0';\n            }\n        }\n\n        var updateFunction = updateFunctions[version];\n\n        while (defined(updateFunction)) {\n            if (version === targetVersion) {\n                break;\n            }\n            updateFunction(gltf, options);\n            version = gltf.asset.version;\n            updateFunction = updateFunctions[version];\n        }\n        return gltf;\n    }\n\n    function updateInstanceTechniques(gltf) {\n        var materials = gltf.materials;\n        for (var materialId in materials) {\n            if (Object.prototype.hasOwnProperty.call(materials, materialId)) {\n                var material = materials[materialId];\n                var instanceTechnique = material.instanceTechnique;\n                if (defined(instanceTechnique)) {\n                    material.technique = instanceTechnique.technique;\n                    material.values = instanceTechnique.values;\n                    delete material.instanceTechnique;\n                }\n            }\n        }\n    }\n\n    function setPrimitiveModes(gltf) {\n        var meshes = gltf.meshes;\n        for (var meshId in meshes) {\n            if (Object.prototype.hasOwnProperty.call(meshes, meshId)) {\n                var mesh = meshes[meshId];\n                var primitives = mesh.primitives;\n                if (defined(primitives)) {\n                    var primitivesLength = primitives.length;\n                    for (var i = 0; i < primitivesLength; ++i) {\n                        var primitive = primitives[i];\n                        var defaultMode = defaultValue(primitive.primitive, WebGLConstants.TRIANGLES);\n                        primitive.mode = defaultValue(primitive.mode, defaultMode);\n                        delete primitive.primitive;\n                    }\n                }\n            }\n        }\n    }\n\n    function updateNodes(gltf) {\n        var nodes = gltf.nodes;\n        var axis = new Cartesian3();\n        var quat = new Quaternion();\n        for (var nodeId in nodes) {\n            if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {\n                var node = nodes[nodeId];\n                if (defined(node.rotation)) {\n                    var rotation = node.rotation;\n                    Cartesian3.fromArray(rotation, 0, axis);\n                    Quaternion.fromAxisAngle(axis, rotation[3], quat);\n                    node.rotation = [quat.x, quat.y, quat.z, quat.w];\n                }\n                var instanceSkin = node.instanceSkin;\n                if (defined(instanceSkin)) {\n                    node.skeletons = instanceSkin.skeletons;\n                    node.skin = instanceSkin.skin;\n                    node.meshes = instanceSkin.meshes;\n                    delete node.instanceSkin;\n                }\n            }\n        }\n    }\n\n    function updateAnimations(gltf) {\n        var animations = gltf.animations;\n        var accessors = gltf.accessors;\n        var bufferViews = gltf.bufferViews;\n        var buffers = gltf.buffers;\n        var updatedAccessors = {};\n        var axis = new Cartesian3();\n        var quat = new Quaternion();\n        for (var animationId in animations) {\n            if (Object.prototype.hasOwnProperty.call(animations, animationId)) {\n                var animation = animations[animationId];\n                var channels = animation.channels;\n                var parameters = animation.parameters;\n                var samplers = animation.samplers;\n                if (defined(channels)) {\n                    var channelsLength = channels.length;\n                    for (var i = 0; i < channelsLength; ++i) {\n                        var channel = channels[i];\n                        if (channel.target.path === 'rotation') {\n                            var accessorId = parameters[samplers[channel.sampler].output];\n                            if (defined(updatedAccessors[accessorId])) {\n                                continue;\n                            }\n                            updatedAccessors[accessorId] = true;\n                            var accessor = accessors[accessorId];\n                            var bufferView = bufferViews[accessor.bufferView];\n                            var buffer = buffers[bufferView.buffer];\n                            var source = buffer.extras._pipeline.source;\n                            var byteOffset = source.byteOffset + bufferView.byteOffset + accessor.byteOffset;\n                            var componentType = accessor.componentType;\n                            var count = accessor.count;\n                            var componentsLength = numberOfComponentsForType(accessor.type);\n                            var length = accessor.count * componentsLength;\n                            var typedArray = ComponentDatatype.createArrayBufferView(componentType, source.buffer, byteOffset, length);\n\n                            for (var j = 0; j < count; j++) {\n                                var offset = j * componentsLength;\n                                Cartesian3.unpack(typedArray, offset, axis);\n                                var angle = typedArray[offset + 3];\n                                Quaternion.fromAxisAngle(axis, angle, quat);\n                                Quaternion.pack(quat, typedArray, offset);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function removeTechniquePasses(gltf) {\n        var techniques = gltf.techniques;\n        for (var techniqueId in techniques) {\n            if (Object.prototype.hasOwnProperty.call(techniques, techniqueId)) {\n                var technique = techniques[techniqueId];\n                var passes = technique.passes;\n                if (defined(passes)) {\n                    var passName = defaultValue(technique.pass, 'defaultPass');\n                    if (Object.prototype.hasOwnProperty.call(passes, passName)) {\n                        var pass = passes[passName];\n                        var instanceProgram = pass.instanceProgram;\n                        technique.attributes = defaultValue(technique.attributes, instanceProgram.attributes);\n                        technique.program = defaultValue(technique.program, instanceProgram.program);\n                        technique.uniforms = defaultValue(technique.uniforms, instanceProgram.uniforms);\n                        technique.states = defaultValue(technique.states, pass.states);\n                    }\n                    delete technique.passes;\n                    delete technique.pass;\n                }\n            }\n        }\n    }\n\n    function glTF08to10(gltf) {\n        if (!defined(gltf.asset)) {\n            gltf.asset = {};\n        }\n        var asset = gltf.asset;\n        asset.version = '1.0';\n        // Profile should be an object, not a string\n        if (typeof asset.profile === 'string') {\n            var split = asset.profile.split(' ');\n            asset.profile = {\n                api: split[0],\n                version: split[1]\n            };\n        } else {\n            asset.profile = {};\n        }\n\n        // Version property should be in asset, not on the root element\n        if (defined(gltf.version)) {\n            delete gltf.version;\n        }\n        // material.instanceTechnique properties should be directly on the material\n        updateInstanceTechniques(gltf);\n        // primitive.primitive should be primitive.mode\n        setPrimitiveModes(gltf);\n        // Node rotation should be quaternion, not axis-angle\n        // node.instanceSkin is deprecated\n        updateNodes(gltf);\n        // Animations that target rotations should be quaternion, not axis-angle\n        updateAnimations(gltf);\n        // technique.pass and techniques.passes are deprecated\n        removeTechniquePasses(gltf);\n        // gltf.allExtensions -> extensionsUsed\n        if (defined(gltf.allExtensions)) {\n            gltf.extensionsUsed = gltf.allExtensions;\n            delete gltf.allExtensions;\n        }\n        // gltf.lights -> khrMaterialsCommon.lights\n        if (defined(gltf.lights)) {\n            var extensions = defaultValue(gltf.extensions, {});\n            gltf.extensions = extensions;\n            var materialsCommon = defaultValue(extensions.KHR_materials_common, {});\n            extensions.KHR_materials_common = materialsCommon;\n            materialsCommon.lights = gltf.lights;\n            delete gltf.lights;\n            addExtensionsUsed(gltf, 'KHR_materials_common');\n        }\n    }\n\n    function removeAnimationSamplersIndirection(gltf) {\n        var animations = gltf.animations;\n        for (var animationId in animations) {\n            if (Object.prototype.hasOwnProperty.call(animations, animationId)) {\n                var animation = animations[animationId];\n                var parameters = animation.parameters;\n                if (defined(parameters)) {\n                    var samplers = animation.samplers;\n                    for (var samplerId in samplers) {\n                        if (Object.prototype.hasOwnProperty.call(samplers, samplerId)) {\n                            var sampler = samplers[samplerId];\n                            sampler.input = parameters[sampler.input];\n                            sampler.output = parameters[sampler.output];\n                        }\n                    }\n                    delete animation.parameters;\n                }\n            }\n        }\n    }\n\n    function objectToArray(object, mapping) {\n        var array = [];\n        for (var id in object) {\n            if (Object.prototype.hasOwnProperty.call(object, id)) {\n                var value = object[id];\n                mapping[id] = array.length;\n                array.push(value);\n                if (!defined(value.name)) {\n                    value.name = id;\n                }\n            }\n        }\n        return array;\n    }\n\n    function objectsToArrays(gltf) {\n        var i;\n        var globalMapping = {\n            accessors: {},\n            animations: {},\n            buffers: {},\n            bufferViews: {},\n            cameras: {},\n            images: {},\n            materials: {},\n            meshes: {},\n            nodes: {},\n            programs: {},\n            samplers: {},\n            scenes: {},\n            shaders: {},\n            skins: {},\n            textures: {},\n            techniques: {}\n        };\n\n        // Map joint names to id names\n        var jointName;\n        var jointNameToId = {};\n        var nodes = gltf.nodes;\n        for (var id in nodes) {\n            if (Object.prototype.hasOwnProperty.call(nodes, id)) {\n                jointName = nodes[id].jointName;\n                if (defined(jointName)) {\n                    jointNameToId[jointName] = id;\n                }\n            }\n        }\n\n        // Convert top level objects to arrays\n        for (var topLevelId in gltf) {\n            if (Object.prototype.hasOwnProperty.call(gltf, topLevelId) && defined(globalMapping[topLevelId])) {\n                var objectMapping = {};\n                var object = gltf[topLevelId];\n                gltf[topLevelId] = objectToArray(object, objectMapping);\n                globalMapping[topLevelId] = objectMapping;\n            }\n        }\n\n        // Remap joint names to array indexes\n        for (jointName in jointNameToId) {\n            if (Object.prototype.hasOwnProperty.call(jointNameToId, jointName)) {\n                jointNameToId[jointName] = globalMapping.nodes[jointNameToId[jointName]];\n            }\n        }\n\n        // Fix references\n        if (defined(gltf.scene)) {\n            gltf.scene = globalMapping.scenes[gltf.scene];\n        }\n        ForEach.bufferView(gltf, function(bufferView) {\n            if (defined(bufferView.buffer)) {\n                bufferView.buffer = globalMapping.buffers[bufferView.buffer];\n            }\n        });\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView)) {\n                accessor.bufferView = globalMapping.bufferViews[accessor.bufferView];\n            }\n        });\n        ForEach.shader(gltf, function(shader) {\n            var extensions = shader.extensions;\n            if (defined(extensions)) {\n                var binaryGltf = extensions.KHR_binary_glTF;\n                if (defined(binaryGltf)) {\n                    shader.bufferView = globalMapping.bufferViews[binaryGltf.bufferView];\n                    delete extensions.KHR_binary_glTF;\n                }\n                if (Object.keys(extensions).length === 0) {\n                    delete shader.extensions;\n                }\n            }\n        });\n        ForEach.program(gltf, function(program) {\n            if (defined(program.vertexShader)) {\n                program.vertexShader = globalMapping.shaders[program.vertexShader];\n            }\n            if (defined(program.fragmentShader)) {\n                program.fragmentShader = globalMapping.shaders[program.fragmentShader];\n            }\n        });\n        ForEach.technique(gltf, function(technique) {\n            if (defined(technique.program)) {\n                technique.program = globalMapping.programs[technique.program];\n            }\n            ForEach.techniqueParameter(technique, function(parameter) {\n                if (defined(parameter.node)) {\n                    parameter.node = globalMapping.nodes[parameter.node];\n                }\n                var value = parameter.value;\n                if (typeof value === 'string') {\n                    parameter.value = {\n                        index: globalMapping.textures[value]\n                    };\n                }\n            });\n        });\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                if (defined(primitive.indices)) {\n                    primitive.indices = globalMapping.accessors[primitive.indices];\n                }\n                ForEach.meshPrimitiveAttribute(primitive, function(accessorId, semantic) {\n                    primitive.attributes[semantic] = globalMapping.accessors[accessorId];\n                });\n                if (defined(primitive.material)) {\n                    primitive.material = globalMapping.materials[primitive.material];\n                }\n            });\n        });\n        ForEach.node(gltf, function(node) {\n            var children = node.children;\n            if (defined(children)) {\n                var childrenLength = children.length;\n                for (i = 0; i < childrenLength; ++i) {\n                    children[i] = globalMapping.nodes[children[i]];\n                }\n            }\n            if (defined(node.meshes)) {\n                // Split out meshes on nodes\n                var meshes = node.meshes;\n                var meshesLength = meshes.length;\n                if (meshesLength > 0) {\n                    node.mesh = globalMapping.meshes[meshes[0]];\n                    for (i = 1; i < meshesLength; ++i) {\n                        var meshNode = {\n                            mesh: globalMapping.meshes[meshes[i]]\n                        };\n                        var meshNodeId = addToArray(gltf.nodes, meshNode);\n                        if (!defined(children)) {\n                            children = [];\n                            node.children = children;\n                        }\n                        children.push(meshNodeId);\n                    }\n                }\n                delete node.meshes;\n            }\n            if (defined(node.camera)) {\n                node.camera = globalMapping.cameras[node.camera];\n            }\n            if (defined(node.skin)) {\n                node.skin = globalMapping.skins[node.skin];\n            }\n            if (defined(node.skeletons)) {\n                // Assign skeletons to skins\n                var skeletons = node.skeletons;\n                var skeletonsLength = skeletons.length;\n                if ((skeletonsLength > 0) && defined(node.skin)) {\n                    var skin = gltf.skins[node.skin];\n                    skin.skeleton = globalMapping.nodes[skeletons[0]];\n                }\n                delete node.skeletons;\n            }\n            if (defined(node.jointName)) {\n                delete node.jointName;\n            }\n        });\n        ForEach.skin(gltf, function(skin) {\n            if (defined(skin.inverseBindMatrices)) {\n                skin.inverseBindMatrices = globalMapping.accessors[skin.inverseBindMatrices];\n            }\n            var jointNames = skin.jointNames;\n            if (defined(jointNames)) {\n                var joints = [];\n                var jointNamesLength = jointNames.length;\n                for (i = 0; i < jointNamesLength; ++i) {\n                    joints[i] = jointNameToId[jointNames[i]];\n                }\n                skin.joints = joints;\n                delete skin.jointNames;\n            }\n        });\n        ForEach.scene(gltf, function(scene) {\n            var sceneNodes = scene.nodes;\n            if (defined(sceneNodes)) {\n                var sceneNodesLength = sceneNodes.length;\n                for (i = 0; i < sceneNodesLength; ++i) {\n                    sceneNodes[i] = globalMapping.nodes[sceneNodes[i]];\n                }\n            }\n        });\n        ForEach.animation(gltf, function(animation) {\n            var samplerMapping = {};\n            animation.samplers = objectToArray(animation.samplers, samplerMapping);\n            ForEach.animationSampler(animation, function(sampler) {\n                sampler.input = globalMapping.accessors[sampler.input];\n                sampler.output = globalMapping.accessors[sampler.output];\n            });\n            ForEach.animationChannel(animation, function(channel) {\n                channel.sampler = samplerMapping[channel.sampler];\n                var target = channel.target;\n                if (defined(target)) {\n                    target.node = globalMapping.nodes[target.id];\n                    delete target.id;\n                }\n            });\n        });\n        ForEach.material(gltf, function(material) {\n            if (defined(material.technique)) {\n                material.technique = globalMapping.techniques[material.technique];\n            }\n            ForEach.materialValue(material, function(value, name) {\n                if (typeof value === 'string') {\n                    material.values[name] = {\n                        index: globalMapping.textures[value]\n                    };\n                }\n            });\n            var extensions = material.extensions;\n            if (defined(extensions)) {\n                var materialsCommon = extensions.KHR_materials_common;\n                if (defined(materialsCommon)) {\n                    ForEach.materialValue(materialsCommon, function(value, name) {\n                        if (typeof value === 'string') {\n                            materialsCommon.values[name] = {\n                                index: globalMapping.textures[value]\n                            };\n                        }\n                    });\n                }\n            }\n        });\n        ForEach.image(gltf, function(image) {\n            var extensions = image.extensions;\n            if (defined(extensions)) {\n                var binaryGltf = extensions.KHR_binary_glTF;\n                if (defined(binaryGltf)) {\n                    image.bufferView = globalMapping.bufferViews[binaryGltf.bufferView];\n                    image.mimeType = binaryGltf.mimeType;\n                    delete extensions.KHR_binary_glTF;\n                }\n                if (Object.keys(extensions).length === 0) {\n                    delete image.extensions;\n                }\n            }\n            ForEach.compressedImage(image, function(compressedImage) {\n                var compressedExtensions = compressedImage.extensions;\n                if (defined(compressedExtensions)) {\n                    var compressedBinaryGltf = compressedExtensions.KHR_binary_glTF;\n                    if (defined(compressedBinaryGltf)) {\n                        compressedImage.bufferView = globalMapping.bufferViews[compressedBinaryGltf.bufferView];\n                        compressedImage.mimeType = compressedBinaryGltf.mimeType;\n                        delete compressedExtensions.KHR_binary_glTF;\n                    }\n                    if (Object.keys(extensions).length === 0) {\n                        delete compressedImage.extensions;\n                    }\n                }\n            });\n        });\n        ForEach.texture(gltf, function(texture) {\n            if (defined(texture.sampler)) {\n                texture.sampler = globalMapping.samplers[texture.sampler];\n            }\n            if (defined(texture.source)) {\n                texture.source = globalMapping.images[texture.source];\n            }\n        });\n    }\n\n    function removeAnimationSamplerNames(gltf) {\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                delete sampler.name;\n            });\n        });\n    }\n\n    function removeEmptyArrays(gltf) {\n        for (var topLevelId in gltf) {\n            if (Object.prototype.hasOwnProperty.call(gltf, topLevelId)) {\n                var array = gltf[topLevelId];\n                if (Array.isArray(array) && array.length === 0) {\n                    delete gltf[topLevelId];\n                }\n            }\n        }\n        ForEach.node(gltf, function(node) {\n            if (defined(node.children) && node.children.length === 0) {\n                delete node.children;\n            }\n        });\n    }\n\n    function stripAsset(gltf) {\n        var asset = gltf.asset;\n        delete asset.profile;\n        delete asset.premultipliedAlpha;\n    }\n\n    var knownExtensions = {\n        CESIUM_RTC: true,\n        KHR_materials_common: true,\n        WEB3D_quantized_attributes: true\n    };\n    function requireKnownExtensions(gltf) {\n        var extensionsUsed = gltf.extensionsUsed;\n        gltf.extensionsRequired = defaultValue(gltf.extensionsRequired, []);\n        if (defined(extensionsUsed)) {\n            var extensionsUsedLength = extensionsUsed.length;\n            for (var i = 0; i < extensionsUsedLength; ++i) {\n                var extension = extensionsUsed[i];\n                if (defined(knownExtensions[extension])) {\n                    gltf.extensionsRequired.push(extension);\n                }\n            }\n        }\n    }\n\n    function removeBufferType(gltf) {\n        ForEach.buffer(gltf, function(buffer) {\n            delete buffer.type;\n        });\n    }\n\n    function removeTextureProperties(gltf) {\n        ForEach.texture(gltf, function(texture) {\n            delete texture.format;\n            delete texture.internalFormat;\n            delete texture.target;\n            delete texture.type;\n        });\n    }\n\n    function requireAttributeSetIndex(gltf) {\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                ForEach.meshPrimitiveAttribute(primitive, function(accessorId, semantic) {\n                    if (semantic === 'TEXCOORD') {\n                        primitive.attributes.TEXCOORD_0 = accessorId;\n                    } else if (semantic === 'COLOR') {\n                        primitive.attributes.COLOR_0 = accessorId;\n                    }\n                });\n                delete primitive.attributes.TEXCOORD;\n                delete primitive.attributes.COLOR;\n            });\n        });\n        ForEach.technique(gltf, function(technique) {\n            ForEach.techniqueParameter(technique, function(parameter) {\n                var semantic = parameter.semantic;\n                if (defined(semantic)) {\n                    if (semantic === 'TEXCOORD') {\n                        parameter.semantic = 'TEXCOORD_0';\n                    } else if (semantic === 'COLOR') {\n                        parameter.semantic = 'COLOR_0';\n                    }\n                }\n            });\n        });\n    }\n\n    var knownSemantics = {\n        POSITION: true,\n        NORMAL: true,\n        TANGENT: true\n    };\n    var indexedSemantics = {\n        COLOR: 'COLOR',\n        JOINT : 'JOINTS',\n        JOINTS: 'JOINTS',\n        TEXCOORD: 'TEXCOORD',\n        WEIGHT: 'WEIGHTS',\n        WEIGHTS: 'WEIGHTS'\n    };\n    function underscoreApplicationSpecificSemantics(gltf) {\n        var mappedSemantics = {};\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                /*eslint-disable no-unused-vars*/\n                ForEach.meshPrimitiveAttribute(primitive, function(accessorId, semantic) {\n                    if (semantic.charAt(0) !== '_') {\n                        var setIndex = semantic.search(/_[0-9]+/g);\n                        var strippedSemantic = semantic;\n                        var suffix = '_0';\n                        if (setIndex >= 0) {\n                            strippedSemantic = semantic.substring(0, setIndex);\n                            suffix = semantic.substring(setIndex);\n                        }\n                        var newSemantic;\n                        var indexedSemantic = indexedSemantics[strippedSemantic];\n                        if (defined(indexedSemantic)) {\n                            newSemantic = indexedSemantic + suffix;\n                            mappedSemantics[semantic] = newSemantic;\n                        } else if (!defined(knownSemantics[strippedSemantic])) {\n                            newSemantic = '_' + semantic;\n                            mappedSemantics[semantic] = newSemantic;\n                        }\n                    }\n                });\n                for (var semantic in mappedSemantics) {\n                    if (Object.prototype.hasOwnProperty.call(mappedSemantics, semantic)) {\n                        var mappedSemantic = mappedSemantics[semantic];\n                        var accessorId = primitive.attributes[semantic];\n                        if (defined(accessorId)) {\n                            delete primitive.attributes[semantic];\n                            primitive.attributes[mappedSemantic] = accessorId;\n                        }\n                    }\n                }\n            });\n        });\n        ForEach.technique(gltf, function(technique) {\n            ForEach.techniqueParameter(technique, function(parameter) {\n                var mappedSemantic = mappedSemantics[parameter.semantic];\n                if (defined(mappedSemantic)) {\n                    parameter.semantic = mappedSemantic;\n                }\n            });\n        });\n    }\n\n    function clampCameraParameters(gltf) {\n        ForEach.camera(gltf, function(camera) {\n            var perspective = camera.perspective;\n            if (defined(perspective)) {\n                var aspectRatio = perspective.aspectRatio;\n                if (defined(aspectRatio) && aspectRatio === 0.0) {\n                    delete perspective.aspectRatio;\n                }\n                var yfov = perspective.yfov;\n                if (defined(yfov) && yfov === 0.0) {\n                    perspective.yfov = 1.0;\n                }\n            }\n        });\n    }\n\n    function computeAccessorByteStride(gltf, accessor) {\n        return (defined(accessor.byteStride) && accessor.byteStride !== 0) ? accessor.byteStride : getAccessorByteStride(gltf, accessor);\n    }\n\n    function requireByteLength(gltf) {\n        ForEach.buffer(gltf, function(buffer) {\n            if (!defined(buffer.byteLength)) {\n                buffer.byteLength = buffer.extras._pipeline.source.length;\n            }\n        });\n        ForEach.accessor(gltf, function(accessor) {\n            var bufferViewId = accessor.bufferView;\n            if (defined(bufferViewId)) {\n                var bufferView = gltf.bufferViews[bufferViewId];\n                var accessorByteStride = computeAccessorByteStride(gltf, accessor);\n                var accessorByteEnd = accessor.byteOffset + accessor.count * accessorByteStride;\n                bufferView.byteLength = Math.max(defaultValue(bufferView.byteLength, 0), accessorByteEnd);\n            }\n        });\n    }\n\n    function moveByteStrideToBufferView(gltf) {\n        var i;\n        var j;\n        var bufferView;\n        var bufferViews = gltf.bufferViews;\n\n        var bufferViewHasVertexAttributes = {};\n        ForEach.accessorContainingVertexAttributeData(gltf, function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            if (defined(accessor.bufferView)) {\n                bufferViewHasVertexAttributes[accessor.bufferView] = true;\n            }\n        });\n\n        // Map buffer views to a list of accessors\n        var bufferViewMap = {};\n        ForEach.accessor(gltf, function(accessor) {\n            if (defined(accessor.bufferView)) {\n                bufferViewMap[accessor.bufferView] = defaultValue(bufferViewMap[accessor.bufferView], []);\n                bufferViewMap[accessor.bufferView].push(accessor);\n            }\n        });\n\n        // Split accessors with different byte strides\n        for (var bufferViewId in bufferViewMap) {\n            if (Object.prototype.hasOwnProperty.call(bufferViewMap, bufferViewId)) {\n                bufferView = bufferViews[bufferViewId];\n                var accessors = bufferViewMap[bufferViewId];\n                accessors.sort(function(a, b) {\n                    return a.byteOffset - b.byteOffset;\n                });\n                var currentByteOffset = 0;\n                var currentIndex = 0;\n                var accessorsLength = accessors.length;\n                for (i = 0; i < accessorsLength; ++i) {\n                    var accessor = accessors[i];\n                    var accessorByteStride = computeAccessorByteStride(gltf, accessor);\n                    var accessorByteOffset = accessor.byteOffset;\n                    var accessorByteLength = accessor.count * accessorByteStride;\n                    delete accessor.byteStride;\n\n                    var hasNextAccessor = (i < accessorsLength - 1);\n                    var nextAccessorByteStride = hasNextAccessor ? computeAccessorByteStride(gltf, accessors[i + 1]) : undefined;\n                    if (accessorByteStride !== nextAccessorByteStride) {\n                        var newBufferView = clone(bufferView, true);\n                        if (bufferViewHasVertexAttributes[bufferViewId]) {\n                            newBufferView.byteStride = accessorByteStride;\n                        }\n                        newBufferView.byteOffset += currentByteOffset;\n                        newBufferView.byteLength = accessorByteOffset + accessorByteLength - currentByteOffset;\n                        var newBufferViewId = addToArray(bufferViews, newBufferView);\n                        for (j = currentIndex; j <= i; ++j) {\n                            accessor = accessors[j];\n                            accessor.bufferView = newBufferViewId;\n                            accessor.byteOffset = accessor.byteOffset - currentByteOffset;\n                        }\n                        // Set current byte offset to next accessor's byte offset\n                        currentByteOffset = hasNextAccessor ? accessors[i + 1].byteOffset : undefined;\n                        currentIndex = i + 1;\n                    }\n                }\n            }\n        }\n\n        // Remove unused buffer views\n        removeUnusedElements(gltf, ['accessor', 'bufferView', 'buffer']);\n    }\n\n    function requirePositionAccessorMinMax(gltf) {\n        ForEach.accessorWithSemantic(gltf, 'POSITION', function(accessorId) {\n            var accessor = gltf.accessors[accessorId];\n            if (!defined(accessor.min) || !defined(accessor.max)) {\n                var minMax = findAccessorMinMax(gltf, accessor);\n                accessor.min = minMax.min;\n                accessor.max = minMax.max;\n            }\n        });\n    }\n\n    function isNodeEmpty(node) {\n        return (!defined(node.children) || node.children.length === 0) &&\n            (!defined(node.meshes) || node.meshes.length === 0) &&\n            !defined(node.camera) && !defined(node.skin) && !defined(node.skeletons) && !defined(node.jointName) &&\n            (!defined(node.translation) || Cartesian3.fromArray(node.translation).equals(Cartesian3.ZERO)) &&\n            (!defined(node.scale) || Cartesian3.fromArray(node.scale).equals(new Cartesian3(1.0, 1.0, 1.0))) &&\n            (!defined(node.rotation) || Cartesian4.fromArray(node.rotation).equals(new Cartesian4(0.0, 0.0, 0.0, 1.0))) &&\n            (!defined(node.matrix) || Matrix4.fromColumnMajorArray(node.matrix).equals(Matrix4.IDENTITY)) &&\n            !defined(node.extensions) && !defined(node.extras);\n    }\n\n    function deleteNode(gltf, nodeId) {\n        // Remove from list of nodes in scene\n        ForEach.scene(gltf, function(scene) {\n            var sceneNodes = scene.nodes;\n            if (defined(sceneNodes)) {\n                var sceneNodesLength = sceneNodes.length;\n                for (var i = sceneNodesLength; i >= 0; --i) {\n                    if (sceneNodes[i] === nodeId) {\n                        sceneNodes.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        });\n\n        // Remove parent node's reference to this node, and delete the parent if also empty\n        ForEach.node(gltf, function(parentNode, parentNodeId) {\n            if (defined(parentNode.children)) {\n                var index = parentNode.children.indexOf(nodeId);\n                if (index > -1) {\n                    parentNode.children.splice(index, 1);\n\n                    if (isNodeEmpty(parentNode)) {\n                        deleteNode(gltf, parentNodeId);\n                    }\n                }\n            }\n        });\n\n        delete gltf.nodes[nodeId];\n    }\n\n    function removeEmptyNodes(gltf) {\n        ForEach.node(gltf, function(node, nodeId) {\n            if (isNodeEmpty(node)) {\n                deleteNode(gltf, nodeId);\n            }\n        });\n\n        return gltf;\n    }\n\n    function requireAnimationAccessorMinMax(gltf) {\n        ForEach.animation(gltf, function(animation) {\n            ForEach.animationSampler(animation, function(sampler) {\n                var accessor = gltf.accessors[sampler.input];\n                if (!defined(accessor.min) || !defined(accessor.max)) {\n                    var minMax = findAccessorMinMax(gltf, accessor);\n                    accessor.min = minMax.min;\n                    accessor.max = minMax.max;\n                }\n            });\n        });\n    }\n\n    function glTF10to20(gltf) {\n        gltf.asset = defaultValue(gltf.asset, {});\n        gltf.asset.version = '2.0';\n        // material.instanceTechnique properties should be directly on the material. instanceTechnique is a gltf 0.8 property but is seen in some 1.0 models.\n        updateInstanceTechniques(gltf);\n        // animation.samplers now refers directly to accessors and animation.parameters should be removed\n        removeAnimationSamplersIndirection(gltf);\n        // Remove empty nodes and re-assign referencing indices\n        removeEmptyNodes(gltf);\n        // Top-level objects are now arrays referenced by index instead of id\n        objectsToArrays(gltf);\n        // Animation.sampler objects cannot have names\n        removeAnimationSamplerNames(gltf);\n        // asset.profile no longer exists\n        stripAsset(gltf);\n        // Move known extensions from extensionsUsed to extensionsRequired\n        requireKnownExtensions(gltf);\n        // bufferView.byteLength and buffer.byteLength are required\n        requireByteLength(gltf);\n        // byteStride moved from accessor to bufferView\n        moveByteStrideToBufferView(gltf);\n        // accessor.min and accessor.max must be defined for accessors containing POSITION attributes\n        requirePositionAccessorMinMax(gltf);\n        // An animation sampler's input accessor must have min and max properties defined\n        requireAnimationAccessorMinMax(gltf);\n        // buffer.type is unnecessary and should be removed\n        removeBufferType(gltf);\n        // Remove format, internalFormat, target, and type\n        removeTextureProperties(gltf);\n        // TEXCOORD and COLOR attributes must be written with a set index (TEXCOORD_#)\n        requireAttributeSetIndex(gltf);\n        // Add underscores to application-specific parameters\n        underscoreApplicationSpecificSemantics(gltf);\n        // Accessors referenced by JOINTS_0 and WEIGHTS_0 attributes must have correct component types\n        updateAccessorComponentTypes(gltf);\n        // Clamp camera parameters\n        clampCameraParameters(gltf);\n        // Move legacy technique render states to material properties and add KHR_blend extension blending functions\n        moveTechniqueRenderStates(gltf);\n        // Add material techniques to KHR_techniques_webgl extension, removing shaders, programs, and techniques\n        moveTechniquesToExtension(gltf);\n        // Remove empty arrays\n        removeEmptyArrays(gltf);\n    }\n\n    export default updateVersion;\n","import arraySlice from '../Core/arraySlice.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defined from '../Core/defined.js';\nimport FeatureDetection from '../Core/FeatureDetection.js';\nimport TaskProcessor from '../Core/TaskProcessor.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport when from '../ThirdParty/when.js';\n\n    /**\n     * @private\n     */\n    function DracoLoader() {}\n\n    // Maximum concurrency to use when decoding draco models\n    DracoLoader._maxDecodingConcurrency = Math.max(FeatureDetection.hardwareConcurrency - 1, 1);\n\n    // Exposed for testing purposes\n    DracoLoader._decoderTaskProcessor = undefined;\n    DracoLoader._taskProcessorReady = false;\n    DracoLoader._getDecoderTaskProcessor = function () {\n        if (!defined(DracoLoader._decoderTaskProcessor)) {\n            var processor = new TaskProcessor('decodeDraco', DracoLoader._maxDecodingConcurrency);\n            processor.initWebAssemblyModule({\n                modulePath : 'ThirdParty/Workers/draco_wasm_wrapper.js',\n                wasmBinaryFile : 'ThirdParty/draco_decoder.wasm',\n                fallbackModulePath : 'ThirdParty/Workers/draco_decoder.js'\n            }).then(function () {\n                DracoLoader._taskProcessorReady = true;\n            });\n            DracoLoader._decoderTaskProcessor = processor;\n        }\n\n        return DracoLoader._decoderTaskProcessor;\n    };\n\n    /**\n     * Returns true if the model uses or requires KHR_draco_mesh_compression.\n     *\n     * @private\n     */\n    DracoLoader.hasExtension = function(model) {\n        return (defined(model.extensionsRequired.KHR_draco_mesh_compression)\n            || defined(model.extensionsUsed.KHR_draco_mesh_compression));\n    };\n\n    function addBufferToLoadResources(loadResources, typedArray) {\n        // Create a new id to differentiate from original glTF bufferViews\n        var bufferViewId = 'runtime.' + Object.keys(loadResources.createdBufferViews).length;\n\n        var loadResourceBuffers = loadResources.buffers;\n        var id = Object.keys(loadResourceBuffers).length;\n        loadResourceBuffers[id] = typedArray;\n        loadResources.createdBufferViews[bufferViewId] = {\n            buffer : id,\n            byteOffset : 0,\n            byteLength : typedArray.byteLength\n        };\n\n        return bufferViewId;\n    }\n\n    function addNewVertexBuffer(typedArray, model, context) {\n        var loadResources = model._loadResources;\n        var id = addBufferToLoadResources(loadResources, typedArray);\n        loadResources.vertexBuffersToCreate.enqueue(id);\n        return id;\n    }\n\n    function addNewIndexBuffer(indexArray, model, context) {\n        var typedArray = indexArray.typedArray;\n        var loadResources = model._loadResources;\n        var id = addBufferToLoadResources(loadResources, typedArray);\n        loadResources.indexBuffersToCreate.enqueue({\n            id : id,\n            componentType : ComponentDatatype.fromTypedArray(typedArray)\n        });\n\n        return {\n            bufferViewId : id,\n            numberOfIndices : indexArray.numberOfIndices\n        };\n    }\n\n    function scheduleDecodingTask(decoderTaskProcessor, model, loadResources, context) {\n        if (!DracoLoader._taskProcessorReady) {\n            // The task processor is not ready to schedule tasks\n            return;\n        }\n\n        var taskData = loadResources.primitivesToDecode.peek();\n        if (!defined(taskData)) {\n            // All primitives are processing\n            return;\n        }\n\n        var promise = decoderTaskProcessor.scheduleTask(taskData, [taskData.array.buffer]);\n        if (!defined(promise)) {\n            // Cannot schedule another task this frame\n            return;\n        }\n\n        loadResources.activeDecodingTasks++;\n        loadResources.primitivesToDecode.dequeue();\n        return promise.then(function (result) {\n            loadResources.activeDecodingTasks--;\n\n            var decodedIndexBuffer = addNewIndexBuffer(result.indexArray, model, context);\n\n            var attributes = {};\n            var decodedAttributeData = result.attributeData;\n            for (var attributeName in decodedAttributeData) {\n                if (decodedAttributeData.hasOwnProperty(attributeName)) {\n                    var attribute = decodedAttributeData[attributeName];\n                    var vertexArray = attribute.array;\n                    var vertexBufferView = addNewVertexBuffer(vertexArray, model, context);\n\n                    var data = attribute.data;\n                    data.bufferView = vertexBufferView;\n\n                    attributes[attributeName] = data;\n                }\n            }\n\n            model._decodedData[taskData.mesh + '.primitive.' + taskData.primitive] = {\n                bufferView : decodedIndexBuffer.bufferViewId,\n                numberOfIndices : decodedIndexBuffer.numberOfIndices,\n                attributes : attributes\n            };\n        });\n    }\n\n    DracoLoader._decodedModelResourceCache = undefined;\n\n    /**\n     * Parses draco extension on model primitives and\n     * adds the decoding data to the model's load resources.\n     *\n     * @private\n     */\n    DracoLoader.parse = function(model, context) {\n        if (!DracoLoader.hasExtension(model)) {\n            return;\n        }\n\n        var loadResources = model._loadResources;\n        var cacheKey = model.cacheKey;\n        if (defined(cacheKey)) {\n            if (!defined(DracoLoader._decodedModelResourceCache)) {\n                if (!defined(context.cache.modelDecodingCache)) {\n                    context.cache.modelDecodingCache = {};\n                }\n\n                DracoLoader._decodedModelResourceCache = context.cache.modelDecodingCache;\n            }\n\n            // Decoded data for model will be loaded from cache\n            var cachedData = DracoLoader._decodedModelResourceCache[cacheKey];\n            if (defined(cachedData)) {\n                cachedData.count++;\n                loadResources.pendingDecodingCache = true;\n                return;\n            }\n        }\n\n        var dequantizeInShader = model._dequantizeInShader;\n        var gltf = model.gltf;\n        ForEach.mesh(gltf, function(mesh, meshId) {\n            ForEach.meshPrimitive(mesh, function(primitive, primitiveId) {\n                if (!defined(primitive.extensions)) {\n                    return;\n                }\n\n                var compressionData = primitive.extensions.KHR_draco_mesh_compression;\n                if (!defined(compressionData)) {\n                    return;\n                }\n\n                var bufferView = gltf.bufferViews[compressionData.bufferView];\n                var typedArray = arraySlice(gltf.buffers[bufferView.buffer].extras._pipeline.source, bufferView.byteOffset, bufferView.byteOffset + bufferView.byteLength);\n                loadResources.primitivesToDecode.enqueue({\n                    mesh : meshId,\n                    primitive : primitiveId,\n                    array : typedArray,\n                    bufferView : bufferView,\n                    compressedAttributes : compressionData.attributes,\n                    dequantizeInShader : dequantizeInShader\n                });\n            });\n        });\n    };\n\n    /**\n     * Schedules decoding tasks available this frame.\n     * @private\n     */\n    DracoLoader.decodeModel = function(model, context) {\n        if (!DracoLoader.hasExtension(model)) {\n            return when.resolve();\n        }\n\n        var loadResources = model._loadResources;\n        var cacheKey = model.cacheKey;\n        if (defined(cacheKey) && defined(DracoLoader._decodedModelResourceCache)) {\n            var cachedData = DracoLoader._decodedModelResourceCache[cacheKey];\n            // Load decoded data for model when cache is ready\n            if (defined(cachedData) && loadResources.pendingDecodingCache) {\n                return when(cachedData.ready, function () {\n                    model._decodedData = cachedData.data;\n                    loadResources.pendingDecodingCache = false;\n                });\n            }\n\n            // Decoded data for model should be cached when ready\n            DracoLoader._decodedModelResourceCache[cacheKey] = {\n                ready : false,\n                count : 1,\n                data : undefined\n            };\n        }\n\n        if (loadResources.primitivesToDecode.length === 0) {\n            // No more tasks to schedule\n            return when.resolve();\n        }\n\n        var decoderTaskProcessor = DracoLoader._getDecoderTaskProcessor();\n        var decodingPromises = [];\n\n        var promise = scheduleDecodingTask(decoderTaskProcessor, model, loadResources, context);\n        while (defined(promise)) {\n            decodingPromises.push(promise);\n            promise = scheduleDecodingTask(decoderTaskProcessor, model, loadResources, context);\n        }\n\n        return when.all(decodingPromises);\n    };\n\n    /**\n     * Decodes a compressed point cloud. Returns undefined if the task cannot be scheduled.\n     * @private\n     */\n    DracoLoader.decodePointCloud = function(parameters) {\n        var decoderTaskProcessor = DracoLoader._getDecoderTaskProcessor();\n        if (!DracoLoader._taskProcessorReady) {\n            // The task processor is not ready to schedule tasks\n            return;\n        }\n        return decoderTaskProcessor.scheduleTask(parameters, [parameters.buffer.buffer]);\n    };\n\n    /**\n     * Caches a models decoded data so it doesn't need to decode more than once.\n     * @private\n     */\n    DracoLoader.cacheDataForModel = function(model) {\n        var cacheKey = model.cacheKey;\n        if (defined(cacheKey) && defined(DracoLoader._decodedModelResourceCache)) {\n            var cachedData = DracoLoader._decodedModelResourceCache[cacheKey];\n            if (defined(cachedData)) {\n                cachedData.ready = true;\n                cachedData.data = model._decodedData;\n            }\n        }\n    };\n\n    /**\n     * Destroys the cached data that this model references if it is no longer in use.\n     * @private\n     */\n    DracoLoader.destroyCachedDataForModel = function(model) {\n        var cacheKey = model.cacheKey;\n        if (defined(cacheKey) && defined(DracoLoader._decodedModelResourceCache)) {\n            var cachedData = DracoLoader._decodedModelResourceCache[cacheKey];\n            if (defined(cachedData) && --cachedData.count === 0) {\n                delete DracoLoader._decodedModelResourceCache[cacheKey];\n            }\n        }\n    };\nexport default DracoLoader;\n","import Check from '../Core/Check.js';\n\n    /**\n     * Gets a GLSL snippet that clips a fragment using the `clip` function from {@link getClippingFunction} and styles it.\n     *\n     * @param {String} samplerUniformName Name of the uniform for the clipping planes texture sampler.\n     * @param {String} matrixUniformName Name of the uniform for the clipping planes matrix.\n     * @param {String} styleUniformName Name of the uniform for the clipping planes style, a vec4.\n     * @returns {String} A string containing GLSL that clips and styles the current fragment.\n     * @private\n     */\n    function getClipAndStyleCode(samplerUniformName, matrixUniformName, styleUniformName) {\n        \n\n        var shaderCode =\n        '    float clipDistance = clip(gl_FragCoord, ' + samplerUniformName + ', ' + matrixUniformName + '); \\n' +\n        '    vec4 clippingPlanesEdgeColor = vec4(1.0); \\n' +\n        '    clippingPlanesEdgeColor.rgb = ' + styleUniformName + '.rgb; \\n' +\n        '    float clippingPlanesEdgeWidth = ' + styleUniformName + '.a; \\n' +\n        '    if (clipDistance > 0.0 && clipDistance < clippingPlanesEdgeWidth) \\n' +\n        '    { \\n' +\n        '        gl_FragColor = clippingPlanesEdgeColor;\\n' +\n        '    } \\n';\n        return shaderCode;\n    }\nexport default getClipAndStyleCode;\n","import Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport CesiumMath from './Math.js';\n\n    /**\n     * Creates a curve parameterized and evaluated by time. This type describes an interface\n     * and is not intended to be instantiated directly.\n     *\n     * @alias Spline\n     * @constructor\n     *\n     * @see CatmullRomSpline\n     * @see HermiteSpline\n     * @see LinearSpline\n     * @see QuaternionSpline\n     */\n    function Spline() {\n        /**\n         * An array of times for the control points.\n         * @type {Number[]}\n         * @default undefined\n         */\n        this.times = undefined;\n\n        /**\n         * An array of control points.\n         * @type {Cartesian3[]|Quaternion[]}\n         * @default undefined\n         */\n        this.points = undefined;\n\n        DeveloperError.throwInstantiationError();\n    }\n\n    /**\n     * Evaluates the curve at a given time.\n     * @function\n     *\n     * @param {Number} time The time at which to evaluate the curve.\n     * @param {Cartesian3|Quaternion|Number[]} [result] The object onto which to store the result.\n     * @returns {Cartesian3|Quaternion|Number[]} The modified result parameter or a new instance of the point on the curve at the given time.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    Spline.prototype.evaluate = DeveloperError.throwInstantiationError;\n\n    /**\n     * Finds an index <code>i</code> in <code>times</code> such that the parameter\n     * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n     *\n     * @param {Number} time The time.\n     * @param {Number} startIndex The index from which to start the search.\n     * @returns {Number} The index for the element at the start of the interval.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    Spline.prototype.findTimeInterval = function(time, startIndex) {\n        var times = this.times;\n        var length = times.length;\n\n        \n\n        // Take advantage of temporal coherence by checking current, next and previous intervals\n        // for containment of time.\n        startIndex = defaultValue(startIndex, 0);\n\n        if (time >= times[startIndex]) {\n            if (startIndex + 1 < length && time < times[startIndex + 1]) {\n                return startIndex;\n            } else if (startIndex + 2 < length && time < times[startIndex + 2]) {\n                return startIndex + 1;\n            }\n        } else if (startIndex - 1 >= 0 && time >= times[startIndex - 1]) {\n            return startIndex - 1;\n        }\n\n        // The above failed so do a linear search. For the use cases so far, the\n        // length of the list is less than 10. In the future, if there is a bottle neck,\n        // it might be here.\n\n        var i;\n        if (time > times[startIndex]) {\n            for (i = startIndex; i < length - 1; ++i) {\n                if (time >= times[i] && time < times[i + 1]) {\n                    break;\n                }\n            }\n        } else {\n            for (i = startIndex - 1; i >= 0; --i) {\n                if (time >= times[i] && time < times[i + 1]) {\n                    break;\n                }\n            }\n        }\n\n        if (i === length - 1) {\n            i = length - 2;\n        }\n\n        return i;\n    };\n\n    /**\n     * Wraps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, wrapped around the animation period.\n     */\n    Spline.prototype.wrapTime = function(time) {\n        \n\n        var times = this.times;\n        var timeEnd = times[times.length - 1];\n        var timeStart = times[0];\n        var timeStretch = timeEnd - timeStart;\n        var divs;\n        if (time < timeStart) {\n            divs = Math.floor((timeStart - time) / timeStretch) + 1;\n            time += divs * timeStretch;\n        }\n        if (time > timeEnd) {\n            divs = Math.floor((time - timeEnd) / timeStretch) + 1;\n            time -= divs * timeStretch;\n        }\n        return time;\n    };\n\n    /**\n     * Clamps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, clamped to the animation period.\n     */\n    Spline.prototype.clampTime = function(time) {\n        \n\n        var times = this.times;\n        return CesiumMath.clamp(time, times[0], times[times.length - 1]);\n    };\nexport default Spline;\n","import Cartesian3 from './Cartesian3.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Spline from './Spline.js';\n\n    /**\n     * A spline that uses piecewise linear interpolation to create a curve.\n     *\n     * @alias LinearSpline\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number[]} options.times An array of strictly increasing, unit-less, floating-point times at each point.\n     *                The values are in no way connected to the clock time. They are the parameterization for the curve.\n     * @param {Cartesian3[]} options.points The array of {@link Cartesian3} control points.\n     *\n     * @exception {DeveloperError} points.length must be greater than or equal to 2.\n     * @exception {DeveloperError} times.length must be equal to points.length.\n     *\n     *\n     * @example\n     * var times = [ 0.0, 1.5, 3.0, 4.5, 6.0 ];\n     * var spline = new Cesium.LinearSpline({\n     *     times : times,\n     *     points : [\n     *         new Cesium.Cartesian3(1235398.0, -4810983.0, 4146266.0),\n     *         new Cesium.Cartesian3(1372574.0, -5345182.0, 4606657.0),\n     *         new Cesium.Cartesian3(-757983.0, -5542796.0, 4514323.0),\n     *         new Cesium.Cartesian3(-2821260.0, -5248423.0, 4021290.0),\n     *         new Cesium.Cartesian3(-2539788.0, -4724797.0, 3620093.0)\n     *     ]\n     * });\n     *\n     * var p0 = spline.evaluate(times[0]);\n     *\n     * @see HermiteSpline\n     * @see CatmullRomSpline\n     * @see QuaternionSpline\n     * @see WeightSpline\n     */\n    function LinearSpline(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var points = options.points;\n        var times = options.times;\n\n        \n\n        this._times = times;\n        this._points = points;\n\n        this._lastTimeIndex = 0;\n    }\n\n    Object.defineProperties(LinearSpline.prototype, {\n        /**\n         * An array of times for the control points.\n         *\n         * @memberof LinearSpline.prototype\n         *\n         * @type {Number[]}\n         * @readonly\n         */\n        times : {\n            get : function() {\n                return this._times;\n            }\n        },\n\n        /**\n         * An array of {@link Cartesian3} control points.\n         *\n         * @memberof LinearSpline.prototype\n         *\n         * @type {Cartesian3[]}\n         * @readonly\n         */\n        points : {\n            get : function() {\n                return this._points;\n            }\n        }\n    });\n\n    /**\n     * Finds an index <code>i</code> in <code>times</code> such that the parameter\n     * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @returns {Number} The index for the element at the start of the interval.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    LinearSpline.prototype.findTimeInterval = Spline.prototype.findTimeInterval;\n\n    /**\n     * Wraps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, wrapped around to the updated animation.\n     */\n    LinearSpline.prototype.wrapTime = Spline.prototype.wrapTime;\n\n    /**\n     * Clamps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, clamped to the animation period.\n     */\n    LinearSpline.prototype.clampTime = Spline.prototype.clampTime;\n\n    /**\n     * Evaluates the curve at a given time.\n     *\n     * @param {Number} time The time at which to evaluate the curve.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The modified result parameter or a new instance of the point on the curve at the given time.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    LinearSpline.prototype.evaluate = function(time, result) {\n        var points = this.points;\n        var times = this.times;\n\n        var i = this._lastTimeIndex = this.findTimeInterval(time, this._lastTimeIndex);\n        var u = (time - times[i]) / (times[i + 1] - times[i]);\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        return Cartesian3.lerp(points[i], points[i + 1], u, result);\n    };\nexport default LinearSpline;\n","import defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Quaternion from './Quaternion.js';\nimport Spline from './Spline.js';\n\n    function createEvaluateFunction(spline) {\n        var points = spline.points;\n        var times = spline.times;\n\n        // use slerp interpolation\n        return function(time, result) {\n            if (!defined(result)){\n                result = new Quaternion();\n            }\n            var i = spline._lastTimeIndex = spline.findTimeInterval(time, spline._lastTimeIndex);\n            var u = (time - times[i]) / (times[i + 1] - times[i]);\n\n            var q0 = points[i];\n            var q1 = points[i + 1];\n\n            return Quaternion.fastSlerp(q0, q1, u, result);\n        };\n    }\n\n    /**\n     * A spline that uses spherical linear (slerp) interpolation to create a quaternion curve.\n     * The generated curve is in the class C<sup>1</sup>.\n     *\n     * @alias QuaternionSpline\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number[]} options.times An array of strictly increasing, unit-less, floating-point times at each point.\n     *                The values are in no way connected to the clock time. They are the parameterization for the curve.\n     * @param {Quaternion[]} options.points The array of {@link Quaternion} control points.\n     *\n     * @exception {DeveloperError} points.length must be greater than or equal to 2.\n     * @exception {DeveloperError} times.length must be equal to points.length.\n     *\n     * @see HermiteSpline\n     * @see CatmullRomSpline\n     * @see LinearSpline\n     * @see WeightSpline\n     */\n    function QuaternionSpline(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var points = options.points;\n        var times = options.times;\n\n        \n\n        this._times = times;\n        this._points = points;\n\n        this._evaluateFunction = createEvaluateFunction(this);\n        this._lastTimeIndex = 0;\n    }\n\n    Object.defineProperties(QuaternionSpline.prototype, {\n        /**\n         * An array of times for the control points.\n         *\n         * @memberof QuaternionSpline.prototype\n         *\n         * @type {Number[]}\n         * @readonly\n         */\n        times : {\n            get : function() {\n                return this._times;\n            }\n        },\n\n        /**\n         * An array of {@link Quaternion} control points.\n         *\n         * @memberof QuaternionSpline.prototype\n         *\n         * @type {Quaternion[]}\n         * @readonly\n         */\n        points : {\n            get : function() {\n                return this._points;\n            }\n        }\n    });\n\n    /**\n     * Finds an index <code>i</code> in <code>times</code> such that the parameter\n     * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @returns {Number} The index for the element at the start of the interval.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    QuaternionSpline.prototype.findTimeInterval = Spline.prototype.findTimeInterval;\n\n    /**\n     * Wraps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, wrapped around to the updated animation.\n     */\n    QuaternionSpline.prototype.wrapTime = Spline.prototype.wrapTime;\n\n    /**\n     * Clamps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, clamped to the animation period.\n     */\n    QuaternionSpline.prototype.clampTime = Spline.prototype.clampTime;\n\n    /**\n     * Evaluates the curve at a given time.\n     *\n     * @param {Number} time The time at which to evaluate the curve.\n     * @param {Quaternion} [result] The object onto which to store the result.\n     * @returns {Quaternion} The modified result parameter or a new instance of the point on the curve at the given time.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    QuaternionSpline.prototype.evaluate = function(time, result) {\n        return this._evaluateFunction(time, result);\n    };\nexport default QuaternionSpline;\n","import Check from './Check.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Spline from './Spline.js';\n\n    /**\n     * A spline that linearly interpolates over an array of weight values used by morph targets.\n     *\n     * @alias WeightSpline\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number[]} options.times An array of strictly increasing, unit-less, floating-point times at each point.\n     *                The values are in no way connected to the clock time. They are the parameterization for the curve.\n     * @param {Number[]} options.weights The array of floating-point control weights given. The weights are ordered such\n     *                that all weights for the targets are given in chronological order and order in which they appear in\n     *                the glTF from which the morph targets come. This means for 2 targets, weights = [w(0,0), w(0,1), w(1,0), w(1,1) ...]\n     *                where i and j in w(i,j) are the time indices and target indices, respectively.\n     *\n     * @exception {DeveloperError} weights.length must be greater than or equal to 2.\n     * @exception {DeveloperError} times.length must be a factor of weights.length.\n     *\n     *\n     * @example\n     * var times = [ 0.0, 1.5, 3.0, 4.5, 6.0 ];\n     * var weights = [0.0, 1.0, 0.25, 0.75, 0.5, 0.5, 0.75, 0.25, 1.0, 0.0]; //Two targets\n     * var spline = new Cesium.WeightSpline({\n     *     times : times,\n     *     weights : weights\n     * });\n     *\n     * var p0 = spline.evaluate(times[0]);\n     *\n     * @see LinearSpline\n     * @see HermiteSpline\n     * @see CatmullRomSpline\n     * @see QuaternionSpline\n     */\n    function WeightSpline(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var weights = options.weights;\n        var times = options.times;\n\n        \n\n        this._times = times;\n        this._weights = weights;\n        this._count = weights.length / times.length;\n\n        this._lastTimeIndex = 0;\n    }\n\n    Object.defineProperties(WeightSpline.prototype, {\n        /**\n         * An array of times for the control weights.\n         *\n         * @memberof WeightSpline.prototype\n         *\n         * @type {Number[]}\n         * @readonly\n         */\n        times : {\n            get : function() {\n                return this._times;\n            }\n        },\n\n        /**\n         * An array of floating-point array control weights.\n         *\n         * @memberof WeightSpline.prototype\n         *\n         * @type {Number[]}\n         * @readonly\n         */\n        weights : {\n            get : function() {\n                return this._weights;\n            }\n        }\n    });\n\n    /**\n     * Finds an index <code>i</code> in <code>times</code> such that the parameter\n     * <code>time</code> is in the interval <code>[times[i], times[i + 1]]</code>.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @returns {Number} The index for the element at the start of the interval.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    WeightSpline.prototype.findTimeInterval = Spline.prototype.findTimeInterval;\n\n    /**\n     * Wraps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, wrapped around to the updated animation.\n     */\n    WeightSpline.prototype.wrapTime = Spline.prototype.wrapTime;\n\n    /**\n     * Clamps the given time to the period covered by the spline.\n     * @function\n     *\n     * @param {Number} time The time.\n     * @return {Number} The time, clamped to the animation period.\n     */\n    WeightSpline.prototype.clampTime = Spline.prototype.clampTime;\n\n    /**\n     * Evaluates the curve at a given time.\n     *\n     * @param {Number} time The time at which to evaluate the curve.\n     * @param {Number[]} [result] The object onto which to store the result.\n     * @returns {Number[]} The modified result parameter or a new instance of the point on the curve at the given time.\n     *\n     * @exception {DeveloperError} time must be in the range <code>[t<sub>0</sub>, t<sub>n</sub>]</code>, where <code>t<sub>0</sub></code>\n     *                             is the first element in the array <code>times</code> and <code>t<sub>n</sub></code> is the last element\n     *                             in the array <code>times</code>.\n     */\n    WeightSpline.prototype.evaluate = function(time, result) {\n        var weights = this.weights;\n        var times = this.times;\n\n        var i = this._lastTimeIndex = this.findTimeInterval(time, this._lastTimeIndex);\n        var u = (time - times[i]) / (times[i + 1] - times[i]);\n\n        if (!defined(result)) {\n            result = new Array(this._count);\n        }\n\n        for (var j = 0; j < this._count; j++) {\n            var index = (i * this._count) + j;\n            result[j] = weights[index] * (1.0 - u) + weights[index + this._count] * u;\n        }\n\n        return result;\n    };\nexport default WeightSpline;\n","\n    /**\n     * An enum describing the attribute type for glTF and 3D Tiles.\n     *\n     * @exports AttributeType\n     *\n     * @private\n     */\n    var AttributeType = {\n        /**\n         * The attribute is a single component.\n         *\n         * @type {String}\n         * @constant\n         */\n        SCALAR : 'SCALAR',\n\n        /**\n         * The attribute is a two-component vector.\n         *\n         * @type {String}\n         * @constant\n         */\n        VEC2 : 'VEC2',\n\n        /**\n         * The attribute is a three-component vector.\n         *\n         * @type {String}\n         * @constant\n         */\n        VEC3 : 'VEC3',\n\n        /**\n         * The attribute is a four-component vector.\n         *\n         * @type {String}\n         * @constant\n         */\n        VEC4 : 'VEC4',\n\n        /**\n         * The attribute is a 2x2 matrix.\n         *\n         * @type {String}\n         * @constant\n         */\n        MAT2 : 'MAT2',\n\n        /**\n         * The attribute is a 3x3 matrix.\n         *\n         * @type {String}\n         * @constant\n         */\n        MAT3 : 'MAT3',\n\n        /**\n         * The attribute is a 4x4 matrix.\n         *\n         * @type {String}\n         * @constant\n         */\n        MAT4 : 'MAT4'\n    };\nexport default Object.freeze(AttributeType);\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport LinearSpline from '../Core/LinearSpline.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Quaternion from '../Core/Quaternion.js';\nimport QuaternionSpline from '../Core/QuaternionSpline.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport WeightSpline from '../Core/WeightSpline.js';\nimport getAccessorByteStride from '../ThirdParty/GltfPipeline/getAccessorByteStride.js';\nimport numberOfComponentsForType from '../ThirdParty/GltfPipeline/numberOfComponentsForType.js';\nimport AttributeType from './AttributeType.js';\n\n    /**\n     * @private\n     */\n    function ModelAnimationCache() {\n    }\n\n    var dataUriRegex = /^data\\:/i;\n\n    function getAccessorKey(model, accessor) {\n        var gltf = model.gltf;\n        var buffers = gltf.buffers;\n        var bufferViews = gltf.bufferViews;\n\n        var bufferView = bufferViews[accessor.bufferView];\n        var buffer = buffers[bufferView.buffer];\n\n        var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n        var byteLength = accessor.count * numberOfComponentsForType(accessor.type);\n\n        var uriKey = dataUriRegex.test(buffer.uri) ? '' : buffer.uri;\n        return model.cacheKey + '//' + uriKey + '/' + byteOffset + '/' + byteLength;\n    }\n\n    var cachedAnimationParameters = {\n    };\n\n    ModelAnimationCache.getAnimationParameterValues = function(model, accessor) {\n        var key = getAccessorKey(model, accessor);\n        var values = cachedAnimationParameters[key];\n\n        if (!defined(values)) {\n            // Cache miss\n            var gltf = model.gltf;\n\n            var buffers = gltf.buffers;\n            var bufferViews = gltf.bufferViews;\n\n            var bufferView = bufferViews[accessor.bufferView];\n            var bufferId = bufferView.buffer;\n            var buffer = buffers[bufferId];\n            var source = buffer.extras._pipeline.source;\n\n            var componentType = accessor.componentType;\n            var type = accessor.type;\n            var numberOfComponents = numberOfComponentsForType(type);\n            var count = accessor.count;\n            var byteStride = getAccessorByteStride(gltf, accessor);\n\n            values = new Array(count);\n            var accessorByteOffset = defaultValue(accessor.byteOffset, 0);\n            var byteOffset = bufferView.byteOffset + accessorByteOffset;\n            for (var i = 0; i < count; i++) {\n                var typedArrayView = ComponentDatatype.createArrayBufferView(componentType, source.buffer, source.byteOffset + byteOffset, numberOfComponents);\n                if (type === 'SCALAR') {\n                    values[i] = typedArrayView[0];\n                } else if (type === 'VEC3') {\n                    values[i] = Cartesian3.fromArray(typedArrayView);\n                } else if (type === 'VEC4') {\n                    values[i] = Quaternion.unpack(typedArrayView);\n                }\n                byteOffset += byteStride;\n            }\n            // GLTF_SPEC: Support more parameter types when glTF supports targeting materials. https://github.com/KhronosGroup/glTF/issues/142\n\n            if (defined(model.cacheKey)) {\n                // Only cache when we can create a unique id\n                cachedAnimationParameters[key] = values;\n            }\n        }\n\n        return values;\n    };\n\n    var cachedAnimationSplines = {\n    };\n\n    function getAnimationSplineKey(model, animationName, samplerName) {\n        return model.cacheKey + '//' + animationName + '/' + samplerName;\n    }\n\n    function ConstantSpline(value) {\n        this._value = value;\n    }\n    ConstantSpline.prototype.evaluate = function(time, result) {\n        return this._value;\n    };\n    ConstantSpline.prototype.wrapTime = function(time) {\n        return 0.0;\n    };\n    ConstantSpline.prototype.clampTime = function(time) {\n        return 0.0;\n    };\n\n    ModelAnimationCache.getAnimationSpline = function(model, animationName, animation, samplerName, sampler, input, path, output) {\n        var key = getAnimationSplineKey(model, animationName, samplerName);\n        var spline = cachedAnimationSplines[key];\n\n        if (!defined(spline)) {\n            var times = input;\n            var controlPoints = output;\n\n            if ((times.length === 1) && (controlPoints.length === 1)) {\n                spline = new ConstantSpline(controlPoints[0]);\n            } else if (sampler.interpolation === 'LINEAR') {\n                if (path === 'translation' || path === 'scale') {\n                    spline = new LinearSpline({\n                        times : times,\n                        points : controlPoints\n                    });\n                } else if (path === 'rotation') {\n                    spline = new QuaternionSpline({\n                        times : times,\n                        points : controlPoints\n                    });\n                } else if (path === 'weights') {\n                    spline = new WeightSpline({\n                        times : times,\n                        weights : controlPoints\n                    });\n                }\n                // GLTF_SPEC: Support more parameter types when glTF supports targeting materials. https://github.com/KhronosGroup/glTF/issues/142\n            }\n\n            if (defined(model.cacheKey)) {\n                // Only cache when we can create a unique id\n                cachedAnimationSplines[key] = spline;\n            }\n        }\n\n        return spline;\n    };\n\n    var cachedSkinInverseBindMatrices = {\n    };\n\n    ModelAnimationCache.getSkinInverseBindMatrices = function(model, accessor) {\n        var key = getAccessorKey(model, accessor);\n        var matrices = cachedSkinInverseBindMatrices[key];\n\n        if (!defined(matrices)) {\n            // Cache miss\n            var gltf = model.gltf;\n            var buffers = gltf.buffers;\n            var bufferViews = gltf.bufferViews;\n\n            var bufferViewId = accessor.bufferView;\n            var bufferView = bufferViews[bufferViewId];\n            var bufferId = bufferView.buffer;\n            var buffer = buffers[bufferId];\n            var source = buffer.extras._pipeline.source;\n\n            var componentType = accessor.componentType;\n            var type = accessor.type;\n            var count = accessor.count;\n            var byteStride = getAccessorByteStride(gltf, accessor);\n            var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n            var numberOfComponents = numberOfComponentsForType(type);\n\n            matrices = new Array(count);\n\n            if ((componentType === WebGLConstants.FLOAT) && (type === AttributeType.MAT4)) {\n                for (var i = 0; i < count; ++i) {\n                    var typedArrayView = ComponentDatatype.createArrayBufferView(componentType, source.buffer, source.byteOffset + byteOffset, numberOfComponents);\n                    matrices[i] = Matrix4.fromArray(typedArrayView);\n                    byteOffset += byteStride;\n                }\n            }\n\n            cachedSkinInverseBindMatrices[key] = matrices;\n        }\n\n        return matrices;\n    };\nexport default ModelAnimationCache;\n","\n    /**\n     * Determines if and how a glTF animation is looped.\n     *\n     * @exports ModelAnimationLoop\n     *\n     * @see ModelAnimationCollection#add\n     */\n    var ModelAnimationLoop = {\n        /**\n         * Play the animation once; do not loop it.\n         *\n         * @type {Number}\n         * @constant\n         */\n        NONE : 0,\n\n        /**\n         * Loop the animation playing it from the start immediately after it stops.\n         *\n         * @type {Number}\n         * @constant\n         */\n        REPEAT : 1,\n\n        /**\n         * Loop the animation.  First, playing it forward, then in reverse, then forward, and so on.\n         *\n         * @type {Number}\n         * @constant\n         */\n        MIRRORED_REPEAT : 2\n    };\nexport default Object.freeze(ModelAnimationLoop);\n","\n    /**\n     * @private\n     */\nexport default Object.freeze({\n        STOPPED : 0,\n        ANIMATING : 1\n    });\n","import defaultValue from '../Core/defaultValue.js';\nimport Event from '../Core/Event.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport ModelAnimationLoop from './ModelAnimationLoop.js';\nimport ModelAnimationState from './ModelAnimationState.js';\n\n    /**\n     * An active glTF animation.  A glTF asset can contain animations.  An active animation\n     * is an animation that is currently playing or scheduled to be played because it was\n     * added to a model's {@link ModelAnimationCollection}.  An active animation is an\n     * instance of an animation; for example, there can be multiple active animations\n     * for the same glTF animation, each with a different start time.\n     * <p>\n     * Create this by calling {@link ModelAnimationCollection#add}.\n     * </p>\n     *\n     * @alias ModelAnimation\n     * @internalConstructor\n     * @class\n     *\n     * @see ModelAnimationCollection#add\n     */\n    function ModelAnimation(options, model, runtimeAnimation) {\n        this._name = runtimeAnimation.name;\n        this._startTime = JulianDate.clone(options.startTime);\n        this._delay = defaultValue(options.delay, 0.0); // in seconds\n        this._stopTime = options.stopTime;\n\n        /**\n         * When <code>true</code>, the animation is removed after it stops playing.\n         * This is slightly more efficient that not removing it, but if, for example,\n         * time is reversed, the animation is not played again.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.removeOnStop = defaultValue(options.removeOnStop, false);\n        this._multiplier = defaultValue(options.multiplier, 1.0);\n        this._reverse = defaultValue(options.reverse, false);\n        this._loop = defaultValue(options.loop, ModelAnimationLoop.NONE);\n\n        /**\n         * The event fired when this animation is started.  This can be used, for\n         * example, to play a sound or start a particle system, when the animation starts.\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * animation.start.addEventListener(function(model, animation) {\n         *   console.log('Animation started: ' + animation.name);\n         * });\n         */\n        this.start = new Event();\n\n        /**\n         * The event fired when on each frame when this animation is updated.  The\n         * current time of the animation, relative to the glTF animation time span, is\n         * passed to the event, which allows, for example, starting new animations at a\n         * specific time relative to a playing animation.\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * animation.update.addEventListener(function(model, animation, time) {\n         *   console.log('Animation updated: ' + animation.name + '. glTF animation time: ' + time);\n         * });\n         */\n        this.update = new Event();\n\n        /**\n         * The event fired when this animation is stopped.  This can be used, for\n         * example, to play a sound or start a particle system, when the animation stops.\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * animation.stop.addEventListener(function(model, animation) {\n         *   console.log('Animation stopped: ' + animation.name);\n         * });\n         */\n        this.stop = new Event();\n\n        this._state = ModelAnimationState.STOPPED;\n        this._runtimeAnimation = runtimeAnimation;\n\n        // Set during animation update\n        this._computedStartTime = undefined;\n        this._duration = undefined;\n\n        // To avoid allocations in ModelAnimationCollection.update\n        var that = this;\n        this._raiseStartEvent = function() {\n            that.start.raiseEvent(model, that);\n        };\n        this._updateEventTime = 0.0;\n        this._raiseUpdateEvent = function() {\n            that.update.raiseEvent(model, that, that._updateEventTime);\n        };\n        this._raiseStopEvent = function() {\n            that.stop.raiseEvent(model, that);\n        };\n    }\n\n    Object.defineProperties(ModelAnimation.prototype, {\n        /**\n         * The glTF animation name that identifies this animation.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n\n        /**\n         * The scene time to start playing this animation.  When this is <code>undefined</code>,\n         * the animation starts at the next frame.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {JulianDate}\n         * @readonly\n         *\n         * @default undefined\n         */\n        startTime : {\n            get : function() {\n                return this._startTime;\n            }\n        },\n\n        /**\n         * The delay, in seconds, from {@link ModelAnimation#startTime} to start playing.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @default undefined\n         */\n        delay : {\n            get : function() {\n                return this._delay;\n            }\n        },\n\n        /**\n         * The scene time to stop playing this animation.  When this is <code>undefined</code>,\n         * the animation is played for its full duration and perhaps repeated depending on\n         * {@link ModelAnimation#loop}.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {JulianDate}\n         * @readonly\n         *\n         * @default undefined\n         */\n        stopTime : {\n            get : function() {\n                return this._stopTime;\n            }\n        },\n        /**\n         * Values greater than <code>1.0</code> increase the speed that the animation is played relative\n         * to the scene clock speed; values less than <code>1.0</code> decrease the speed.  A value of\n         * <code>1.0</code> plays the animation at the speed in the glTF animation mapped to the scene\n         * clock speed.  For example, if the scene is played at 2x real-time, a two-second glTF animation\n         * will play in one second even if <code>multiplier</code> is <code>1.0</code>.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @default 1.0\n         */\n        multiplier : {\n            get : function() {\n                return this._multiplier;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the animation is played in reverse.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        reverse : {\n            get : function() {\n                return this._reverse;\n            }\n        },\n\n        /**\n         * Determines if and how the animation is looped.\n         *\n         * @memberof ModelAnimation.prototype\n         *\n         * @type {ModelAnimationLoop}\n         * @readonly\n         *\n         * @default {@link ModelAnimationLoop.NONE}\n         */\n        loop : {\n            get : function() {\n                return this._loop;\n            }\n        }\n    });\nexport default ModelAnimation;\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Event from '../Core/Event.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport CesiumMath from '../Core/Math.js';\nimport ModelAnimation from './ModelAnimation.js';\nimport ModelAnimationLoop from './ModelAnimationLoop.js';\nimport ModelAnimationState from './ModelAnimationState.js';\n\n    /**\n     * A collection of active model animations.  Access this using {@link Model#activeAnimations}.\n     *\n     * @alias ModelAnimationCollection\n     * @internalConstructor\n     * @class\n     *\n     * @see Model#activeAnimations\n     */\n    function ModelAnimationCollection(model) {\n        /**\n         * The event fired when an animation is added to the collection.  This can be used, for\n         * example, to keep a UI in sync.\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * model.activeAnimations.animationAdded.addEventListener(function(model, animation) {\n         *   console.log('Animation added: ' + animation.name);\n         * });\n         */\n        this.animationAdded = new Event();\n\n        /**\n         * The event fired when an animation is removed from the collection.  This can be used, for\n         * example, to keep a UI in sync.\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * model.activeAnimations.animationRemoved.addEventListener(function(model, animation) {\n         *   console.log('Animation removed: ' + animation.name);\n         * });\n         */\n        this.animationRemoved = new Event();\n\n        this._model = model;\n        this._scheduledAnimations = [];\n        this._previousTime = undefined;\n    }\n\n    Object.defineProperties(ModelAnimationCollection.prototype, {\n        /**\n         * The number of animations in the collection.\n         *\n         * @memberof ModelAnimationCollection.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._scheduledAnimations.length;\n            }\n        }\n    });\n\n    function add(collection, index, options) {\n        var model = collection._model;\n        var animations = model._runtime.animations;\n        var animation = animations[index];\n        var scheduledAnimation = new ModelAnimation(options, model, animation);\n        collection._scheduledAnimations.push(scheduledAnimation);\n        collection.animationAdded.raiseEvent(model, scheduledAnimation);\n        return scheduledAnimation;\n    }\n\n    /**\n     * Creates and adds an animation with the specified initial properties to the collection.\n     * <p>\n     * This raises the {@link ModelAnimationCollection#animationAdded} event so, for example, a UI can stay in sync.\n     * </p>\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {String} [options.name] The glTF animation name that identifies the animation. Must be defined if <code>options.index</code> is <code>undefined</code>.\n     * @param {Number} [options.index] The glTF animation index that identifies the animation. Must be defined if <code>options.name</code> is <code>undefined</code>.\n     * @param {JulianDate} [options.startTime] The scene time to start playing the animation.  When this is <code>undefined</code>, the animation starts at the next frame.\n     * @param {Number} [options.delay=0.0] The delay, in seconds, from <code>startTime</code> to start playing.\n     * @param {JulianDate} [options.stopTime] The scene time to stop playing the animation.  When this is <code>undefined</code>, the animation is played for its full duration.\n     * @param {Boolean} [options.removeOnStop=false] When <code>true</code>, the animation is removed after it stops playing.\n     * @param {Number} [options.multiplier=1.0] Values greater than <code>1.0</code> increase the speed that the animation is played relative to the scene clock speed; values less than <code>1.0</code> decrease the speed.\n     * @param {Boolean} [options.reverse=false] When <code>true</code>, the animation is played in reverse.\n     * @param {ModelAnimationLoop} [options.loop=ModelAnimationLoop.NONE] Determines if and how the animation is looped.\n     * @returns {ModelAnimation} The animation that was added to the collection.\n     *\n     * @exception {DeveloperError} Animations are not loaded.  Wait for the {@link Model#readyPromise} to resolve.\n     * @exception {DeveloperError} options.name must be a valid animation name.\n     * @exception {DeveloperError} options.index must be a valid animation index.\n     * @exception {DeveloperError} Either options.name or options.index must be defined.\n     * @exception {DeveloperError} options.multiplier must be greater than zero.\n     *\n     * @example\n     * // Example 1. Add an animation by name\n     * model.activeAnimations.add({\n     *   name : 'animation name'\n     * });\n     *\n     * // Example 2. Add an animation by index\n     * model.activeAnimations.add({\n     *   index : 0\n     * });\n     *\n     * @example\n     * // Example 3. Add an animation and provide all properties and events\n     * var startTime = Cesium.JulianDate.now();\n     *\n     * var animation = model.activeAnimations.add({\n     *   name : 'another animation name',\n     *   startTime : startTime,\n     *   delay : 0.0,                          // Play at startTime (default)\n     *   stopTime : Cesium.JulianDate.addSeconds(startTime, 4.0, new Cesium.JulianDate()),\n     *   removeOnStop : false,                 // Do not remove when animation stops (default)\n     *   multiplier : 2.0,                        // Play at double speed\n     *   reverse : true,                       // Play in reverse\n     *   loop : Cesium.ModelAnimationLoop.REPEAT      // Loop the animation\n     * });\n     *\n     * animation.start.addEventListener(function(model, animation) {\n     *   console.log('Animation started: ' + animation.name);\n     * });\n     * animation.update.addEventListener(function(model, animation, time) {\n     *   console.log('Animation updated: ' + animation.name + '. glTF animation time: ' + time);\n     * });\n     * animation.stop.addEventListener(function(model, animation) {\n     *   console.log('Animation stopped: ' + animation.name);\n     * });\n     */\n    ModelAnimationCollection.prototype.add = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var model = this._model;\n        var animations = model._runtime.animations;\n\n        \n\n        if (defined(options.index)) {\n            return add(this, options.index, options);\n        }\n\n        // Find the index of the animation with the given name\n        var index;\n        var length = animations.length;\n        for (var i = 0; i < length; ++i) {\n            if (animations[i].name === options.name) {\n                index = i;\n                break;\n            }\n        }\n\n        \n\n        return add(this, index, options);\n    };\n\n    /**\n     * Creates and adds an animation with the specified initial properties to the collection\n     * for each animation in the model.\n     * <p>\n     * This raises the {@link ModelAnimationCollection#animationAdded} event for each model so, for example, a UI can stay in sync.\n     * </p>\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {JulianDate} [options.startTime] The scene time to start playing the animations.  When this is <code>undefined</code>, the animations starts at the next frame.\n     * @param {Number} [options.delay=0.0] The delay, in seconds, from <code>startTime</code> to start playing.\n     * @param {JulianDate} [options.stopTime] The scene time to stop playing the animations.  When this is <code>undefined</code>, the animations are played for its full duration.\n     * @param {Boolean} [options.removeOnStop=false] When <code>true</code>, the animations are removed after they stop playing.\n     * @param {Number} [options.multiplier=1.0] Values greater than <code>1.0</code> increase the speed that the animations play relative to the scene clock speed; values less than <code>1.0</code> decrease the speed.\n     * @param {Boolean} [options.reverse=false] When <code>true</code>, the animations are played in reverse.\n     * @param {ModelAnimationLoop} [options.loop=ModelAnimationLoop.NONE] Determines if and how the animations are looped.\n     * @returns {ModelAnimation[]} An array of {@link ModelAnimation} objects, one for each animation added to the collection.  If there are no glTF animations, the array is empty.\n     *\n     * @exception {DeveloperError} Animations are not loaded.  Wait for the {@link Model#readyPromise} to resolve.\n     * @exception {DeveloperError} options.multiplier must be greater than zero.\n     *\n     * @example\n     * model.activeAnimations.addAll({\n     *   multiplier : 0.5,                        // Play at half-speed\n     *   loop : Cesium.ModelAnimationLoop.REPEAT      // Loop the animations\n     * });\n     */\n    ModelAnimationCollection.prototype.addAll = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var scheduledAnimations = [];\n        var model = this._model;\n        var animations = model._runtime.animations;\n        var length = animations.length;\n        for (var i = 0; i < length; ++i) {\n            scheduledAnimations.push(add(this, i, options));\n        }\n        return scheduledAnimations;\n    };\n\n    /**\n     * Removes an animation from the collection.\n     * <p>\n     * This raises the {@link ModelAnimationCollection#animationRemoved} event so, for example, a UI can stay in sync.\n     * </p>\n     * <p>\n     * An animation can also be implicitly removed from the collection by setting {@link ModelAnimation#removeOnStop} to\n     * <code>true</code>.  The {@link ModelAnimationCollection#animationRemoved} event is still fired when the animation is removed.\n     * </p>\n     *\n     * @param {ModelAnimation} animation The animation to remove.\n     * @returns {Boolean} <code>true</code> if the animation was removed; <code>false</code> if the animation was not found in the collection.\n     *\n     * @example\n     * var a = model.activeAnimations.add({\n     *   name : 'animation name'\n     * });\n     * model.activeAnimations.remove(a); // Returns true\n     */\n    ModelAnimationCollection.prototype.remove = function(animation) {\n        if (defined(animation)) {\n            var animations = this._scheduledAnimations;\n            var i = animations.indexOf(animation);\n            if (i !== -1) {\n                animations.splice(i, 1);\n                this.animationRemoved.raiseEvent(this._model, animation);\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes all animations from the collection.\n     * <p>\n     * This raises the {@link ModelAnimationCollection#animationRemoved} event for each\n     * animation so, for example, a UI can stay in sync.\n     * </p>\n     */\n    ModelAnimationCollection.prototype.removeAll = function() {\n        var model = this._model;\n        var animations = this._scheduledAnimations;\n        var length = animations.length;\n\n        this._scheduledAnimations = [];\n\n        for (var i = 0; i < length; ++i) {\n            this.animationRemoved.raiseEvent(model, animations[i]);\n        }\n    };\n\n    /**\n     * Determines whether this collection contains a given animation.\n     *\n     * @param {ModelAnimation} animation The animation to check for.\n     * @returns {Boolean} <code>true</code> if this collection contains the animation, <code>false</code> otherwise.\n     */\n    ModelAnimationCollection.prototype.contains = function(animation) {\n        if (defined(animation)) {\n            return (this._scheduledAnimations.indexOf(animation) !== -1);\n        }\n\n        return false;\n    };\n\n    /**\n     * Returns the animation in the collection at the specified index.  Indices are zero-based\n     * and increase as animations are added.  Removing an animation shifts all animations after\n     * it to the left, changing their indices.  This function is commonly used to iterate over\n     * all the animations in the collection.\n     *\n     * @param {Number} index The zero-based index of the animation.\n     * @returns {ModelAnimation} The animation at the specified index.\n     *\n     * @example\n     * // Output the names of all the animations in the collection.\n     * var animations = model.activeAnimations;\n     * var length = animations.length;\n     * for (var i = 0; i < length; ++i) {\n     *   console.log(animations.get(i).name);\n     * }\n     */\n    ModelAnimationCollection.prototype.get = function(index) {\n        \n\n        return this._scheduledAnimations[index];\n    };\n\n    function animateChannels(runtimeAnimation, localAnimationTime) {\n        var channelEvaluators = runtimeAnimation.channelEvaluators;\n        var length = channelEvaluators.length;\n        for (var i = 0; i < length; ++i) {\n            channelEvaluators[i](localAnimationTime);\n        }\n    }\n\n    var animationsToRemove = [];\n\n    function createAnimationRemovedFunction(modelAnimationCollection, model, animation) {\n        return function() {\n            modelAnimationCollection.animationRemoved.raiseEvent(model, animation);\n        };\n    }\n\n    /**\n     * @private\n     */\n    ModelAnimationCollection.prototype.update = function(frameState) {\n        var scheduledAnimations = this._scheduledAnimations;\n        var length = scheduledAnimations.length;\n\n        if (length === 0) {\n            // No animations - quick return for performance\n            this._previousTime = undefined;\n            return false;\n        }\n\n        if (JulianDate.equals(frameState.time, this._previousTime)) {\n            // Animations are currently only time-dependent so do not animate when paused or picking\n            return false;\n        }\n        this._previousTime = JulianDate.clone(frameState.time, this._previousTime);\n\n        var animationOccured = false;\n        var sceneTime = frameState.time;\n        var model = this._model;\n\n        for (var i = 0; i < length; ++i) {\n            var scheduledAnimation = scheduledAnimations[i];\n            var runtimeAnimation = scheduledAnimation._runtimeAnimation;\n\n            if (!defined(scheduledAnimation._computedStartTime)) {\n                scheduledAnimation._computedStartTime = JulianDate.addSeconds(defaultValue(scheduledAnimation.startTime, sceneTime), scheduledAnimation.delay, new JulianDate());\n            }\n\n            if (!defined(scheduledAnimation._duration)) {\n                scheduledAnimation._duration = runtimeAnimation.stopTime * (1.0 / scheduledAnimation.multiplier);\n            }\n\n            var startTime = scheduledAnimation._computedStartTime;\n            var duration = scheduledAnimation._duration;\n            var stopTime = scheduledAnimation.stopTime;\n\n            // [0.0, 1.0] normalized local animation time\n            var delta = (duration !== 0.0) ? (JulianDate.secondsDifference(sceneTime, startTime) / duration) : 0.0;\n            var pastStartTime = (delta >= 0.0);\n\n            // Play animation if\n            // * we are after the start time or the animation is being repeated, and\n            // * before the end of the animation's duration or the animation is being repeated, and\n            // * we did not reach a user-provided stop time.\n\n            var repeat = ((scheduledAnimation.loop === ModelAnimationLoop.REPEAT) ||\n                          (scheduledAnimation.loop === ModelAnimationLoop.MIRRORED_REPEAT));\n\n            var play = (pastStartTime || (repeat && !defined(scheduledAnimation.startTime))) &&\n                       ((delta <= 1.0) || repeat) &&\n                       (!defined(stopTime) || JulianDate.lessThanOrEquals(sceneTime, stopTime));\n\n            if (play) {\n                // STOPPED -> ANIMATING state transition?\n                if (scheduledAnimation._state === ModelAnimationState.STOPPED) {\n                    scheduledAnimation._state = ModelAnimationState.ANIMATING;\n                    if (scheduledAnimation.start.numberOfListeners > 0) {\n                        frameState.afterRender.push(scheduledAnimation._raiseStartEvent);\n                    }\n                }\n\n                // Truncate to [0.0, 1.0] for repeating animations\n                if (scheduledAnimation.loop === ModelAnimationLoop.REPEAT) {\n                    delta = delta - Math.floor(delta);\n                } else if (scheduledAnimation.loop === ModelAnimationLoop.MIRRORED_REPEAT) {\n                    var floor = Math.floor(delta);\n                    var fract = delta - floor;\n                    // When even use (1.0 - fract) to mirror repeat\n                    delta = (floor % 2 === 1.0) ? (1.0 - fract) : fract;\n                }\n\n                if (scheduledAnimation.reverse) {\n                    delta = 1.0 - delta;\n                }\n\n                var localAnimationTime = delta * duration * scheduledAnimation.multiplier;\n                // Clamp in case floating-point roundoff goes outside the animation's first or last keyframe\n                localAnimationTime = CesiumMath.clamp(localAnimationTime, runtimeAnimation.startTime, runtimeAnimation.stopTime);\n\n                animateChannels(runtimeAnimation, localAnimationTime);\n\n                if (scheduledAnimation.update.numberOfListeners > 0) {\n                    scheduledAnimation._updateEventTime = localAnimationTime;\n                    frameState.afterRender.push(scheduledAnimation._raiseUpdateEvent);\n                }\n                animationOccured = true;\n            } else if (pastStartTime && (scheduledAnimation._state === ModelAnimationState.ANIMATING)) {\n                // ANIMATING -> STOPPED state transition?\n                scheduledAnimation._state = ModelAnimationState.STOPPED;\n                if (scheduledAnimation.stop.numberOfListeners > 0) {\n                    frameState.afterRender.push(scheduledAnimation._raiseStopEvent);\n                }\n\n                if (scheduledAnimation.removeOnStop) {\n                    animationsToRemove.push(scheduledAnimation);\n                }\n            }\n        }\n\n        // Remove animations that stopped\n        length = animationsToRemove.length;\n        for (var j = 0; j < length; ++j) {\n            var animationToRemove = animationsToRemove[j];\n            scheduledAnimations.splice(scheduledAnimations.indexOf(animationToRemove), 1);\n            frameState.afterRender.push(createAnimationRemovedFunction(this, model, animationToRemove));\n        }\n        animationsToRemove.length = 0;\n\n        return animationOccured;\n    };\nexport default ModelAnimationCollection;\n","import Queue from '../Core/Queue.js';\n\n    /**\n     * @private\n     */\n    function ModelLoadResources() {\n        this.initialized = false;\n        this.resourcesParsed = false;\n\n        this.vertexBuffersToCreate = new Queue();\n        this.indexBuffersToCreate = new Queue();\n        this.buffers = {};\n        this.pendingBufferLoads = 0;\n\n        this.programsToCreate = new Queue();\n        this.shaders = {};\n        this.pendingShaderLoads = 0;\n\n        this.texturesToCreate = new Queue();\n        this.pendingTextureLoads = 0;\n\n        this.texturesToCreateFromBufferView = new Queue();\n        this.pendingBufferViewToImage = 0;\n\n        this.createSamplers = true;\n        this.createSkins = true;\n        this.createRuntimeAnimations = true;\n        this.createVertexArrays = true;\n        this.createRenderStates = true;\n        this.createUniformMaps = true;\n        this.createRuntimeNodes = true;\n\n        this.createdBufferViews = {};\n        this.primitivesToDecode = new Queue();\n        this.activeDecodingTasks = 0;\n        this.pendingDecodingCache = false;\n\n        this.skinnedNodesIds = [];\n    }\n\n    /**\n     * This function differs from the normal subarray function\n     * because it takes offset and length, rather than begin and end.\n     */\n    function getSubarray(array, offset, length) {\n        return array.subarray(offset, offset + length);\n    }\n\n    ModelLoadResources.prototype.getBuffer = function(bufferView) {\n        return getSubarray(this.buffers[bufferView.buffer], bufferView.byteOffset, bufferView.byteLength);\n    };\n\n    ModelLoadResources.prototype.finishedPendingBufferLoads = function() {\n        return (this.pendingBufferLoads === 0);\n    };\n\n    ModelLoadResources.prototype.finishedBuffersCreation = function() {\n        return ((this.pendingBufferLoads === 0) &&\n                (this.vertexBuffersToCreate.length === 0) &&\n                (this.indexBuffersToCreate.length === 0));\n    };\n\n    ModelLoadResources.prototype.finishedProgramCreation = function() {\n        return ((this.pendingShaderLoads === 0) && (this.programsToCreate.length === 0));\n    };\n\n    ModelLoadResources.prototype.finishedTextureCreation = function() {\n        var finishedPendingLoads = (this.pendingTextureLoads === 0);\n        var finishedResourceCreation =\n            (this.texturesToCreate.length === 0) &&\n            (this.texturesToCreateFromBufferView.length === 0);\n\n        return finishedPendingLoads && finishedResourceCreation;\n    };\n\n    ModelLoadResources.prototype.finishedEverythingButTextureCreation = function() {\n        var finishedPendingLoads =\n            (this.pendingBufferLoads === 0) &&\n            (this.pendingShaderLoads === 0);\n        var finishedResourceCreation =\n            (this.vertexBuffersToCreate.length === 0) &&\n            (this.indexBuffersToCreate.length === 0) &&\n            (this.programsToCreate.length === 0) &&\n            (this.pendingBufferViewToImage === 0);\n\n        return this.finishedDecoding() && finishedPendingLoads && finishedResourceCreation;\n    };\n\n    ModelLoadResources.prototype.finishedDecoding = function() {\n        return this.primitivesToDecode.length === 0 && this.activeDecodingTasks === 0 && !this.pendingDecodingCache;\n    };\n\n    ModelLoadResources.prototype.finished = function() {\n        return this.finishedDecoding() && this.finishedTextureCreation() && this.finishedEverythingButTextureCreation();\n    };\nexport default ModelLoadResources;\n","import defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\n\n    /**\n     * A model's material with modifiable parameters.  A glTF material\n     * contains parameters defined by the material's technique with values\n     * defined by the technique and potentially overridden by the material.\n     * This class allows changing these values at runtime.\n     * <p>\n     * Use {@link Model#getMaterial} to create an instance.\n     * </p>\n     *\n     * @alias ModelMaterial\n     * @internalConstructor\n     * @class\n     *\n     * @see Model#getMaterial\n     */\n    function ModelMaterial(model, material, id) {\n        this._name = material.name;\n        this._id = id;\n        this._uniformMap = model._uniformMaps[id];\n\n        this._technique = undefined;\n        this._program = undefined;\n        this._values = undefined;\n    }\n\n    Object.defineProperties(ModelMaterial.prototype, {\n        /**\n         * The value of the <code>name</code> property of this material.\n         *\n         * @memberof ModelMaterial.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n\n        /**\n         * The index of the material.\n         *\n         * @memberof ModelMaterial.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        }\n    });\n\n    /**\n     * Assigns a value to a material parameter.  The type for <code>value</code>\n     * depends on the glTF type of the parameter.  It will be a floating-point\n     * number, Cartesian, or matrix.\n     *\n     * @param {String} name The name of the parameter.\n     * @param {*} [value] The value to assign to the parameter.\n     *\n     * @exception {DeveloperError} name must match a parameter name in the material's technique that is targetable and not optimized out.\n     *\n     * @example\n     * material.setValue('diffuse', new Cesium.Cartesian4(1.0, 0.0, 0.0, 1.0));  // vec4\n     * material.setValue('shininess', 256.0); // scalar\n     */\n    ModelMaterial.prototype.setValue = function(name, value) {\n        \n\n        var uniformName = 'u_' + name;\n        var v = this._uniformMap.values[uniformName];\n\n        \n\n        v.value = v.clone(value, v.value);\n    };\n\n    /**\n     * Returns the value of the parameter with the given <code>name</code>.  The type of the\n     * returned object depends on the glTF type of the parameter.  It will be a floating-point\n     * number, Cartesian, or matrix.\n     *\n     * @param {String} name The name of the parameter.\n     * @returns {*} The value of the parameter or <code>undefined</code> if the parameter does not exist.\n     */\n    ModelMaterial.prototype.getValue = function(name) {\n        \n\n        var uniformName = 'u_' + name;\n        var v = this._uniformMap.values[uniformName];\n\n        if (!defined(v)) {\n            return undefined;\n        }\n\n        return v.value;\n    };\nexport default ModelMaterial;\n","\n    /**\n     * A model's mesh and its materials.\n     * <p>\n     * Use {@link Model#getMesh} to create an instance.\n     * </p>\n     *\n     * @alias ModelMesh\n     * @internalConstructor\n     * @class\n     *\n     * @see Model#getMesh\n     */\n    function ModelMesh(mesh, runtimeMaterialsById, id) {\n        var materials = [];\n        var primitives = mesh.primitives;\n        var length = primitives.length;\n        for (var i = 0; i < length; ++i) {\n            var p = primitives[i];\n            materials[i] = runtimeMaterialsById[p.material];\n        }\n\n        this._name = mesh.name;\n        this._materials = materials;\n        this._id = id;\n    }\n\n    Object.defineProperties(ModelMesh.prototype, {\n        /**\n         * The value of the <code>name</code> property of this mesh.\n         *\n         * @memberof ModelMesh.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n\n        /**\n         * The index of the mesh.\n         *\n         * @memberof ModelMesh.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n\n        /**\n         * An array of {@link ModelMaterial} instances indexed by the mesh's\n         * primitive indices.\n         *\n         * @memberof ModelMesh.prototype\n         *\n         * @type {ModelMaterial[]}\n         * @readonly\n         */\n        materials : {\n            get : function() {\n                return this._materials;\n            }\n        }\n    });\nexport default ModelMesh;\n","import Matrix4 from '../Core/Matrix4.js';\n\n    /**\n     * A model node with a transform for user-defined animations.  A glTF asset can\n     * contain animations that target a node's transform.  This class allows\n     * changing a node's transform externally so animation can be driven by another\n     * source, not just an animation in the glTF asset.\n     * <p>\n     * Use {@link Model#getNode} to create an instance.\n     * </p>\n     *\n     * @alias ModelNode\n     * @internalConstructor\n     * @class\n     *\n     * @example\n     * var node = model.getNode('LOD3sp');\n     * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n     *\n     * @see Model#getNode\n     */\n    function ModelNode(model, node, runtimeNode, id, matrix) {\n        this._model = model;\n        this._runtimeNode = runtimeNode;\n        this._name = node.name;\n        this._id = id;\n\n        /**\n         * @private\n         */\n        this.useMatrix = false;\n\n        this._show = true;\n        this._matrix = Matrix4.clone(matrix);\n        this._originalMatrix = Matrix4.clone(matrix);\n    }\n\n    Object.defineProperties(ModelNode.prototype, {\n        /**\n         * The value of the <code>name</code> property of this node.\n         *\n         * @memberof ModelNode.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n\n        /**\n         * The index of the node.\n         *\n         * @memberof ModelNode.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n\n        /**\n         * Determines if this node and its children will be shown.\n         *\n         * @memberof ModelNode.prototype\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        show : {\n            get : function() {\n                return this._show;\n            },\n            set : function(value) {\n                if (this._show !== value) {\n                    this._show = value;\n                    this._model._perNodeShowDirty = true;\n                }\n            }\n        },\n\n        /**\n         * The node's 4x4 matrix transform from its local coordinates to\n         * its parent's.\n         * <p>\n         * For changes to take effect, this property must be assigned to;\n         * setting individual elements of the matrix will not work.\n         * </p>\n         *\n         * @memberof ModelNode.prototype\n         * @type {Matrix4}\n         */\n        matrix : {\n            get : function() {\n                return this._matrix;\n            },\n            set : function(value) {\n                this._matrix = Matrix4.clone(value, this._matrix);\n                this.useMatrix = true;\n\n                var model = this._model;\n                model._cesiumAnimationsDirty = true;\n                this._runtimeNode.dirtyNumber = model._maxDirtyNumber;\n            }\n        },\n\n        /**\n         * Gets the node's original 4x4 matrix transform from its local coordinates to\n         * its parent's, without any node transformations or articulations applied.\n         *\n         * @memberof ModelNode.prototype\n         * @type {Matrix4}\n         */\n        originalMatrix : {\n            get : function() {\n                return this._originalMatrix;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    ModelNode.prototype.setMatrix = function(matrix) {\n        // Update matrix but do not set the dirty flag since this is used internally\n        // to keep the matrix in-sync during a glTF animation.\n        Matrix4.clone(matrix, this._matrix);\n    };\nexport default ModelNode;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport clone from '../Core/clone.js';\nimport defined from '../Core/defined.js';\nimport Matrix2 from '../Core/Matrix2.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Quaternion from '../Core/Quaternion.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport addToArray from '../ThirdParty/GltfPipeline/addToArray.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport hasExtension from '../ThirdParty/GltfPipeline/hasExtension.js';\nimport AttributeType from './AttributeType.js';\nimport Axis from './Axis.js';\n\n    /**\n     * @private\n     */\n    var ModelUtility = {};\n\n    /**\n     * Updates the model's forward axis if the model is not a 2.0 model.\n     *\n     * @param {Object} model The model to update.\n     */\n    ModelUtility.updateForwardAxis = function(model) {\n        var cachedSourceVersion = model.gltf.extras.sourceVersion;\n\n        if ((defined(cachedSourceVersion) && cachedSourceVersion !== '2.0')\n                || ModelUtility.getAssetVersion(model.gltf) !== '2.0') {\n            model._gltfForwardAxis = Axis.X;\n        }\n    };\n\n    /**\n     *  Gets the string representing the glTF asset version.\n     *\n     *  @param {Object} gltf A javascript object containing a glTF asset.\n     *  @returns {String} The glTF asset version string.\n     */\n    ModelUtility.getAssetVersion = function(gltf) {\n        // In glTF 1.0 it was valid to omit the version number.\n        if (!defined(gltf.asset) || !defined(gltf.asset.version)) {\n            return '1.0';\n        }\n\n        return gltf.asset.version;\n    };\n\n    /**\n     * Splits primitive materials with values incompatible for generating techniques.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The glTF asset with modified materials.\n     */\n    ModelUtility.splitIncompatibleMaterials = function(gltf) {\n        var accessors = gltf.accessors;\n        var materials = gltf.materials;\n        var primitiveInfoByMaterial = {};\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                var materialIndex = primitive.material;\n                var material = materials[materialIndex];\n\n                var jointAccessorId = primitive.attributes.JOINTS_0;\n                var componentType;\n                var type;\n                if (defined(jointAccessorId)) {\n                    var jointAccessor = accessors[jointAccessorId];\n                    componentType = jointAccessor.componentType;\n                    type = jointAccessor.type;\n                }\n                var isSkinned = defined(jointAccessorId);\n                var hasVertexColors = defined(primitive.attributes.COLOR_0);\n                var hasMorphTargets = defined(primitive.targets);\n                var hasNormals = defined(primitive.attributes.NORMAL);\n                var hasTangents = defined(primitive.attributes.TANGENT);\n                var hasTexCoords = defined(primitive.attributes.TEXCOORD_0);\n\n                var primitiveInfo = primitiveInfoByMaterial[materialIndex];\n                if (!defined(primitiveInfo)) {\n                    primitiveInfoByMaterial[materialIndex] = {\n                        skinning: {\n                            skinned: isSkinned,\n                            componentType: componentType,\n                            type: type\n                        },\n                        hasVertexColors: hasVertexColors,\n                        hasMorphTargets: hasMorphTargets,\n                        hasNormals: hasNormals,\n                        hasTangents: hasTangents,\n                        hasTexCoords: hasTexCoords\n                    };\n                } else if ((primitiveInfo.skinning.skinned !== isSkinned) ||\n                    (primitiveInfo.skinning.type !== type) ||\n                    (primitiveInfo.hasVertexColors !== hasVertexColors) ||\n                    (primitiveInfo.hasMorphTargets !== hasMorphTargets) ||\n                    (primitiveInfo.hasNormals !== hasNormals) ||\n                    (primitiveInfo.hasTangents !== hasTangents) ||\n                    (primitiveInfo.hasTexCoords !== hasTexCoords)) {\n                    // This primitive uses the same material as another one that either:\n                    // * Isn't skinned\n                    // * Uses a different type to store joints and weights\n                    // * Doesn't have vertex colors, morph targets, normals, tangents, or texCoords\n                    var clonedMaterial = clone(material, true);\n                    // Split this off as a separate material\n                    materialIndex = addToArray(materials, clonedMaterial);\n                    primitive.material = materialIndex;\n                    primitiveInfoByMaterial[materialIndex] = {\n                        skinning: {\n                            skinned: isSkinned,\n                            componentType: componentType,\n                            type: type\n                        },\n                        hasVertexColors: hasVertexColors,\n                        hasMorphTargets: hasMorphTargets,\n                        hasNormals: hasNormals,\n                        hasTangents: hasTangents,\n                        hasTexCoords: hasTexCoords\n                    };\n                }\n            });\n        });\n\n        return primitiveInfoByMaterial;\n    };\n\n    ModelUtility.getShaderVariable = function(type) {\n        if (type === 'SCALAR') {\n            return 'float';\n        }\n        return type.toLowerCase();\n    };\n\n    ModelUtility.ModelState = {\n        NEEDS_LOAD: 0,\n        LOADING: 1,\n        LOADED: 2, // Renderable, but textures can still be pending when incrementallyLoadTextures is true.\n        FAILED: 3\n    };\n\n    ModelUtility.getFailedLoadFunction = function(model, type, path) {\n        return function(error) {\n            model._state = ModelUtility.ModelState.FAILED;\n            var message = 'Failed to load ' + type + ': ' + path;\n            if (defined(error)) {\n                message += '\\n' + error.message;\n            }\n            model._readyPromise.reject(new RuntimeError(message));\n        };\n    };\n\n    ModelUtility.parseBuffers = function(model, bufferLoad) {\n        var loadResources = model._loadResources;\n        ForEach.buffer(model.gltf, function(buffer, bufferViewId) {\n            if (defined(buffer.extras._pipeline.source)) {\n                loadResources.buffers[bufferViewId] = buffer.extras._pipeline.source;\n            } else if (defined(bufferLoad)) {\n                var bufferResource = model._resource.getDerivedResource({\n                    url: buffer.uri\n                });\n                ++loadResources.pendingBufferLoads;\n                bufferResource.fetchArrayBuffer()\n                    .then(bufferLoad(model, bufferViewId))\n                    .otherwise(ModelUtility.getFailedLoadFunction(model, 'buffer', bufferResource.url));\n            }\n        });\n    };\n\n    var aMinScratch = new Cartesian3();\n    var aMaxScratch = new Cartesian3();\n\n    ModelUtility.computeBoundingSphere = function(model) {\n        var gltf = model.gltf;\n        var gltfNodes = gltf.nodes;\n        var gltfMeshes = gltf.meshes;\n        var rootNodes = gltf.scenes[gltf.scene].nodes;\n        var rootNodesLength = rootNodes.length;\n\n        var nodeStack = [];\n\n        var min = new Cartesian3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        var max = new Cartesian3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (var i = 0; i < rootNodesLength; ++i) {\n            var n = gltfNodes[rootNodes[i]];\n            n._transformToRoot = ModelUtility.getTransform(n);\n            nodeStack.push(n);\n\n            while (nodeStack.length > 0) {\n                n = nodeStack.pop();\n                var transformToRoot = n._transformToRoot;\n\n                var meshId = n.mesh;\n                if (defined(meshId)) {\n                    var mesh = gltfMeshes[meshId];\n                    var primitives = mesh.primitives;\n                    var primitivesLength = primitives.length;\n                    for (var m = 0; m < primitivesLength; ++m) {\n                        var positionAccessor = primitives[m].attributes.POSITION;\n                        if (defined(positionAccessor)) {\n                            var minMax = ModelUtility.getAccessorMinMax(gltf, positionAccessor);\n                            var aMin = Cartesian3.fromArray(minMax.min, 0, aMinScratch);\n                            var aMax = Cartesian3.fromArray(minMax.max, 0, aMaxScratch);\n                            if (defined(min) && defined(max)) {\n                                Matrix4.multiplyByPoint(transformToRoot, aMin, aMin);\n                                Matrix4.multiplyByPoint(transformToRoot, aMax, aMax);\n                                Cartesian3.minimumByComponent(min, aMin, min);\n                                Cartesian3.maximumByComponent(max, aMax, max);\n                            }\n                        }\n                    }\n                }\n\n                var children = n.children;\n                if (defined(children)) {\n                    var childrenLength = children.length;\n                    for (var k = 0; k < childrenLength; ++k) {\n                        var child = gltfNodes[children[k]];\n                        child._transformToRoot = ModelUtility.getTransform(child);\n                        Matrix4.multiplyTransformation(transformToRoot, child._transformToRoot, child._transformToRoot);\n                        nodeStack.push(child);\n                    }\n                }\n                delete n._transformToRoot;\n            }\n        }\n\n        var boundingSphere = BoundingSphere.fromCornerPoints(min, max);\n        if (model._forwardAxis === Axis.Z) {\n            // glTF 2.0 has a Z-forward convention that must be adapted here to X-forward.\n            BoundingSphere.transformWithoutScale(boundingSphere, Axis.Z_UP_TO_X_UP, boundingSphere);\n        }\n        if (model._upAxis === Axis.Y) {\n            BoundingSphere.transformWithoutScale(boundingSphere, Axis.Y_UP_TO_Z_UP, boundingSphere);\n        } else if (model._upAxis === Axis.X) {\n            BoundingSphere.transformWithoutScale(boundingSphere, Axis.X_UP_TO_Z_UP, boundingSphere);\n        }\n        return boundingSphere;\n    };\n\n    function techniqueAttributeForSemantic(technique, semantic) {\n        return ForEach.techniqueAttribute(technique, function(attribute, attributeName) {\n            if (attribute.semantic === semantic) {\n                return attributeName;\n            }\n        });\n    }\n\n    function ensureSemanticExistenceForPrimitive(gltf, primitive) {\n        var accessors = gltf.accessors;\n        var materials = gltf.materials;\n        var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n\n        var techniques = techniquesWebgl.techniques;\n        var programs = techniquesWebgl.programs;\n        var shaders = techniquesWebgl.shaders;\n        var targets = primitive.targets;\n\n        var attributes = primitive.attributes;\n        for (var target in targets) {\n            if (targets.hasOwnProperty(target)) {\n                var targetAttributes = targets[target];\n                for (var attribute in targetAttributes) {\n                    if (attribute !== 'extras') {\n                        attributes[attribute + '_' + target] = targetAttributes[attribute];\n                    }\n                }\n            }\n        }\n\n        var material = materials[primitive.material];\n        var technique = techniques[material.extensions.KHR_techniques_webgl.technique];\n        var program = programs[technique.program];\n        var vertexShader = shaders[program.vertexShader];\n\n        for (var semantic in attributes) {\n            if (attributes.hasOwnProperty(semantic)) {\n                if (!defined(techniqueAttributeForSemantic(technique, semantic))) {\n                    var accessorId = attributes[semantic];\n                    var accessor = accessors[accessorId];\n                    var lowerCase = semantic.toLowerCase();\n                    if (lowerCase.charAt(0) === '_') {\n                        lowerCase = lowerCase.slice(1);\n                    }\n                    var attributeName = 'a_' + lowerCase;\n                    technique.attributes[attributeName] = {\n                        semantic: semantic,\n                        type: accessor.componentType\n                    };\n                    var pipelineExtras = vertexShader.extras._pipeline;\n                    var shaderText = pipelineExtras.source;\n                    shaderText = 'attribute ' + ModelUtility.getShaderVariable(accessor.type) + ' ' + attributeName + ';\\n' + shaderText;\n                    pipelineExtras.source = shaderText;\n                }\n            }\n        }\n    }\n\n    /**\n     * Ensures all attributes present on the primitive are present in the technique and\n     * vertex shader.\n     *\n     * @param {Object} gltf A javascript object containing a glTF asset.\n     * @returns {Object} The glTF asset, including any additional attributes.\n     */\n    ModelUtility.ensureSemanticExistence = function (gltf) {\n        ForEach.mesh(gltf, function(mesh) {\n            ForEach.meshPrimitive(mesh, function(primitive) {\n                ensureSemanticExistenceForPrimitive(gltf, primitive);\n            });\n        });\n\n        return gltf;\n    };\n\n    /**\n     * Creates attribute location for all attributes required by a technique.\n     *\n     * @param {Object} technique A glTF KHR_techniques_webgl technique object.\n     * @param {Object} precreatedAttributes A dictionary object of pre-created attributes for which to also create locations.\n     * @returns {Object} A dictionary object containing attribute names and their locations.\n     */\n    ModelUtility.createAttributeLocations = function(technique, precreatedAttributes) {\n        var attributeLocations = {};\n        var hasIndex0 = false;\n        var i = 1;\n\n        ForEach.techniqueAttribute(technique, function (attribute, attributeName) {\n            // Set the position attribute to the 0th index. In some WebGL implementations the shader\n            // will not work correctly if the 0th attribute is not active. For example, some glTF models\n            // list the normal attribute first but derived shaders like the cast-shadows shader do not use\n            // the normal attribute.\n            if (/pos/i.test(attributeName) && !hasIndex0) {\n                attributeLocations[attributeName] = 0;\n                hasIndex0 = true;\n            } else {\n                attributeLocations[attributeName] = i++;\n            }\n        });\n\n        if (defined(precreatedAttributes)) {\n            for (var attributeName in precreatedAttributes) {\n                if (precreatedAttributes.hasOwnProperty(attributeName)) {\n                    attributeLocations[attributeName] = i++;\n                }\n            }\n        }\n\n        return attributeLocations;\n    };\n\n    ModelUtility.getAccessorMinMax = function(gltf, accessorId) {\n        var accessor = gltf.accessors[accessorId];\n        var extensions = accessor.extensions;\n        var accessorMin = accessor.min;\n        var accessorMax = accessor.max;\n        // If this accessor is quantized, we should use the decoded min and max\n        if (defined(extensions)) {\n            var quantizedAttributes = extensions.WEB3D_quantized_attributes;\n            if (defined(quantizedAttributes)) {\n                accessorMin = quantizedAttributes.decodedMin;\n                accessorMax = quantizedAttributes.decodedMax;\n            }\n        }\n        return {\n            min : accessorMin,\n            max : accessorMax\n        };\n    };\n\n    function getTechniqueAttributeOrUniformFunction(gltf, technique, semantic, ignoreNodes) {\n        if (hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return function(attributeOrUniform, attributeOrUniformName) {\n                if (attributeOrUniform.semantic === semantic && (!ignoreNodes || !defined(attributeOrUniform.node))) {\n                    return attributeOrUniformName;\n                }\n            };\n        }\n\n        return function(parameterName, attributeOrUniformName) {\n            var attributeOrUniform = technique.parameters[parameterName];\n            if (attributeOrUniform.semantic === semantic && (!ignoreNodes || !defined(attributeOrUniform.node))) {\n                return attributeOrUniformName;\n            }\n        };\n    }\n\n    ModelUtility.getAttributeOrUniformBySemantic = function(gltf, semantic, programId, ignoreNodes) {\n        return ForEach.technique(gltf, function(technique) {\n            if (defined(programId) && (technique.program !== programId)) {\n                return;\n            }\n\n            var value = ForEach.techniqueAttribute(technique, getTechniqueAttributeOrUniformFunction(gltf, technique, semantic, ignoreNodes));\n\n            if (defined(value)) {\n                return value;\n            }\n\n            return ForEach.techniqueUniform(technique, getTechniqueAttributeOrUniformFunction(gltf, technique, semantic, ignoreNodes));\n        });\n    };\n\n    ModelUtility.getDiffuseAttributeOrUniform = function(gltf, programId) {\n        var diffuseUniformName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'COLOR_0', programId);\n        if (!defined(diffuseUniformName)) {\n            diffuseUniformName = ModelUtility.getAttributeOrUniformBySemantic(gltf, '_3DTILESDIFFUSE', programId);\n        }\n        return diffuseUniformName;\n    };\n\n    var nodeTranslationScratch = new Cartesian3();\n    var nodeQuaternionScratch = new Quaternion();\n    var nodeScaleScratch = new Cartesian3();\n\n    ModelUtility.getTransform = function(node, result) {\n        if (defined(node.matrix)) {\n            return Matrix4.fromColumnMajorArray(node.matrix, result);\n        }\n\n        return Matrix4.fromTranslationQuaternionRotationScale(\n            Cartesian3.fromArray(node.translation, 0, nodeTranslationScratch),\n            Quaternion.unpack(node.rotation, 0, nodeQuaternionScratch),\n            Cartesian3.fromArray(node.scale, 0, nodeScaleScratch),\n            result);\n    };\n\n    ModelUtility.getUsedExtensions = function(gltf) {\n        var extensionsUsed = gltf.extensionsUsed;\n        var cachedExtensionsUsed = {};\n\n        if (defined(extensionsUsed)) {\n            var extensionsUsedLength = extensionsUsed.length;\n            for (var i = 0; i < extensionsUsedLength; i++) {\n                var extension = extensionsUsed[i];\n                cachedExtensionsUsed[extension] = true;\n            }\n        }\n        return cachedExtensionsUsed;\n    };\n\n    ModelUtility.getRequiredExtensions = function(gltf) {\n        var extensionsRequired = gltf.extensionsRequired;\n        var cachedExtensionsRequired = {};\n\n        if (defined(extensionsRequired)) {\n            var extensionsRequiredLength = extensionsRequired.length;\n            for (var i = 0; i < extensionsRequiredLength; i++) {\n                var extension = extensionsRequired[i];\n                cachedExtensionsRequired[extension] = true;\n            }\n        }\n\n        return cachedExtensionsRequired;\n    };\n\n    ModelUtility.supportedExtensions = {\n        'AGI_articulations' : true,\n        'CESIUM_RTC' : true,\n        'EXT_texture_webp' : true,\n        'KHR_blend' : true,\n        'KHR_binary_glTF' : true,\n        'KHR_draco_mesh_compression' : true,\n        'KHR_materials_common' : true,\n        'KHR_techniques_webgl' : true,\n        'KHR_materials_unlit' : true,\n        'KHR_materials_pbrSpecularGlossiness' : true,\n        'KHR_texture_transform' : true,\n        'WEB3D_quantized_attributes' : true\n    };\n\n    ModelUtility.checkSupportedExtensions = function(extensionsRequired, browserSupportsWebp) {\n        for (var extension in extensionsRequired) {\n            if (extensionsRequired.hasOwnProperty(extension)) {\n                if (!ModelUtility.supportedExtensions[extension]) {\n                    throw new RuntimeError('Unsupported glTF Extension: ' + extension);\n                }\n\n                if (extension === 'EXT_texture_webp' && browserSupportsWebp === false) {\n                    throw new RuntimeError('Loaded model requires WebP but browser does not support it.');\n                }\n            }\n        }\n    };\n\n    ModelUtility.checkSupportedGlExtensions = function(extensionsUsed, context) {\n        if (defined(extensionsUsed)) {\n            var glExtensionsUsedLength = extensionsUsed.length;\n            for (var i = 0; i < glExtensionsUsedLength; i++) {\n                var extension = extensionsUsed[i];\n                if (extension !== 'OES_element_index_uint') {\n                    throw new RuntimeError('Unsupported WebGL Extension: ' + extension);\n                } else if (!context.elementIndexUint) {\n                    throw new RuntimeError('OES_element_index_uint WebGL extension is not enabled.');\n                }\n            }\n        }\n    };\n\n    function replaceAllButFirstInString(string, find, replace) {\n        // Limit search to strings that are not a subset of other tokens.\n        find += '(?!\\\\w)';\n        find = new RegExp(find, 'g');\n\n        var index = string.search(find);\n        return string.replace(find, function(match, offset) {\n            return index === offset ? match : replace;\n        });\n    }\n\n    function getQuantizedAttributes(gltf, accessorId) {\n        var accessor = gltf.accessors[accessorId];\n        var extensions = accessor.extensions;\n        if (defined(extensions)) {\n            return extensions.WEB3D_quantized_attributes;\n        }\n        return undefined;\n    }\n\n    function getAttributeVariableName(gltf, primitive, attributeSemantic) {\n        var materialId = primitive.material;\n        var material = gltf.materials[materialId];\n\n        if (!hasExtension(gltf, 'KHR_techniques_webgl')\n                || !defined(material.extensions)\n                || !defined(material.extensions.KHR_techniques_webgl)) {\n            return;\n        }\n\n        var techniqueId = material.extensions.KHR_techniques_webgl.technique;\n        var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n        var technique = techniquesWebgl.techniques[techniqueId];\n        return ForEach.techniqueAttribute(technique, function(attribute, attributeName) {\n            var semantic = attribute.semantic;\n            if (semantic === attributeSemantic) {\n                return attributeName;\n            }\n        });\n    }\n\n    ModelUtility.modifyShaderForDracoQuantizedAttributes = function(gltf, primitive, shader, decodedAttributes) {\n        var quantizedUniforms = {};\n        for (var attributeSemantic in decodedAttributes) {\n            if (decodedAttributes.hasOwnProperty(attributeSemantic)) {\n                var attribute = decodedAttributes[attributeSemantic];\n                var quantization = attribute.quantization;\n                if (!defined(quantization)) {\n                    continue;\n                }\n\n                var attributeVarName = getAttributeVariableName(gltf, primitive, attributeSemantic);\n\n                if (attributeSemantic.charAt(0) === '_') {\n                    attributeSemantic = attributeSemantic.substring(1);\n                }\n                var decodeUniformVarName = 'gltf_u_dec_' + attributeSemantic.toLowerCase();\n\n                if (!defined(quantizedUniforms[decodeUniformVarName])) {\n                    var newMain = 'gltf_decoded_' + attributeSemantic;\n                    var decodedAttributeVarName = attributeVarName.replace('a_', 'gltf_a_dec_');\n                    var size = attribute.componentsPerAttribute;\n\n                    // replace usages of the original attribute with the decoded version, but not the declaration\n                    shader = replaceAllButFirstInString(shader, attributeVarName, decodedAttributeVarName);\n\n                    // declare decoded attribute\n                    var variableType;\n                    if (quantization.octEncoded) {\n                        variableType = 'vec3';\n                    } else if (size > 1) {\n                        variableType = 'vec' + size;\n                    } else {\n                        variableType = 'float';\n                    }\n                    shader = variableType + ' ' + decodedAttributeVarName + ';\\n' + shader;\n\n                    // The gltf 2.0 COLOR_0 vertex attribute can be VEC4 or VEC3\n                    var vec3Color = size === 3 && attributeSemantic === 'COLOR_0';\n                    if (vec3Color) {\n                        shader = replaceAllButFirstInString(shader, decodedAttributeVarName, 'vec4(' + decodedAttributeVarName + ', 1.0)');\n                    }\n\n                    // splice decode function into the shader\n                    var decode = '';\n                    if (quantization.octEncoded) {\n                        var decodeUniformVarNameRangeConstant = decodeUniformVarName + '_rangeConstant';\n                        shader = 'uniform float ' + decodeUniformVarNameRangeConstant + ';\\n' + shader;\n                        decode = '\\n' +\n                                'void main() {\\n' +\n                                // Draco oct-encoding decodes to zxy order\n                                '    ' + decodedAttributeVarName + ' = czm_octDecode(' + attributeVarName + '.xy, ' + decodeUniformVarNameRangeConstant + ').zxy;\\n' +\n                                '    ' + newMain + '();\\n' +\n                                '}\\n';\n                    } else {\n                        var decodeUniformVarNameNormConstant = decodeUniformVarName + '_normConstant';\n                        var decodeUniformVarNameMin = decodeUniformVarName + '_min';\n                        shader = 'uniform float ' + decodeUniformVarNameNormConstant + ';\\n' +\n                                'uniform ' + variableType + ' ' + decodeUniformVarNameMin + ';\\n' + shader;\n                        var attributeVarAccess = vec3Color ? '.xyz' : '';\n                        decode = '\\n' +\n                                'void main() {\\n' +\n                                '    ' + decodedAttributeVarName + ' = ' + decodeUniformVarNameMin + ' + ' + attributeVarName + attributeVarAccess + ' * ' + decodeUniformVarNameNormConstant + ';\\n' +\n                                '    ' + newMain + '();\\n' +\n                                '}\\n';\n                    }\n\n                    shader = ShaderSource.replaceMain(shader, newMain);\n                    shader += decode;\n                }\n            }\n        }\n        return {\n            shader : shader\n        };\n    };\n\n    ModelUtility.modifyShaderForQuantizedAttributes = function(gltf, primitive, shader) {\n        var quantizedUniforms = {};\n        var attributes = primitive.attributes;\n        for (var attributeSemantic in attributes) {\n            if (attributes.hasOwnProperty(attributeSemantic)) {\n                var attributeVarName = getAttributeVariableName(gltf, primitive, attributeSemantic);\n                var accessorId = primitive.attributes[attributeSemantic];\n\n                if (attributeSemantic.charAt(0) === '_') {\n                    attributeSemantic = attributeSemantic.substring(1);\n                }\n                var decodeUniformVarName = 'gltf_u_dec_' + attributeSemantic.toLowerCase();\n\n                var decodeUniformVarNameScale = decodeUniformVarName + '_scale';\n                var decodeUniformVarNameTranslate = decodeUniformVarName + '_translate';\n                if (!defined(quantizedUniforms[decodeUniformVarName]) && !defined(quantizedUniforms[decodeUniformVarNameScale])) {\n                    var quantizedAttributes = getQuantizedAttributes(gltf, accessorId);\n                    if (defined(quantizedAttributes)) {\n                        var decodeMatrix = quantizedAttributes.decodeMatrix;\n                        var newMain = 'gltf_decoded_' + attributeSemantic;\n                        var decodedAttributeVarName = attributeVarName.replace('a_', 'gltf_a_dec_');\n                        var size = Math.floor(Math.sqrt(decodeMatrix.length));\n\n                        // replace usages of the original attribute with the decoded version, but not the declaration\n                        shader = replaceAllButFirstInString(shader, attributeVarName, decodedAttributeVarName);\n                        // declare decoded attribute\n                        var variableType;\n                        if (size > 2) {\n                            variableType = 'vec' + (size - 1);\n                        } else {\n                            variableType = 'float';\n                        }\n                        shader = variableType + ' ' + decodedAttributeVarName + ';\\n' + shader;\n                        // splice decode function into the shader - attributes are pre-multiplied with the decode matrix\n                        // uniform in the shader (32-bit floating point)\n                        var decode = '';\n                        if (size === 5) {\n                            // separate scale and translate since glsl doesn't have mat5\n                            shader = 'uniform mat4 ' + decodeUniformVarNameScale + ';\\n' + shader;\n                            shader = 'uniform vec4 ' + decodeUniformVarNameTranslate + ';\\n' + shader;\n                            decode = '\\n' +\n                                     'void main() {\\n' +\n                                     '    ' + decodedAttributeVarName + ' = ' + decodeUniformVarNameScale + ' * ' + attributeVarName + ' + ' + decodeUniformVarNameTranslate + ';\\n' +\n                                     '    ' + newMain + '();\\n' +\n                                     '}\\n';\n\n                            quantizedUniforms[decodeUniformVarNameScale] = {mat : 4};\n                            quantizedUniforms[decodeUniformVarNameTranslate] = {vec : 4};\n                        }\n                        else {\n                            shader = 'uniform mat' + size + ' ' + decodeUniformVarName + ';\\n' + shader;\n                            decode = '\\n' +\n                                     'void main() {\\n' +\n                                     '    ' + decodedAttributeVarName + ' = ' + variableType + '(' + decodeUniformVarName + ' * vec' + size + '(' + attributeVarName + ',1.0));\\n' +\n                                     '    ' + newMain + '();\\n' +\n                                     '}\\n';\n\n                            quantizedUniforms[decodeUniformVarName] = {mat : size};\n                        }\n                        shader = ShaderSource.replaceMain(shader, newMain);\n                        shader += decode;\n                    }\n                }\n            }\n        }\n        return {\n            shader : shader,\n            uniforms : quantizedUniforms\n        };\n    };\n\n    ModelUtility.toClipCoordinatesGLSL = function(gltf, shader) {\n        var positionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'POSITION');\n        var decodedPositionName = positionName.replace('a_', 'gltf_a_dec_');\n        if (shader.indexOf(decodedPositionName) !== -1) {\n            positionName = decodedPositionName;\n        }\n\n        var modelViewProjectionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'MODELVIEWPROJECTION', undefined, true);\n        if (!defined(modelViewProjectionName) || shader.indexOf(modelViewProjectionName) === -1) {\n            var projectionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'PROJECTION', undefined, true);\n            var modelViewName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'MODELVIEW', undefined, true);\n            if (shader.indexOf('czm_instanced_modelView ') !== -1) {\n                modelViewName = 'czm_instanced_modelView';\n            } else if (!defined(modelViewName)) {\n                modelViewName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'CESIUM_RTC_MODELVIEW', undefined, true);\n            }\n            modelViewProjectionName = projectionName + ' * ' + modelViewName;\n        }\n\n        return modelViewProjectionName + ' * vec4(' + positionName + '.xyz, 1.0)';\n    };\n\n    ModelUtility.modifyFragmentShaderForLogDepth = function(shader) {\n        shader = ShaderSource.replaceMain(shader, 'czm_depth_main');\n        shader +=\n            '\\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    czm_depth_main(); \\n' +\n            '    czm_writeLogDepth(); \\n' +\n            '} \\n';\n\n        return shader;\n    };\n\n    ModelUtility.modifyVertexShaderForLogDepth = function(shader, toClipCoordinatesGLSL) {\n        shader = ShaderSource.replaceMain(shader, 'czm_depth_main');\n        shader +=\n            '\\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    czm_depth_main(); \\n' +\n            '    czm_vertexLogDepth(' + toClipCoordinatesGLSL + '); \\n' +\n            '} \\n';\n\n        return shader;\n    };\n\n    function getScalarUniformFunction(value) {\n        var that = {\n            value : value,\n            clone : function(source, result) {\n                return source;\n            },\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getVec2UniformFunction(value) {\n        var that = {\n            value : Cartesian2.fromArray(value),\n            clone : Cartesian2.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getVec3UniformFunction(value) {\n        var that = {\n            value : Cartesian3.fromArray(value),\n            clone : Cartesian3.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getVec4UniformFunction(value) {\n        var that = {\n            value : Cartesian4.fromArray(value),\n            clone : Cartesian4.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getMat2UniformFunction(value) {\n        var that = {\n            value : Matrix2.fromColumnMajorArray(value),\n            clone : Matrix2.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getMat3UniformFunction(value) {\n        var that = {\n            value : Matrix3.fromColumnMajorArray(value),\n            clone : Matrix3.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    function getMat4UniformFunction(value) {\n        var that = {\n            value : Matrix4.fromColumnMajorArray(value),\n            clone : Matrix4.clone,\n            func : function() {\n                return that.value;\n            }\n        };\n        return that;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function DelayLoadedTextureUniform(value, textures, defaultTexture) {\n        this._value = undefined;\n        this._textureId = value.index;\n        this._textures = textures;\n        this._defaultTexture = defaultTexture;\n    }\n\n    Object.defineProperties(DelayLoadedTextureUniform.prototype, {\n        value : {\n            get : function() {\n                // Use the default texture (1x1 white) until the model's texture is loaded\n                if (!defined(this._value)) {\n                    var texture = this._textures[this._textureId];\n                    if (defined(texture)) {\n                        this._value = texture;\n                    } else {\n                        return this._defaultTexture;\n                    }\n                }\n\n                return this._value;\n            },\n            set : function(value) {\n                this._value = value;\n            }\n        }\n    });\n\n    DelayLoadedTextureUniform.prototype.clone = function(source) {\n        return source;\n    };\n\n    DelayLoadedTextureUniform.prototype.func = undefined;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function getTextureUniformFunction(value, textures, defaultTexture) {\n        var uniform = new DelayLoadedTextureUniform(value, textures, defaultTexture);\n        // Define function here to access closure since 'this' can't be\n        // used when the Renderer sets uniforms.\n        uniform.func = function() {\n            return uniform.value;\n        };\n        return uniform;\n    }\n\n    var gltfUniformFunctions = {};\n    gltfUniformFunctions[WebGLConstants.FLOAT] = getScalarUniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_VEC2] = getVec2UniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_VEC3] = getVec3UniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_VEC4] = getVec4UniformFunction;\n    gltfUniformFunctions[WebGLConstants.INT] = getScalarUniformFunction;\n    gltfUniformFunctions[WebGLConstants.INT_VEC2] = getVec2UniformFunction;\n    gltfUniformFunctions[WebGLConstants.INT_VEC3] = getVec3UniformFunction;\n    gltfUniformFunctions[WebGLConstants.INT_VEC4] = getVec4UniformFunction;\n    gltfUniformFunctions[WebGLConstants.BOOL] = getScalarUniformFunction;\n    gltfUniformFunctions[WebGLConstants.BOOL_VEC2] = getVec2UniformFunction;\n    gltfUniformFunctions[WebGLConstants.BOOL_VEC3] = getVec3UniformFunction;\n    gltfUniformFunctions[WebGLConstants.BOOL_VEC4] = getVec4UniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_MAT2] = getMat2UniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_MAT3] = getMat3UniformFunction;\n    gltfUniformFunctions[WebGLConstants.FLOAT_MAT4] = getMat4UniformFunction;\n    gltfUniformFunctions[WebGLConstants.SAMPLER_2D] = getTextureUniformFunction;\n    // GLTF_SPEC: Support SAMPLER_CUBE. https://github.com/KhronosGroup/glTF/issues/40\n\n    ModelUtility.createUniformFunction = function(type, value, textures, defaultTexture) {\n        return gltfUniformFunctions[type](value, textures, defaultTexture);\n    };\n\n    function scaleFromMatrix5Array(matrix) {\n        return [matrix[0], matrix[1], matrix[2], matrix[3],\n                matrix[5], matrix[6], matrix[7], matrix[8],\n                matrix[10], matrix[11], matrix[12], matrix[13],\n                matrix[15], matrix[16], matrix[17], matrix[18]];\n    }\n\n    function translateFromMatrix5Array(matrix) {\n        return [matrix[20], matrix[21], matrix[22], matrix[23]];\n    }\n\n    ModelUtility.createUniformsForDracoQuantizedAttributes = function(decodedAttributes) {\n        var uniformMap = {};\n        for (var attribute in decodedAttributes) {\n            if (decodedAttributes.hasOwnProperty(attribute)) {\n                var decodedData = decodedAttributes[attribute];\n                var quantization = decodedData.quantization;\n\n                if (!defined(quantization)) {\n                    continue;\n                }\n\n                if (attribute.charAt(0) === '_'){\n                    attribute = attribute.substring(1);\n                }\n\n                var uniformVarName = 'gltf_u_dec_' + attribute.toLowerCase();\n\n                if (quantization.octEncoded) {\n                    var uniformVarNameRangeConstant = uniformVarName + '_rangeConstant';\n                    var rangeConstant = (1 << quantization.quantizationBits) - 1.0;\n                    uniformMap[uniformVarNameRangeConstant] = getScalarUniformFunction(rangeConstant).func;\n                    continue;\n                }\n\n                var uniformVarNameNormConstant = uniformVarName + '_normConstant';\n                var normConstant = quantization.range / (1 << quantization.quantizationBits);\n                uniformMap[uniformVarNameNormConstant] = getScalarUniformFunction(normConstant).func;\n\n                var uniformVarNameMin = uniformVarName + '_min';\n                switch (decodedData.componentsPerAttribute) {\n                    case 1:\n                        uniformMap[uniformVarNameMin] = getScalarUniformFunction(quantization.minValues).func;\n                        break;\n                    case 2:\n                        uniformMap[uniformVarNameMin] = getVec2UniformFunction(quantization.minValues).func;\n                        break;\n                    case 3:\n                        uniformMap[uniformVarNameMin] = getVec3UniformFunction(quantization.minValues).func;\n                        break;\n                    case 4:\n                        uniformMap[uniformVarNameMin] = getVec4UniformFunction(quantization.minValues).func;\n                        break;\n                }\n            }\n        }\n\n        return uniformMap;\n    };\n\n    ModelUtility.createUniformsForQuantizedAttributes = function(gltf, primitive, quantizedUniforms) {\n        var accessors = gltf.accessors;\n        var setUniforms = {};\n        var uniformMap = {};\n\n        var attributes = primitive.attributes;\n        for (var attribute in attributes) {\n            if (attributes.hasOwnProperty(attribute)) {\n                var accessorId = attributes[attribute];\n                var a = accessors[accessorId];\n                var extensions = a.extensions;\n\n                if (attribute.charAt(0) === '_') {\n                    attribute = attribute.substring(1);\n                }\n\n                if (defined(extensions)) {\n                    var quantizedAttributes = extensions.WEB3D_quantized_attributes;\n                    if (defined(quantizedAttributes)) {\n                        var decodeMatrix = quantizedAttributes.decodeMatrix;\n                        var uniformVariable = 'gltf_u_dec_' + attribute.toLowerCase();\n\n                        switch (a.type) {\n                            case AttributeType.SCALAR:\n                                uniformMap[uniformVariable] = getMat2UniformFunction(decodeMatrix).func;\n                                setUniforms[uniformVariable] = true;\n                                break;\n                            case AttributeType.VEC2:\n                                uniformMap[uniformVariable] = getMat3UniformFunction(decodeMatrix).func;\n                                setUniforms[uniformVariable] = true;\n                                break;\n                            case AttributeType.VEC3:\n                                uniformMap[uniformVariable] = getMat4UniformFunction(decodeMatrix).func;\n                                setUniforms[uniformVariable] = true;\n                                break;\n                            case AttributeType.VEC4:\n                                // VEC4 attributes are split into scale and translate because there is no mat5 in GLSL\n                                var uniformVariableScale = uniformVariable + '_scale';\n                                var uniformVariableTranslate = uniformVariable + '_translate';\n                                uniformMap[uniformVariableScale] = getMat4UniformFunction(scaleFromMatrix5Array(decodeMatrix)).func;\n                                uniformMap[uniformVariableTranslate] = getVec4UniformFunction(translateFromMatrix5Array(decodeMatrix)).func;\n                                setUniforms[uniformVariableScale] = true;\n                                setUniforms[uniformVariableTranslate] = true;\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If there are any unset quantized uniforms in this program, they should be set to the identity\n        for (var quantizedUniform in quantizedUniforms) {\n            if (quantizedUniforms.hasOwnProperty(quantizedUniform)) {\n                if (!setUniforms[quantizedUniform]) {\n                    var properties = quantizedUniforms[quantizedUniform];\n                    if (defined(properties.mat)) {\n                        if (properties.mat === 2) {\n                            uniformMap[quantizedUniform] = getMat2UniformFunction(Matrix2.IDENTITY).func;\n                        } else if (properties.mat === 3) {\n                            uniformMap[quantizedUniform] = getMat3UniformFunction(Matrix3.IDENTITY).func;\n                        } else if (properties.mat === 4) {\n                            uniformMap[quantizedUniform] = getMat4UniformFunction(Matrix4.IDENTITY).func;\n                        }\n                    }\n                    if (defined(properties.vec)) {\n                        if (properties.vec === 4) {\n                            uniformMap[quantizedUniform] = getVec4UniformFunction([0, 0, 0, 0]).func;\n                        }\n                    }\n                }\n            }\n        }\n        return uniformMap;\n    };\n\n    // This doesn't support LOCAL, which we could add if it is ever used.\n    var scratchTranslationRtc = new Cartesian3();\n    var gltfSemanticUniforms = {\n        MODEL : function(uniformState, model) {\n            return function() {\n                return uniformState.model;\n            };\n        },\n        VIEW : function(uniformState, model) {\n            return function() {\n                return uniformState.view;\n            };\n        },\n        PROJECTION : function(uniformState, model) {\n            return function() {\n                return uniformState.projection;\n            };\n        },\n        MODELVIEW : function(uniformState, model) {\n            return function() {\n                return uniformState.modelView;\n            };\n        },\n        CESIUM_RTC_MODELVIEW : function(uniformState, model) {\n            // CESIUM_RTC extension\n            var mvRtc = new Matrix4();\n            return function() {\n                if (defined(model._rtcCenter)) {\n                    Matrix4.getTranslation(uniformState.model, scratchTranslationRtc);\n                    Cartesian3.add(scratchTranslationRtc, model._rtcCenter, scratchTranslationRtc);\n                    Matrix4.multiplyByPoint(uniformState.view, scratchTranslationRtc, scratchTranslationRtc);\n                    return Matrix4.setTranslation(uniformState.modelView, scratchTranslationRtc, mvRtc);\n                }\n                return uniformState.modelView;\n            };\n        },\n        MODELVIEWPROJECTION : function(uniformState, model) {\n            return function() {\n                return uniformState.modelViewProjection;\n            };\n        },\n        MODELINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseModel;\n            };\n        },\n        VIEWINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseView;\n            };\n        },\n        PROJECTIONINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseProjection;\n            };\n        },\n        MODELVIEWINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseModelView;\n            };\n        },\n        MODELVIEWPROJECTIONINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseModelViewProjection;\n            };\n        },\n        MODELINVERSETRANSPOSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseTransposeModel;\n            };\n        },\n        MODELVIEWINVERSETRANSPOSE : function(uniformState, model) {\n            return function() {\n                return uniformState.normal;\n            };\n        },\n        VIEWPORT : function(uniformState, model) {\n            return function() {\n                return uniformState.viewportCartesian4;\n            };\n        }\n        // JOINTMATRIX created in createCommand()\n    };\n\n    ModelUtility.getGltfSemanticUniforms = function() {\n        return gltfSemanticUniforms;\n    };\nexport default ModelUtility;\n","import WebGLConstants from './WebGLConstants.js';\n\n    function webGLConstantToGlslType(webGLValue) {\n        switch (webGLValue) {\n            case WebGLConstants.FLOAT:\n                return 'float';\n            case WebGLConstants.FLOAT_VEC2:\n                return 'vec2';\n            case WebGLConstants.FLOAT_VEC3:\n                return 'vec3';\n            case WebGLConstants.FLOAT_VEC4:\n                return 'vec4';\n            case WebGLConstants.FLOAT_MAT2:\n                return 'mat2';\n            case WebGLConstants.FLOAT_MAT3:\n                return 'mat3';\n            case WebGLConstants.FLOAT_MAT4:\n                return 'mat4';\n            case WebGLConstants.SAMPLER_2D:\n                return 'sampler2D';\n            case WebGLConstants.BOOL:\n                return 'bool';\n        }\n    }\nexport default webGLConstantToGlslType;\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport webGLConstantToGlslType from '../Core/webGLConstantToGlslType.js';\nimport addToArray from '../ThirdParty/GltfPipeline/addToArray.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport hasExtension from '../ThirdParty/GltfPipeline/hasExtension.js';\nimport numberOfComponentsForType from '../ThirdParty/GltfPipeline/numberOfComponentsForType.js';\nimport ModelUtility from './ModelUtility.js';\n\n    /**\n     * @private\n     */\n    function processModelMaterialsCommon(gltf, options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        if (!defined(gltf)) {\n            return;\n        }\n\n        if (!hasExtension(gltf, 'KHR_materials_common')) {\n            return;\n        }\n\n        if (!hasExtension(gltf, 'KHR_techniques_webgl')) {\n            if (!defined(gltf.extensions)) {\n                gltf.extensions = {};\n            }\n\n            gltf.extensions.KHR_techniques_webgl = {\n                programs : [],\n                shaders : [],\n                techniques : []\n            };\n            gltf.extensionsUsed.push('KHR_techniques_webgl');\n            gltf.extensionsRequired.push('KHR_techniques_webgl');\n        }\n\n        var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n\n        lightDefaults(gltf);\n\n        var lightParameters = generateLightParameters(gltf);\n\n        var primitiveByMaterial = ModelUtility.splitIncompatibleMaterials(gltf);\n\n        var techniques = {};\n        var generatedTechniques = false;\n        ForEach.material(gltf, function(material, materialIndex) {\n            if (defined(material.extensions) && defined(material.extensions.KHR_materials_common)) {\n                var khrMaterialsCommon = material.extensions.KHR_materials_common;\n                var primitiveInfo = primitiveByMaterial[materialIndex];\n\n                var techniqueKey = getTechniqueKey(khrMaterialsCommon, primitiveInfo);\n                var technique = techniques[techniqueKey];\n\n                if (!defined(technique)) {\n                    technique = generateTechnique(gltf, techniquesWebgl, primitiveInfo, khrMaterialsCommon, lightParameters, options.addBatchIdToGeneratedShaders);\n                    techniques[techniqueKey] = technique;\n                    generatedTechniques = true;\n                }\n\n                var materialValues = {};\n                var values = khrMaterialsCommon.values;\n                var uniformName;\n                for (var valueName in values) {\n                    if (values.hasOwnProperty(valueName) && (valueName !== 'transparent') && (valueName !== 'doubleSided')) {\n                        uniformName = 'u_' + valueName.toLowerCase();\n                        materialValues[uniformName] = values[valueName];\n                    }\n                }\n\n                material.extensions.KHR_techniques_webgl = {\n                    technique: technique,\n                    values: materialValues\n                };\n\n                material.alphaMode = 'OPAQUE';\n                if (khrMaterialsCommon.transparent) {\n                    material.alphaMode = 'BLEND';\n                }\n\n                if (khrMaterialsCommon.doubleSided) {\n                    material.doubleSided = true;\n                }\n            }\n        });\n\n        if (!generatedTechniques) {\n            return gltf;\n        }\n\n        // If any primitives have semantics that aren't declared in the generated\n        // shaders, we want to preserve them.\n        ModelUtility.ensureSemanticExistence(gltf);\n\n        return gltf;\n    }\n\n    function generateLightParameters(gltf) {\n        var result = {};\n\n        var lights;\n        if (defined(gltf.extensions) && defined(gltf.extensions.KHR_materials_common)) {\n            lights = gltf.extensions.KHR_materials_common.lights;\n        }\n\n        if (defined(lights)) {\n            // Figure out which node references the light\n            var nodes = gltf.nodes;\n            for (var nodeName in nodes) {\n                if (nodes.hasOwnProperty(nodeName)) {\n                    var node = nodes[nodeName];\n                    if (defined(node.extensions) && defined(node.extensions.KHR_materials_common)) {\n                        var nodeLightId = node.extensions.KHR_materials_common.light;\n                        if (defined(nodeLightId) && defined(lights[nodeLightId])) {\n                            lights[nodeLightId].node = nodeName;\n                        }\n                        delete node.extensions.KHR_materials_common;\n                    }\n                }\n            }\n\n            // Add light parameters to result\n            var lightCount = 0;\n            for (var lightName in lights) {\n                if (lights.hasOwnProperty(lightName)) {\n                    var light = lights[lightName];\n                    var lightType = light.type;\n                    if ((lightType !== 'ambient') && !defined(light.node)) {\n                        delete lights[lightName];\n                        continue;\n                    }\n                    var lightBaseName = 'light' + lightCount.toString();\n                    light.baseName = lightBaseName;\n                    switch (lightType) {\n                        case 'ambient':\n                            var ambient = light.ambient;\n                            result[lightBaseName + 'Color'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: ambient.color\n                            };\n                            break;\n                        case 'directional':\n                            var directional = light.directional;\n                            result[lightBaseName + 'Color'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: directional.color\n                            };\n                            if (defined(light.node)) {\n                                result[lightBaseName + 'Transform'] = {\n                                    node: light.node,\n                                    semantic: 'MODELVIEW',\n                                    type: WebGLConstants.FLOAT_MAT4\n                                };\n                            }\n                            break;\n                        case 'point':\n                            var point = light.point;\n                            result[lightBaseName + 'Color'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: point.color\n                            };\n                            if (defined(light.node)) {\n                                result[lightBaseName + 'Transform'] = {\n                                    node: light.node,\n                                    semantic: 'MODELVIEW',\n                                    type: WebGLConstants.FLOAT_MAT4\n                                };\n                            }\n                            result[lightBaseName + 'Attenuation'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: [point.constantAttenuation, point.linearAttenuation, point.quadraticAttenuation]\n                            };\n                            break;\n                        case 'spot':\n                            var spot = light.spot;\n                            result[lightBaseName + 'Color'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: spot.color\n                            };\n                            if (defined(light.node)) {\n                                result[lightBaseName + 'Transform'] = {\n                                    node: light.node,\n                                    semantic: 'MODELVIEW',\n                                    type: WebGLConstants.FLOAT_MAT4\n                                };\n                                result[lightBaseName + 'InverseTransform'] = {\n                                    node: light.node,\n                                    semantic: 'MODELVIEWINVERSE',\n                                    type: WebGLConstants.FLOAT_MAT4,\n                                    useInFragment: true\n                                };\n                            }\n                            result[lightBaseName + 'Attenuation'] = {\n                                type: WebGLConstants.FLOAT_VEC3,\n                                value: [spot.constantAttenuation, spot.linearAttenuation, spot.quadraticAttenuation]\n                            };\n\n                            result[lightBaseName + 'FallOff'] = {\n                                type: WebGLConstants.FLOAT_VEC2,\n                                value: [spot.fallOffAngle, spot.fallOffExponent]\n                            };\n                            break;\n                    }\n                    ++lightCount;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function generateTechnique(gltf, techniquesWebgl, primitiveInfo, khrMaterialsCommon, lightParameters, addBatchIdToGeneratedShaders) {\n        if (!defined(khrMaterialsCommon)) {\n            khrMaterialsCommon = {};\n        }\n\n        addBatchIdToGeneratedShaders = defaultValue(addBatchIdToGeneratedShaders, false);\n\n        var techniques = techniquesWebgl.techniques;\n        var shaders = techniquesWebgl.shaders;\n        var programs = techniquesWebgl.programs;\n        var lightingModel = khrMaterialsCommon.technique.toUpperCase();\n        var lights;\n        if (defined(gltf.extensions) && defined(gltf.extensions.KHR_materials_common)) {\n            lights = gltf.extensions.KHR_materials_common.lights;\n        }\n\n        var parameterValues = khrMaterialsCommon.values;\n        var jointCount = defaultValue(khrMaterialsCommon.jointCount, 0);\n\n        var skinningInfo;\n        var hasSkinning = false;\n        var hasVertexColors = false;\n\n        if (defined(primitiveInfo)) {\n            skinningInfo = primitiveInfo.skinning;\n            hasSkinning = skinningInfo.skinned;\n            hasVertexColors = primitiveInfo.hasVertexColors;\n        }\n\n        var vertexShader = 'precision highp float;\\n';\n        var fragmentShader = 'precision highp float;\\n';\n\n        var hasNormals = (lightingModel !== 'CONSTANT');\n\n        // Add techniques\n        var techniqueUniforms = {\n            u_modelViewMatrix: {\n                semantic: hasExtension(gltf, 'CESIUM_RTC') ? 'CESIUM_RTC_MODELVIEW' : 'MODELVIEW',\n                type: WebGLConstants.FLOAT_MAT4\n            },\n            u_projectionMatrix: {\n                semantic: 'PROJECTION',\n                type: WebGLConstants.FLOAT_MAT4\n            }\n        };\n\n        if (hasNormals) {\n            techniqueUniforms.u_normalMatrix = {\n                semantic: 'MODELVIEWINVERSETRANSPOSE',\n                type: WebGLConstants.FLOAT_MAT3\n            };\n        }\n\n        if (hasSkinning) {\n            techniqueUniforms.u_jointMatrix = {\n                count: jointCount,\n                semantic: 'JOINTMATRIX',\n                type: WebGLConstants.FLOAT_MAT4\n            };\n        }\n\n        // Add material values\n        var uniformName;\n        var hasTexCoords = false;\n        for (var name in parameterValues) {\n            //generate shader parameters for KHR_materials_common attributes\n            //(including a check, because some boolean flags should not be used as shader parameters)\n            if (parameterValues.hasOwnProperty(name) && (name !== 'transparent') && (name !== 'doubleSided')) {\n                var uniformType = getKHRMaterialsCommonValueType(name, parameterValues[name]);\n                uniformName = 'u_' + name.toLowerCase();\n                if (!hasTexCoords && (uniformType === WebGLConstants.SAMPLER_2D)) {\n                    hasTexCoords = true;\n                }\n\n                techniqueUniforms[uniformName] = {\n                    type : uniformType\n                };\n            }\n        }\n\n        // Give the diffuse uniform a semantic to support color replacement in 3D Tiles\n        if (defined(techniqueUniforms.u_diffuse)) {\n            techniqueUniforms.u_diffuse.semantic = '_3DTILESDIFFUSE';\n        }\n\n        // Copy light parameters into technique parameters\n        if (defined(lightParameters)) {\n            for (var lightParamName in lightParameters) {\n                if (lightParameters.hasOwnProperty(lightParamName)) {\n                    uniformName = 'u_' + lightParamName;\n                    techniqueUniforms[uniformName] = lightParameters[lightParamName];\n                }\n            }\n        }\n\n        // Add uniforms to shaders\n        for (uniformName in techniqueUniforms) {\n            if (techniqueUniforms.hasOwnProperty(uniformName)) {\n                var uniform = techniqueUniforms[uniformName];\n                var arraySize = defined(uniform.count) ? '[' + uniform.count + ']' : '';\n                if (((uniform.type !== WebGLConstants.FLOAT_MAT3) && (uniform.type !== WebGLConstants.FLOAT_MAT4)) ||\n                    uniform.useInFragment) {\n                    fragmentShader += 'uniform ' + webGLConstantToGlslType(uniform.type) + ' ' + uniformName + arraySize + ';\\n';\n                    delete uniform.useInFragment;\n                } else {\n                    vertexShader += 'uniform ' + webGLConstantToGlslType(uniform.type) + ' ' + uniformName + arraySize + ';\\n';\n                }\n            }\n        }\n\n        // Add attributes with semantics\n        var vertexShaderMain = '';\n        if (hasSkinning) {\n            var i, j;\n            var numberOfComponents = numberOfComponentsForType(skinningInfo.type);\n            var matrix = false;\n            if (skinningInfo.type.indexOf('MAT') === 0) {\n                matrix = true;\n                numberOfComponents = Math.sqrt(numberOfComponents);\n            }\n            if (!matrix) {\n                for (i = 0; i < numberOfComponents; i++) {\n                    if (i === 0) {\n                        vertexShaderMain += '  mat4 skinMat = ';\n                    } else {\n                        vertexShaderMain += '  skinMat += ';\n                    }\n                    vertexShaderMain += 'a_weight[' + i + '] * u_jointMatrix[int(a_joint[' + i + '])];\\n';\n                }\n            } else {\n                for (i = 0; i < numberOfComponents; i++) {\n                    for (j = 0; j < numberOfComponents; j++) {\n                        if (i === 0 && j === 0) {\n                            vertexShaderMain += '  mat4 skinMat = ';\n                        } else {\n                            vertexShaderMain += '  skinMat += ';\n                        }\n                        vertexShaderMain += 'a_weight[' + i + '][' + j + '] * u_jointMatrix[int(a_joint[' + i + '][' + j + '])];\\n';\n                    }\n                }\n            }\n        }\n\n        // Add position always\n        var techniqueAttributes = {\n            a_position: {\n                semantic : 'POSITION'\n            }\n        };\n        vertexShader += 'attribute vec3 a_position;\\n';\n        vertexShader += 'varying vec3 v_positionEC;\\n';\n        if (hasSkinning) {\n            vertexShaderMain += '  vec4 pos = u_modelViewMatrix * skinMat * vec4(a_position,1.0);\\n';\n        } else {\n            vertexShaderMain += '  vec4 pos = u_modelViewMatrix * vec4(a_position,1.0);\\n';\n        }\n        vertexShaderMain += '  v_positionEC = pos.xyz;\\n';\n        vertexShaderMain += '  gl_Position = u_projectionMatrix * pos;\\n';\n        fragmentShader += 'varying vec3 v_positionEC;\\n';\n\n        // Add normal if we don't have constant lighting\n        if (hasNormals) {\n            techniqueAttributes.a_normal = {\n                semantic: 'NORMAL'\n            };\n            vertexShader += 'attribute vec3 a_normal;\\n';\n            vertexShader += 'varying vec3 v_normal;\\n';\n            if (hasSkinning) {\n                vertexShaderMain += '  v_normal = u_normalMatrix * mat3(skinMat) * a_normal;\\n';\n            } else {\n                vertexShaderMain += '  v_normal = u_normalMatrix * a_normal;\\n';\n            }\n\n            fragmentShader += 'varying vec3 v_normal;\\n';\n        }\n\n        // Add texture coordinates if the material uses them\n        var v_texcoord;\n        if (hasTexCoords) {\n            techniqueAttributes.a_texcoord_0 = {\n                semantic: 'TEXCOORD_0'\n            };\n\n            v_texcoord = 'v_texcoord_0';\n            vertexShader += 'attribute vec2 a_texcoord_0;\\n';\n            vertexShader += 'varying vec2 ' + v_texcoord + ';\\n';\n            vertexShaderMain += '  ' + v_texcoord + ' = a_texcoord_0;\\n';\n\n            fragmentShader += 'varying vec2 ' + v_texcoord + ';\\n';\n        }\n\n        if (hasSkinning) {\n            var attributeType = ModelUtility.getShaderVariable(skinningInfo.type);\n            techniqueAttributes.a_joint = {\n                semantic: 'JOINT'\n            };\n            techniqueAttributes.a_weight = {\n                semantic: 'WEIGHT'\n            };\n\n            vertexShader += 'attribute ' + attributeType + ' a_joint;\\n';\n            vertexShader += 'attribute ' + attributeType + ' a_weight;\\n';\n        }\n\n        if (hasVertexColors) {\n            techniqueAttributes.a_vertexColor = {\n                semantic: 'COLOR_0'\n            };\n            vertexShader += 'attribute vec4 a_vertexColor;\\n';\n            vertexShader += 'varying vec4 v_vertexColor;\\n';\n            vertexShaderMain += '  v_vertexColor = a_vertexColor;\\n';\n            fragmentShader += 'varying vec4 v_vertexColor;\\n';\n        }\n\n        if (addBatchIdToGeneratedShaders) {\n            techniqueAttributes.a_batchId = {\n                semantic: '_BATCHID'\n            };\n            vertexShader += 'attribute float a_batchId;\\n';\n        }\n\n        var hasSpecular = hasNormals && ((lightingModel === 'BLINN') || (lightingModel === 'PHONG')) &&\n            defined(techniqueUniforms.u_specular) && defined(techniqueUniforms.u_shininess) &&\n            (techniqueUniforms.u_shininess > 0.0);\n\n        // Generate lighting code blocks\n        var hasNonAmbientLights = false;\n        var hasAmbientLights = false;\n        var fragmentLightingBlock = '';\n        for (var lightName in lights) {\n            if (lights.hasOwnProperty(lightName)) {\n                var light = lights[lightName];\n                var lightType = light.type.toLowerCase();\n                var lightBaseName = light.baseName;\n                fragmentLightingBlock += '  {\\n';\n                var lightColorName = 'u_' + lightBaseName + 'Color';\n                var varyingDirectionName;\n                var varyingPositionName;\n                if (lightType === 'ambient') {\n                    hasAmbientLights = true;\n                    fragmentLightingBlock += '    ambientLight += ' + lightColorName + ';\\n';\n                } else if (hasNormals) {\n                    hasNonAmbientLights = true;\n                    varyingDirectionName = 'v_' + lightBaseName + 'Direction';\n                    varyingPositionName = 'v_' + lightBaseName + 'Position';\n\n                    if (lightType !== 'point') {\n                        vertexShader += 'varying vec3 ' + varyingDirectionName + ';\\n';\n                        fragmentShader += 'varying vec3 ' + varyingDirectionName + ';\\n';\n\n                        vertexShaderMain += '  ' + varyingDirectionName + ' = mat3(u_' + lightBaseName + 'Transform) * vec3(0.,0.,1.);\\n';\n                        if (lightType === 'directional') {\n                            fragmentLightingBlock += '    vec3 l = normalize(' + varyingDirectionName + ');\\n';\n                        }\n                    }\n\n                    if (lightType !== 'directional') {\n                        vertexShader += 'varying vec3 ' + varyingPositionName + ';\\n';\n                        fragmentShader += 'varying vec3 ' + varyingPositionName + ';\\n';\n\n                        vertexShaderMain += '  ' + varyingPositionName + ' = u_' + lightBaseName + 'Transform[3].xyz;\\n';\n                        fragmentLightingBlock += '    vec3 VP = ' + varyingPositionName + ' - v_positionEC;\\n';\n                        fragmentLightingBlock += '    vec3 l = normalize(VP);\\n';\n                        fragmentLightingBlock += '    float range = length(VP);\\n';\n                        fragmentLightingBlock += '    float attenuation = 1.0 / (u_' + lightBaseName + 'Attenuation.x + ';\n                        fragmentLightingBlock += '(u_' + lightBaseName + 'Attenuation.y * range) + ';\n                        fragmentLightingBlock += '(u_' + lightBaseName + 'Attenuation.z * range * range));\\n';\n                    } else {\n                        fragmentLightingBlock += '    float attenuation = 1.0;\\n';\n                    }\n\n                    if (lightType === 'spot') {\n                        fragmentLightingBlock += '    float spotDot = dot(l, normalize(' + varyingDirectionName + '));\\n';\n                        fragmentLightingBlock += '    if (spotDot < cos(u_' + lightBaseName + 'FallOff.x * 0.5))\\n';\n                        fragmentLightingBlock += '    {\\n';\n                        fragmentLightingBlock += '      attenuation = 0.0;\\n';\n                        fragmentLightingBlock += '    }\\n';\n                        fragmentLightingBlock += '    else\\n';\n                        fragmentLightingBlock += '    {\\n';\n                        fragmentLightingBlock += '        attenuation *= max(0.0, pow(spotDot, u_' + lightBaseName + 'FallOff.y));\\n';\n                        fragmentLightingBlock += '    }\\n';\n                    }\n\n                    fragmentLightingBlock += '    diffuseLight += ' + lightColorName + '* max(dot(normal,l), 0.) * attenuation;\\n';\n\n                    if (hasSpecular) {\n                        if (lightingModel === 'BLINN') {\n                            fragmentLightingBlock += '    vec3 h = normalize(l + viewDir);\\n';\n                            fragmentLightingBlock += '    float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess)) * attenuation;\\n';\n                        } else { // PHONG\n                            fragmentLightingBlock += '    vec3 reflectDir = reflect(-l, normal);\\n';\n                            fragmentLightingBlock += '    float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess)) * attenuation;\\n';\n                        }\n                        fragmentLightingBlock += '    specularLight += ' + lightColorName + ' * specularIntensity;\\n';\n                    }\n                }\n                fragmentLightingBlock += '  }\\n';\n            }\n        }\n\n        if (!hasAmbientLights) {\n            // Add an ambient light if we don't have one\n            fragmentLightingBlock += '  ambientLight += vec3(0.2, 0.2, 0.2);\\n';\n        }\n\n        if (!hasNonAmbientLights && (lightingModel !== 'CONSTANT')) {\n            fragmentShader += '#ifdef USE_CUSTOM_LIGHT_COLOR \\n';\n            fragmentShader += 'uniform vec3 gltf_lightColor; \\n';\n            fragmentShader += '#endif \\n';\n\n            fragmentLightingBlock += '#ifndef USE_CUSTOM_LIGHT_COLOR \\n';\n            fragmentLightingBlock += '    vec3 lightColor = czm_lightColor;\\n';\n            fragmentLightingBlock += '#else \\n';\n            fragmentLightingBlock += '    vec3 lightColor = gltf_lightColor;\\n';\n            fragmentLightingBlock += '#endif \\n';\n\n            fragmentLightingBlock += '  vec3 l = normalize(czm_lightDirectionEC);\\n';\n            var minimumLighting = '0.2'; // Use strings instead of values as 0.0 -> 0 when stringified\n            fragmentLightingBlock += '  diffuseLight += lightColor * max(dot(normal,l), ' + minimumLighting + ');\\n';\n\n            if (hasSpecular) {\n                if (lightingModel === 'BLINN') {\n                    fragmentLightingBlock += '  vec3 h = normalize(l + viewDir);\\n';\n                    fragmentLightingBlock += '  float specularIntensity = max(0., pow(max(dot(normal, h), 0.), u_shininess));\\n';\n                } else { // PHONG\n                    fragmentLightingBlock += '  vec3 reflectDir = reflect(-l, normal);\\n';\n                    fragmentLightingBlock += '  float specularIntensity = max(0., pow(max(dot(reflectDir, viewDir), 0.), u_shininess));\\n';\n                }\n\n                fragmentLightingBlock += '  specularLight += lightColor * specularIntensity;\\n';\n            }\n        }\n\n        vertexShader += 'void main(void) {\\n';\n        vertexShader += vertexShaderMain;\n        vertexShader += '}\\n';\n\n        fragmentShader += 'void main(void) {\\n';\n        var colorCreationBlock = '  vec3 color = vec3(0.0, 0.0, 0.0);\\n';\n        if (hasNormals) {\n            fragmentShader += '  vec3 normal = normalize(v_normal);\\n';\n            if (khrMaterialsCommon.doubleSided) {\n                // !gl_FrontFacing doesn't work as expected on Mac/Intel so use the more verbose form instead. See https://github.com/CesiumGS/cesium/pull/8494.\n                fragmentShader += '  if (gl_FrontFacing == false)\\n';\n                fragmentShader += '  {\\n';\n                fragmentShader += '    normal = -normal;\\n';\n                fragmentShader += '  }\\n';\n            }\n        }\n\n        var finalColorComputation;\n        if (lightingModel !== 'CONSTANT') {\n            if (defined(techniqueUniforms.u_diffuse)) {\n                if (techniqueUniforms.u_diffuse.type === WebGLConstants.SAMPLER_2D) {\n                    fragmentShader += '  vec4 diffuse = texture2D(u_diffuse, ' + v_texcoord + ');\\n';\n                } else {\n                    fragmentShader += '  vec4 diffuse = u_diffuse;\\n';\n                }\n                fragmentShader += '  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\\n';\n                colorCreationBlock += '  color += diffuse.rgb * diffuseLight;\\n';\n            }\n\n            if (hasSpecular) {\n                if (techniqueUniforms.u_specular.type === WebGLConstants.SAMPLER_2D) {\n                    fragmentShader += '  vec3 specular = texture2D(u_specular, ' + v_texcoord + ').rgb;\\n';\n                } else {\n                    fragmentShader += '  vec3 specular = u_specular.rgb;\\n';\n                }\n                fragmentShader += '  vec3 specularLight = vec3(0.0, 0.0, 0.0);\\n';\n                colorCreationBlock += '  color += specular * specularLight;\\n';\n            }\n\n            if (defined(techniqueUniforms.u_transparency)) {\n                finalColorComputation = '  gl_FragColor = vec4(color * diffuse.a * u_transparency, diffuse.a * u_transparency);\\n';\n            } else {\n                finalColorComputation = '  gl_FragColor = vec4(color * diffuse.a, diffuse.a);\\n';\n            }\n        } else if (defined(techniqueUniforms.u_transparency)) {\n            finalColorComputation = '  gl_FragColor = vec4(color * u_transparency, u_transparency);\\n';\n        } else {\n            finalColorComputation = '  gl_FragColor = vec4(color, 1.0);\\n';\n        }\n\n        if (hasVertexColors) {\n            colorCreationBlock += '  color *= v_vertexColor.rgb;\\n';\n        }\n\n        if (defined(techniqueUniforms.u_emission)) {\n            if (techniqueUniforms.u_emission.type === WebGLConstants.SAMPLER_2D) {\n                fragmentShader += '  vec3 emission = texture2D(u_emission, ' + v_texcoord + ').rgb;\\n';\n            } else {\n                fragmentShader += '  vec3 emission = u_emission.rgb;\\n';\n            }\n            colorCreationBlock += '  color += emission;\\n';\n        }\n\n        if (defined(techniqueUniforms.u_ambient) || (lightingModel !== 'CONSTANT')) {\n            if (defined(techniqueUniforms.u_ambient)) {\n                if (techniqueUniforms.u_ambient.type === WebGLConstants.SAMPLER_2D) {\n                    fragmentShader += '  vec3 ambient = texture2D(u_ambient, ' + v_texcoord + ').rgb;\\n';\n                } else {\n                    fragmentShader += '  vec3 ambient = u_ambient.rgb;\\n';\n                }\n            } else {\n                fragmentShader += '  vec3 ambient = diffuse.rgb;\\n';\n            }\n            colorCreationBlock += '  color += ambient * ambientLight;\\n';\n        }\n        fragmentShader += '  vec3 viewDir = -normalize(v_positionEC);\\n';\n        fragmentShader += '  vec3 ambientLight = vec3(0.0, 0.0, 0.0);\\n';\n\n        // Add in light computations\n        fragmentShader += fragmentLightingBlock;\n\n        fragmentShader += colorCreationBlock;\n        fragmentShader += finalColorComputation;\n        fragmentShader += '}\\n';\n\n        // Add shaders\n        var vertexShaderId = addToArray(shaders, {\n            type: WebGLConstants.VERTEX_SHADER,\n            extras: {\n                _pipeline: {\n                    source: vertexShader,\n                    extension: '.glsl'\n                }\n            }\n        });\n\n        var fragmentShaderId = addToArray(shaders, {\n            type: WebGLConstants.FRAGMENT_SHADER,\n            extras: {\n                _pipeline: {\n                    source: fragmentShader,\n                    extension: '.glsl'\n                }\n            }\n        });\n\n        // Add program\n        var programId = addToArray(programs, {\n            fragmentShader: fragmentShaderId,\n            vertexShader: vertexShaderId\n        });\n\n        var techniqueId = addToArray(techniques, {\n            attributes: techniqueAttributes,\n            program: programId,\n            uniforms: techniqueUniforms\n        });\n\n        return techniqueId;\n    }\n\n    function getKHRMaterialsCommonValueType(paramName, paramValue) {\n        var value;\n\n        // Backwards compatibility for COLLADA2GLTF v1.0-draft when it encoding\n        // materials using KHR_materials_common with explicit type/value members\n        if (defined(paramValue.value)) {\n            value = paramValue.value;\n        } else if (defined(paramValue.index)) {\n            value = [paramValue.index];\n        } else {\n            value = paramValue;\n        }\n\n        switch (paramName) {\n            case 'ambient':\n                return value.length === 1 ? WebGLConstants.SAMPLER_2D : WebGLConstants.FLOAT_VEC4;\n            case 'diffuse':\n                return value.length === 1 ? WebGLConstants.SAMPLER_2D : WebGLConstants.FLOAT_VEC4;\n            case 'emission':\n                return value.length === 1 ? WebGLConstants.SAMPLER_2D : WebGLConstants.FLOAT_VEC4;\n            case 'specular':\n                return value.length === 1 ? WebGLConstants.SAMPLER_2D : WebGLConstants.FLOAT_VEC4;\n            case 'shininess':\n                return WebGLConstants.FLOAT;\n            case 'transparency':\n                return WebGLConstants.FLOAT;\n\n            // these two are usually not used directly within shaders,\n            // they are just added here for completeness\n            case 'transparent':\n                return WebGLConstants.BOOL;\n            case 'doubleSided':\n                return WebGLConstants.BOOL;\n        }\n    }\n\n    function getTechniqueKey(khrMaterialsCommon, primitiveInfo) {\n        var techniqueKey = '';\n        techniqueKey += 'technique:' + khrMaterialsCommon.technique + ';';\n\n        var values = khrMaterialsCommon.values;\n        var keys = Object.keys(values).sort();\n        var keysCount = keys.length;\n        for (var i = 0; i < keysCount; ++i) {\n            var name = keys[i];\n            if (values.hasOwnProperty(name)) {\n                techniqueKey += name + ':' + getKHRMaterialsCommonValueType(name, values[name]);\n                techniqueKey += ';';\n            }\n        }\n\n        var jointCount = defaultValue(khrMaterialsCommon.jointCount, 0);\n        techniqueKey += jointCount.toString() + ';';\n        if (defined(primitiveInfo)) {\n            var skinningInfo = primitiveInfo.skinning;\n            if (jointCount > 0) {\n                techniqueKey += skinningInfo.type + ';';\n            }\n            techniqueKey += primitiveInfo.hasVertexColors;\n        }\n\n        return techniqueKey;\n    }\n\n    function lightDefaults(gltf) {\n        var khrMaterialsCommon = gltf.extensions.KHR_materials_common;\n        if (!defined(khrMaterialsCommon) || !defined(khrMaterialsCommon.lights)) {\n            return;\n        }\n\n        var lights = khrMaterialsCommon.lights;\n\n        var lightsLength = lights.length;\n        for (var lightId = 0; lightId < lightsLength; lightId++) {\n            var light = lights[lightId];\n            if (light.type === 'ambient') {\n                if (!defined(light.ambient)) {\n                    light.ambient = {};\n                }\n                var ambientLight = light.ambient;\n\n                if (!defined(ambientLight.color)) {\n                    ambientLight.color = [1.0, 1.0, 1.0];\n                }\n            } else if (light.type === 'directional') {\n                if (!defined(light.directional)) {\n                    light.directional = {};\n                }\n                var directionalLight = light.directional;\n\n                if (!defined(directionalLight.color)) {\n                    directionalLight.color = [1.0, 1.0, 1.0];\n                }\n            } else if (light.type === 'point') {\n                if (!defined(light.point)) {\n                    light.point = {};\n                }\n                var pointLight = light.point;\n\n                if (!defined(pointLight.color)) {\n                    pointLight.color = [1.0, 1.0, 1.0];\n                }\n\n                pointLight.constantAttenuation = defaultValue(pointLight.constantAttenuation, 1.0);\n                pointLight.linearAttenuation = defaultValue(pointLight.linearAttenuation, 0.0);\n                pointLight.quadraticAttenuation = defaultValue(pointLight.quadraticAttenuation, 0.0);\n            } else if (light.type === 'spot') {\n                if (!defined(light.spot)) {\n                    light.spot = {};\n                }\n                var spotLight = light.spot;\n\n                if (!defined(spotLight.color)) {\n                    spotLight.color = [1.0, 1.0, 1.0];\n                }\n\n                spotLight.constantAttenuation = defaultValue(spotLight.constantAttenuation, 1.0);\n                spotLight.fallOffAngle = defaultValue(spotLight.fallOffAngle, 3.14159265);\n                spotLight.fallOffExponent = defaultValue(spotLight.fallOffExponent, 0.0);\n                spotLight.linearAttenuation = defaultValue(spotLight.linearAttenuation, 0.0);\n                spotLight.quadraticAttenuation = defaultValue(spotLight.quadraticAttenuation, 0.0);\n            }\n        }\n    }\nexport default processModelMaterialsCommon;\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport webGLConstantToGlslType from '../Core/webGLConstantToGlslType.js';\nimport addToArray from '../ThirdParty/GltfPipeline/addToArray.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport hasExtension from '../ThirdParty/GltfPipeline/hasExtension.js';\nimport numberOfComponentsForType from '../ThirdParty/GltfPipeline/numberOfComponentsForType.js';\nimport ModelUtility from './ModelUtility.js';\n\n    /**\n     * @private\n     */\n    function processPbrMaterials(gltf, options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        // No need to create new techniques if they already exist,\n        // the shader should handle these values\n        if (hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return gltf;\n        }\n\n        // All materials in glTF are PBR by default,\n        // so we should apply PBR unless no materials are found.\n        if (!defined(gltf.materials) || gltf.materials.length === 0) {\n            return gltf;\n        }\n\n        if (!defined(gltf.extensions)) {\n            gltf.extensions = {};\n        }\n\n        if (!defined(gltf.extensionsUsed)) {\n            gltf.extensionsUsed = [];\n        }\n\n        if (!defined(gltf.extensionsRequired)) {\n            gltf.extensionsRequired = [];\n        }\n\n        gltf.extensions.KHR_techniques_webgl = {\n            programs: [],\n            shaders: [],\n            techniques: []\n        };\n\n        gltf.extensionsUsed.push('KHR_techniques_webgl');\n        gltf.extensionsRequired.push('KHR_techniques_webgl');\n\n        var primitiveByMaterial = ModelUtility.splitIncompatibleMaterials(gltf);\n\n        ForEach.material(gltf, function(material, materialIndex) {\n            var generatedMaterialValues = {};\n            var technique = generateTechnique(gltf, material, materialIndex, generatedMaterialValues, primitiveByMaterial, options);\n\n            if (!defined(material.extensions)) {\n                material.extensions = {};\n            }\n\n            material.extensions.KHR_techniques_webgl = {\n                values : generatedMaterialValues,\n                technique : technique\n            };\n        });\n\n        // If any primitives have semantics that aren't declared in the generated\n        // shaders, we want to preserve them.\n        ModelUtility.ensureSemanticExistence(gltf);\n\n        return gltf;\n    }\n\n    function isSpecularGlossinessMaterial(material) {\n        return defined(material.extensions) &&\n               defined(material.extensions.KHR_materials_pbrSpecularGlossiness);\n    }\n\n    function addTextureCoordinates(gltf, textureName, generatedMaterialValues, defaultTexCoord, result) {\n        var texCoord;\n        if (defined(generatedMaterialValues[textureName + 'Offset'])) {\n            texCoord = textureName + 'Coord';\n            result.fragmentShaderMain += '    vec2 ' + texCoord + ' = computeTexCoord(' + defaultTexCoord + ', ' + textureName + 'Offset, ' + textureName + 'Rotation, ' + textureName + 'Scale);\\n';\n        } else {\n            texCoord = defaultTexCoord;\n        }\n        return texCoord;\n    }\n\n    var DEFAULT_TEXTURE_OFFSET = [0.0, 0.0];\n    var DEFAULT_TEXTURE_ROTATION = [0.0];\n    var DEFAULT_TEXTURE_SCALE = [1.0, 1.0];\n\n    function handleKHRTextureTransform(parameterName, value, generatedMaterialValues) {\n        if (parameterName.indexOf('Texture') === -1 || !defined(value.extensions) || !defined(value.extensions.KHR_texture_transform)) {\n            return;\n        }\n\n        var uniformName = 'u_' + parameterName;\n        var extension = value.extensions.KHR_texture_transform;\n        generatedMaterialValues[uniformName + 'Offset'] = defaultValue(extension.offset, DEFAULT_TEXTURE_OFFSET);\n        generatedMaterialValues[uniformName + 'Rotation'] = defaultValue(extension.rotation, DEFAULT_TEXTURE_ROTATION);\n        generatedMaterialValues[uniformName + 'Scale'] = defaultValue(extension.scale, DEFAULT_TEXTURE_SCALE);\n\n        if (defined(value.texCoord) && defined(extension.texCoord)) {\n            generatedMaterialValues[uniformName].texCoord = extension.texCoord;\n        }\n    }\n\n    function generateTechnique(gltf, material, materialIndex, generatedMaterialValues, primitiveByMaterial, options) {\n        var addBatchIdToGeneratedShaders = defaultValue(options.addBatchIdToGeneratedShaders, false);\n\n        var techniquesWebgl = gltf.extensions.KHR_techniques_webgl;\n        var techniques = techniquesWebgl.techniques;\n        var shaders = techniquesWebgl.shaders;\n        var programs = techniquesWebgl.programs;\n\n        var useSpecGloss = isSpecularGlossinessMaterial(material);\n\n        var uniformName;\n        var parameterName;\n        var value;\n        var pbrMetallicRoughness = material.pbrMetallicRoughness;\n        if (defined(pbrMetallicRoughness) && !useSpecGloss) {\n            for (parameterName in pbrMetallicRoughness) {\n                if (pbrMetallicRoughness.hasOwnProperty(parameterName)) {\n                    value = pbrMetallicRoughness[parameterName];\n                    uniformName = 'u_' + parameterName;\n                    generatedMaterialValues[uniformName] = value;\n                    handleKHRTextureTransform(parameterName, value, generatedMaterialValues);\n                }\n            }\n        }\n\n        if (useSpecGloss) {\n            var pbrSpecularGlossiness = material.extensions.KHR_materials_pbrSpecularGlossiness;\n            for (parameterName in pbrSpecularGlossiness) {\n                if (pbrSpecularGlossiness.hasOwnProperty(parameterName)) {\n                    value = pbrSpecularGlossiness[parameterName];\n                    uniformName = 'u_' + parameterName;\n                    generatedMaterialValues[uniformName] = value;\n                    handleKHRTextureTransform(parameterName, value, generatedMaterialValues);\n                }\n            }\n        }\n\n        for (var additional in material) {\n            if (material.hasOwnProperty(additional) && ((additional.indexOf('Texture') >= 0) || additional.indexOf('Factor') >= 0)) {\n                value = material[additional];\n                uniformName = 'u_' + additional;\n                generatedMaterialValues[uniformName] = value;\n                handleKHRTextureTransform(additional, value, generatedMaterialValues);\n            }\n        }\n\n        var vertexShader = 'precision highp float;\\n';\n        var fragmentShader = 'precision highp float;\\n';\n\n        var skin;\n        if (defined(gltf.skins)) {\n            skin = gltf.skins[0];\n        }\n        var joints = (defined(skin)) ? skin.joints : [];\n        var jointCount = joints.length;\n\n        var primitiveInfo = primitiveByMaterial[materialIndex];\n\n        var skinningInfo;\n        var hasSkinning = false;\n        var hasVertexColors = false;\n        var hasMorphTargets = false;\n        var hasNormals = false;\n        var hasTangents = false;\n        var hasTexCoords = false;\n        var isUnlit = false;\n\n        if (defined(primitiveInfo)) {\n            skinningInfo = primitiveInfo.skinning;\n            hasSkinning = skinningInfo.skinned && (joints.length > 0);\n            hasVertexColors = primitiveInfo.hasVertexColors;\n            hasMorphTargets = primitiveInfo.hasMorphTargets;\n            hasNormals = primitiveInfo.hasNormals;\n            hasTangents = primitiveInfo.hasTangents;\n            hasTexCoords = primitiveInfo.hasTexCoords;\n        }\n\n        var morphTargets;\n        if (hasMorphTargets) {\n            ForEach.mesh(gltf, function(mesh) {\n                ForEach.meshPrimitive(mesh, function(primitive) {\n                    if (primitive.material === materialIndex) {\n                        var targets = primitive.targets;\n                        if (defined(targets)) {\n                            morphTargets = targets;\n                        }\n                    }\n                });\n            });\n        }\n\n        // Add techniques\n        var techniqueUniforms = {\n            // Add matrices\n            u_modelViewMatrix : {\n                semantic : hasExtension(gltf, 'CESIUM_RTC') ? 'CESIUM_RTC_MODELVIEW' : 'MODELVIEW',\n                type : WebGLConstants.FLOAT_MAT4\n            },\n            u_projectionMatrix : {\n                semantic : 'PROJECTION',\n                type : WebGLConstants.FLOAT_MAT4\n            }\n        };\n\n        if (defined(material.extensions) && defined(material.extensions.KHR_materials_unlit)) {\n            isUnlit = true;\n            hasNormals = false;\n            hasTangents = false;\n        }\n\n        if (hasNormals) {\n            techniqueUniforms.u_normalMatrix = {\n                semantic : 'MODELVIEWINVERSETRANSPOSE',\n                type : WebGLConstants.FLOAT_MAT3\n            };\n        }\n\n        if (hasSkinning) {\n            techniqueUniforms.u_jointMatrix = {\n                count : jointCount,\n                semantic : 'JOINTMATRIX',\n                type : WebGLConstants.FLOAT_MAT4\n            };\n        }\n\n        if (hasMorphTargets) {\n            techniqueUniforms.u_morphWeights = {\n                count : morphTargets.length,\n                semantic : 'MORPHWEIGHTS',\n                type : WebGLConstants.FLOAT\n            };\n        }\n\n        var alphaMode = material.alphaMode;\n        if (defined(alphaMode) && alphaMode === 'MASK') {\n            techniqueUniforms.u_alphaCutoff = {\n                semantic: 'ALPHACUTOFF',\n                type: WebGLConstants.FLOAT\n            };\n        }\n\n        // Add material values\n        for (uniformName in generatedMaterialValues) {\n            if (generatedMaterialValues.hasOwnProperty(uniformName)) {\n                techniqueUniforms[uniformName] = {\n                    type : getPBRValueType(uniformName)\n                };\n            }\n        }\n\n        var baseColorUniform = defaultValue(techniqueUniforms.u_baseColorTexture, techniqueUniforms.u_baseColorFactor);\n        if (defined(baseColorUniform)) {\n            baseColorUniform.semantic = '_3DTILESDIFFUSE';\n        }\n\n        // Add uniforms to shaders\n        for (uniformName in techniqueUniforms) {\n            if (techniqueUniforms.hasOwnProperty(uniformName)) {\n                var uniform = techniqueUniforms[uniformName];\n                var arraySize = defined(uniform.count) ? '[' + uniform.count + ']' : '';\n                if (((uniform.type !== WebGLConstants.FLOAT_MAT3) && (uniform.type !== WebGLConstants.FLOAT_MAT4) && (uniformName !== 'u_morphWeights')) ||\n                    uniform.useInFragment) {\n                    fragmentShader += 'uniform ' + webGLConstantToGlslType(uniform.type) + ' ' + uniformName + arraySize + ';\\n';\n                    delete uniform.useInFragment;\n                } else {\n                    vertexShader += 'uniform ' + webGLConstantToGlslType(uniform.type) + ' ' + uniformName + arraySize + ';\\n';\n                }\n            }\n        }\n\n        // Add attributes with semantics\n        var vertexShaderMain = '';\n        if (hasSkinning) {\n            var i, j;\n            var numberOfComponents = numberOfComponentsForType(skinningInfo.type);\n            var matrix = false;\n            if (skinningInfo.type.indexOf('MAT') === 0) {\n                matrix = true;\n                numberOfComponents = Math.sqrt(numberOfComponents);\n            }\n            if (!matrix) {\n                for (i = 0; i < numberOfComponents; i++) {\n                    if (i === 0) {\n                        vertexShaderMain += '    mat4 skinMatrix = ';\n                    } else {\n                        vertexShaderMain += '    skinMatrix += ';\n                    }\n                    vertexShaderMain += 'a_weight[' + i + '] * u_jointMatrix[int(a_joint[' + i + '])];\\n';\n                }\n            } else {\n                for (i = 0; i < numberOfComponents; i++) {\n                    for (j = 0; j < numberOfComponents; j++) {\n                        if (i === 0 && j === 0) {\n                            vertexShaderMain += '    mat4 skinMatrix = ';\n                        } else {\n                            vertexShaderMain += '    skinMatrix += ';\n                        }\n                        vertexShaderMain += 'a_weight[' + i + '][' + j + '] * u_jointMatrix[int(a_joint[' + i + '][' + j + '])];\\n';\n                    }\n                }\n            }\n        }\n\n        // Add position always\n        var techniqueAttributes = {\n            a_position : {\n                semantic : 'POSITION'\n            }\n        };\n        vertexShader += 'attribute vec3 a_position;\\n';\n        if (hasNormals) {\n            vertexShader += 'varying vec3 v_positionEC;\\n';\n        }\n\n        // Morph Target Weighting\n        vertexShaderMain += '    vec3 weightedPosition = a_position;\\n';\n        if (hasNormals) {\n            vertexShaderMain += '    vec3 weightedNormal = a_normal;\\n';\n        }\n        if (hasTangents) {\n            vertexShaderMain += '    vec4 weightedTangent = a_tangent;\\n';\n        }\n        if (hasMorphTargets) {\n            for (var k = 0; k < morphTargets.length; k++) {\n                var targetAttributes = morphTargets[k];\n                for (var targetAttribute in targetAttributes) {\n                    if (targetAttributes.hasOwnProperty(targetAttribute) && targetAttribute !== 'extras') {\n                        var attributeName = 'a_' + targetAttribute + '_' + k;\n                        techniqueAttributes[attributeName] = {\n                            semantic : targetAttribute + '_' + k\n                        };\n                        vertexShader += 'attribute vec3 ' + attributeName + ';\\n';\n                        if (targetAttribute === 'POSITION') {\n                            vertexShaderMain += '    weightedPosition += u_morphWeights[' + k + '] * ' + attributeName + ';\\n';\n                        } else if (targetAttribute === 'NORMAL') {\n                            vertexShaderMain += '    weightedNormal += u_morphWeights[' + k + '] * ' + attributeName + ';\\n';\n                        } else if (hasTangents && targetAttribute === 'TANGENT') {\n                            vertexShaderMain += '    weightedTangent.xyz += u_morphWeights[' + k + '] * ' + attributeName + ';\\n';\n                        }\n                    }\n                }\n            }\n        }\n\n        // Final position computation\n        if (hasSkinning) {\n            vertexShaderMain += '    vec4 position = skinMatrix * vec4(weightedPosition, 1.0);\\n';\n        } else {\n            vertexShaderMain += '    vec4 position = vec4(weightedPosition, 1.0);\\n';\n        }\n        vertexShaderMain += '    position = u_modelViewMatrix * position;\\n';\n        if (hasNormals) {\n            vertexShaderMain += '    v_positionEC = position.xyz;\\n';\n        }\n        vertexShaderMain += '    gl_Position = u_projectionMatrix * position;\\n';\n\n        // Final normal computation\n        if (hasNormals) {\n            techniqueAttributes.a_normal = {\n                semantic : 'NORMAL'\n            };\n            vertexShader += 'attribute vec3 a_normal;\\n';\n            vertexShader += 'varying vec3 v_normal;\\n';\n            if (hasSkinning) {\n                vertexShaderMain += '    v_normal = u_normalMatrix * mat3(skinMatrix) * weightedNormal;\\n';\n            } else {\n                vertexShaderMain += '    v_normal = u_normalMatrix * weightedNormal;\\n';\n            }\n\n            fragmentShader += 'varying vec3 v_normal;\\n';\n            fragmentShader += 'varying vec3 v_positionEC;\\n';\n        }\n\n        // Read tangents if available\n        if (hasTangents) {\n            techniqueAttributes.a_tangent = {\n                semantic : 'TANGENT'\n            };\n            vertexShader += 'attribute vec4 a_tangent;\\n';\n            vertexShader += 'varying vec4 v_tangent;\\n';\n            vertexShaderMain += '    v_tangent.xyz = u_normalMatrix * weightedTangent.xyz;\\n';\n            vertexShaderMain += '    v_tangent.w = weightedTangent.w;\\n';\n\n            fragmentShader += 'varying vec4 v_tangent;\\n';\n        }\n\n        var fragmentShaderMain = '';\n\n        // Add texture coordinates if the material uses them\n        var v_texCoord;\n        var normalTexCoord;\n        var baseColorTexCoord;\n        var specularGlossinessTexCoord;\n        var diffuseTexCoord;\n        var metallicRoughnessTexCoord;\n        var occlusionTexCoord;\n        var emissiveTexCoord;\n\n        if (hasTexCoords) {\n            techniqueAttributes.a_texcoord_0 = {\n                semantic : 'TEXCOORD_0'\n            };\n\n            v_texCoord = 'v_texcoord_0';\n            vertexShader += 'attribute vec2 a_texcoord_0;\\n';\n            vertexShader += 'varying vec2 ' + v_texCoord + ';\\n';\n            vertexShaderMain += '    ' + v_texCoord + ' = a_texcoord_0;\\n';\n\n            fragmentShader += 'varying vec2 ' + v_texCoord + ';\\n';\n\n            var result = {\n                fragmentShaderMain : fragmentShaderMain\n            };\n            normalTexCoord = addTextureCoordinates(gltf, 'u_normalTexture', generatedMaterialValues, v_texCoord, result);\n            baseColorTexCoord = addTextureCoordinates(gltf, 'u_baseColorTexture', generatedMaterialValues, v_texCoord, result);\n            specularGlossinessTexCoord = addTextureCoordinates(gltf, 'u_specularGlossinessTexture', generatedMaterialValues, v_texCoord, result);\n            diffuseTexCoord = addTextureCoordinates(gltf, 'u_diffuseTexture', generatedMaterialValues, v_texCoord, result);\n            metallicRoughnessTexCoord = addTextureCoordinates(gltf, 'u_metallicRoughnessTexture', generatedMaterialValues, v_texCoord, result);\n            occlusionTexCoord = addTextureCoordinates(gltf, 'u_occlusionTexture', generatedMaterialValues, v_texCoord, result);\n            emissiveTexCoord = addTextureCoordinates(gltf, 'u_emmissiveTexture', generatedMaterialValues, v_texCoord, result);\n\n            fragmentShaderMain = result.fragmentShaderMain;\n        }\n\n        // Add skinning information if available\n        if (hasSkinning) {\n            var attributeType = ModelUtility.getShaderVariable(skinningInfo.type);\n            techniqueAttributes.a_joint = {\n                semantic : 'JOINTS_0'\n            };\n            techniqueAttributes.a_weight ={\n                semantic : 'WEIGHTS_0'\n            };\n\n            vertexShader += 'attribute ' + attributeType + ' a_joint;\\n';\n            vertexShader += 'attribute ' + attributeType + ' a_weight;\\n';\n        }\n\n        if (hasVertexColors) {\n            techniqueAttributes.a_vertexColor = {\n                semantic: 'COLOR_0'\n            };\n            vertexShader += 'attribute vec4 a_vertexColor;\\n';\n            vertexShader += 'varying vec4 v_vertexColor;\\n';\n            vertexShaderMain += '  v_vertexColor = a_vertexColor;\\n';\n            fragmentShader += 'varying vec4 v_vertexColor;\\n';\n        }\n\n        if (addBatchIdToGeneratedShaders) {\n            techniqueAttributes.a_batchId = {\n                semantic: '_BATCHID'\n            };\n            vertexShader += 'attribute float a_batchId;\\n';\n        }\n\n        vertexShader += 'void main(void) \\n{\\n';\n        vertexShader += vertexShaderMain;\n        vertexShader += '}\\n';\n\n        // Fragment shader lighting\n        if (hasNormals) {\n            fragmentShader += 'const float M_PI = 3.141592653589793;\\n';\n\n            fragmentShader +=\n                'vec3 lambertianDiffuse(vec3 diffuseColor) \\n' +\n                '{\\n' +\n                '    return diffuseColor / M_PI;\\n' +\n                '}\\n\\n';\n\n            fragmentShader +=\n                'vec3 fresnelSchlick2(vec3 f0, vec3 f90, float VdotH) \\n' +\n                '{\\n' +\n                '    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\\n' +\n                '}\\n\\n';\n\n            fragmentShader +=\n                'vec3 fresnelSchlick(float metalness, float VdotH) \\n' +\n                '{\\n' +\n                '    return metalness + (vec3(1.0) - metalness) * pow(1.0 - VdotH, 5.0);\\n' +\n                '}\\n\\n';\n\n            fragmentShader +=\n                'float smithVisibilityG1(float NdotV, float roughness) \\n' +\n                '{\\n' +\n                '    float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;\\n' +\n                '    return NdotV / (NdotV * (1.0 - k) + k);\\n' +\n                '}\\n\\n';\n\n            fragmentShader +=\n                'float smithVisibilityGGX(float roughness, float NdotL, float NdotV) \\n' +\n                '{\\n' +\n                '    return smithVisibilityG1(NdotL, roughness) * smithVisibilityG1(NdotV, roughness);\\n' +\n                '}\\n\\n';\n\n            fragmentShader +=\n                'float GGX(float roughness, float NdotH) \\n' +\n                '{\\n' +\n                '    float roughnessSquared = roughness * roughness;\\n' +\n                '    float f = (NdotH * roughnessSquared - NdotH) * NdotH + 1.0;\\n' +\n                '    return roughnessSquared / (M_PI * f * f);\\n' +\n                '}\\n\\n';\n        }\n\n        fragmentShader +=\n            'vec3 SRGBtoLINEAR3(vec3 srgbIn) \\n' +\n            '{\\n' +\n            '    return pow(srgbIn, vec3(2.2));\\n' +\n            '}\\n\\n';\n\n        fragmentShader +=\n            'vec4 SRGBtoLINEAR4(vec4 srgbIn) \\n' +\n            '{\\n' +\n            '    vec3 linearOut = pow(srgbIn.rgb, vec3(2.2));\\n' +\n            '    return vec4(linearOut, srgbIn.a);\\n' +\n            '}\\n\\n';\n\n        fragmentShader +=\n            'vec3 applyTonemapping(vec3 linearIn) \\n' +\n            '{\\n' +\n            '#ifndef HDR \\n' +\n            '    return czm_acesTonemapping(linearIn);\\n' +\n            '#else \\n' +\n            '    return linearIn;\\n' +\n            '#endif \\n' +\n            '}\\n\\n';\n\n        fragmentShader +=\n            'vec3 LINEARtoSRGB(vec3 linearIn) \\n' +\n            '{\\n' +\n            '#ifndef HDR \\n' +\n            '    return pow(linearIn, vec3(1.0/2.2));\\n' +\n            '#else \\n' +\n            '    return linearIn;\\n' +\n            '#endif \\n' +\n            '}\\n\\n';\n\n        fragmentShader +=\n            'vec2 computeTexCoord(vec2 texCoords, vec2 offset, float rotation, vec2 scale) \\n' +\n            '{\\n' +\n            '    rotation = -rotation; \\n' +\n            '    mat3 transform = mat3(\\n' +\n            '        cos(rotation) * scale.x, sin(rotation) * scale.x, 0.0, \\n' +\n            '       -sin(rotation) * scale.y, cos(rotation) * scale.y, 0.0, \\n' +\n            '        offset.x, offset.y, 1.0); \\n' +\n            '    vec2 transformedTexCoords = (transform * vec3(fract(texCoords), 1.0)).xy; \\n' +\n            '    return transformedTexCoords; \\n' +\n            '}\\n\\n';\n\n        fragmentShader += '#ifdef USE_IBL_LIGHTING \\n';\n        fragmentShader += 'uniform vec2 gltf_iblFactor; \\n';\n        fragmentShader += '#endif \\n';\n        fragmentShader += '#ifdef USE_CUSTOM_LIGHT_COLOR \\n';\n        fragmentShader += 'uniform vec3 gltf_lightColor; \\n';\n        fragmentShader += '#endif \\n';\n\n        fragmentShader += 'void main(void) \\n{\\n';\n        fragmentShader += fragmentShaderMain;\n\n        // Add normal mapping to fragment shader\n        if (hasNormals) {\n            fragmentShader += '    vec3 ng = normalize(v_normal);\\n';\n            fragmentShader += '    vec3 positionWC = vec3(czm_inverseView * vec4(v_positionEC, 1.0));\\n';\n            if (defined(generatedMaterialValues.u_normalTexture)) {\n                if (hasTangents) {\n                    // Read tangents from varying\n                    fragmentShader += '    vec3 t = normalize(v_tangent.xyz);\\n';\n                    fragmentShader += '    vec3 b = normalize(cross(ng, t) * v_tangent.w);\\n';\n                    fragmentShader += '    mat3 tbn = mat3(t, b, ng);\\n';\n                    fragmentShader += '    vec3 n = texture2D(u_normalTexture, ' + normalTexCoord + ').rgb;\\n';\n                    fragmentShader += '    n = normalize(tbn * (2.0 * n - 1.0));\\n';\n                } else {\n                    // Add standard derivatives extension\n                    fragmentShader = '#ifdef GL_OES_standard_derivatives\\n' +\n                        '#extension GL_OES_standard_derivatives : enable\\n' +\n                        '#endif\\n' +\n                        fragmentShader;\n                    // Compute tangents\n                    fragmentShader += '#ifdef GL_OES_standard_derivatives\\n';\n                    fragmentShader += '    vec3 pos_dx = dFdx(v_positionEC);\\n';\n                    fragmentShader += '    vec3 pos_dy = dFdy(v_positionEC);\\n';\n                    fragmentShader += '    vec3 tex_dx = dFdx(vec3(' + normalTexCoord + ',0.0));\\n';\n                    fragmentShader += '    vec3 tex_dy = dFdy(vec3(' + normalTexCoord + ',0.0));\\n';\n                    fragmentShader += '    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n';\n                    fragmentShader += '    t = normalize(t - ng * dot(ng, t));\\n';\n                    fragmentShader += '    vec3 b = normalize(cross(ng, t));\\n';\n                    fragmentShader += '    mat3 tbn = mat3(t, b, ng);\\n';\n                    fragmentShader += '    vec3 n = texture2D(u_normalTexture, ' + normalTexCoord + ').rgb;\\n';\n                    fragmentShader += '    n = normalize(tbn * (2.0 * n - 1.0));\\n';\n                    fragmentShader += '#else\\n';\n                    fragmentShader += '    vec3 n = ng;\\n';\n                    fragmentShader += '#endif\\n';\n                }\n            } else {\n                fragmentShader += '    vec3 n = ng;\\n';\n            }\n            if (material.doubleSided) {\n                // !gl_FrontFacing doesn't work as expected on Mac/Intel so use the more verbose form instead. See https://github.com/CesiumGS/cesium/pull/8494.\n                fragmentShader += '    if (gl_FrontFacing == false)\\n';\n                fragmentShader += '    {\\n';\n                fragmentShader += '        n = -n;\\n';\n                fragmentShader += '    }\\n';\n            }\n        }\n\n        // Add base color to fragment shader\n        if (defined(generatedMaterialValues.u_baseColorTexture)) {\n            fragmentShader += '    vec4 baseColorWithAlpha = SRGBtoLINEAR4(texture2D(u_baseColorTexture, ' + baseColorTexCoord + '));\\n';\n            if (defined(generatedMaterialValues.u_baseColorFactor)) {\n                fragmentShader += '    baseColorWithAlpha *= u_baseColorFactor;\\n';\n            }\n        } else if (defined(generatedMaterialValues.u_baseColorFactor)) {\n                fragmentShader += '    vec4 baseColorWithAlpha = u_baseColorFactor;\\n';\n            } else {\n                fragmentShader += '    vec4 baseColorWithAlpha = vec4(1.0);\\n';\n            }\n\n        if (hasVertexColors) {\n            fragmentShader += '    baseColorWithAlpha *= v_vertexColor;\\n';\n        }\n\n        fragmentShader += '    vec3 baseColor = baseColorWithAlpha.rgb;\\n';\n\n        if (hasNormals) {\n            if (useSpecGloss) {\n                if (defined(generatedMaterialValues.u_specularGlossinessTexture)) {\n                    fragmentShader += '    vec4 specularGlossiness = SRGBtoLINEAR4(texture2D(u_specularGlossinessTexture, ' + specularGlossinessTexCoord + '));\\n';\n                    fragmentShader += '    vec3 specular = specularGlossiness.rgb;\\n';\n                    fragmentShader += '    float glossiness = specularGlossiness.a;\\n';\n                    if (defined(generatedMaterialValues.u_specularFactor)) {\n                        fragmentShader += '    specular *= u_specularFactor;\\n';\n                    }\n                    if (defined(generatedMaterialValues.u_glossinessFactor)) {\n                        fragmentShader += '    glossiness *= u_glossinessFactor;\\n';\n                    }\n                } else {\n                    if (defined(generatedMaterialValues.u_specularFactor)) {\n                        fragmentShader += '    vec3 specular = clamp(u_specularFactor, vec3(0.0), vec3(1.0));\\n';\n                    } else {\n                        fragmentShader += '    vec3 specular = vec3(1.0);\\n';\n                    }\n                    if (defined(generatedMaterialValues.u_glossinessFactor)) {\n                        fragmentShader += '    float glossiness = clamp(u_glossinessFactor, 0.0, 1.0);\\n';\n                    } else {\n                        fragmentShader += '    float glossiness = 1.0;\\n';\n                    }\n                }\n                if (defined(generatedMaterialValues.u_diffuseTexture)) {\n                    fragmentShader += '    vec4 diffuse = SRGBtoLINEAR4(texture2D(u_diffuseTexture, ' + diffuseTexCoord + '));\\n';\n                    if (defined(generatedMaterialValues.u_diffuseFactor)) {\n                        fragmentShader += '    diffuse *= u_diffuseFactor;\\n';\n                    }\n                } else if (defined(generatedMaterialValues.u_diffuseFactor)) {\n                    fragmentShader += '    vec4 diffuse = clamp(u_diffuseFactor, vec4(0.0), vec4(1.0));\\n';\n                } else {\n                    fragmentShader += '    vec4 diffuse = vec4(1.0);\\n';\n                }\n            } else if (defined(generatedMaterialValues.u_metallicRoughnessTexture)) {\n                fragmentShader += '    vec3 metallicRoughness = texture2D(u_metallicRoughnessTexture, ' + metallicRoughnessTexCoord + ').rgb;\\n';\n                fragmentShader += '    float metalness = clamp(metallicRoughness.b, 0.0, 1.0);\\n';\n                fragmentShader += '    float roughness = clamp(metallicRoughness.g, 0.04, 1.0);\\n';\n                if (defined(generatedMaterialValues.u_metallicFactor)) {\n                    fragmentShader += '    metalness *= u_metallicFactor;\\n';\n                }\n                if (defined(generatedMaterialValues.u_roughnessFactor)) {\n                    fragmentShader += '    roughness *= u_roughnessFactor;\\n';\n                }\n            } else {\n                if (defined(generatedMaterialValues.u_metallicFactor)) {\n                    fragmentShader += '    float metalness = clamp(u_metallicFactor, 0.0, 1.0);\\n';\n                } else {\n                    fragmentShader += '    float metalness = 1.0;\\n';\n                }\n                if (defined(generatedMaterialValues.u_roughnessFactor)) {\n                    fragmentShader += '    float roughness = clamp(u_roughnessFactor, 0.04, 1.0);\\n';\n                } else {\n                    fragmentShader += '    float roughness = 1.0;\\n';\n                }\n            }\n\n            fragmentShader += '    vec3 v = -normalize(v_positionEC);\\n';\n\n            // Generate fragment shader's lighting block\n            fragmentShader += '#ifndef USE_CUSTOM_LIGHT_COLOR \\n';\n            fragmentShader += '    vec3 lightColorHdr = czm_lightColorHdr;\\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    vec3 lightColorHdr = gltf_lightColor;\\n';\n            fragmentShader += '#endif \\n';\n            fragmentShader += '    vec3 l = normalize(czm_lightDirectionEC);\\n';\n            fragmentShader += '    vec3 h = normalize(v + l);\\n';\n            fragmentShader += '    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n';\n            fragmentShader += '    float NdotV = abs(dot(n, v)) + 0.001;\\n';\n            fragmentShader += '    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n';\n            fragmentShader += '    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n';\n            fragmentShader += '    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n';\n            fragmentShader += '    vec3 f0 = vec3(0.04);\\n';\n            // Whether the material uses metallic-roughness or specular-glossiness changes how the BRDF inputs are computed.\n            // It does not change the implementation of the BRDF itself.\n            if (useSpecGloss) {\n                fragmentShader += '    float roughness = 1.0 - glossiness;\\n';\n                fragmentShader += '    vec3 diffuseColor = diffuse.rgb * (1.0 - max(max(specular.r, specular.g), specular.b));\\n';\n                fragmentShader += '    vec3 specularColor = specular;\\n';\n            } else {\n                fragmentShader += '    vec3 diffuseColor = baseColor * (1.0 - metalness) * (1.0 - f0);\\n';\n                fragmentShader += '    vec3 specularColor = mix(f0, baseColor, metalness);\\n';\n            }\n\n            fragmentShader += '    float alpha = roughness * roughness;\\n';\n            fragmentShader += '    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n';\n            fragmentShader += '    vec3 r90 = vec3(clamp(reflectance * 25.0, 0.0, 1.0));\\n';\n            fragmentShader += '    vec3 r0 = specularColor.rgb;\\n';\n\n            fragmentShader += '    vec3 F = fresnelSchlick2(r0, r90, VdotH);\\n';\n            fragmentShader += '    float G = smithVisibilityGGX(alpha, NdotL, NdotV);\\n';\n            fragmentShader += '    float D = GGX(alpha, NdotH);\\n';\n\n            fragmentShader += '    vec3 diffuseContribution = (1.0 - F) * lambertianDiffuse(diffuseColor);\\n';\n            fragmentShader += '    vec3 specularContribution = F * G * D / (4.0 * NdotL * NdotV);\\n';\n            fragmentShader += '    vec3 color = NdotL * lightColorHdr * (diffuseContribution + specularContribution);\\n';\n\n            // Use the procedural IBL if there are no environment maps\n            fragmentShader += '#if defined(USE_IBL_LIGHTING) && !defined(DIFFUSE_IBL) && !defined(SPECULAR_IBL) \\n';\n\n            fragmentShader += '    vec3 r = normalize(czm_inverseViewRotation * normalize(reflect(v, n)));\\n';\n            // Figure out if the reflection vector hits the ellipsoid\n            fragmentShader += '    float vertexRadius = length(positionWC);\\n';\n            fragmentShader += '    float horizonDotNadir = 1.0 - min(1.0, czm_ellipsoidRadii.x / vertexRadius);\\n';\n            fragmentShader += '    float reflectionDotNadir = dot(r, normalize(positionWC));\\n';\n            // Flipping the X vector is a cheap way to get the inverse of czm_temeToPseudoFixed, since that's a rotation about Z.\n            fragmentShader += '    r.x = -r.x;\\n';\n            fragmentShader += '    r = -normalize(czm_temeToPseudoFixed * r);\\n';\n            fragmentShader += '    r.x = -r.x;\\n';\n\n            fragmentShader += '    float inverseRoughness = 1.04 - roughness;\\n';\n            fragmentShader += '    inverseRoughness *= inverseRoughness;\\n';\n            fragmentShader += '    vec3 sceneSkyBox = textureCube(czm_environmentMap, r).rgb * inverseRoughness;\\n';\n\n            fragmentShader += '    float atmosphereHeight = 0.05;\\n';\n            fragmentShader += '    float blendRegionSize = 0.1 * ((1.0 - inverseRoughness) * 8.0 + 1.1 - horizonDotNadir);\\n';\n            fragmentShader += '    float blendRegionOffset = roughness * -1.0;\\n';\n            fragmentShader += '    float farAboveHorizon = clamp(horizonDotNadir - blendRegionSize * 0.5 + blendRegionOffset, 1.0e-10 - blendRegionSize, 0.99999);\\n';\n            fragmentShader += '    float aroundHorizon = clamp(horizonDotNadir + blendRegionSize * 0.5, 1.0e-10 - blendRegionSize, 0.99999);\\n';\n            fragmentShader += '    float farBelowHorizon = clamp(horizonDotNadir + blendRegionSize * 1.5, 1.0e-10 - blendRegionSize, 0.99999);\\n';\n            fragmentShader += '    float smoothstepHeight = smoothstep(0.0, atmosphereHeight, horizonDotNadir);\\n';\n\n            fragmentShader += '    vec3 belowHorizonColor = mix(vec3(0.1, 0.15, 0.25), vec3(0.4, 0.7, 0.9), smoothstepHeight);\\n';\n            fragmentShader += '    vec3 nadirColor = belowHorizonColor * 0.5;\\n';\n            fragmentShader += '    vec3 aboveHorizonColor = mix(vec3(0.9, 1.0, 1.2), belowHorizonColor, roughness * 0.5);\\n';\n            fragmentShader += '    vec3 blueSkyColor = mix(vec3(0.18, 0.26, 0.48), aboveHorizonColor, reflectionDotNadir * inverseRoughness * 0.5 + 0.75);\\n';\n            fragmentShader += '    vec3 zenithColor = mix(blueSkyColor, sceneSkyBox, smoothstepHeight);\\n';\n\n            fragmentShader += '    vec3 blueSkyDiffuseColor = vec3(0.7, 0.85, 0.9);\\n';\n            fragmentShader += '    float diffuseIrradianceFromEarth = (1.0 - horizonDotNadir) * (reflectionDotNadir * 0.25 + 0.75) * smoothstepHeight;\\n';\n            fragmentShader += '    float diffuseIrradianceFromSky = (1.0 - smoothstepHeight) * (1.0 - (reflectionDotNadir * 0.25 + 0.25));\\n';\n            fragmentShader += '    vec3 diffuseIrradiance = blueSkyDiffuseColor * clamp(diffuseIrradianceFromEarth + diffuseIrradianceFromSky, 0.0, 1.0);\\n';\n\n            fragmentShader += '    float notDistantRough = (1.0 - horizonDotNadir * roughness * 0.8);\\n';\n            fragmentShader += '    vec3 specularIrradiance = mix(zenithColor, aboveHorizonColor, smoothstep(farAboveHorizon, aroundHorizon, reflectionDotNadir) * notDistantRough);\\n';\n            fragmentShader += '    specularIrradiance = mix(specularIrradiance, belowHorizonColor, smoothstep(aroundHorizon, farBelowHorizon, reflectionDotNadir) * inverseRoughness);\\n';\n            fragmentShader += '    specularIrradiance = mix(specularIrradiance, nadirColor, smoothstep(farBelowHorizon, 1.0, reflectionDotNadir) * inverseRoughness);\\n';\n\n            // Luminance model from page 40 of http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n            fragmentShader += '#ifdef USE_SUN_LUMINANCE \\n';\n            // Angle between sun and zenith\n            fragmentShader += '    float LdotZenith = clamp(dot(normalize(czm_inverseViewRotation * l), normalize(positionWC * -1.0)), 0.001, 1.0);\\n';\n            fragmentShader += '    float S = acos(LdotZenith);\\n';\n            // Angle between zenith and current pixel\n            fragmentShader += '    float NdotZenith = clamp(dot(normalize(czm_inverseViewRotation * n), normalize(positionWC * -1.0)), 0.001, 1.0);\\n';\n            // Angle between sun and current pixel\n            fragmentShader += '    float gamma = acos(NdotL);\\n';\n            fragmentShader += '    float numerator = ((0.91 + 10.0 * exp(-3.0 * gamma) + 0.45 * pow(NdotL, 2.0)) * (1.0 - exp(-0.32 / NdotZenith)));\\n';\n            fragmentShader += '    float denominator = (0.91 + 10.0 * exp(-3.0 * S) + 0.45 * pow(LdotZenith,2.0)) * (1.0 - exp(-0.32));\\n';\n            fragmentShader += '    float luminance = gltf_luminanceAtZenith * (numerator / denominator);\\n';\n            fragmentShader += '#endif \\n';\n\n            fragmentShader += '    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n';\n            fragmentShader += '    vec3 IBLColor = (diffuseIrradiance * diffuseColor * gltf_iblFactor.x) + (specularIrradiance * SRGBtoLINEAR3(specularColor * brdfLut.x + brdfLut.y) * gltf_iblFactor.y);\\n';\n\n            fragmentShader += '    float maximumComponent = max(max(lightColorHdr.x, lightColorHdr.y), lightColorHdr.z);\\n';\n            fragmentShader += '    vec3 lightColor = lightColorHdr / max(maximumComponent, 1.0);\\n';\n            fragmentShader += '    IBLColor *= lightColor;\\n';\n\n            fragmentShader += '#ifdef USE_SUN_LUMINANCE \\n';\n            fragmentShader += '    color += IBLColor * luminance;\\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    color += IBLColor; \\n';\n            fragmentShader += '#endif \\n';\n\n            // Environment maps were provided, use them for IBL\n            fragmentShader += '#elif defined(DIFFUSE_IBL) || defined(SPECULAR_IBL) \\n';\n\n            fragmentShader += '    mat3 fixedToENU = mat3(gltf_clippingPlanesMatrix[0][0], gltf_clippingPlanesMatrix[1][0], gltf_clippingPlanesMatrix[2][0], \\n';\n            fragmentShader += '                           gltf_clippingPlanesMatrix[0][1], gltf_clippingPlanesMatrix[1][1], gltf_clippingPlanesMatrix[2][1], \\n';\n            fragmentShader += '                           gltf_clippingPlanesMatrix[0][2], gltf_clippingPlanesMatrix[1][2], gltf_clippingPlanesMatrix[2][2]); \\n';\n            fragmentShader += '    const mat3 yUpToZUp = mat3(-1.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0); \\n';\n            fragmentShader += '    vec3 cubeDir = normalize(yUpToZUp * fixedToENU * normalize(reflect(-v, n))); \\n';\n\n            fragmentShader += '#ifdef DIFFUSE_IBL \\n';\n            fragmentShader += '#ifdef CUSTOM_SPHERICAL_HARMONICS \\n';\n            fragmentShader += '    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, gltf_sphericalHarmonicCoefficients); \\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    vec3 diffuseIrradiance = czm_sphericalHarmonics(cubeDir, czm_sphericalHarmonicCoefficients); \\n';\n            fragmentShader += '#endif \\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    vec3 diffuseIrradiance = vec3(0.0); \\n';\n            fragmentShader += '#endif \\n';\n\n            fragmentShader += '#ifdef SPECULAR_IBL \\n';\n            fragmentShader += '    vec2 brdfLut = texture2D(czm_brdfLut, vec2(NdotV, roughness)).rg;\\n';\n            fragmentShader += '#ifdef CUSTOM_SPECULAR_IBL \\n';\n            fragmentShader += '    vec3 specularIBL = czm_sampleOctahedralProjection(gltf_specularMap, gltf_specularMapSize, cubeDir,  roughness * gltf_maxSpecularLOD, gltf_maxSpecularLOD);\\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    vec3 specularIBL = czm_sampleOctahedralProjection(czm_specularEnvironmentMaps, czm_specularEnvironmentMapSize, cubeDir,  roughness * czm_specularEnvironmentMapsMaximumLOD, czm_specularEnvironmentMapsMaximumLOD);\\n';\n            fragmentShader += '#endif \\n';\n            fragmentShader += '    specularIBL *= F * brdfLut.x + brdfLut.y;\\n';\n            fragmentShader += '#else \\n';\n            fragmentShader += '    vec3 specularIBL = vec3(0.0); \\n';\n            fragmentShader += '#endif \\n';\n\n            fragmentShader += '    color += diffuseIrradiance * diffuseColor + specularColor * specularIBL;\\n';\n\n            fragmentShader += '#endif \\n';\n        } else {\n            fragmentShader += '    vec3 color = baseColor;\\n';\n        }\n\n        // Ignore occlusion and emissive when unlit\n        if (!isUnlit) {\n            if (defined(generatedMaterialValues.u_occlusionTexture)) {\n                fragmentShader += '    color *= texture2D(u_occlusionTexture, ' + occlusionTexCoord + ').r;\\n';\n            }\n            if (defined(generatedMaterialValues.u_emissiveTexture)) {\n                fragmentShader += '    vec3 emissive = SRGBtoLINEAR3(texture2D(u_emissiveTexture, ' + emissiveTexCoord + ').rgb);\\n';\n                if (defined(generatedMaterialValues.u_emissiveFactor)) {\n                    fragmentShader += '    emissive *= u_emissiveFactor;\\n';\n                }\n                fragmentShader += '    color += emissive;\\n';\n            } else if (defined(generatedMaterialValues.u_emissiveFactor)) {\n                fragmentShader += '    color += u_emissiveFactor;\\n';\n            }\n        }\n\n        if (!isUnlit) {\n            fragmentShader += '    color = applyTonemapping(color);\\n';\n        }\n\n        fragmentShader += '    color = LINEARtoSRGB(color);\\n';\n\n        if (defined(alphaMode)) {\n            if (alphaMode === 'MASK') {\n                fragmentShader += '    if (baseColorWithAlpha.a < u_alphaCutoff) {\\n';\n                fragmentShader += '        discard;\\n';\n                fragmentShader += '    }\\n';\n                fragmentShader += '    gl_FragColor = vec4(color, 1.0);\\n';\n            } else if (alphaMode === 'BLEND') {\n                fragmentShader += '    gl_FragColor = vec4(color, baseColorWithAlpha.a);\\n';\n            } else {\n                fragmentShader += '    gl_FragColor = vec4(color, 1.0);\\n';\n            }\n        } else {\n            fragmentShader += '    gl_FragColor = vec4(color, 1.0);\\n';\n        }\n\n        fragmentShader += '}\\n';\n\n        // Add shaders\n        var vertexShaderId = addToArray(shaders, {\n            type : WebGLConstants.VERTEX_SHADER,\n            extras : {\n                _pipeline : {\n                    source : vertexShader,\n                    extension : '.glsl'\n                }\n            }\n        });\n\n        var fragmentShaderId = addToArray(shaders, {\n            type : WebGLConstants.FRAGMENT_SHADER,\n            extras : {\n                _pipeline : {\n                    source : fragmentShader,\n                    extension : '.glsl'\n                }\n            }\n        });\n\n        // Add program\n        var programId = addToArray(programs, {\n            isOutline : defined(material.extensions) ? defined(material.extensions.TERRIA_solid_outlines) : false,\n            fragmentShader : fragmentShaderId,\n            vertexShader : vertexShaderId\n        });\n\n        var techniqueId = addToArray(techniques, {\n            attributes : techniqueAttributes,\n            program : programId,\n            uniforms : techniqueUniforms\n        });\n\n        return techniqueId;\n    }\n\n    function getPBRValueType(paramName) {\n        if (paramName.indexOf('Offset') !== -1) {\n            return WebGLConstants.FLOAT_VEC2;\n        } else if (paramName.indexOf('Rotation') !== -1) {\n            return WebGLConstants.FLOAT;\n        } else if (paramName.indexOf('Scale') !== -1) {\n            return WebGLConstants.FLOAT_VEC2;\n        } else if (paramName.indexOf('Texture') !== -1) {\n            return WebGLConstants.SAMPLER_2D;\n        }\n\n        switch (paramName) {\n            case 'u_baseColorFactor':\n                return WebGLConstants.FLOAT_VEC4;\n            case 'u_metallicFactor':\n                return WebGLConstants.FLOAT;\n            case 'u_roughnessFactor':\n                return WebGLConstants.FLOAT;\n            case 'u_emissiveFactor':\n                return WebGLConstants.FLOAT_VEC3;\n            // Specular Glossiness Types\n            case 'u_diffuseFactor':\n                return WebGLConstants.FLOAT_VEC4;\n            case 'u_specularFactor':\n                return WebGLConstants.FLOAT_VEC3;\n            case 'u_glossinessFactor':\n                return WebGLConstants.FLOAT;\n        }\n    }\nexport default processPbrMaterials;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Check from '../Core/Check.js';\nimport clone from '../Core/clone.js';\nimport Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport createGuid from '../Core/createGuid.js';\nimport Credit from '../Core/Credit.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport FeatureDetection from '../Core/FeatureDetection.js';\nimport getAbsoluteUri from '../Core/getAbsoluteUri.js';\nimport getMagic from '../Core/getMagic.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport loadCRN from '../Core/loadCRN.js';\nimport loadImageFromTypedArray from '../Core/loadImageFromTypedArray.js';\nimport loadKTX from '../Core/loadKTX.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PixelFormat from '../Core/PixelFormat.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport Quaternion from '../Core/Quaternion.js';\nimport Resource from '../Core/Resource.js';\nimport Transforms from '../Core/Transforms.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport Sampler from '../Renderer/Sampler.js';\nimport ShaderProgram from '../Renderer/ShaderProgram.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport Texture from '../Renderer/Texture.js';\nimport TextureMinificationFilter from '../Renderer/TextureMinificationFilter.js';\nimport TextureWrap from '../Renderer/TextureWrap.js';\nimport VertexArray from '../Renderer/VertexArray.js';\nimport addDefaults from '../ThirdParty/GltfPipeline/addDefaults.js';\nimport addPipelineExtras from '../ThirdParty/GltfPipeline/addPipelineExtras.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport getAccessorByteStride from '../ThirdParty/GltfPipeline/getAccessorByteStride.js';\nimport hasExtension from '../ThirdParty/GltfPipeline/hasExtension.js';\nimport numberOfComponentsForType from '../ThirdParty/GltfPipeline/numberOfComponentsForType.js';\nimport parseGlb from '../ThirdParty/GltfPipeline/parseGlb.js';\nimport updateVersion from '../ThirdParty/GltfPipeline/updateVersion.js';\nimport when from '../ThirdParty/when.js';\nimport Axis from './Axis.js';\nimport BlendingState from './BlendingState.js';\nimport ClippingPlaneCollection from './ClippingPlaneCollection.js';\nimport ColorBlendMode from './ColorBlendMode.js';\nimport DepthFunction from './DepthFunction.js';\nimport DracoLoader from './DracoLoader.js';\nimport getClipAndStyleCode from './getClipAndStyleCode.js';\nimport getClippingFunction from './getClippingFunction.js';\nimport HeightReference from './HeightReference.js';\nimport JobType from './JobType.js';\nimport ModelAnimationCache from './ModelAnimationCache.js';\nimport ModelAnimationCollection from './ModelAnimationCollection.js';\nimport ModelLoadResources from './ModelLoadResources.js';\nimport ModelMaterial from './ModelMaterial.js';\nimport ModelMesh from './ModelMesh.js';\nimport ModelNode from './ModelNode.js';\nimport ModelUtility from './ModelUtility.js';\nimport OctahedralProjectedCubeMap from './OctahedralProjectedCubeMap.js';\nimport processModelMaterialsCommon from './processModelMaterialsCommon.js';\nimport processPbrMaterials from './processPbrMaterials.js';\nimport SceneMode from './SceneMode.js';\nimport ShadowMode from './ShadowMode.js';\n\n    var boundingSphereCartesian3Scratch = new Cartesian3();\n\n    var ModelState = ModelUtility.ModelState;\n\n    // glTF MIME types discussed in https://github.com/KhronosGroup/glTF/issues/412 and https://github.com/KhronosGroup/glTF/issues/943\n    var defaultModelAccept = 'model/gltf-binary,model/gltf+json;q=0.8,application/json;q=0.2,*/*;q=0.01';\n\n    var articulationEpsilon = CesiumMath.EPSILON16;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function setCachedGltf(model, cachedGltf) {\n        model._cachedGltf = cachedGltf;\n    }\n\n    // glTF JSON can be big given embedded geometry, textures, and animations, so we\n    // cache it across all models using the same url/cache-key.  This also reduces the\n    // slight overhead in assigning defaults to missing values.\n    //\n    // Note that this is a global cache, compared to renderer resources, which\n    // are cached per context.\n    function CachedGltf(options) {\n        this._gltf = options.gltf;\n        this.ready = options.ready;\n        this.modelsToLoad = [];\n        this.count = 0;\n    }\n\n    Object.defineProperties(CachedGltf.prototype, {\n        gltf : {\n            set : function(value) {\n                this._gltf = value;\n            },\n\n            get : function() {\n                return this._gltf;\n            }\n        }\n    });\n\n    CachedGltf.prototype.makeReady = function(gltfJson) {\n        this.gltf = gltfJson;\n\n        var models = this.modelsToLoad;\n        var length = models.length;\n        for (var i = 0; i < length; ++i) {\n            var m = models[i];\n            if (!m.isDestroyed()) {\n                setCachedGltf(m, this);\n            }\n        }\n        this.modelsToLoad = undefined;\n        this.ready = true;\n    };\n\n    var gltfCache = {};\n    var uriToGuid = {};\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * A 3D model based on glTF, the runtime asset format for WebGL, OpenGL ES, and OpenGL.\n     * <p>\n     * Cesium includes support for geometry and materials, glTF animations, and glTF skinning.\n     * In addition, individual glTF nodes are pickable with {@link Scene#pick} and animatable\n     * with {@link Model#getNode}.  glTF cameras and lights are not currently supported.\n     * </p>\n     * <p>\n     * An external glTF asset is created with {@link Model.fromGltf}.  glTF JSON can also be\n     * created at runtime and passed to this constructor function.  In either case, the\n     * {@link Model#readyPromise} is resolved when the model is ready to render, i.e.,\n     * when the external binary, image, and shader files are downloaded and the WebGL\n     * resources are created.\n     * </p>\n     * <p>\n     * Cesium supports glTF assets with the following extensions:\n     * <ul>\n     * <li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/README.md|KHR_binary_glTF (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_materials_common/README.md|KHR_materials_common (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/WEB3D_quantized_attributes/README.md|WEB3D_quantized_attributes (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/AGI_articulations/README.md|AGI_articulations}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/pull/1302|KHR_blend (draft)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md|KHR_draco_mesh_compression}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/README.md|KHR_materials_pbrSpecularGlossiness}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit/README.md|KHR_materials_unlit}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_techniques_webgl/README.md|KHR_techniques_webgl}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/README.md|KHR_texture_transform}\n     * </li>\n     * </ul>\n     * </p>\n     * <p>\n     * For high-precision rendering, Cesium supports the {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/CESIUM_RTC/README.md|CESIUM_RTC} extension, which introduces the\n     * CESIUM_RTC_MODELVIEW parameter semantic that says the node is in WGS84 coordinates translated\n     * relative to a local origin.\n     * </p>\n     *\n     * @alias Model\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Object|ArrayBuffer|Uint8Array} [options.gltf] A glTF JSON object, or a binary glTF buffer.\n     * @param {Resource|String} [options.basePath=''] The base path that paths in the glTF JSON are relative to.\n     * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n     * @param {Number} [options.scale=1.0] A uniform scale applied to this model.\n     * @param {Number} [options.minimumPixelSize=0.0] The approximate minimum pixel size of the model regardless of zoom.\n     * @param {Number} [options.maximumScale] The maximum scale size of a model. An upper limit for minimumPixelSize.\n     * @param {Object} [options.id] A user-defined object to return when the model is picked with {@link Scene#pick}.\n     * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.\n     * @param {Boolean} [options.incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n     * @param {Boolean} [options.asynchronous=true] Determines if model WebGL resource creation will be spread out over several frames or block until completion once all glTF files are loaded.\n     * @param {Boolean} [options.clampAnimations=true] Determines if the model's animations should hold a pose over frames where no keyframes are specified.\n     * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the model casts or receives shadows from light sources.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n     * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n     * @param {HeightReference} [options.heightReference=HeightReference.NONE] Determines how the model is drawn relative to terrain.\n     * @param {Scene} [options.scene] Must be passed in for models that use the height reference property.\n     * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this model will be displayed.\n     * @param {Color} [options.color=Color.WHITE] A color that blends with the model's rendered color.\n     * @param {ColorBlendMode} [options.colorBlendMode=ColorBlendMode.HIGHLIGHT] Defines how the color blends with the model.\n     * @param {Number} [options.colorBlendAmount=0.5] Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.\n     * @param {Color} [options.silhouetteColor=Color.RED] The silhouette color. If more than 256 models have silhouettes enabled, there is a small chance that overlapping models will have minor artifacts.\n     * @param {Number} [options.silhouetteSize=0.0] The size of the silhouette in pixels.\n     * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n     * @param {Boolean} [options.dequantizeInShader=true] Determines if a {@link https://github.com/google/draco|Draco} encoded model is dequantized on the GPU. This decreases total memory usage for encoded models.\n     * @param {Cartesian2} [options.imageBasedLightingFactor=Cartesian2(1.0, 1.0)] Scales diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n     * @param {Cartesian3} [options.lightColor] The light color when shading the model. When <code>undefined</code> the scene's light color is used instead.\n     * @param {Number} [options.luminanceAtZenith=0.2] The sun's luminance at the zenith in kilo candela per meter squared to use for this model's procedural environment map.\n     * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n     * @param {String} [options.specularEnvironmentMaps] A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n     * @param {Credit|String} [options.credit] A credit for the data source, which is displayed on the canvas.\n     *\n     * @see Model.fromGltf\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=3D%20Models.html|Cesium Sandcastle Models Demo}\n     */\n    function Model(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var cacheKey = options.cacheKey;\n        this._cacheKey = cacheKey;\n        this._cachedGltf = undefined;\n        this._releaseGltfJson = defaultValue(options.releaseGltfJson, false);\n\n        var cachedGltf;\n        if (defined(cacheKey) && defined(gltfCache[cacheKey]) && gltfCache[cacheKey].ready) {\n            // glTF JSON is in cache and ready\n            cachedGltf = gltfCache[cacheKey];\n            ++cachedGltf.count;\n        } else {\n            // glTF was explicitly provided, e.g., when a user uses the Model constructor directly\n            var gltf = options.gltf;\n\n            if (defined(gltf)) {\n                if (gltf instanceof ArrayBuffer) {\n                    gltf = new Uint8Array(gltf);\n                }\n\n                if (gltf instanceof Uint8Array) {\n                    // Binary glTF\n                    var parsedGltf = parseGlb(gltf);\n\n                    cachedGltf = new CachedGltf({\n                        gltf : parsedGltf,\n                        ready : true\n                    });\n                } else {\n                    // Normal glTF (JSON)\n                    cachedGltf = new CachedGltf({\n                        gltf : options.gltf,\n                        ready : true\n                    });\n                }\n\n                cachedGltf.count = 1;\n\n                if (defined(cacheKey)) {\n                    gltfCache[cacheKey] = cachedGltf;\n                }\n            }\n        }\n        setCachedGltf(this, cachedGltf);\n\n        var basePath = defaultValue(options.basePath, '');\n        this._resource = Resource.createIfNeeded(basePath);\n\n        // User specified credit\n        var credit = options.credit;\n        if (typeof credit === 'string') {\n            credit = new Credit(credit);\n        }\n        this._credit = credit;\n\n        // Create a list of Credit's so they can be added from the Resource later\n        this._resourceCredits = [];\n\n        /**\n         * Determines if the model primitive will be shown.\n         *\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * The silhouette color.\n         *\n         * @type {Color}\n         *\n         * @default Color.RED\n         */\n        this.silhouetteColor = defaultValue(options.silhouetteColor, Color.RED);\n        this._silhouetteColor = new Color();\n        this._silhouetteColorPreviousAlpha = 1.0;\n        this._normalAttributeName = undefined;\n\n        /**\n         * The size of the silhouette in pixels.\n         *\n         * @type {Number}\n         *\n         * @default 0.0\n         */\n        this.silhouetteSize = defaultValue(options.silhouetteSize, 0.0);\n\n        /**\n         * The 4x4 transformation matrix that transforms the model from model to world coordinates.\n         * When this is the identity matrix, the model is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n         * Local reference frames can be used by providing a different transformation matrix, like that returned\n         * by {@link Transforms.eastNorthUpToFixedFrame}.\n         *\n         * @type {Matrix4}\n         *\n         * @default {@link Matrix4.IDENTITY}\n         *\n         * @example\n         * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n         * m.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n         */\n        this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n        this._modelMatrix = Matrix4.clone(this.modelMatrix);\n        this._clampedModelMatrix = undefined;\n\n        /**\n         * A uniform scale applied to this model before the {@link Model#modelMatrix}.\n         * Values greater than <code>1.0</code> increase the size of the model; values\n         * less than <code>1.0</code> decrease.\n         *\n         * @type {Number}\n         *\n         * @default 1.0\n         */\n        this.scale = defaultValue(options.scale, 1.0);\n        this._scale = this.scale;\n\n        /**\n         * The approximate minimum pixel size of the model regardless of zoom.\n         * This can be used to ensure that a model is visible even when the viewer\n         * zooms out.  When <code>0.0</code>, no minimum size is enforced.\n         *\n         * @type {Number}\n         *\n         * @default 0.0\n         */\n        this.minimumPixelSize = defaultValue(options.minimumPixelSize, 0.0);\n        this._minimumPixelSize = this.minimumPixelSize;\n\n        /**\n         * The maximum scale size for a model. This can be used to give\n         * an upper limit to the {@link Model#minimumPixelSize}, ensuring that the model\n         * is never an unreasonable scale.\n         *\n         * @type {Number}\n         */\n        this.maximumScale = options.maximumScale;\n        this._maximumScale = this.maximumScale;\n\n        /**\n         * User-defined object returned when the model is picked.\n         *\n         * @type Object\n         *\n         * @default undefined\n         *\n         * @see Scene#pick\n         */\n        this.id = options.id;\n        this._id = options.id;\n\n        /**\n         * Returns the height reference of the model\n         *\n         * @type {HeightReference}\n         *\n         * @default HeightReference.NONE\n         */\n        this.heightReference = defaultValue(options.heightReference, HeightReference.NONE);\n        this._heightReference = this.heightReference;\n        this._heightChanged = false;\n        this._removeUpdateHeightCallback = undefined;\n        var scene = options.scene;\n        this._scene = scene;\n        if (defined(scene) && defined(scene.terrainProviderChanged)) {\n            this._terrainProviderChangedCallback = scene.terrainProviderChanged.addEventListener(function() {\n                this._heightChanged = true;\n            }, this);\n        }\n\n        /**\n         * Used for picking primitives that wrap a model.\n         *\n         * @private\n         */\n        this._pickObject = options.pickObject;\n        this._allowPicking = defaultValue(options.allowPicking, true);\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n\n        /**\n         * The currently playing glTF animations.\n         *\n         * @type {ModelAnimationCollection}\n         */\n        this.activeAnimations = new ModelAnimationCollection(this);\n\n        /**\n         * Determines if the model's animations should hold a pose over frames where no keyframes are specified.\n         *\n         * @type {Boolean}\n         */\n        this.clampAnimations = defaultValue(options.clampAnimations, true);\n\n        this._defaultTexture = undefined;\n        this._incrementallyLoadTextures = defaultValue(options.incrementallyLoadTextures, true);\n        this._asynchronous = defaultValue(options.asynchronous, true);\n\n        /**\n         * Determines whether the model casts or receives shadows from light sources.\n         *\n         * @type {ShadowMode}\n         *\n         * @default ShadowMode.ENABLED\n         */\n        this.shadows = defaultValue(options.shadows, ShadowMode.ENABLED);\n        this._shadows = this.shadows;\n\n        /**\n         * A color that blends with the model's rendered color.\n         *\n         * @type {Color}\n         *\n         * @default Color.WHITE\n         */\n        this.color = Color.clone(defaultValue(options.color, Color.WHITE));\n        this._colorPreviousAlpha = 1.0;\n\n        /**\n         * Defines how the color blends with the model.\n         *\n         * @type {ColorBlendMode}\n         *\n         * @default ColorBlendMode.HIGHLIGHT\n         */\n        this.colorBlendMode = defaultValue(options.colorBlendMode, ColorBlendMode.HIGHLIGHT);\n\n        /**\n         * Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>.\n         * A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with\n         * any value in-between resulting in a mix of the two.\n         *\n         * @type {Number}\n         *\n         * @default 0.5\n         */\n        this.colorBlendAmount = defaultValue(options.colorBlendAmount, 0.5);\n\n        this._colorShadingEnabled = false;\n\n        this._clippingPlanes = undefined;\n        this.clippingPlanes = options.clippingPlanes;\n        // Used for checking if shaders need to be regenerated due to clipping plane changes.\n        this._clippingPlanesState = 0;\n        // If defined, use this matrix to position the clipping planes instead of the modelMatrix.\n        // This is so that when models are part of a tileset they all get clipped relative\n        // to the root tile.\n        this.clippingPlanesOriginMatrix = undefined;\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the bounding sphere for each draw command in the model.  A glTF primitive corresponds\n         * to one draw command.  A glTF mesh has an array of primitives, often of length one.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n        this._debugShowBoundingVolume = false;\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the model in wireframe.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugWireframe = defaultValue(options.debugWireframe, false);\n        this._debugWireframe = false;\n\n        this._distanceDisplayCondition = options.distanceDisplayCondition;\n\n        // Undocumented options\n        this._addBatchIdToGeneratedShaders = options.addBatchIdToGeneratedShaders;\n        this._precreatedAttributes = options.precreatedAttributes;\n        this._vertexShaderLoaded = options.vertexShaderLoaded;\n        this._fragmentShaderLoaded = options.fragmentShaderLoaded;\n        this._uniformMapLoaded = options.uniformMapLoaded;\n        this._pickIdLoaded = options.pickIdLoaded;\n        this._ignoreCommands = defaultValue(options.ignoreCommands, false);\n        this._requestType = options.requestType;\n        this._upAxis = defaultValue(options.upAxis, Axis.Y);\n        this._gltfForwardAxis = Axis.Z;\n        this._forwardAxis = options.forwardAxis;\n\n        /**\n         * @private\n         * @readonly\n         */\n        this.cull = defaultValue(options.cull, true);\n\n        /**\n         * @private\n         * @readonly\n         */\n        this.opaquePass = defaultValue(options.opaquePass, Pass.OPAQUE);\n\n        this._computedModelMatrix = new Matrix4(); // Derived from modelMatrix and scale\n        this._clippingPlaneModelViewMatrix = Matrix4.clone(Matrix4.IDENTITY); // Derived from modelMatrix, scale, and the current view matrix\n        this._initialRadius = undefined;           // Radius without model's scale property, model-matrix scale, animations, or skins\n        this._boundingSphere = undefined;\n        this._scaledBoundingSphere = new BoundingSphere();\n        this._state = ModelState.NEEDS_LOAD;\n        this._loadResources = undefined;\n\n        this._mode = undefined;\n\n        this._perNodeShowDirty = false;            // true when the Cesium API was used to change a node's show property\n        this._cesiumAnimationsDirty = false;       // true when the Cesium API, not a glTF animation, changed a node transform\n        this._dirty = false;                       // true when the model was transformed this frame\n        this._maxDirtyNumber = 0;                  // Used in place of a dirty boolean flag to avoid an extra graph traversal\n\n        this._runtime = {\n            animations : undefined,\n            articulationsByName : undefined,\n            articulationsByStageKey : undefined,\n            stagesByKey : undefined,\n            rootNodes : undefined,\n            nodes : undefined,            // Indexed with the node's index\n            nodesByName : undefined,      // Indexed with name property in the node\n            skinnedNodes : undefined,\n            meshesByName : undefined,     // Indexed with the name property in the mesh\n            materialsByName : undefined,  // Indexed with the name property in the material\n            materialsById : undefined     // Indexed with the material's index\n        };\n\n        this._uniformMaps = {};           // Not cached since it can be targeted by glTF animation\n        this._extensionsUsed = undefined;     // Cached used glTF extensions\n        this._extensionsRequired = undefined; // Cached required glTF extensions\n        this._quantizedUniforms = {};     // Quantized uniforms for each program for WEB3D_quantized_attributes\n        this._programPrimitives = {};\n        this._rendererResources = {       // Cached between models with the same url/cache-key\n            buffers : {},\n            vertexArrays : {},\n            programs : {},\n            sourceShaders : {},\n            silhouettePrograms : {},\n            textures : {},\n            samplers : {},\n            renderStates : {}\n        };\n        this._cachedRendererResources = undefined;\n        this._loadRendererResourcesFromCache = false;\n\n        this._dequantizeInShader = defaultValue(options.dequantizeInShader, true);\n        this._decodedData = {};\n\n        this._cachedGeometryByteLength = 0;\n        this._cachedTexturesByteLength = 0;\n        this._geometryByteLength = 0;\n        this._texturesByteLength = 0;\n        this._trianglesLength = 0;\n\n        // Hold references for shader reconstruction.\n        // Hold these separately because _cachedGltf may get released (this.releaseGltfJson)\n        this._sourceTechniques = {};\n        this._sourcePrograms = {};\n        this._quantizedVertexShaders = {};\n\n        this._nodeCommands = [];\n        this._pickIds = [];\n\n        // CESIUM_RTC extension\n        this._rtcCenter = undefined;    // reference to either 3D or 2D\n        this._rtcCenterEye = undefined; // in eye coordinates\n        this._rtcCenter3D = undefined;  // in world coordinates\n        this._rtcCenter2D = undefined;  // in projected world coordinates\n\n        this._sourceVersion = undefined;\n        this._sourceKHRTechniquesWebGL = undefined;\n\n        this._imageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n        Cartesian2.clone(options.imageBasedLightingFactor, this._imageBasedLightingFactor);\n        this._lightColor = Cartesian3.clone(options.lightColor);\n\n        this._luminanceAtZenith = undefined;\n        this.luminanceAtZenith = defaultValue(options.luminanceAtZenith, 0.2);\n\n        this._sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n        this._specularEnvironmentMaps = options.specularEnvironmentMaps;\n        this._shouldUpdateSpecularMapAtlas = true;\n        this._specularEnvironmentMapAtlas = undefined;\n\n        this._useDefaultSphericalHarmonics = false;\n        this._useDefaultSpecularMaps = false;\n\n        this._shouldRegenerateShaders = false;\n    }\n\n    Object.defineProperties(Model.prototype, {\n        /**\n         * The object for the glTF JSON, including properties with default values omitted\n         * from the JSON provided to this model.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Object}\n         * @readonly\n         *\n         * @default undefined\n         */\n        gltf : {\n            get : function() {\n                return defined(this._cachedGltf) ? this._cachedGltf.gltf : undefined;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the glTF JSON is not stored with the model once the model is\n         * loaded (when {@link Model#ready} is <code>true</code>).  This saves memory when\n         * geometry, textures, and animations are embedded in the .gltf file.\n         * This is especially useful for cases like 3D buildings, where each .gltf model is unique\n         * and caching the glTF JSON is not effective.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         *\n         * @private\n         */\n        releaseGltfJson : {\n            get : function() {\n                return this._releaseGltfJson;\n            }\n        },\n\n        /**\n         * The key identifying this model in the model cache for glTF JSON, renderer resources, and animations.\n         * Caching saves memory and improves loading speed when several models with the same url are created.\n         * <p>\n         * This key is automatically generated when the model is created with {@link Model.fromGltf}.  If the model\n         * is created directly from glTF JSON using the {@link Model} constructor, this key can be manually\n         * provided; otherwise, the model will not be changed.\n         * </p>\n         *\n         * @memberof Model.prototype\n         *\n         * @type {String}\n         * @readonly\n         *\n         * @private\n         */\n        cacheKey : {\n            get : function() {\n                return this._cacheKey;\n            }\n        },\n\n        /**\n         * The base path that paths in the glTF JSON are relative to.  The base\n         * path is the same path as the path containing the .gltf file\n         * minus the .gltf file, when binary, image, and shader files are\n         * in the same directory as the .gltf.  When this is <code>''</code>,\n         * the app's base path is used.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {String}\n         * @readonly\n         *\n         * @default ''\n         */\n        basePath : {\n            get : function() {\n                return this._resource.url;\n            }\n        },\n\n        /**\n         * The model's bounding sphere in its local coordinate system.  This does not take into\n         * account glTF animations and skins nor does it take into account {@link Model#minimumPixelSize}.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         *\n         * @default undefined\n         *\n         * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n         *\n         * @example\n         * // Center in WGS84 coordinates\n         * var center = Cesium.Matrix4.multiplyByPoint(model.modelMatrix, model.boundingSphere.center, new Cesium.Cartesian3());\n         */\n        boundingSphere : {\n            get : function() {\n                \n\n                var modelMatrix = this.modelMatrix;\n                if ((this.heightReference !== HeightReference.NONE) && this._clampedModelMatrix) {\n                    modelMatrix = this._clampedModelMatrix;\n                }\n\n                var nonUniformScale = Matrix4.getScale(modelMatrix, boundingSphereCartesian3Scratch);\n                var scale = defined(this.maximumScale) ? Math.min(this.maximumScale, this.scale) : this.scale;\n                Cartesian3.multiplyByScalar(nonUniformScale, scale, nonUniformScale);\n\n                var scaledBoundingSphere = this._scaledBoundingSphere;\n                scaledBoundingSphere.center = Cartesian3.multiplyComponents(this._boundingSphere.center, nonUniformScale, scaledBoundingSphere.center);\n                scaledBoundingSphere.radius = Cartesian3.maximumComponent(nonUniformScale) * this._initialRadius;\n\n                if (defined(this._rtcCenter)) {\n                    Cartesian3.add(this._rtcCenter, scaledBoundingSphere.center, scaledBoundingSphere.center);\n                }\n\n                return scaledBoundingSphere;\n            }\n        },\n\n        /**\n         * When <code>true</code>, this model is ready to render, i.e., the external binary, image,\n         * and shader files were downloaded and the WebGL resources were created.  This is set to\n         * <code>true</code> right before {@link Model#readyPromise} is resolved.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n\n        /**\n         * Gets the promise that will be resolved when this model is ready to render, i.e., when the external binary, image,\n         * and shader files were downloaded and the WebGL resources were created.\n         * <p>\n         * This promise is resolved at the end of the frame before the first frame the model is rendered in.\n         * </p>\n         *\n         * @memberof Model.prototype\n         * @type {Promise.<Model>}\n         * @readonly\n         *\n         * @example\n         * // Play all animations at half-speed when the model is ready to render\n         * Cesium.when(model.readyPromise).then(function(model) {\n         *   model.activeAnimations.addAll({\n         *     multiplier : 0.5\n         *   });\n         * }).otherwise(function(error){\n         *   window.alert(error);\n         * });\n         *\n         * @see Model#ready\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        /**\n         * Determines if model WebGL resource creation will be spread out over several frames or\n         * block until completion once all glTF files are loaded.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        asynchronous : {\n            get : function() {\n                return this._asynchronous;\n            }\n        },\n\n        /**\n         * When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.  When <code>false</code>, GPU memory is saved.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        allowPicking : {\n            get : function() {\n                return this._allowPicking;\n            }\n        },\n\n        /**\n         * Determine if textures may continue to stream in after the model is loaded.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        incrementallyLoadTextures : {\n            get : function() {\n                return this._incrementallyLoadTextures;\n            }\n        },\n\n        /**\n         * Return the number of pending texture loads.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        pendingTextureLoads : {\n            get : function() {\n                return defined(this._loadResources) ? this._loadResources.pendingTextureLoads : 0;\n            }\n        },\n\n        /**\n         * Returns true if the model was transformed this frame\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        dirty : {\n            get : function() {\n                return this._dirty;\n            }\n        },\n\n        /**\n         * Gets or sets the condition specifying at what distance from the camera that this model will be displayed.\n         * @memberof Model.prototype\n         * @type {DistanceDisplayCondition}\n         * @default undefined\n         */\n        distanceDisplayCondition : {\n            get : function() {\n                return this._distanceDisplayCondition;\n            },\n            set : function(value) {\n                \n                this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n            }\n        },\n\n        extensionsUsed : {\n            get : function() {\n                if (!defined(this._extensionsUsed)) {\n                    this._extensionsUsed = ModelUtility.getUsedExtensions(this.gltf);\n                }\n                return this._extensionsUsed;\n            }\n        },\n\n        extensionsRequired : {\n            get : function() {\n                if (!defined(this._extensionsRequired)) {\n                    this._extensionsRequired = ModelUtility.getRequiredExtensions(this.gltf);\n                }\n                return this._extensionsRequired;\n            }\n        },\n\n        /**\n         * Gets the model's up-axis.\n         * By default models are y-up according to the glTF spec, however geo-referenced models will typically be z-up.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Number}\n         * @default Axis.Y\n         * @readonly\n         *\n         * @private\n         */\n        upAxis : {\n            get : function() {\n                return this._upAxis;\n            }\n        },\n\n        /**\n         * Gets the model's forward axis.\n         * By default, glTF 2.0 models are z-forward according to the glTF spec, however older\n         * glTF (1.0, 0.8) models used x-forward.  Note that only Axis.X and Axis.Z are supported.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Number}\n         * @default Axis.Z\n         * @readonly\n         *\n         * @private\n         */\n        forwardAxis : {\n            get : function() {\n                if (defined(this._forwardAxis)) {\n                    return this._forwardAxis;\n                }\n                return this._gltfForwardAxis;\n            }\n        },\n\n        /**\n         * Gets the model's triangle count.\n         *\n         * @private\n         */\n        trianglesLength : {\n            get : function() {\n                return this._trianglesLength;\n            }\n        },\n\n        /**\n         * Gets the model's geometry memory in bytes. This includes all vertex and index buffers.\n         *\n         * @private\n         */\n        geometryByteLength : {\n            get : function() {\n                return this._geometryByteLength;\n            }\n        },\n\n        /**\n         * Gets the model's texture memory in bytes.\n         *\n         * @private\n         */\n        texturesByteLength : {\n            get : function() {\n                return this._texturesByteLength;\n            }\n        },\n\n        /**\n         * Gets the model's cached geometry memory in bytes. This includes all vertex and index buffers.\n         *\n         * @private\n         */\n        cachedGeometryByteLength : {\n            get : function() {\n                return this._cachedGeometryByteLength;\n            }\n        },\n\n        /**\n         * Gets the model's cached texture memory in bytes.\n         *\n         * @private\n         */\n        cachedTexturesByteLength : {\n            get : function() {\n                return this._cachedTexturesByteLength;\n            }\n        },\n\n        /**\n         * The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {ClippingPlaneCollection}\n         */\n        clippingPlanes : {\n            get : function() {\n                return this._clippingPlanes;\n            },\n            set : function(value) {\n                if (value === this._clippingPlanes) {\n                    return;\n                }\n                // Handle destroying, checking of unknown, checking for existing ownership\n                ClippingPlaneCollection.setOwner(value, this, '_clippingPlanes');\n            }\n        },\n\n        /**\n         * @private\n         */\n        pickIds : {\n            get : function() {\n                return this._pickIds;\n            }\n        },\n\n        /**\n         * Cesium adds lighting from the earth, sky, atmosphere, and star skybox. This cartesian is used to scale the final\n         * diffuse and specular lighting contribution from those sources to the final color. A value of 0.0 will disable those light sources.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Cartesian2}\n         * @default Cartesian2(1.0, 1.0)\n         */\n        imageBasedLightingFactor : {\n            get : function() {\n                return this._imageBasedLightingFactor;\n            },\n            set : function(value) {\n                \n                var imageBasedLightingFactor = this._imageBasedLightingFactor;\n                if ((value === imageBasedLightingFactor) || Cartesian2.equals(value, imageBasedLightingFactor)) {\n                    return;\n                }\n                this._shouldRegenerateShaders = this._shouldRegenerateShaders || (this._imageBasedLightingFactor.x > 0.0 && value.x === 0.0) || (this._imageBasedLightingFactor.x === 0.0 && value.x > 0.0);\n                this._shouldRegenerateShaders = this._shouldRegenerateShaders || (this._imageBasedLightingFactor.y > 0.0 && value.y === 0.0) || (this._imageBasedLightingFactor.y === 0.0 && value.y > 0.0);\n                Cartesian2.clone(value, this._imageBasedLightingFactor);\n            }\n        },\n\n        /**\n         * The light color when shading the model. When <code>undefined</code> the scene's light color is used instead.\n         * <p>\n         * For example, disabling additional light sources by setting <code>model.imageBasedLightingFactor = new Cesium.Cartesian2(0.0, 0.0)</code> will make the\n         * model much darker. Here, increasing the intensity of the light source will make the model brighter.\n         * </p>\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Cartesian3}\n         * @default undefined\n         */\n        lightColor : {\n            get : function() {\n                return this._lightColor;\n            },\n            set : function(value) {\n                var lightColor = this._lightColor;\n                if (value === lightColor || Cartesian3.equals(value, lightColor)) {\n                    return;\n                }\n                this._shouldRegenerateShaders = this._shouldRegenerateShaders || (defined(lightColor) && !defined(value)) || (defined(value) && !defined(lightColor));\n                this._lightColor = Cartesian3.clone(value, lightColor);\n            }\n        },\n\n        /**\n         * The sun's luminance at the zenith in kilo candela per meter squared to use for this model's procedural environment map.\n         * This is used when {@link Model#specularEnvironmentMaps} and {@link Model#sphericalHarmonicCoefficients} are not defined.\n         *\n         * @memberof Model.prototype\n         *\n         * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n         * @type {Number}\n         * @default 0.2\n         */\n        luminanceAtZenith : {\n            get : function() {\n                return this._luminanceAtZenith;\n            },\n            set : function(value) {\n                var lum = this._luminanceAtZenith;\n                if (value === lum) {\n                    return;\n                }\n                this._shouldRegenerateShaders = this._shouldRegenerateShaders || (defined(lum) && !defined(value)) || (defined(value) && !defined(lum));\n                this._luminanceAtZenith = value;\n            }\n        },\n\n        /**\n         * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n         * computed from the atmosphere color is used.\n         * <p>\n         * There are nine <code>Cartesian3</code> coefficients.\n         * The order of the coefficients is: L<sub>00</sub>, L<sub>1-1</sub>, L<sub>10</sub>, L<sub>11</sub>, L<sub>2-2</sub>, L<sub>2-1</sub>, L<sub>20</sub>, L<sub>21</sub>, L<sub>22</sub>\n         * </p>\n         *\n         * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n         * {@link https://github.com/google/filament/releases|Google's Filament project}. This will also generate a KTX file that can be\n         * supplied to {@link Model#specularEnvironmentMaps}.\n         *\n         * @memberof Model.prototype\n         *\n         * @type {Cartesian3[]}\n         * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n         * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n         */\n        sphericalHarmonicCoefficients : {\n            get : function() {\n                return this._sphericalHarmonicCoefficients;\n            },\n            set : function(value) {\n                \n                if (value === this._sphericalHarmonicCoefficients) {\n                    return;\n                }\n                this._sphericalHarmonicCoefficients = value;\n                this._shouldRegenerateShaders = true;\n            }\n        },\n\n        /**\n         * A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n         *\n         * @memberof Model.prototype\n         * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n         * @type {String}\n         * @see Model#sphericalHarmonicCoefficients\n         */\n        specularEnvironmentMaps : {\n            get : function() {\n                return this._specularEnvironmentMaps;\n            },\n            set : function(value) {\n                this._shouldUpdateSpecularMapAtlas = this._shouldUpdateSpecularMapAtlas || value !== this._specularEnvironmentMaps;\n                this._specularEnvironmentMaps = value;\n            }\n        },\n        /**\n         * Gets the credit that will be displayed for the model\n         * @memberof Model.prototype\n         * @type {Credit}\n         */\n        credit : {\n            get : function() {\n                return this._credit;\n            }\n        }\n    });\n\n    function silhouetteSupported(context) {\n        return context.stencilBuffer;\n    }\n\n    function isColorShadingEnabled(model) {\n        return !Color.equals(model.color, Color.WHITE) || (model.colorBlendMode !== ColorBlendMode.HIGHLIGHT);\n    }\n\n    function isClippingEnabled(model) {\n        var clippingPlanes = model._clippingPlanes;\n        return defined(clippingPlanes) && clippingPlanes.enabled && clippingPlanes.length !== 0;\n    }\n\n    /**\n     * Determines if silhouettes are supported.\n     *\n     * @param {Scene} scene The scene.\n     * @returns {Boolean} <code>true</code> if silhouettes are supported; otherwise, returns <code>false</code>\n     */\n    Model.silhouetteSupported = function(scene) {\n        return silhouetteSupported(scene.context);\n    };\n\n    function containsGltfMagic(uint8Array) {\n        var magic = getMagic(uint8Array);\n        return magic === 'glTF';\n    }\n\n    /**\n     * <p>\n     * Creates a model from a glTF asset.  When the model is ready to render, i.e., when the external binary, image,\n     * and shader files are downloaded and the WebGL resources are created, the {@link Model#readyPromise} is resolved.\n     * </p>\n     * <p>\n     * The model can be a traditional glTF asset with a .gltf extension or a Binary glTF using the .glb extension.\n     * </p>\n     * <p>\n     * Cesium supports glTF assets with the following extensions:\n     * <ul>\n     * <li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/README.md|KHR_binary_glTF (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_materials_common/README.md|KHR_materials_common (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/WEB3D_quantized_attributes/README.md|WEB3D_quantized_attributes (glTF 1.0)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/AGI_articulations/README.md|AGI_articulations}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/pull/1302|KHR_blend (draft)}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md|KHR_draco_mesh_compression}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/README.md|KHR_materials_pbrSpecularGlossiness}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit/README.md|KHR_materials_unlit}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_techniques_webgl/README.md|KHR_techniques_webgl}\n     * </li><li>\n     * {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform/README.md|KHR_texture_transform}\n     * </li>\n     * </ul>\n     * </p>\n     * <p>\n     * For high-precision rendering, Cesium supports the {@link https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Vendor/CESIUM_RTC/README.md|CESIUM_RTC} extension, which introduces the\n     * CESIUM_RTC_MODELVIEW parameter semantic that says the node is in WGS84 coordinates translated\n     * relative to a local origin.\n     * </p>\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Resource|String} options.url The url to the .gltf file.\n     * @param {Resource|String} [options.basePath] The base path that paths in the glTF JSON are relative to.\n     * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n     * @param {Number} [options.scale=1.0] A uniform scale applied to this model.\n     * @param {Number} [options.minimumPixelSize=0.0] The approximate minimum pixel size of the model regardless of zoom.\n     * @param {Number} [options.maximumScale] The maximum scale for the model.\n     * @param {Object} [options.id] A user-defined object to return when the model is picked with {@link Scene#pick}.\n     * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each glTF mesh and primitive is pickable with {@link Scene#pick}.\n     * @param {Boolean} [options.incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n     * @param {Boolean} [options.asynchronous=true] Determines if model WebGL resource creation will be spread out over several frames or block until completion once all glTF files are loaded.\n     * @param {Boolean} [options.clampAnimations=true] Determines if the model's animations should hold a pose over frames where no keyframes are specified.\n     * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the model casts or receives shadows from light sources.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n     * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n     * @param {HeightReference} [options.heightReference=HeightReference.NONE] Determines how the model is drawn relative to terrain.\n     * @param {Scene} [options.scene] Must be passed in for models that use the height reference property.\n     * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this model will be displayed.\n     * @param {Color} [options.color=Color.WHITE] A color that blends with the model's rendered color.\n     * @param {ColorBlendMode} [options.colorBlendMode=ColorBlendMode.HIGHLIGHT] Defines how the color blends with the model.\n     * @param {Number} [options.colorBlendAmount=0.5] Value used to determine the color strength when the <code>colorBlendMode</code> is <code>MIX</code>. A value of 0.0 results in the model's rendered color while a value of 1.0 results in a solid color, with any value in-between resulting in a mix of the two.\n     * @param {Color} [options.silhouetteColor=Color.RED] The silhouette color. If more than 256 models have silhouettes enabled, there is a small chance that overlapping models will have minor artifacts.\n     * @param {Number} [options.silhouetteSize=0.0] The size of the silhouette in pixels.\n     * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the model.\n     * @param {Boolean} [options.dequantizeInShader=true] Determines if a {@link https://github.com/google/draco|Draco} encoded model is dequantized on the GPU. This decreases total memory usage for encoded models.\n     * @param {Credit|String} [options.credit] A credit for the model, which is displayed on the canvas.\n     *\n     * @returns {Model} The newly created model.\n     *\n     * @example\n     * // Example 1. Create a model from a glTF asset\n     * var model = scene.primitives.add(Cesium.Model.fromGltf({\n     *   url : './duck/duck.gltf'\n     * }));\n     *\n     * @example\n     * // Example 2. Create model and provide all properties and events\n     * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n     * var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n     *\n     * var model = scene.primitives.add(Cesium.Model.fromGltf({\n     *   url : './duck/duck.gltf',\n     *   show : true,                     // default\n     *   modelMatrix : modelMatrix,\n     *   scale : 2.0,                     // double size\n     *   minimumPixelSize : 128,          // never smaller than 128 pixels\n     *   maximumScale: 20000,             // never larger than 20000 * model size (overrides minimumPixelSize)\n     *   allowPicking : false,            // not pickable\n     *   debugShowBoundingVolume : false, // default\n     *   debugWireframe : false\n     * }));\n     *\n     * model.readyPromise.then(function(model) {\n     *   // Play all animations when the model is ready to render\n     *   model.activeAnimations.addAll();\n     * });\n     */\n    Model.fromGltf = function(options) {\n        \n\n        var url = options.url;\n        options = clone(options);\n\n        // Create resource for the model file\n        var modelResource = Resource.createIfNeeded(url);\n\n        // Setup basePath to get dependent files\n        var basePath = defaultValue(options.basePath, modelResource.clone());\n        var resource = Resource.createIfNeeded(basePath);\n\n        // If no cache key is provided, use a GUID.\n        // Check using a URI to GUID dictionary that we have not already added this model.\n        var cacheKey = defaultValue(options.cacheKey, uriToGuid[getAbsoluteUri(modelResource.url)]);\n        if (!defined(cacheKey)) {\n            cacheKey = createGuid();\n            uriToGuid[getAbsoluteUri(modelResource.url)] = cacheKey;\n        }\n\n        if (defined(options.basePath) && !defined(options.cacheKey)) {\n            cacheKey += resource.url;\n        }\n        options.cacheKey = cacheKey;\n        options.basePath = resource;\n\n        var model = new Model(options);\n\n        var cachedGltf = gltfCache[cacheKey];\n        if (!defined(cachedGltf)) {\n            cachedGltf = new CachedGltf({\n                ready : false\n            });\n            cachedGltf.count = 1;\n            cachedGltf.modelsToLoad.push(model);\n            setCachedGltf(model, cachedGltf);\n            gltfCache[cacheKey] = cachedGltf;\n\n            // Add Accept header if we need it\n            if (!defined(modelResource.headers.Accept)) {\n                modelResource.headers.Accept = defaultModelAccept;\n            }\n\n            modelResource.fetchArrayBuffer().then(function(arrayBuffer) {\n                var array = new Uint8Array(arrayBuffer);\n                if (containsGltfMagic(array)) {\n                    // Load binary glTF\n                    var parsedGltf = parseGlb(array);\n                    cachedGltf.makeReady(parsedGltf);\n                } else {\n                    // Load text (JSON) glTF\n                    var json = getStringFromTypedArray(array);\n                    cachedGltf.makeReady(JSON.parse(json));\n                }\n\n                var resourceCredits = model._resourceCredits;\n                var credits = modelResource.credits;\n                if (defined(credits)) {\n                    var length = credits.length;\n                    for (var i = 0; i < length; i++) {\n                        resourceCredits.push(credits[i]);\n                    }\n                }\n            }).otherwise(ModelUtility.getFailedLoadFunction(model, 'model', modelResource.url));\n        } else if (!cachedGltf.ready) {\n            // Cache hit but the fetchArrayBuffer() or fetchText() request is still pending\n            ++cachedGltf.count;\n            cachedGltf.modelsToLoad.push(model);\n        }\n        // else if the cached glTF is defined and ready, the\n        // model constructor will pick it up using the cache key.\n\n        return model;\n    };\n\n    /**\n     * For the unit tests to verify model caching.\n     *\n     * @private\n     */\n    Model._gltfCache = gltfCache;\n\n    function getRuntime(model, runtimeName, name) {\n        \n\n        return (model._runtime[runtimeName])[name];\n    }\n\n    /**\n     * Returns the glTF node with the given <code>name</code> property.  This is used to\n     * modify a node's transform for animation outside of glTF animations.\n     *\n     * @param {String} name The glTF name of the node.\n     * @returns {ModelNode} The node or <code>undefined</code> if no node with <code>name</code> exists.\n     *\n     * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n     *\n     * @example\n     * // Apply non-uniform scale to node LOD3sp\n     * var node = model.getNode('LOD3sp');\n     * node.matrix = Cesium.Matrix4.fromScale(new Cesium.Cartesian3(5.0, 1.0, 1.0), node.matrix);\n     */\n    Model.prototype.getNode = function(name) {\n        var node = getRuntime(this, 'nodesByName', name);\n        return defined(node) ? node.publicNode : undefined;\n    };\n\n    /**\n     * Returns the glTF mesh with the given <code>name</code> property.\n     *\n     * @param {String} name The glTF name of the mesh.\n     *\n     * @returns {ModelMesh} The mesh or <code>undefined</code> if no mesh with <code>name</code> exists.\n     *\n     * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n     */\n    Model.prototype.getMesh = function(name) {\n        return getRuntime(this, 'meshesByName', name);\n    };\n\n    /**\n     * Returns the glTF material with the given <code>name</code> property.\n     *\n     * @param {String} name The glTF name of the material.\n     * @returns {ModelMaterial} The material or <code>undefined</code> if no material with <code>name</code> exists.\n     *\n     * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n     */\n    Model.prototype.getMaterial = function(name) {\n        return getRuntime(this, 'materialsByName', name);\n    };\n\n    /**\n     * Sets the current value of an articulation stage.  After setting one or multiple stage values, call\n     * Model.applyArticulations() to cause the node matrices to be recalculated.\n     *\n     * @param {String} articulationStageKey The name of the articulation, a space, and the name of the stage.\n     * @param {Number} value The numeric value of this stage of the articulation.\n     *\n     * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n     *\n     * @see Model#applyArticulations\n     */\n    Model.prototype.setArticulationStage = function(articulationStageKey, value) {\n        \n\n        var stage = getRuntime(this, 'stagesByKey', articulationStageKey);\n        var articulation = getRuntime(this, 'articulationsByStageKey', articulationStageKey);\n        if (defined(stage) && defined(articulation)) {\n            value = CesiumMath.clamp(value, stage.minimumValue, stage.maximumValue);\n            if (!CesiumMath.equalsEpsilon(stage.currentValue, value, articulationEpsilon)) {\n                stage.currentValue = value;\n                articulation.isDirty = true;\n            }\n        }\n    };\n\n    var scratchArticulationCartesian = new Cartesian3();\n    var scratchArticulationRotation = new Matrix3();\n\n    /**\n     * Modifies a Matrix4 by applying a transformation for a given value of a stage.  Note this is different usage\n     * from the typical <code>result</code> parameter, in that the incoming value of <code>result</code> is\n     * meaningful.  Various stages of an articulation can be multiplied together, so their\n     * transformations are all merged into a composite Matrix4 representing them all.\n     *\n     * @param {object} stage The stage of an articulation that is being evaluated.\n     * @param {Matrix4} result The matrix to be modified.\n     * @returns {Matrix4} A matrix transformed as requested by the articulation stage.\n     *\n     * @private\n     */\n    function applyArticulationStageMatrix(stage, result) {\n        \n\n        var value = stage.currentValue;\n        var cartesian = scratchArticulationCartesian;\n        var rotation;\n        switch (stage.type) {\n            case 'xRotate':\n                rotation = Matrix3.fromRotationX(CesiumMath.toRadians(value), scratchArticulationRotation);\n                Matrix4.multiplyByMatrix3(result, rotation, result);\n                break;\n            case 'yRotate':\n                rotation = Matrix3.fromRotationY(CesiumMath.toRadians(value), scratchArticulationRotation);\n                Matrix4.multiplyByMatrix3(result, rotation, result);\n                break;\n            case 'zRotate':\n                rotation = Matrix3.fromRotationZ(CesiumMath.toRadians(value), scratchArticulationRotation);\n                Matrix4.multiplyByMatrix3(result, rotation, result);\n                break;\n            case 'xTranslate':\n                cartesian.x = value;\n                cartesian.y = 0.0;\n                cartesian.z = 0.0;\n                Matrix4.multiplyByTranslation(result, cartesian, result);\n                break;\n            case 'yTranslate':\n                cartesian.x = 0.0;\n                cartesian.y = value;\n                cartesian.z = 0.0;\n                Matrix4.multiplyByTranslation(result, cartesian, result);\n                break;\n            case 'zTranslate':\n                cartesian.x = 0.0;\n                cartesian.y = 0.0;\n                cartesian.z = value;\n                Matrix4.multiplyByTranslation(result, cartesian, result);\n                break;\n            case 'xScale':\n                cartesian.x = value;\n                cartesian.y = 1.0;\n                cartesian.z = 1.0;\n                Matrix4.multiplyByScale(result, cartesian, result);\n                break;\n            case 'yScale':\n                cartesian.x = 1.0;\n                cartesian.y = value;\n                cartesian.z = 1.0;\n                Matrix4.multiplyByScale(result, cartesian, result);\n                break;\n            case 'zScale':\n                cartesian.x = 1.0;\n                cartesian.y = 1.0;\n                cartesian.z = value;\n                Matrix4.multiplyByScale(result, cartesian, result);\n                break;\n            case 'uniformScale':\n                Matrix4.multiplyByUniformScale(result, value, result);\n                break;\n            default:\n                break;\n        }\n        return result;\n    }\n\n    var scratchApplyArticulationTransform = new Matrix4();\n\n    /**\n     * Applies any modified articulation stages to the matrix of each node that participates\n     * in any articulation.  Note that this will overwrite any nodeTransformations on participating nodes.\n     *\n     * @exception {DeveloperError} The model is not loaded.  Use Model.readyPromise or wait for Model.ready to be true.\n     */\n    Model.prototype.applyArticulations = function() {\n        var articulationsByName = this._runtime.articulationsByName;\n        for (var articulationName in articulationsByName) {\n            if (articulationsByName.hasOwnProperty(articulationName)) {\n                var articulation = articulationsByName[articulationName];\n                if (articulation.isDirty) {\n                    articulation.isDirty = false;\n                    var numNodes = articulation.nodes.length;\n                    for (var n = 0; n < numNodes; ++n) {\n                        var node = articulation.nodes[n];\n                        var transform = Matrix4.clone(node.originalMatrix, scratchApplyArticulationTransform);\n\n                        var numStages = articulation.stages.length;\n                        for (var s = 0; s < numStages; ++s) {\n                            var stage = articulation.stages[s];\n                            transform = applyArticulationStageMatrix(stage, transform);\n                        }\n                        node.matrix = transform;\n                    }\n                }\n            }\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function addBuffersToLoadResources(model) {\n        var gltf = model.gltf;\n        var loadResources = model._loadResources;\n        ForEach.buffer(gltf, function(buffer, id) {\n            loadResources.buffers[id] = buffer.extras._pipeline.source;\n        });\n    }\n\n    function bufferLoad(model, id) {\n        return function(arrayBuffer) {\n            var loadResources = model._loadResources;\n            var buffer = new Uint8Array(arrayBuffer);\n            --loadResources.pendingBufferLoads;\n            model.gltf.buffers[id].extras._pipeline.source = buffer;\n        };\n    }\n\n    function parseBufferViews(model) {\n        var bufferViews = model.gltf.bufferViews;\n        var vertexBuffersToCreate = model._loadResources.vertexBuffersToCreate;\n\n        // Only ARRAY_BUFFER here.  ELEMENT_ARRAY_BUFFER created below.\n        ForEach.bufferView(model.gltf, function(bufferView, id) {\n            if (bufferView.target === WebGLConstants.ARRAY_BUFFER) {\n                vertexBuffersToCreate.enqueue(id);\n            }\n        });\n\n        var indexBuffersToCreate = model._loadResources.indexBuffersToCreate;\n        var indexBufferIds = {};\n\n        // The Cesium Renderer requires knowing the datatype for an index buffer\n        // at creation type, which is not part of the glTF bufferview so loop\n        // through glTF accessors to create the bufferview's index buffer.\n        ForEach.accessor(model.gltf, function(accessor) {\n            var bufferViewId = accessor.bufferView;\n            if (!defined(bufferViewId)) {\n                return;\n            }\n\n            var bufferView = bufferViews[bufferViewId];\n            if ((bufferView.target === WebGLConstants.ELEMENT_ARRAY_BUFFER) && !defined(indexBufferIds[bufferViewId])) {\n                indexBufferIds[bufferViewId] = true;\n                indexBuffersToCreate.enqueue({\n                    id : bufferViewId,\n                    componentType : accessor.componentType\n                });\n            }\n        });\n    }\n\n    function parseTechniques(model) {\n        // retain references to gltf techniques\n        var gltf = model.gltf;\n        if (!hasExtension(gltf, 'KHR_techniques_webgl')) {\n            return;\n        }\n\n        var sourcePrograms = model._sourcePrograms;\n        var sourceTechniques = model._sourceTechniques;\n        var programs = gltf.extensions.KHR_techniques_webgl.programs;\n\n        ForEach.technique(gltf, function(technique, techniqueId) {\n            sourceTechniques[techniqueId] = clone(technique);\n\n            var programId = technique.program;\n            if (!defined(sourcePrograms[programId])) {\n                sourcePrograms[programId] = clone(programs[programId]);\n            }\n        });\n    }\n\n    function shaderLoad(model, type, id) {\n        return function(source) {\n            var loadResources = model._loadResources;\n            loadResources.shaders[id] = {\n                source : source,\n                type : type,\n                bufferView : undefined\n            };\n            --loadResources.pendingShaderLoads;\n            model._rendererResources.sourceShaders[id] = source;\n        };\n    }\n\n    function parseShaders(model) {\n        var gltf = model.gltf;\n        var buffers = gltf.buffers;\n        var bufferViews = gltf.bufferViews;\n        var sourceShaders = model._rendererResources.sourceShaders;\n        ForEach.shader(gltf, function(shader, id) {\n            // Shader references either uri (external or base64-encoded) or bufferView\n            if (defined(shader.bufferView)) {\n                var bufferViewId = shader.bufferView;\n                var bufferView = bufferViews[bufferViewId];\n                var bufferId = bufferView.buffer;\n                var buffer = buffers[bufferId];\n                var source = getStringFromTypedArray(buffer.extras._pipeline.source, bufferView.byteOffset, bufferView.byteLength);\n                sourceShaders[id] = source;\n            } else if (defined(shader.extras._pipeline.source)) {\n                sourceShaders[id] = shader.extras._pipeline.source;\n            } else {\n                ++model._loadResources.pendingShaderLoads;\n\n                var shaderResource = model._resource.getDerivedResource({\n                    url: shader.uri\n                });\n\n                shaderResource.fetchText()\n                    .then(shaderLoad(model, shader.type, id))\n                    .otherwise(ModelUtility.getFailedLoadFunction(model, 'shader', shaderResource.url));\n            }\n        });\n    }\n\n    function parsePrograms(model) {\n        var sourceTechniques = model._sourceTechniques;\n        for (var techniqueId in sourceTechniques) {\n            if (sourceTechniques.hasOwnProperty(techniqueId)) {\n                var technique = sourceTechniques[techniqueId];\n                model._loadResources.programsToCreate.enqueue({\n                    programId: technique.program,\n                    techniqueId: techniqueId\n                });\n            }\n        }\n    }\n\n    function parseArticulations(model) {\n        var articulationsByName = {};\n        var articulationsByStageKey = {};\n        var runtimeStagesByKey = {};\n\n        model._runtime.articulationsByName = articulationsByName;\n        model._runtime.articulationsByStageKey = articulationsByStageKey;\n        model._runtime.stagesByKey = runtimeStagesByKey;\n\n        var gltf = model.gltf;\n        if (!hasExtension(gltf, 'AGI_articulations') || !defined(gltf.extensions) || !defined(gltf.extensions.AGI_articulations)) {\n            return;\n        }\n\n        var gltfArticulations = gltf.extensions.AGI_articulations.articulations;\n        if (!defined(gltfArticulations)) {\n            return;\n        }\n\n        var numArticulations = gltfArticulations.length;\n        for (var i = 0; i < numArticulations; ++i) {\n            var articulation = clone(gltfArticulations[i]);\n            articulation.nodes = [];\n            articulation.isDirty = true;\n            articulationsByName[articulation.name] = articulation;\n\n            var numStages = articulation.stages.length;\n            for (var s = 0; s < numStages; ++s) {\n                var stage = articulation.stages[s];\n                stage.currentValue = stage.initialValue;\n\n                var stageKey = articulation.name + ' ' + stage.name;\n                articulationsByStageKey[stageKey] = articulation;\n                runtimeStagesByKey[stageKey] = stage;\n            }\n        }\n    }\n\n    function imageLoad(model, textureId) {\n        return function(image) {\n            var loadResources = model._loadResources;\n            --loadResources.pendingTextureLoads;\n            loadResources.texturesToCreate.enqueue({\n                id : textureId,\n                image : image,\n                bufferView : image.bufferView,\n                width : image.width,\n                height : image.height,\n                internalFormat : image.internalFormat\n            });\n        };\n    }\n\n    var ktxRegex = /(^data:image\\/ktx)|(\\.ktx$)/i;\n    var crnRegex = /(^data:image\\/crn)|(\\.crn$)/i;\n\n    function parseTextures(model, context, supportsWebP) {\n        var gltf = model.gltf;\n        var images = gltf.images;\n        var uri;\n        ForEach.texture(gltf, function(texture, id) {\n            var imageId = texture.source;\n\n            if (defined(texture.extensions) && defined(texture.extensions.EXT_texture_webp) && supportsWebP) {\n                imageId = texture.extensions.EXT_texture_webp.source;\n            }\n\n            var gltfImage = images[imageId];\n            var extras = gltfImage.extras;\n\n            var bufferViewId = gltfImage.bufferView;\n            var mimeType = gltfImage.mimeType;\n            uri = gltfImage.uri;\n\n            // First check for a compressed texture\n            if (defined(extras) && defined(extras.compressedImage3DTiles)) {\n                var crunch = extras.compressedImage3DTiles.crunch;\n                var s3tc = extras.compressedImage3DTiles.s3tc;\n                var pvrtc = extras.compressedImage3DTiles.pvrtc1;\n                var etc1 = extras.compressedImage3DTiles.etc1;\n\n                if (context.s3tc && defined(crunch)) {\n                    mimeType = crunch.mimeType;\n                    if (defined(crunch.bufferView)) {\n                        bufferViewId = crunch.bufferView;\n                    } else {\n                        uri = crunch.uri;\n                    }\n                } else if (context.s3tc && defined(s3tc)) {\n                    mimeType = s3tc.mimeType;\n                    if (defined(s3tc.bufferView)) {\n                        bufferViewId = s3tc.bufferView;\n                    } else {\n                        uri = s3tc.uri;\n                    }\n                } else if (context.pvrtc && defined(pvrtc)) {\n                    mimeType = pvrtc.mimeType;\n                    if (defined(pvrtc.bufferView)) {\n                        bufferViewId = pvrtc.bufferView;\n                    } else {\n                        uri = pvrtc.uri;\n                    }\n                } else if (context.etc1 && defined(etc1)) {\n                    mimeType = etc1.mimeType;\n                    if (defined(etc1.bufferView)) {\n                        bufferViewId = etc1.bufferView;\n                    } else {\n                        uri = etc1.uri;\n                    }\n                }\n            }\n\n            // Image references either uri (external or base64-encoded) or bufferView\n            if (defined(bufferViewId)) {\n                model._loadResources.texturesToCreateFromBufferView.enqueue({\n                    id : id,\n                    image : undefined,\n                    bufferView : bufferViewId,\n                    mimeType : mimeType\n                });\n            } else {\n                ++model._loadResources.pendingTextureLoads;\n\n                var imageResource = model._resource.getDerivedResource({\n                    url : uri\n                });\n\n                var promise;\n                if (ktxRegex.test(uri)) {\n                    promise = loadKTX(imageResource);\n                } else if (crnRegex.test(uri)) {\n                    promise = loadCRN(imageResource);\n                } else {\n                    promise = imageResource.fetchImage();\n                }\n                promise.then(imageLoad(model, id, imageId)).otherwise(ModelUtility.getFailedLoadFunction(model, 'image', imageResource.url));\n            }\n        });\n    }\n\n    var scratchArticulationStageInitialTransform = new Matrix4();\n\n    function parseNodes(model) {\n        var runtimeNodes = {};\n        var runtimeNodesByName = {};\n        var skinnedNodes = [];\n\n        var skinnedNodesIds = model._loadResources.skinnedNodesIds;\n        var articulationsByName = model._runtime.articulationsByName;\n\n        ForEach.node(model.gltf, function(node, id) {\n            var runtimeNode = {\n                // Animation targets\n                matrix : undefined,\n                translation : undefined,\n                rotation : undefined,\n                scale : undefined,\n\n                // Per-node show inherited from parent\n                computedShow : true,\n\n                // Computed transforms\n                transformToRoot : new Matrix4(),\n                computedMatrix : new Matrix4(),\n                dirtyNumber : 0,                    // The frame this node was made dirty by an animation; for graph traversal\n\n                // Rendering\n                commands : [],                      // empty for transform, light, and camera nodes\n\n                // Skinned node\n                inverseBindMatrices : undefined,    // undefined when node is not skinned\n                bindShapeMatrix : undefined,        // undefined when node is not skinned or identity\n                joints : [],                        // empty when node is not skinned\n                computedJointMatrices : [],         // empty when node is not skinned\n\n                // Joint node\n                jointName : node.jointName,         // undefined when node is not a joint\n\n                weights : [],\n\n                // Graph pointers\n                children : [],                      // empty for leaf nodes\n                parents : [],                       // empty for root nodes\n\n                // Publicly-accessible ModelNode instance to modify animation targets\n                publicNode : undefined\n            };\n            runtimeNode.publicNode = new ModelNode(model, node, runtimeNode, id, ModelUtility.getTransform(node));\n\n            runtimeNodes[id] = runtimeNode;\n            runtimeNodesByName[node.name] = runtimeNode;\n\n            if (defined(node.skin)) {\n                skinnedNodesIds.push(id);\n                skinnedNodes.push(runtimeNode);\n            }\n\n            if (defined(node.extensions) && defined(node.extensions.AGI_articulations)) {\n                var articulationName = node.extensions.AGI_articulations.articulationName;\n                if (defined(articulationName)) {\n                    var transform = Matrix4.clone(runtimeNode.publicNode.originalMatrix, scratchArticulationStageInitialTransform);\n                    var articulation = articulationsByName[articulationName];\n                    articulation.nodes.push(runtimeNode.publicNode);\n\n                    var numStages = articulation.stages.length;\n                    for (var s = 0; s < numStages; ++s) {\n                        var stage = articulation.stages[s];\n                        transform = applyArticulationStageMatrix(stage, transform);\n                    }\n                    runtimeNode.publicNode.matrix = transform;\n                }\n            }\n        });\n\n        model._runtime.nodes = runtimeNodes;\n        model._runtime.nodesByName = runtimeNodesByName;\n        model._runtime.skinnedNodes = skinnedNodes;\n    }\n\n    function parseMaterials(model) {\n        var gltf = model.gltf;\n        var techniques = model._sourceTechniques;\n\n        var runtimeMaterialsByName = {};\n        var runtimeMaterialsById = {};\n        var uniformMaps = model._uniformMaps;\n\n        ForEach.material(gltf, function(material, materialId) {\n            // Allocated now so ModelMaterial can keep a reference to it.\n            uniformMaps[materialId] = {\n                uniformMap : undefined,\n                values : undefined,\n                jointMatrixUniformName : undefined,\n                morphWeightsUniformName : undefined\n            };\n\n            var modelMaterial = new ModelMaterial(model, material, materialId);\n\n            if (defined(material.extensions) && defined(material.extensions.KHR_techniques_webgl)) {\n                var techniqueId = material.extensions.KHR_techniques_webgl.technique;\n                modelMaterial._technique = techniqueId;\n                modelMaterial._program = techniques[techniqueId].program;\n\n                ForEach.materialValue(material, function(value, uniformName) {\n                    if (!defined(modelMaterial._values)) {\n                        modelMaterial._values = {};\n                    }\n\n                    modelMaterial._values[uniformName] = clone(value);\n                });\n            }\n\n            runtimeMaterialsByName[material.name] = modelMaterial;\n            runtimeMaterialsById[materialId] = modelMaterial;\n        });\n\n        model._runtime.materialsByName = runtimeMaterialsByName;\n        model._runtime.materialsById = runtimeMaterialsById;\n    }\n\n    function parseMeshes(model) {\n        var runtimeMeshesByName = {};\n        var runtimeMaterialsById = model._runtime.materialsById;\n\n        ForEach.mesh(model.gltf, function(mesh, meshId) {\n            runtimeMeshesByName[mesh.name] = new ModelMesh(mesh, runtimeMaterialsById, meshId);\n            if (defined(model.extensionsUsed.WEB3D_quantized_attributes) || model._dequantizeInShader) {\n                // Cache primitives according to their program\n                ForEach.meshPrimitive(mesh, function(primitive, primitiveId) {\n                    var programId = getProgramForPrimitive(model, primitive);\n                    var programPrimitives = model._programPrimitives[programId];\n                    if (!defined(programPrimitives)) {\n                        programPrimitives = {};\n                        model._programPrimitives[programId] = programPrimitives;\n                    }\n                    programPrimitives[meshId + '.primitive.' + primitiveId] = primitive;\n                });\n            }\n        });\n\n        model._runtime.meshesByName = runtimeMeshesByName;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var CreateVertexBufferJob = function() {\n        this.id = undefined;\n        this.model = undefined;\n        this.context = undefined;\n    };\n\n    CreateVertexBufferJob.prototype.set = function(id, model, context) {\n        this.id = id;\n        this.model = model;\n        this.context = context;\n    };\n\n    CreateVertexBufferJob.prototype.execute = function() {\n        createVertexBuffer(this.id, this.model, this.context);\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function createVertexBuffer(bufferViewId, model, context) {\n        var loadResources = model._loadResources;\n        var bufferViews = model.gltf.bufferViews;\n        var bufferView = bufferViews[bufferViewId];\n\n        // Use bufferView created at runtime\n        if (!defined(bufferView)) {\n            bufferView = loadResources.createdBufferViews[bufferViewId];\n        }\n\n        var vertexBuffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : loadResources.getBuffer(bufferView),\n            usage : BufferUsage.STATIC_DRAW\n        });\n        vertexBuffer.vertexArrayDestroyable = false;\n        model._rendererResources.buffers[bufferViewId] = vertexBuffer;\n        model._geometryByteLength += vertexBuffer.sizeInBytes;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var CreateIndexBufferJob = function() {\n        this.id = undefined;\n        this.componentType = undefined;\n        this.model = undefined;\n        this.context = undefined;\n    };\n\n    CreateIndexBufferJob.prototype.set = function(id, componentType, model, context) {\n        this.id = id;\n        this.componentType = componentType;\n        this.model = model;\n        this.context = context;\n    };\n\n    CreateIndexBufferJob.prototype.execute = function() {\n        createIndexBuffer(this.id, this.componentType, this.model, this.context);\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function createIndexBuffer(bufferViewId, componentType, model, context) {\n        var loadResources = model._loadResources;\n        var bufferViews = model.gltf.bufferViews;\n        var bufferView = bufferViews[bufferViewId];\n\n        // Use bufferView created at runtime\n        if (!defined(bufferView)) {\n            bufferView = loadResources.createdBufferViews[bufferViewId];\n        }\n\n        var indexBuffer = Buffer.createIndexBuffer({\n            context : context,\n            typedArray : loadResources.getBuffer(bufferView),\n            usage : BufferUsage.STATIC_DRAW,\n            indexDatatype : componentType\n        });\n        indexBuffer.vertexArrayDestroyable = false;\n        model._rendererResources.buffers[bufferViewId] = indexBuffer;\n        model._geometryByteLength += indexBuffer.sizeInBytes;\n    }\n\n    var scratchVertexBufferJob = new CreateVertexBufferJob();\n    var scratchIndexBufferJob = new CreateIndexBufferJob();\n\n    function createBuffers(model, frameState) {\n        var loadResources = model._loadResources;\n\n        if (loadResources.pendingBufferLoads !== 0) {\n            return;\n        }\n\n        var context = frameState.context;\n        var vertexBuffersToCreate = loadResources.vertexBuffersToCreate;\n        var indexBuffersToCreate = loadResources.indexBuffersToCreate;\n        var i;\n\n        if (model.asynchronous) {\n            while (vertexBuffersToCreate.length > 0) {\n                scratchVertexBufferJob.set(vertexBuffersToCreate.peek(), model, context);\n                if (!frameState.jobScheduler.execute(scratchVertexBufferJob, JobType.BUFFER)) {\n                    break;\n                }\n                vertexBuffersToCreate.dequeue();\n            }\n\n            while (indexBuffersToCreate.length > 0) {\n                i = indexBuffersToCreate.peek();\n                scratchIndexBufferJob.set(i.id, i.componentType, model, context);\n                if (!frameState.jobScheduler.execute(scratchIndexBufferJob, JobType.BUFFER)) {\n                    break;\n                }\n                indexBuffersToCreate.dequeue();\n            }\n        } else {\n            while (vertexBuffersToCreate.length > 0) {\n                createVertexBuffer(vertexBuffersToCreate.dequeue(), model, context);\n            }\n\n            while (indexBuffersToCreate.length > 0) {\n                i = indexBuffersToCreate.dequeue();\n                createIndexBuffer(i.id, i.componentType, model, context);\n            }\n        }\n    }\n\n    function getProgramForPrimitive(model, primitive) {\n        var material = model._runtime.materialsById[primitive.material];\n        if (!defined(material)) {\n            return;\n        }\n\n        return material._program;\n    }\n\n    function modifyShaderForQuantizedAttributes(shader, programName, model) {\n        var primitive;\n        var primitives = model._programPrimitives[programName];\n\n        // If no primitives were cached for this program, there's no need to modify the shader\n        if (!defined(primitives)) {\n            return shader;\n        }\n\n        var primitiveId;\n        for (primitiveId in primitives) {\n            if (primitives.hasOwnProperty(primitiveId)) {\n                primitive = primitives[primitiveId];\n                if (getProgramForPrimitive(model, primitive) === programName) {\n                    break;\n                }\n            }\n        }\n\n        // This is not needed after the program is processed, free the memory\n        model._programPrimitives[programName] = undefined;\n\n        var result;\n        if (model.extensionsUsed.WEB3D_quantized_attributes) {\n            result = ModelUtility.modifyShaderForQuantizedAttributes(model.gltf, primitive, shader);\n            model._quantizedUniforms[programName] = result.uniforms;\n        } else {\n            var decodedData = model._decodedData[primitiveId];\n            if (defined(decodedData)) {\n                result = ModelUtility.modifyShaderForDracoQuantizedAttributes(model.gltf, primitive, shader, decodedData.attributes);\n            } else {\n                return shader;\n            }\n        }\n\n        return result.shader;\n    }\n\n    function modifyShaderForColor(shader) {\n        shader = ShaderSource.replaceMain(shader, 'gltf_blend_main');\n        shader +=\n            'uniform vec4 gltf_color; \\n' +\n            'uniform float gltf_colorBlend; \\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    gltf_blend_main(); \\n' +\n            '    gl_FragColor.rgb = mix(gl_FragColor.rgb, gltf_color.rgb, gltf_colorBlend); \\n' +\n            '    float highlight = ceil(gltf_colorBlend); \\n' +\n            '    gl_FragColor.rgb *= mix(gltf_color.rgb, vec3(1.0), highlight); \\n' +\n            '    gl_FragColor.a *= gltf_color.a; \\n' +\n            '} \\n';\n\n        return shader;\n    }\n\n    function modifyShader(shader, programName, callback) {\n        if (defined(callback)) {\n            shader = callback(shader, programName);\n        }\n        return shader;\n    }\n\n    var CreateProgramJob = function() {\n        this.programToCreate = undefined;\n        this.model = undefined;\n        this.context = undefined;\n    };\n\n    CreateProgramJob.prototype.set = function(programToCreate, model, context) {\n        this.programToCreate = programToCreate;\n        this.model = model;\n        this.context = context;\n    };\n\n    CreateProgramJob.prototype.execute = function() {\n        createProgram(this.programToCreate, this.model, this.context);\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    // When building programs for the first time, do not include modifiers for clipping planes and color\n    // since this is the version of the program that will be cached for use with other Models.\n    function createProgram(programToCreate, model, context) {\n        var programId = programToCreate.programId;\n        var techniqueId = programToCreate.techniqueId;\n        var program = model._sourcePrograms[programId];\n        var shaders = model._rendererResources.sourceShaders;\n\n        var vs = shaders[program.vertexShader];\n        var fs = shaders[program.fragmentShader];\n        var isOutline = program.isOutline;\n\n        var quantizedVertexShaders = model._quantizedVertexShaders;\n        var toClipCoordinatesGLSL = model._toClipCoordinatesGLSL[programId];\n\n        if (model.extensionsUsed.WEB3D_quantized_attributes || model._dequantizeInShader) {\n            var quantizedVS = quantizedVertexShaders[programId];\n            if (!defined(quantizedVS)) {\n                quantizedVS = modifyShaderForQuantizedAttributes(vs, programId, model);\n                quantizedVertexShaders[programId] = quantizedVS;\n            }\n            vs = quantizedVS;\n        }\n\n        var drawVS = modifyShader(vs, programId, model._vertexShaderLoaded);\n        var drawFS = modifyShader(fs, programId, model._fragmentShaderLoaded);\n\n        // Internet Explorer seems to have problems with discard (for clipping planes) after too many levels of indirection:\n        // https://github.com/CesiumGS/cesium/issues/6575.\n        // For IE log depth code is defined out anyway due to unsupported WebGL extensions, so the wrappers can be omitted.\n        if (!FeatureDetection.isInternetExplorer()) {\n            drawVS = ModelUtility.modifyVertexShaderForLogDepth(drawVS, toClipCoordinatesGLSL);\n            drawFS = ModelUtility.modifyFragmentShaderForLogDepth(drawFS);\n\n            if (isOutline) {\n                drawFS = drawFS.replace('czm_writeLogDepth();',\n                    '    czm_writeLogDepth();\\n' +\n                    '#if defined(LOG_DEPTH) && !defined(DISABLE_LOG_DEPTH_FRAGMENT_WRITE)\\n' +\n                    '    gl_FragDepthEXT -= 5e-5;\\n' +\n                    '#endif');\n            }\n        }\n\n        if (!defined(model._uniformMapLoaded)) {\n            drawFS = 'uniform vec4 czm_pickColor;\\n' + drawFS;\n        }\n\n        var useIBL = model._imageBasedLightingFactor.x > 0.0 || model._imageBasedLightingFactor.y > 0.0;\n        if (useIBL) {\n            drawFS = '#define USE_IBL_LIGHTING \\n\\n' + drawFS;\n        }\n\n        if (defined(model._lightColor)) {\n            drawFS = '#define USE_CUSTOM_LIGHT_COLOR \\n\\n' + drawFS;\n        }\n\n        if (model._sourceVersion !== '2.0' || model._sourceKHRTechniquesWebGL) {\n            drawFS = ShaderSource.replaceMain(drawFS, 'non_gamma_corrected_main');\n            drawFS =\n                drawFS +\n                '\\n' +\n                'void main() { \\n' +\n                '    non_gamma_corrected_main(); \\n' +\n                '    gl_FragColor = czm_gammaCorrect(gl_FragColor); \\n' +\n                '} \\n';\n        }\n\n        if (OctahedralProjectedCubeMap.isSupported(context)) {\n            var usesSH = defined(model._sphericalHarmonicCoefficients) || model._useDefaultSphericalHarmonics;\n            var usesSM = (defined(model._specularEnvironmentMapAtlas) && model._specularEnvironmentMapAtlas.ready) || model._useDefaultSpecularMaps;\n            var addMatrix = usesSH || usesSM || useIBL;\n            if (addMatrix) {\n                drawFS = 'uniform mat4 gltf_clippingPlanesMatrix; \\n' + drawFS;\n            }\n\n            if (defined(model._sphericalHarmonicCoefficients)) {\n                drawFS = '#define DIFFUSE_IBL \\n' + '#define CUSTOM_SPHERICAL_HARMONICS \\n' + 'uniform vec3 gltf_sphericalHarmonicCoefficients[9]; \\n' + drawFS;\n            } else if (model._useDefaultSphericalHarmonics) {\n                drawFS = '#define DIFFUSE_IBL \\n' + drawFS;\n            }\n\n            if (defined(model._specularEnvironmentMapAtlas) && model._specularEnvironmentMapAtlas.ready) {\n                drawFS = '#define SPECULAR_IBL \\n' + '#define CUSTOM_SPECULAR_IBL \\n' + 'uniform sampler2D gltf_specularMap; \\n' + 'uniform vec2 gltf_specularMapSize; \\n' + 'uniform float gltf_maxSpecularLOD; \\n' + drawFS;\n            } else if (model._useDefaultSpecularMaps) {\n                drawFS = '#define SPECULAR_IBL \\n' + drawFS;\n            }\n        }\n\n        if (defined(model._luminanceAtZenith)) {\n            drawFS = '#define USE_SUN_LUMINANCE \\n' + 'uniform float gltf_luminanceAtZenith;\\n' + drawFS;\n        }\n\n        createAttributesAndProgram(programId, techniqueId, drawFS, drawVS, model, context);\n    }\n\n    function recreateProgram(programToCreate, model, context) {\n        var programId = programToCreate.programId;\n        var techniqueId = programToCreate.techniqueId;\n        var program = model._sourcePrograms[programId];\n        var shaders = model._rendererResources.sourceShaders;\n\n        var quantizedVertexShaders = model._quantizedVertexShaders;\n        var toClipCoordinatesGLSL = model._toClipCoordinatesGLSL[programId];\n\n        var clippingPlaneCollection = model.clippingPlanes;\n        var addClippingPlaneCode = isClippingEnabled(model);\n\n        var vs = shaders[program.vertexShader];\n        var fs = shaders[program.fragmentShader];\n\n        if (model.extensionsUsed.WEB3D_quantized_attributes || model._dequantizeInShader) {\n            vs = quantizedVertexShaders[programId];\n        }\n\n        var finalFS = fs;\n        if (isColorShadingEnabled(model)) {\n            finalFS = Model._modifyShaderForColor(finalFS);\n        }\n        if (addClippingPlaneCode) {\n            finalFS = modifyShaderForClippingPlanes(finalFS, clippingPlaneCollection, context);\n        }\n\n        var drawVS = modifyShader(vs, programId, model._vertexShaderLoaded);\n        var drawFS = modifyShader(finalFS, programId, model._fragmentShaderLoaded);\n\n        if (!FeatureDetection.isInternetExplorer()) {\n            drawVS = ModelUtility.modifyVertexShaderForLogDepth(drawVS, toClipCoordinatesGLSL);\n            drawFS = ModelUtility.modifyFragmentShaderForLogDepth(drawFS);\n\n            var isOutline = program.isOutline;\n            if (isOutline) {\n                drawFS = drawFS.replace('czm_writeLogDepth();',\n                    '    czm_writeLogDepth();\\n' +\n                    '#if defined(LOG_DEPTH) && !defined(DISABLE_LOG_DEPTH_FRAGMENT_WRITE)\\n' +\n                    '    gl_FragDepthEXT -= 5e-5;\\n' +\n                    '#endif');\n            }\n        }\n\n        if (!defined(model._uniformMapLoaded)) {\n            drawFS = 'uniform vec4 czm_pickColor;\\n' + drawFS;\n        }\n\n        var useIBL = model._imageBasedLightingFactor.x > 0.0 || model._imageBasedLightingFactor.y > 0.0;\n        if (useIBL) {\n            drawFS = '#define USE_IBL_LIGHTING \\n\\n' + drawFS;\n        }\n\n        if (defined(model._lightColor)) {\n            drawFS = '#define USE_CUSTOM_LIGHT_COLOR \\n\\n' + drawFS;\n        }\n\n        if (model._sourceVersion !== '2.0' || model._sourceKHRTechniquesWebGL) {\n            drawFS = ShaderSource.replaceMain(drawFS, 'non_gamma_corrected_main');\n            drawFS =\n                drawFS +\n                '\\n' +\n                'void main() { \\n' +\n                '    non_gamma_corrected_main(); \\n' +\n                '    gl_FragColor = czm_gammaCorrect(gl_FragColor); \\n' +\n                '} \\n';\n        }\n\n        if (OctahedralProjectedCubeMap.isSupported(context)) {\n            var usesSH = defined(model._sphericalHarmonicCoefficients) || model._useDefaultSphericalHarmonics;\n            var usesSM = (defined(model._specularEnvironmentMapAtlas) && model._specularEnvironmentMapAtlas.ready) || model._useDefaultSpecularMaps;\n            var addMatrix = !addClippingPlaneCode && (usesSH || usesSM || useIBL);\n            if (addMatrix) {\n                drawFS = 'uniform mat4 gltf_clippingPlanesMatrix; \\n' + drawFS;\n            }\n\n            if (defined(model._sphericalHarmonicCoefficients)) {\n                drawFS = '#define DIFFUSE_IBL \\n' + '#define CUSTOM_SPHERICAL_HARMONICS \\n' + 'uniform vec3 gltf_sphericalHarmonicCoefficients[9]; \\n' + drawFS;\n            } else if (model._useDefaultSphericalHarmonics) {\n                drawFS = '#define DIFFUSE_IBL \\n' + drawFS;\n            }\n\n            if (defined(model._specularEnvironmentMapAtlas) && model._specularEnvironmentMapAtlas.ready) {\n                drawFS = '#define SPECULAR_IBL \\n' + '#define CUSTOM_SPECULAR_IBL \\n' + 'uniform sampler2D gltf_specularMap; \\n' + 'uniform vec2 gltf_specularMapSize; \\n' + 'uniform float gltf_maxSpecularLOD; \\n' + drawFS;\n            } else if (model._useDefaultSpecularMaps) {\n                drawFS = '#define SPECULAR_IBL \\n' + drawFS;\n            }\n        }\n\n        if (defined(model._luminanceAtZenith)) {\n            drawFS = '#define USE_SUN_LUMINANCE \\n' + 'uniform float gltf_luminanceAtZenith;\\n' + drawFS;\n        }\n\n        createAttributesAndProgram(programId, techniqueId, drawFS, drawVS, model, context);\n    }\n\n    function createAttributesAndProgram(programId, techniqueId, drawFS, drawVS, model, context) {\n        var technique = model._sourceTechniques[techniqueId];\n        var attributeLocations = ModelUtility.createAttributeLocations(technique, model._precreatedAttributes);\n\n        model._rendererResources.programs[programId] = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : drawVS,\n            fragmentShaderSource : drawFS,\n            attributeLocations : attributeLocations\n        });\n    }\n\n    var scratchCreateProgramJob = new CreateProgramJob();\n\n    function createPrograms(model, frameState) {\n        var loadResources = model._loadResources;\n        var programsToCreate = loadResources.programsToCreate;\n\n        if (loadResources.pendingShaderLoads !== 0) {\n            return;\n        }\n\n        // PERFORMANCE_IDEA: this could be more fine-grained by looking\n        // at the shader's bufferView's to determine the buffer dependencies.\n        if (loadResources.pendingBufferLoads !== 0) {\n            return;\n        }\n\n        var context = frameState.context;\n\n        if (model.asynchronous) {\n            while (programsToCreate.length > 0) {\n                scratchCreateProgramJob.set(programsToCreate.peek(), model, context);\n                if (!frameState.jobScheduler.execute(scratchCreateProgramJob, JobType.PROGRAM)) {\n                    break;\n                }\n                programsToCreate.dequeue();\n            }\n        } else {\n            // Create all loaded programs this frame\n            while (programsToCreate.length > 0) {\n                createProgram(programsToCreate.dequeue(), model, context);\n            }\n        }\n    }\n\n    function getOnImageCreatedFromTypedArray(loadResources, gltfTexture) {\n        return function(image) {\n            loadResources.texturesToCreate.enqueue({\n                id : gltfTexture.id,\n                image : image,\n                bufferView : undefined\n            });\n\n            --loadResources.pendingBufferViewToImage;\n        };\n    }\n\n    function loadTexturesFromBufferViews(model) {\n        var loadResources = model._loadResources;\n\n        if (loadResources.pendingBufferLoads !== 0) {\n            return;\n        }\n\n        while (loadResources.texturesToCreateFromBufferView.length > 0) {\n            var gltfTexture = loadResources.texturesToCreateFromBufferView.dequeue();\n\n            var gltf = model.gltf;\n            var bufferView = gltf.bufferViews[gltfTexture.bufferView];\n            var imageId = gltf.textures[gltfTexture.id].source;\n\n            var onerror = ModelUtility.getFailedLoadFunction(model, 'image', 'id: ' + gltfTexture.id + ', bufferView: ' + gltfTexture.bufferView);\n\n            if (gltfTexture.mimeType === 'image/ktx') {\n                loadKTX(loadResources.getBuffer(bufferView)).then(imageLoad(model, gltfTexture.id, imageId)).otherwise(onerror);\n                ++model._loadResources.pendingTextureLoads;\n            } else if (gltfTexture.mimeType === 'image/crn') {\n                loadCRN(loadResources.getBuffer(bufferView)).then(imageLoad(model, gltfTexture.id, imageId)).otherwise(onerror);\n                ++model._loadResources.pendingTextureLoads;\n            } else {\n                var onload = getOnImageCreatedFromTypedArray(loadResources, gltfTexture);\n                loadImageFromTypedArray({\n                    uint8Array: loadResources.getBuffer(bufferView),\n                    format: gltfTexture.mimeType,\n                    flipY: false\n                })\n                    .then(onload).otherwise(onerror);\n                ++loadResources.pendingBufferViewToImage;\n            }\n        }\n    }\n\n    function createSamplers(model) {\n        var loadResources = model._loadResources;\n        if (loadResources.createSamplers) {\n            loadResources.createSamplers = false;\n\n            var rendererSamplers = model._rendererResources.samplers;\n            ForEach.sampler(model.gltf, function(sampler, samplerId) {\n                rendererSamplers[samplerId] = new Sampler({\n                    wrapS: sampler.wrapS,\n                    wrapT: sampler.wrapT,\n                    minificationFilter: sampler.minFilter,\n                    magnificationFilter: sampler.magFilter\n                });\n            });\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var CreateTextureJob = function() {\n        this.gltfTexture = undefined;\n        this.model = undefined;\n        this.context = undefined;\n    };\n\n    CreateTextureJob.prototype.set = function(gltfTexture, model, context) {\n        this.gltfTexture = gltfTexture;\n        this.model = model;\n        this.context = context;\n    };\n\n    CreateTextureJob.prototype.execute = function() {\n        createTexture(this.gltfTexture, this.model, this.context);\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function createTexture(gltfTexture, model, context) {\n        var textures = model.gltf.textures;\n        var texture = textures[gltfTexture.id];\n\n        var rendererSamplers = model._rendererResources.samplers;\n        var sampler = rendererSamplers[texture.sampler];\n        if (!defined(sampler)) {\n            sampler = new Sampler({\n                wrapS : TextureWrap.REPEAT,\n                wrapT : TextureWrap.REPEAT\n            });\n        }\n\n        var usesTextureTransform = false;\n        var materials = model.gltf.materials;\n        var materialsLength = materials.length;\n        for (var i = 0; i < materialsLength; ++i) {\n            var material = materials[i];\n            if (defined(material.extensions) && defined(material.extensions.KHR_techniques_webgl)) {\n                var values = material.extensions.KHR_techniques_webgl.values;\n                for (var valueName in values) {\n                    if (values.hasOwnProperty(valueName) && valueName.indexOf('Texture') !== -1) {\n                        var value = values[valueName];\n                        if (value.index === gltfTexture.id && defined(value.extensions) && defined(value.extensions.KHR_texture_transform)) {\n                            usesTextureTransform = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (usesTextureTransform) {\n                break;\n            }\n        }\n\n        var wrapS = sampler.wrapS;\n        var wrapT = sampler.wrapT;\n        var minFilter = sampler.minificationFilter;\n\n        if (usesTextureTransform && minFilter !== TextureMinificationFilter.LINEAR && minFilter !== TextureMinificationFilter.NEAREST) {\n            if (minFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST || minFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR) {\n                minFilter = TextureMinificationFilter.NEAREST;\n            } else {\n                minFilter = TextureMinificationFilter.LINEAR;\n            }\n\n            sampler = new Sampler({\n                wrapS : sampler.wrapS,\n                wrapT : sampler.wrapT,\n                textureMinificationFilter : minFilter,\n                textureMagnificationFilter : sampler.magnificationFilter\n            });\n        }\n\n        var internalFormat = gltfTexture.internalFormat;\n\n        var mipmap =\n            (!(defined(internalFormat) && PixelFormat.isCompressedFormat(internalFormat))) &&\n            ((minFilter === TextureMinificationFilter.NEAREST_MIPMAP_NEAREST) ||\n             (minFilter === TextureMinificationFilter.NEAREST_MIPMAP_LINEAR) ||\n             (minFilter === TextureMinificationFilter.LINEAR_MIPMAP_NEAREST) ||\n             (minFilter === TextureMinificationFilter.LINEAR_MIPMAP_LINEAR));\n        var requiresNpot = mipmap ||\n           (wrapS === TextureWrap.REPEAT) ||\n           (wrapS === TextureWrap.MIRRORED_REPEAT) ||\n           (wrapT === TextureWrap.REPEAT) ||\n           (wrapT === TextureWrap.MIRRORED_REPEAT);\n\n        var tx;\n        var source = gltfTexture.image;\n\n        if (defined(internalFormat)) {\n            tx = new Texture({\n                context : context,\n                source : {\n                    arrayBufferView : gltfTexture.bufferView\n                },\n                width : gltfTexture.width,\n                height : gltfTexture.height,\n                pixelFormat : internalFormat,\n                sampler : sampler\n            });\n        } else if (defined(source)) {\n            var npot = !CesiumMath.isPowerOfTwo(source.width) || !CesiumMath.isPowerOfTwo(source.height);\n\n            if (requiresNpot && npot) {\n                // WebGL requires power-of-two texture dimensions for mipmapping and REPEAT/MIRRORED_REPEAT wrap modes.\n                var canvas = document.createElement('canvas');\n                canvas.width = CesiumMath.nextPowerOfTwo(source.width);\n                canvas.height = CesiumMath.nextPowerOfTwo(source.height);\n                var canvasContext = canvas.getContext('2d');\n                canvasContext.drawImage(source, 0, 0, source.width, source.height, 0, 0, canvas.width, canvas.height);\n                source = canvas;\n            }\n\n            tx = new Texture({\n                context : context,\n                source : source,\n                pixelFormat : texture.internalFormat,\n                pixelDatatype : texture.type,\n                sampler : sampler,\n                flipY : false\n            });\n            // GLTF_SPEC: Support TEXTURE_CUBE_MAP.  https://github.com/KhronosGroup/glTF/issues/40\n            if (mipmap) {\n                tx.generateMipmap();\n            }\n        }\n        if (defined(tx)) {\n            model._rendererResources.textures[gltfTexture.id] = tx;\n            model._texturesByteLength += tx.sizeInBytes;\n        }\n    }\n\n    var scratchCreateTextureJob = new CreateTextureJob();\n\n    function createTextures(model, frameState) {\n        var context = frameState.context;\n        var texturesToCreate = model._loadResources.texturesToCreate;\n\n        if (model.asynchronous) {\n            while (texturesToCreate.length > 0) {\n                scratchCreateTextureJob.set(texturesToCreate.peek(), model, context);\n                if (!frameState.jobScheduler.execute(scratchCreateTextureJob, JobType.TEXTURE)) {\n                    break;\n                }\n                texturesToCreate.dequeue();\n            }\n        } else {\n            // Create all loaded textures this frame\n            while (texturesToCreate.length > 0) {\n                createTexture(texturesToCreate.dequeue(), model, context);\n            }\n        }\n    }\n\n    function getAttributeLocations(model, primitive) {\n        var techniques = model._sourceTechniques;\n\n        // Retrieve the compiled shader program to assign index values to attributes\n        var attributeLocations = {};\n\n        var location;\n        var index;\n        var material = model._runtime.materialsById[primitive.material];\n        if (!defined(material)) {\n            return attributeLocations;\n        }\n\n        var technique = techniques[material._technique];\n        if (!defined(technique)) {\n            return attributeLocations;\n        }\n\n        var attributes = technique.attributes;\n        var program = model._rendererResources.programs[technique.program];\n        var programVertexAttributes = program.vertexAttributes;\n        var programAttributeLocations = program._attributeLocations;\n\n        // Note: WebGL shader compiler may have optimized and removed some attributes from programVertexAttributes\n        for (location in programVertexAttributes) {\n            if (programVertexAttributes.hasOwnProperty(location)) {\n                var attribute = attributes[location];\n                if (defined(attribute)) {\n                    index = programAttributeLocations[location];\n                    attributeLocations[attribute.semantic] = index;\n                }\n            }\n        }\n\n        // Always add pre-created attributes.\n        // Some pre-created attributes, like per-instance pickIds, may be compiled out of the draw program\n        // but should be included in the list of attribute locations for the pick program.\n        // This is safe to do since programVertexAttributes and programAttributeLocations are equivalent except\n        // that programVertexAttributes optimizes out unused attributes.\n        var precreatedAttributes = model._precreatedAttributes;\n        if (defined(precreatedAttributes)) {\n            for (location in precreatedAttributes) {\n                if (precreatedAttributes.hasOwnProperty(location)) {\n                    index = programAttributeLocations[location];\n                    attributeLocations[location] = index;\n                }\n            }\n        }\n\n        return attributeLocations;\n    }\n\n    function mapJointNames(forest, nodes) {\n        var length = forest.length;\n        var jointNodes = {};\n        for (var i = 0; i < length; ++i) {\n            var stack = [forest[i]]; // Push root node of tree\n\n            while (stack.length > 0) {\n                var id = stack.pop();\n                var n = nodes[id];\n\n                if (defined(n)) {\n                    jointNodes[id] = id;\n                }\n\n                var children = n.children;\n                if (defined(children)) {\n                    var childrenLength = children.length;\n                    for (var k = 0; k < childrenLength; ++k) {\n                        stack.push(children[k]);\n                    }\n                }\n            }\n        }\n        return jointNodes;\n    }\n\n    function createJoints(model, runtimeSkins) {\n        var gltf = model.gltf;\n        var skins = gltf.skins;\n        var nodes = gltf.nodes;\n        var runtimeNodes = model._runtime.nodes;\n\n        var skinnedNodesIds = model._loadResources.skinnedNodesIds;\n        var length = skinnedNodesIds.length;\n        for (var j = 0; j < length; ++j) {\n            var id = skinnedNodesIds[j];\n            var skinnedNode = runtimeNodes[id];\n            var node = nodes[id];\n\n            var runtimeSkin = runtimeSkins[node.skin];\n            skinnedNode.inverseBindMatrices = runtimeSkin.inverseBindMatrices;\n            skinnedNode.bindShapeMatrix = runtimeSkin.bindShapeMatrix;\n\n            // 1. Find nodes with the names in node.skeletons (the node's skeletons)\n            // 2. These nodes form the root nodes of the forest to search for each joint in skin.jointNames.  This search uses jointName, not the node's name.\n            // 3. Search for the joint name among the gltf node hierarchy instead of the runtime node hierarchy. Child links aren't set up yet for runtime nodes.\n            var forest = [];\n            var skin = skins[node.skin];\n            if (defined(skin.skeleton)) {\n                forest.push(skin.skeleton);\n            }\n\n            var mappedJointNames = mapJointNames(forest, nodes);\n            var gltfJointNames = skins[node.skin].joints;\n            var jointNamesLength = gltfJointNames.length;\n            for (var i = 0; i < jointNamesLength; ++i) {\n                var jointName = gltfJointNames[i];\n                var nodeId = mappedJointNames[jointName];\n                var jointNode = runtimeNodes[nodeId];\n                skinnedNode.joints.push(jointNode);\n            }\n        }\n    }\n\n    function createSkins(model) {\n        var loadResources = model._loadResources;\n\n        if (loadResources.pendingBufferLoads !== 0) {\n            return;\n        }\n\n        if (!loadResources.createSkins) {\n            return;\n        }\n        loadResources.createSkins = false;\n\n        var gltf = model.gltf;\n        var accessors = gltf.accessors;\n        var runtimeSkins = {};\n\n        ForEach.skin(gltf, function(skin, id) {\n            var accessor = accessors[skin.inverseBindMatrices];\n\n            var bindShapeMatrix;\n            if (!Matrix4.equals(skin.bindShapeMatrix, Matrix4.IDENTITY)) {\n                bindShapeMatrix = Matrix4.clone(skin.bindShapeMatrix);\n            }\n\n            runtimeSkins[id] = {\n                inverseBindMatrices : ModelAnimationCache.getSkinInverseBindMatrices(model, accessor),\n                bindShapeMatrix : bindShapeMatrix // not used when undefined\n            };\n        });\n\n        createJoints(model, runtimeSkins);\n    }\n\n    function getChannelEvaluator(model, runtimeNode, targetPath, spline) {\n        return function(localAnimationTime) {\n            //  Workaround for https://github.com/KhronosGroup/glTF/issues/219\n\n            //if (targetPath === 'translation') {\n            //    return;\n            //}\n            if (defined(spline)) {\n                localAnimationTime = model.clampAnimations ? spline.clampTime(localAnimationTime) : spline.wrapTime(localAnimationTime);\n                runtimeNode[targetPath] = spline.evaluate(localAnimationTime, runtimeNode[targetPath]);\n                runtimeNode.dirtyNumber = model._maxDirtyNumber;\n            }\n        };\n    }\n\n    function createRuntimeAnimations(model) {\n        var loadResources = model._loadResources;\n\n        if (!loadResources.finishedPendingBufferLoads()) {\n            return;\n        }\n\n        if (!loadResources.createRuntimeAnimations) {\n            return;\n        }\n        loadResources.createRuntimeAnimations = false;\n\n        model._runtime.animations = [];\n\n        var runtimeNodes = model._runtime.nodes;\n        var accessors = model.gltf.accessors;\n\n        ForEach.animation(model.gltf, function (animation, i) {\n            var channels = animation.channels;\n            var samplers = animation.samplers;\n\n            // Find start and stop time for the entire animation\n            var startTime = Number.MAX_VALUE;\n            var stopTime = -Number.MAX_VALUE;\n\n            var channelsLength = channels.length;\n            var channelEvaluators = new Array(channelsLength);\n\n            for (var j = 0; j < channelsLength; ++j) {\n                var channel = channels[j];\n                var target = channel.target;\n                var path = target.path;\n                var sampler = samplers[channel.sampler];\n                var input = ModelAnimationCache.getAnimationParameterValues(model, accessors[sampler.input]);\n                var output = ModelAnimationCache.getAnimationParameterValues(model, accessors[sampler.output]);\n\n                startTime = Math.min(startTime, input[0]);\n                stopTime = Math.max(stopTime, input[input.length - 1]);\n\n                var spline = ModelAnimationCache.getAnimationSpline(model, i, animation, channel.sampler, sampler, input, path, output);\n\n                // GLTF_SPEC: Support more targets like materials. https://github.com/KhronosGroup/glTF/issues/142\n                channelEvaluators[j] = getChannelEvaluator(model, runtimeNodes[target.node], target.path, spline);\n            }\n\n            model._runtime.animations[i] = {\n                name : animation.name,\n                startTime : startTime,\n                stopTime : stopTime,\n                channelEvaluators : channelEvaluators\n            };\n        });\n    }\n\n    function createVertexArrays(model, context) {\n        var loadResources = model._loadResources;\n        if (!loadResources.finishedBuffersCreation() || !loadResources.finishedProgramCreation()\n                || !loadResources.createVertexArrays) {\n            return;\n        }\n        loadResources.createVertexArrays = false;\n\n        var rendererBuffers = model._rendererResources.buffers;\n        var rendererVertexArrays = model._rendererResources.vertexArrays;\n        var gltf = model.gltf;\n        var accessors = gltf.accessors;\n        ForEach.mesh(gltf, function(mesh, meshId) {\n            ForEach.meshPrimitive(mesh, function(primitive, primitiveId) {\n                var attributes = [];\n                var attributeLocation;\n                var attributeLocations = getAttributeLocations(model, primitive);\n                var decodedData = model._decodedData[meshId + '.primitive.' + primitiveId];\n                ForEach.meshPrimitiveAttribute(primitive, function(accessorId, attributeName) {\n                    // Skip if the attribute is not used by the material, e.g., because the asset\n                    // was exported with an attribute that wasn't used and the asset wasn't optimized.\n                    attributeLocation = attributeLocations[attributeName];\n                    if (defined(attributeLocation)) {\n                        // Use attributes of previously decoded draco geometry\n                        if (defined(decodedData)) {\n                            var decodedAttributes = decodedData.attributes;\n                            if (decodedAttributes.hasOwnProperty(attributeName)) {\n                                var decodedAttribute = decodedAttributes[attributeName];\n                                attributes.push({\n                                    index: attributeLocation,\n                                    vertexBuffer: rendererBuffers[decodedAttribute.bufferView],\n                                    componentsPerAttribute: decodedAttribute.componentsPerAttribute,\n                                    componentDatatype: decodedAttribute.componentDatatype,\n                                    normalize: decodedAttribute.normalized,\n                                    offsetInBytes: decodedAttribute.byteOffset,\n                                    strideInBytes: decodedAttribute.byteStride\n                                });\n\n                                return;\n                            }\n                        }\n\n                        var a = accessors[accessorId];\n                        var normalize = defined(a.normalized) && a.normalized;\n                        attributes.push({\n                            index: attributeLocation,\n                            vertexBuffer: rendererBuffers[a.bufferView],\n                            componentsPerAttribute: numberOfComponentsForType(a.type),\n                            componentDatatype: a.componentType,\n                            normalize: normalize,\n                            offsetInBytes: a.byteOffset,\n                            strideInBytes: getAccessorByteStride(gltf, a)\n                        });\n                    }\n                });\n\n                // Add pre-created attributes\n                var attribute;\n                var attributeName;\n                var precreatedAttributes = model._precreatedAttributes;\n                if (defined(precreatedAttributes)) {\n                    for (attributeName in precreatedAttributes) {\n                        if (precreatedAttributes.hasOwnProperty(attributeName)) {\n                            attributeLocation = attributeLocations[attributeName];\n                            if (defined(attributeLocation)) {\n                                attribute = precreatedAttributes[attributeName];\n                                attribute.index = attributeLocation;\n                                attributes.push(attribute);\n                            }\n                        }\n                    }\n                }\n\n                var indexBuffer;\n                if (defined(primitive.indices)) {\n                    var accessor = accessors[primitive.indices];\n                    var bufferView = accessor.bufferView;\n\n                    // Use buffer of previously decoded draco geometry\n                    if (defined(decodedData)) {\n                        bufferView = decodedData.bufferView;\n                    }\n\n                    indexBuffer = rendererBuffers[bufferView];\n                }\n                rendererVertexArrays[meshId + '.primitive.' + primitiveId] = new VertexArray({\n                    context: context,\n                    attributes: attributes,\n                    indexBuffer: indexBuffer\n                });\n            });\n        });\n    }\n\n    function createRenderStates(model) {\n        var loadResources = model._loadResources;\n        if (loadResources.createRenderStates) {\n            loadResources.createRenderStates = false;\n\n            ForEach.material(model.gltf, function (material, materialId) {\n                createRenderStateForMaterial(model, material, materialId);\n            });\n        }\n    }\n\n    function createRenderStateForMaterial(model, material, materialId) {\n        var rendererRenderStates = model._rendererResources.renderStates;\n\n        var blendEquationSeparate = [\n            WebGLConstants.FUNC_ADD,\n            WebGLConstants.FUNC_ADD\n        ];\n        var blendFuncSeparate = [\n            WebGLConstants.ONE,\n            WebGLConstants.ONE_MINUS_SRC_ALPHA,\n            WebGLConstants.ONE,\n            WebGLConstants.ONE_MINUS_SRC_ALPHA\n        ];\n\n        if (defined(material.extensions) && defined(material.extensions.KHR_blend)) {\n            blendEquationSeparate = material.extensions.KHR_blend.blendEquation;\n            blendFuncSeparate = material.extensions.KHR_blend.blendFactors;\n        }\n\n        // If we have outlines but this material is not one of them, set the\n        // polygonOffset render state to push this material back slightly in the\n        // depth buffer so that the outlines are clearly visible.\n        // Note that this render state will have no effect when we're using\n        // logarithmic depth; that is handled separately.\n        var hasOutlines = hasExtension(model.gltf, 'TERRIA_solid_outlines');\n        var isOutline = defined(material.extensions) && defined(material.extensions.TERRIA_solid_outlines);\n\n        var polygonOffset;\n        if (hasOutlines && !isOutline) {\n            polygonOffset = {\n                enabled : true,\n                factor : 0.75,\n                units : 1.0\n            };\n        }\n\n        var enableCulling = !material.doubleSided;\n        var blendingEnabled = (material.alphaMode === 'BLEND');\n        rendererRenderStates[materialId] = RenderState.fromCache({\n            cull : {\n                enabled : enableCulling\n            },\n            depthTest : {\n                enabled : true,\n                func: DepthFunction.LESS_OR_EQUAL\n            },\n            depthMask : !blendingEnabled,\n            blending : {\n                enabled : blendingEnabled,\n                equationRgb : blendEquationSeparate[0],\n                equationAlpha : blendEquationSeparate[1],\n                functionSourceRgb : blendFuncSeparate[0],\n                functionDestinationRgb : blendFuncSeparate[1],\n                functionSourceAlpha : blendFuncSeparate[2],\n                functionDestinationAlpha : blendFuncSeparate[3]\n            },\n            polygonOffset : polygonOffset\n        });\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var gltfUniformsFromNode = {\n        MODEL : function(uniformState, model, runtimeNode) {\n            return function() {\n                return runtimeNode.computedMatrix;\n            };\n        },\n        VIEW : function(uniformState, model, runtimeNode) {\n            return function() {\n                return uniformState.view;\n            };\n        },\n        PROJECTION : function(uniformState, model, runtimeNode) {\n            return function() {\n                return uniformState.projection;\n            };\n        },\n        MODELVIEW : function(uniformState, model, runtimeNode) {\n            var mv = new Matrix4();\n            return function() {\n                return Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mv);\n            };\n        },\n        CESIUM_RTC_MODELVIEW : function(uniformState, model, runtimeNode) {\n            // CESIUM_RTC extension\n            var mvRtc = new Matrix4();\n            return function() {\n                Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mvRtc);\n                return Matrix4.setTranslation(mvRtc, model._rtcCenterEye, mvRtc);\n            };\n        },\n        MODELVIEWPROJECTION : function(uniformState, model, runtimeNode) {\n            var mvp = new Matrix4();\n            return function() {\n                Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mvp);\n                return Matrix4.multiply(uniformState._projection, mvp, mvp);\n            };\n        },\n        MODELINVERSE : function(uniformState, model, runtimeNode) {\n            var mInverse = new Matrix4();\n            return function() {\n                return Matrix4.inverse(runtimeNode.computedMatrix, mInverse);\n            };\n        },\n        VIEWINVERSE : function(uniformState, model) {\n            return function() {\n                return uniformState.inverseView;\n            };\n        },\n        PROJECTIONINVERSE : function(uniformState, model, runtimeNode) {\n            return function() {\n                return uniformState.inverseProjection;\n            };\n        },\n        MODELVIEWINVERSE : function(uniformState, model, runtimeNode) {\n            var mv = new Matrix4();\n            var mvInverse = new Matrix4();\n            return function() {\n                Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mv);\n                return Matrix4.inverse(mv, mvInverse);\n            };\n        },\n        MODELVIEWPROJECTIONINVERSE : function(uniformState, model, runtimeNode) {\n            var mvp = new Matrix4();\n            var mvpInverse = new Matrix4();\n            return function() {\n                Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mvp);\n                Matrix4.multiply(uniformState._projection, mvp, mvp);\n                return Matrix4.inverse(mvp, mvpInverse);\n            };\n        },\n        MODELINVERSETRANSPOSE : function(uniformState, model, runtimeNode) {\n            var mInverse = new Matrix4();\n            var mInverseTranspose = new Matrix3();\n            return function() {\n                Matrix4.inverse(runtimeNode.computedMatrix, mInverse);\n                Matrix4.getMatrix3(mInverse, mInverseTranspose);\n                return Matrix3.transpose(mInverseTranspose, mInverseTranspose);\n            };\n        },\n        MODELVIEWINVERSETRANSPOSE : function(uniformState, model, runtimeNode) {\n            var mv = new Matrix4();\n            var mvInverse = new Matrix4();\n            var mvInverseTranspose = new Matrix3();\n            return function() {\n                Matrix4.multiplyTransformation(uniformState.view, runtimeNode.computedMatrix, mv);\n                Matrix4.inverse(mv, mvInverse);\n                Matrix4.getMatrix3(mvInverse, mvInverseTranspose);\n                return Matrix3.transpose(mvInverseTranspose, mvInverseTranspose);\n            };\n        },\n        VIEWPORT : function(uniformState, model, runtimeNode) {\n            return function() {\n                return uniformState.viewportCartesian4;\n            };\n        }\n    };\n\n    function getUniformFunctionFromSource(source, model, semantic, uniformState) {\n        var runtimeNode = model._runtime.nodes[source];\n        return gltfUniformsFromNode[semantic](uniformState, model, runtimeNode);\n    }\n\n    function createUniformsForMaterial(model, material, technique, instanceValues, context, textures, defaultTexture) {\n        var uniformMap = {};\n        var uniformValues = {};\n        var jointMatrixUniformName;\n        var morphWeightsUniformName;\n\n        ForEach.techniqueUniform(technique, function(uniform, uniformName) {\n            // GLTF_SPEC: This does not take into account uniform arrays,\n            // indicated by uniforms with a count property.\n            //\n            // https://github.com/KhronosGroup/glTF/issues/258\n\n            // GLTF_SPEC: In this implementation, material parameters with a\n            // semantic or targeted via a source (for animation) are not\n            // targetable for material animations.  Is this too strict?\n            //\n            // https://github.com/KhronosGroup/glTF/issues/142\n\n            var uv;\n            if (defined(instanceValues) && defined(instanceValues[uniformName])) {\n                // Parameter overrides by the instance technique\n                uv = ModelUtility.createUniformFunction(uniform.type, instanceValues[uniformName], textures, defaultTexture);\n                uniformMap[uniformName] = uv.func;\n                uniformValues[uniformName] = uv;\n            } else if (defined(uniform.node)) {\n                uniformMap[uniformName] = getUniformFunctionFromSource(uniform.node, model, uniform.semantic, context.uniformState);\n            } else if (defined(uniform.semantic)) {\n                if (uniform.semantic === 'JOINTMATRIX') {\n                    jointMatrixUniformName = uniformName;\n                } else if (uniform.semantic === 'MORPHWEIGHTS') {\n                    morphWeightsUniformName = uniformName;\n                } else if (uniform.semantic === 'ALPHACUTOFF') {\n                    // The material's alphaCutoff value uses a uniform with semantic ALPHACUTOFF.\n                    // A uniform with this semantic will ignore the instance or default values.\n                    var alphaMode = material.alphaMode;\n                    if (defined(alphaMode) && alphaMode === 'MASK') {\n                        var alphaCutoffValue = defaultValue(material.alphaCutoff, 0.5);\n                        uv = ModelUtility.createUniformFunction(uniform.type, alphaCutoffValue, textures, defaultTexture);\n                        uniformMap[uniformName] = uv.func;\n                        uniformValues[uniformName] = uv;\n                    }\n                } else {\n                    // Map glTF semantic to Cesium automatic uniform\n                    uniformMap[uniformName] = ModelUtility.getGltfSemanticUniforms()[uniform.semantic](context.uniformState, model);\n                }\n            } else if (defined(uniform.value)) {\n                // Technique value that isn't overridden by a material\n                var uv2 = ModelUtility.createUniformFunction(uniform.type, uniform.value, textures, defaultTexture);\n                uniformMap[uniformName] = uv2.func;\n                uniformValues[uniformName] = uv2;\n            }\n        });\n\n        return {\n            map : uniformMap,\n            values : uniformValues,\n            jointMatrixUniformName : jointMatrixUniformName,\n            morphWeightsUniformName : morphWeightsUniformName\n        };\n    }\n\n    function createUniformMaps(model, context) {\n        var loadResources = model._loadResources;\n\n        if (!loadResources.finishedProgramCreation()) {\n            return;\n        }\n\n        if (!loadResources.createUniformMaps) {\n            return;\n        }\n        loadResources.createUniformMaps = false;\n\n        var gltf = model.gltf;\n        var techniques = model._sourceTechniques;\n        var uniformMaps = model._uniformMaps;\n\n        var textures = model._rendererResources.textures;\n        var defaultTexture = model._defaultTexture;\n\n        ForEach.material(gltf, function (material, materialId) {\n            var modelMaterial = model._runtime.materialsById[materialId];\n            var technique = techniques[modelMaterial._technique];\n            var instanceValues = modelMaterial._values;\n\n            var uniforms = createUniformsForMaterial(model, material, technique, instanceValues, context, textures, defaultTexture);\n\n            var u = uniformMaps[materialId];\n            u.uniformMap = uniforms.map;                          // uniform name -> function for the renderer\n            u.values = uniforms.values;                           // material parameter name -> ModelMaterial for modifying the parameter at runtime\n            u.jointMatrixUniformName = uniforms.jointMatrixUniformName;\n            u.morphWeightsUniformName = uniforms.morphWeightsUniformName;\n        });\n    }\n\n    function createUniformsForDracoQuantizedAttributes(decodedData) {\n        return ModelUtility.createUniformsForDracoQuantizedAttributes(decodedData.attributes);\n    }\n\n    function createUniformsForQuantizedAttributes(model, primitive) {\n        var programId = getProgramForPrimitive(model, primitive);\n        var quantizedUniforms = model._quantizedUniforms[programId];\n        return ModelUtility.createUniformsForQuantizedAttributes(model.gltf, primitive, quantizedUniforms);\n    }\n\n    function createPickColorFunction(color) {\n        return function() {\n            return color;\n        };\n    }\n\n    function createJointMatricesFunction(runtimeNode) {\n        return function() {\n            return runtimeNode.computedJointMatrices;\n        };\n    }\n\n    function createMorphWeightsFunction(runtimeNode) {\n        return function() {\n            return runtimeNode.weights;\n        };\n    }\n\n    function createSilhouetteColorFunction(model) {\n        return function() {\n            return model.silhouetteColor;\n        };\n    }\n\n    function createSilhouetteSizeFunction(model) {\n        return function() {\n            return model.silhouetteSize;\n        };\n    }\n\n    function createColorFunction(model) {\n        return function() {\n            return model.color;\n        };\n    }\n\n    var scratchClippingPlaneMatrix = new Matrix4();\n    function createClippingPlanesMatrixFunction(model) {\n        return function() {\n            var clippingPlanes = model.clippingPlanes;\n            if (!defined(clippingPlanes) && !defined(model._sphericalHarmonicCoefficients) && !defined(model._specularEnvironmentMaps)) {\n                return Matrix4.IDENTITY;\n            }\n            var modelMatrix = defined(clippingPlanes) ? clippingPlanes.modelMatrix : Matrix4.IDENTITY;\n            return Matrix4.multiply(model._clippingPlaneModelViewMatrix, modelMatrix, scratchClippingPlaneMatrix);\n        };\n    }\n\n    function createClippingPlanesFunction(model) {\n        return function() {\n            var clippingPlanes = model.clippingPlanes;\n            return (!defined(clippingPlanes) || !clippingPlanes.enabled) ? model._defaultTexture : clippingPlanes.texture;\n        };\n    }\n\n    function createClippingPlanesEdgeStyleFunction(model) {\n        return function() {\n            var clippingPlanes = model.clippingPlanes;\n            if (!defined(clippingPlanes)) {\n                return Color.WHITE.withAlpha(0.0);\n            }\n\n            var style = Color.clone(clippingPlanes.edgeColor);\n            style.alpha = clippingPlanes.edgeWidth;\n            return style;\n        };\n    }\n\n    function createColorBlendFunction(model) {\n        return function() {\n            return ColorBlendMode.getColorBlend(model.colorBlendMode, model.colorBlendAmount);\n        };\n    }\n\n    function createIBLFactorFunction(model) {\n        return function() {\n            return model._imageBasedLightingFactor;\n        };\n    }\n\n    function createLightColorFunction(model) {\n        return function() {\n            return model._lightColor;\n        };\n    }\n\n    function createLuminanceAtZenithFunction(model) {\n        return function() {\n            return model.luminanceAtZenith;\n        };\n    }\n\n    function createSphericalHarmonicCoefficientsFunction(model) {\n        return function() {\n            return model._sphericalHarmonicCoefficients;\n        };\n    }\n\n    function createSpecularEnvironmentMapFunction(model) {\n        return function() {\n            return model._specularEnvironmentMapAtlas.texture;\n        };\n    }\n\n    function createSpecularEnvironmentMapSizeFunction(model) {\n        return function() {\n            return model._specularEnvironmentMapAtlas.texture.dimensions;\n        };\n    }\n\n    function createSpecularEnvironmentMapLOD(model) {\n        return function() {\n            return model._specularEnvironmentMapAtlas.maximumMipmapLevel;\n        };\n    }\n\n    function triangleCountFromPrimitiveIndices(primitive, indicesCount) {\n        switch (primitive.mode) {\n            case PrimitiveType.TRIANGLES:\n                return (indicesCount / 3);\n            case PrimitiveType.TRIANGLE_STRIP:\n            case PrimitiveType.TRIANGLE_FAN:\n                return Math.max(indicesCount - 2, 0);\n            default:\n                return 0;\n        }\n    }\n\n    function createCommand(model, gltfNode, runtimeNode, context, scene3DOnly) {\n        var nodeCommands = model._nodeCommands;\n        var pickIds = model._pickIds;\n        var allowPicking = model.allowPicking;\n        var runtimeMeshesByName = model._runtime.meshesByName;\n\n        var resources = model._rendererResources;\n        var rendererVertexArrays = resources.vertexArrays;\n        var rendererPrograms = resources.programs;\n        var rendererRenderStates = resources.renderStates;\n        var uniformMaps = model._uniformMaps;\n\n        var gltf = model.gltf;\n        var accessors = gltf.accessors;\n        var gltfMeshes = gltf.meshes;\n\n        var id = gltfNode.mesh;\n        var mesh = gltfMeshes[id];\n\n        var primitives = mesh.primitives;\n        var length = primitives.length;\n\n        // The glTF node hierarchy is a DAG so a node can have more than one\n        // parent, so a node may already have commands.  If so, append more\n        // since they will have a different model matrix.\n\n        for (var i = 0; i < length; ++i) {\n            var primitive = primitives[i];\n            var ix = accessors[primitive.indices];\n            var material = model._runtime.materialsById[primitive.material];\n            var programId = material._program;\n            var decodedData = model._decodedData[id + '.primitive.' + i];\n\n            var boundingSphere;\n            var positionAccessor = primitive.attributes.POSITION;\n            if (defined(positionAccessor)) {\n                var minMax = ModelUtility.getAccessorMinMax(gltf, positionAccessor);\n                boundingSphere = BoundingSphere.fromCornerPoints(Cartesian3.fromArray(minMax.min), Cartesian3.fromArray(minMax.max));\n            }\n\n            var vertexArray = rendererVertexArrays[id + '.primitive.' + i];\n            var offset;\n            var count;\n\n            // Use indices of the previously decoded Draco geometry.\n            if (defined(decodedData)) {\n                count = decodedData.numberOfIndices;\n                offset = 0;\n            } else if (defined(ix)) {\n                count = ix.count;\n                offset = (ix.byteOffset / IndexDatatype.getSizeInBytes(ix.componentType)); // glTF has offset in bytes.  Cesium has offsets in indices\n            } else {\n                var positions = accessors[primitive.attributes.POSITION];\n                count = positions.count;\n                offset = 0;\n            }\n\n            // Update model triangle count using number of indices\n            model._trianglesLength += triangleCountFromPrimitiveIndices(primitive, count);\n\n            var um = uniformMaps[primitive.material];\n            var uniformMap = um.uniformMap;\n            if (defined(um.jointMatrixUniformName)) {\n                var jointUniformMap = {};\n                jointUniformMap[um.jointMatrixUniformName] = createJointMatricesFunction(runtimeNode);\n\n                uniformMap = combine(uniformMap, jointUniformMap);\n            }\n            if (defined(um.morphWeightsUniformName)) {\n                var morphWeightsUniformMap = {};\n                morphWeightsUniformMap[um.morphWeightsUniformName] = createMorphWeightsFunction(runtimeNode);\n\n                uniformMap = combine(uniformMap, morphWeightsUniformMap);\n            }\n\n            uniformMap = combine(uniformMap, {\n                gltf_color : createColorFunction(model),\n                gltf_colorBlend : createColorBlendFunction(model),\n                gltf_clippingPlanes : createClippingPlanesFunction(model),\n                gltf_clippingPlanesEdgeStyle : createClippingPlanesEdgeStyleFunction(model),\n                gltf_clippingPlanesMatrix : createClippingPlanesMatrixFunction(model),\n                gltf_iblFactor : createIBLFactorFunction(model),\n                gltf_lightColor : createLightColorFunction(model),\n                gltf_sphericalHarmonicCoefficients : createSphericalHarmonicCoefficientsFunction(model),\n                gltf_specularMap : createSpecularEnvironmentMapFunction(model),\n                gltf_specularMapSize : createSpecularEnvironmentMapSizeFunction(model),\n                gltf_maxSpecularLOD : createSpecularEnvironmentMapLOD(model),\n                gltf_luminanceAtZenith : createLuminanceAtZenithFunction(model)\n            });\n\n            // Allow callback to modify the uniformMap\n            if (defined(model._uniformMapLoaded)) {\n                uniformMap = model._uniformMapLoaded(uniformMap, programId, runtimeNode);\n            }\n\n            // Add uniforms for decoding quantized attributes if used\n            var quantizedUniformMap = {};\n            if (model.extensionsUsed.WEB3D_quantized_attributes) {\n                quantizedUniformMap = createUniformsForQuantizedAttributes(model, primitive);\n            } else if (model._dequantizeInShader && defined(decodedData)) {\n                quantizedUniformMap = createUniformsForDracoQuantizedAttributes(decodedData);\n            }\n            uniformMap = combine(uniformMap, quantizedUniformMap);\n\n            var rs = rendererRenderStates[primitive.material];\n            var isTranslucent = rs.blending.enabled;\n\n            var owner = model._pickObject;\n            if (!defined(owner)) {\n                owner = {\n                    primitive : model,\n                    id : model.id,\n                    node : runtimeNode.publicNode,\n                    mesh : runtimeMeshesByName[mesh.name]\n                };\n            }\n\n            var castShadows = ShadowMode.castShadows(model._shadows);\n            var receiveShadows = ShadowMode.receiveShadows(model._shadows);\n\n            var pickId;\n            if (allowPicking && !defined(model._uniformMapLoaded)) {\n                pickId = context.createPickId(owner);\n                pickIds.push(pickId);\n                var pickUniforms = {\n                    czm_pickColor : createPickColorFunction(pickId.color)\n                };\n                uniformMap = combine(uniformMap, pickUniforms);\n            }\n\n            if (allowPicking) {\n                if (defined(model._pickIdLoaded) && defined(model._uniformMapLoaded)) {\n                    pickId = model._pickIdLoaded();\n                } else {\n                    pickId = 'czm_pickColor';\n                }\n            }\n\n            var command = new DrawCommand({\n                boundingVolume : new BoundingSphere(), // updated in update()\n                cull : model.cull,\n                modelMatrix : new Matrix4(),           // computed in update()\n                primitiveType : primitive.mode,\n                vertexArray : vertexArray,\n                count : count,\n                offset : offset,\n                shaderProgram : rendererPrograms[programId],\n                castShadows : castShadows,\n                receiveShadows : receiveShadows,\n                uniformMap : uniformMap,\n                renderState : rs,\n                owner : owner,\n                pass : isTranslucent ? Pass.TRANSLUCENT : model.opaquePass,\n                pickId : pickId\n            });\n\n            var command2D;\n            if (!scene3DOnly) {\n                command2D = DrawCommand.shallowClone(command);\n                command2D.boundingVolume = new BoundingSphere(); // updated in update()\n                command2D.modelMatrix = new Matrix4();           // updated in update()\n            }\n\n            var nodeCommand = {\n                show : true,\n                boundingSphere : boundingSphere,\n                command : command,\n                command2D : command2D,\n                // Generated on demand when silhouette size is greater than 0.0 and silhouette alpha is greater than 0.0\n                silhouetteModelCommand : undefined,\n                silhouetteModelCommand2D : undefined,\n                silhouetteColorCommand : undefined,\n                silhouetteColorCommand2D : undefined,\n                // Generated on demand when color alpha is less than 1.0\n                translucentCommand : undefined,\n                translucentCommand2D : undefined,\n                // For updating node commands on shader reconstruction\n                programId : programId\n            };\n            runtimeNode.commands.push(nodeCommand);\n            nodeCommands.push(nodeCommand);\n        }\n    }\n\n    function createRuntimeNodes(model, context, scene3DOnly) {\n        var loadResources = model._loadResources;\n\n        if (!loadResources.finishedEverythingButTextureCreation()) {\n            return;\n        }\n\n        if (!loadResources.createRuntimeNodes) {\n            return;\n        }\n        loadResources.createRuntimeNodes = false;\n\n        var rootNodes = [];\n        var runtimeNodes = model._runtime.nodes;\n\n        var gltf = model.gltf;\n        var nodes = gltf.nodes;\n        var skins = gltf.skins;\n\n        var scene = gltf.scenes[gltf.scene];\n        var sceneNodes = scene.nodes;\n        var length = sceneNodes.length;\n\n        var stack = [];\n        var seen = {};\n\n        for (var i = 0; i < length; ++i) {\n            stack.push({\n                parentRuntimeNode : undefined,\n                gltfNode : nodes[sceneNodes[i]],\n                id : sceneNodes[i]\n            });\n\n            var skeletonIds = [];\n            while (stack.length > 0) {\n                var n = stack.pop();\n                seen[n.id] = true;\n                var parentRuntimeNode = n.parentRuntimeNode;\n                var gltfNode = n.gltfNode;\n\n                // Node hierarchy is a DAG so a node can have more than one parent so it may already exist\n                var runtimeNode = runtimeNodes[n.id];\n                if (runtimeNode.parents.length === 0) {\n                    if (defined(gltfNode.matrix)) {\n                        runtimeNode.matrix = Matrix4.fromColumnMajorArray(gltfNode.matrix);\n                    } else {\n                        // TRS converted to Cesium types\n                        var rotation = gltfNode.rotation;\n                        runtimeNode.translation = Cartesian3.fromArray(gltfNode.translation);\n                        runtimeNode.rotation = Quaternion.unpack(rotation);\n                        runtimeNode.scale = Cartesian3.fromArray(gltfNode.scale);\n                    }\n                }\n\n                if (defined(parentRuntimeNode)) {\n                    parentRuntimeNode.children.push(runtimeNode);\n                    runtimeNode.parents.push(parentRuntimeNode);\n                } else {\n                    rootNodes.push(runtimeNode);\n                }\n\n                if (defined(gltfNode.mesh)) {\n                    createCommand(model, gltfNode, runtimeNode, context, scene3DOnly);\n                }\n\n                var children = gltfNode.children;\n                if (defined(children)) {\n                    var childrenLength = children.length;\n                    for (var j = 0; j < childrenLength; j++) {\n                        var childId = children[j];\n                        if (!seen[childId]) {\n                            stack.push({\n                                parentRuntimeNode : runtimeNode,\n                                gltfNode : nodes[childId],\n                                id : children[j]\n                            });\n                        }\n                    }\n                }\n\n                var skin = gltfNode.skin;\n                if (defined(skin)) {\n                    skeletonIds.push(skins[skin].skeleton);\n                }\n\n                if (stack.length === 0) {\n                    for (var k = 0; k < skeletonIds.length; k++) {\n                        var skeleton = skeletonIds[k];\n                        if (!seen[skeleton]) {\n                            stack.push({\n                                parentRuntimeNode : undefined,\n                                gltfNode : nodes[skeleton],\n                                id : skeleton\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        model._runtime.rootNodes = rootNodes;\n        model._runtime.nodes = runtimeNodes;\n    }\n\n    function getGeometryByteLength(buffers) {\n        var memory = 0;\n        for (var id in buffers) {\n            if (buffers.hasOwnProperty(id)) {\n                memory += buffers[id].sizeInBytes;\n            }\n        }\n        return memory;\n    }\n\n    function getTexturesByteLength(textures) {\n        var memory = 0;\n        for (var id in textures) {\n            if (textures.hasOwnProperty(id)) {\n                memory += textures[id].sizeInBytes;\n            }\n        }\n        return memory;\n    }\n\n    function createResources(model, frameState) {\n        var context = frameState.context;\n        var scene3DOnly = frameState.scene3DOnly;\n        var quantizedVertexShaders = model._quantizedVertexShaders;\n        var toClipCoordinates = model._toClipCoordinatesGLSL = {};\n        var techniques = model._sourceTechniques;\n        var programs = model._sourcePrograms;\n\n        var resources = model._rendererResources;\n        var shaders = resources.sourceShaders;\n        if (model._loadRendererResourcesFromCache) {\n            shaders = resources.sourceShaders = model._cachedRendererResources.sourceShaders;\n        }\n\n        for (var techniqueId in techniques) {\n            if (techniques.hasOwnProperty(techniqueId)) {\n                var programId = techniques[techniqueId].program;\n                var program = programs[programId];\n                var shader = shaders[program.vertexShader];\n\n                ModelUtility.checkSupportedGlExtensions(program.glExtensions, context);\n\n                if (model.extensionsUsed.WEB3D_quantized_attributes || model._dequantizeInShader) {\n                    var quantizedVS = quantizedVertexShaders[programId];\n                    if (!defined(quantizedVS)) {\n                        quantizedVS = modifyShaderForQuantizedAttributes(shader, programId, model);\n                        quantizedVertexShaders[programId] = quantizedVS;\n                    }\n                    shader = quantizedVS;\n                }\n\n                shader = modifyShader(shader, programId, model._vertexShaderLoaded);\n                toClipCoordinates[programId] = ModelUtility.toClipCoordinatesGLSL(model.gltf, shader);\n            }\n        }\n\n        if (model._loadRendererResourcesFromCache) {\n            var cachedResources = model._cachedRendererResources;\n\n            resources.buffers = cachedResources.buffers;\n            resources.vertexArrays = cachedResources.vertexArrays;\n            resources.programs = cachedResources.programs;\n            resources.silhouettePrograms = cachedResources.silhouettePrograms;\n            resources.textures = cachedResources.textures;\n            resources.samplers = cachedResources.samplers;\n            resources.renderStates = cachedResources.renderStates;\n\n            // Vertex arrays are unique to this model, create instead of using the cache.\n            if (defined(model._precreatedAttributes)) {\n                createVertexArrays(model, context);\n            }\n\n            model._cachedGeometryByteLength += getGeometryByteLength(cachedResources.buffers);\n            model._cachedTexturesByteLength += getTexturesByteLength(cachedResources.textures);\n        } else {\n            createBuffers(model, frameState); // using glTF bufferViews\n            createPrograms(model, frameState);\n            createSamplers(model, context);\n            loadTexturesFromBufferViews(model);\n            createTextures(model, frameState);\n        }\n\n        createSkins(model);\n        createRuntimeAnimations(model);\n\n        if (!model._loadRendererResourcesFromCache) {\n            createVertexArrays(model, context); // using glTF meshes\n            createRenderStates(model); // using glTF materials/techniques/states\n            // Long-term, we might not cache render states if they could change\n            // due to an animation, e.g., a uniform going from opaque to transparent.\n            // Could use copy-on-write if it is worth it.  Probably overkill.\n        }\n\n        createUniformMaps(model, context);               // using glTF materials/techniques\n        createRuntimeNodes(model, context, scene3DOnly); // using glTF scene\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function getNodeMatrix(node, result) {\n        var publicNode = node.publicNode;\n        var publicMatrix = publicNode.matrix;\n\n        if (publicNode.useMatrix && defined(publicMatrix)) {\n            // Public matrix overrides original glTF matrix and glTF animations\n            Matrix4.clone(publicMatrix, result);\n        } else if (defined(node.matrix)) {\n            Matrix4.clone(node.matrix, result);\n        } else {\n            Matrix4.fromTranslationQuaternionRotationScale(node.translation, node.rotation, node.scale, result);\n            // Keep matrix returned by the node in-sync if the node is targeted by an animation.  Only TRS nodes can be targeted.\n            publicNode.setMatrix(result);\n        }\n    }\n\n    var scratchNodeStack = [];\n    var scratchComputedTranslation = new Cartesian4();\n    var scratchComputedMatrixIn2D = new Matrix4();\n\n    function updateNodeHierarchyModelMatrix(model, modelTransformChanged, justLoaded, projection) {\n        var maxDirtyNumber = model._maxDirtyNumber;\n\n        var rootNodes = model._runtime.rootNodes;\n        var length = rootNodes.length;\n\n        var nodeStack = scratchNodeStack;\n        var computedModelMatrix = model._computedModelMatrix;\n\n        if ((model._mode !== SceneMode.SCENE3D) && !model._ignoreCommands) {\n            var translation = Matrix4.getColumn(computedModelMatrix, 3, scratchComputedTranslation);\n            if (!Cartesian4.equals(translation, Cartesian4.UNIT_W)) {\n                computedModelMatrix = Transforms.basisTo2D(projection, computedModelMatrix, scratchComputedMatrixIn2D);\n                model._rtcCenter = model._rtcCenter3D;\n            } else {\n                var center = model.boundingSphere.center;\n                var to2D = Transforms.wgs84To2DModelMatrix(projection, center, scratchComputedMatrixIn2D);\n                computedModelMatrix = Matrix4.multiply(to2D, computedModelMatrix, scratchComputedMatrixIn2D);\n\n                if (defined(model._rtcCenter)) {\n                    Matrix4.setTranslation(computedModelMatrix, Cartesian4.UNIT_W, computedModelMatrix);\n                    model._rtcCenter = model._rtcCenter2D;\n                }\n            }\n        }\n\n        for (var i = 0; i < length; ++i) {\n            var n = rootNodes[i];\n\n            getNodeMatrix(n, n.transformToRoot);\n            nodeStack.push(n);\n\n            while (nodeStack.length > 0) {\n                n = nodeStack.pop();\n                var transformToRoot = n.transformToRoot;\n                var commands = n.commands;\n\n                if ((n.dirtyNumber === maxDirtyNumber) || modelTransformChanged || justLoaded) {\n                    var nodeMatrix = Matrix4.multiplyTransformation(computedModelMatrix, transformToRoot, n.computedMatrix);\n                    var commandsLength = commands.length;\n                    if (commandsLength > 0) {\n                        // Node has meshes, which has primitives.  Update their commands.\n                        for (var j = 0; j < commandsLength; ++j) {\n                            var primitiveCommand = commands[j];\n                            var command = primitiveCommand.command;\n                            Matrix4.clone(nodeMatrix, command.modelMatrix);\n\n                            // PERFORMANCE_IDEA: Can use transformWithoutScale if no node up to the root has scale (including animation)\n                            BoundingSphere.transform(primitiveCommand.boundingSphere, command.modelMatrix, command.boundingVolume);\n\n                            if (defined(model._rtcCenter)) {\n                                Cartesian3.add(model._rtcCenter, command.boundingVolume.center, command.boundingVolume.center);\n                            }\n\n                            // If the model crosses the IDL in 2D, it will be drawn in one viewport, but part of it\n                            // will be clipped by the viewport. We create a second command that translates the model\n                            // model matrix to the opposite side of the map so the part that was clipped in one viewport\n                            // is drawn in the other.\n                            command = primitiveCommand.command2D;\n                            if (defined(command) && model._mode === SceneMode.SCENE2D) {\n                                Matrix4.clone(nodeMatrix, command.modelMatrix);\n                                command.modelMatrix[13] -= CesiumMath.sign(command.modelMatrix[13]) * 2.0 * CesiumMath.PI * projection.ellipsoid.maximumRadius;\n                                BoundingSphere.transform(primitiveCommand.boundingSphere, command.modelMatrix, command.boundingVolume);\n                            }\n                        }\n                    }\n                }\n\n                var children = n.children;\n                if (defined(children)) {\n                    var childrenLength = children.length;\n                    for (var k = 0; k < childrenLength; ++k) {\n                        var child = children[k];\n\n                        // A node's transform needs to be updated if\n                        // - It was targeted for animation this frame, or\n                        // - Any of its ancestors were targeted for animation this frame\n\n                        // PERFORMANCE_IDEA: if a child has multiple parents and only one of the parents\n                        // is dirty, all the subtrees for each child instance will be dirty; we probably\n                        // won't see this in the wild often.\n                        child.dirtyNumber = Math.max(child.dirtyNumber, n.dirtyNumber);\n\n                        if ((child.dirtyNumber === maxDirtyNumber) || justLoaded) {\n                            // Don't check for modelTransformChanged since if only the model's model matrix changed,\n                            // we do not need to rebuild the local transform-to-root, only the final\n                            // [model's-model-matrix][transform-to-root] above.\n                            getNodeMatrix(child, child.transformToRoot);\n                            Matrix4.multiplyTransformation(transformToRoot, child.transformToRoot, child.transformToRoot);\n                        }\n\n                        nodeStack.push(child);\n                    }\n                }\n            }\n        }\n\n        ++model._maxDirtyNumber;\n    }\n\n    var scratchObjectSpace = new Matrix4();\n\n    function applySkins(model) {\n        var skinnedNodes = model._runtime.skinnedNodes;\n        var length = skinnedNodes.length;\n\n        for (var i = 0; i < length; ++i) {\n            var node = skinnedNodes[i];\n\n            scratchObjectSpace = Matrix4.inverseTransformation(node.transformToRoot, scratchObjectSpace);\n\n            var computedJointMatrices = node.computedJointMatrices;\n            var joints = node.joints;\n            var bindShapeMatrix = node.bindShapeMatrix;\n            var inverseBindMatrices = node.inverseBindMatrices;\n            var inverseBindMatricesLength = inverseBindMatrices.length;\n\n            for (var m = 0; m < inverseBindMatricesLength; ++m) {\n                // [joint-matrix] = [node-to-root^-1][joint-to-root][inverse-bind][bind-shape]\n                if (!defined(computedJointMatrices[m])) {\n                    computedJointMatrices[m] = new Matrix4();\n                }\n                computedJointMatrices[m] = Matrix4.multiplyTransformation(scratchObjectSpace, joints[m].transformToRoot, computedJointMatrices[m]);\n                computedJointMatrices[m] = Matrix4.multiplyTransformation(computedJointMatrices[m], inverseBindMatrices[m], computedJointMatrices[m]);\n                if (defined(bindShapeMatrix)) {\n                    // Optimization for when bind shape matrix is the identity.\n                    computedJointMatrices[m] = Matrix4.multiplyTransformation(computedJointMatrices[m], bindShapeMatrix, computedJointMatrices[m]);\n                }\n            }\n        }\n    }\n\n    function updatePerNodeShow(model) {\n        // Totally not worth it, but we could optimize this:\n        // http://help.agi.com/AGIComponents/html/BlogDeletionInBoundingVolumeHierarchies.htm\n\n        var rootNodes = model._runtime.rootNodes;\n        var length = rootNodes.length;\n\n        var nodeStack = scratchNodeStack;\n\n        for (var i = 0; i < length; ++i) {\n            var n = rootNodes[i];\n            n.computedShow = n.publicNode.show;\n            nodeStack.push(n);\n\n            while (nodeStack.length > 0) {\n                n = nodeStack.pop();\n                var show = n.computedShow;\n\n                var nodeCommands = n.commands;\n                var nodeCommandsLength = nodeCommands.length;\n                for (var j = 0; j < nodeCommandsLength; ++j) {\n                    nodeCommands[j].show = show;\n                }\n                // if commandsLength is zero, the node has a light or camera\n\n                var children = n.children;\n                if (defined(children)) {\n                    var childrenLength = children.length;\n                    for (var k = 0; k < childrenLength; ++k) {\n                        var child = children[k];\n                        // Parent needs to be shown for child to be shown.\n                        child.computedShow = show && child.publicNode.show;\n                        nodeStack.push(child);\n                    }\n                }\n            }\n        }\n    }\n\n    function updatePickIds(model, context) {\n        var id = model.id;\n        if (model._id !== id) {\n            model._id = id;\n\n            var pickIds = model._pickIds;\n            var length = pickIds.length;\n            for (var i = 0; i < length; ++i) {\n                pickIds[i].object.id = id;\n            }\n        }\n    }\n\n    function updateWireframe(model) {\n        if (model._debugWireframe !== model.debugWireframe) {\n            model._debugWireframe = model.debugWireframe;\n\n            // This assumes the original primitive was TRIANGLES and that the triangles\n            // are connected for the wireframe to look perfect.\n            var primitiveType = model.debugWireframe ? PrimitiveType.LINES : PrimitiveType.TRIANGLES;\n            var nodeCommands = model._nodeCommands;\n            var length = nodeCommands.length;\n\n            for (var i = 0; i < length; ++i) {\n                nodeCommands[i].command.primitiveType = primitiveType;\n            }\n        }\n    }\n\n    function updateShowBoundingVolume(model) {\n        if (model.debugShowBoundingVolume !== model._debugShowBoundingVolume) {\n            model._debugShowBoundingVolume = model.debugShowBoundingVolume;\n\n            var debugShowBoundingVolume = model.debugShowBoundingVolume;\n            var nodeCommands = model._nodeCommands;\n            var length = nodeCommands.length;\n\n            for (var i = 0; i < length; ++i) {\n                nodeCommands[i].command.debugShowBoundingVolume = debugShowBoundingVolume;\n            }\n        }\n    }\n\n    function updateShadows(model) {\n        if (model.shadows !== model._shadows) {\n            model._shadows = model.shadows;\n\n            var castShadows = ShadowMode.castShadows(model.shadows);\n            var receiveShadows = ShadowMode.receiveShadows(model.shadows);\n            var nodeCommands = model._nodeCommands;\n            var length = nodeCommands.length;\n\n            for (var i = 0; i < length; i++) {\n                var nodeCommand = nodeCommands[i];\n                nodeCommand.command.castShadows = castShadows;\n                nodeCommand.command.receiveShadows = receiveShadows;\n            }\n        }\n    }\n\n    function getTranslucentRenderState(renderState) {\n        var rs = clone(renderState, true);\n        rs.cull.enabled = false;\n        rs.depthTest.enabled = true;\n        rs.depthMask = false;\n        rs.blending = BlendingState.ALPHA_BLEND;\n\n        return RenderState.fromCache(rs);\n    }\n\n    function deriveTranslucentCommand(command) {\n        var translucentCommand = DrawCommand.shallowClone(command);\n        translucentCommand.pass = Pass.TRANSLUCENT;\n        translucentCommand.renderState = getTranslucentRenderState(command.renderState);\n        return translucentCommand;\n    }\n\n    function updateColor(model, frameState, forceDerive) {\n        // Generate translucent commands when the blend color has an alpha in the range (0.0, 1.0) exclusive\n        var scene3DOnly = frameState.scene3DOnly;\n        var alpha = model.color.alpha;\n        if ((alpha > 0.0) && (alpha < 1.0)) {\n            var nodeCommands = model._nodeCommands;\n            var length = nodeCommands.length;\n            if (!defined(nodeCommands[0].translucentCommand) || forceDerive) {\n                for (var i = 0; i < length; ++i) {\n                    var nodeCommand = nodeCommands[i];\n                    var command = nodeCommand.command;\n                    nodeCommand.translucentCommand = deriveTranslucentCommand(command);\n                    if (!scene3DOnly) {\n                        var command2D = nodeCommand.command2D;\n                        nodeCommand.translucentCommand2D = deriveTranslucentCommand(command2D);\n                    }\n                }\n            }\n        }\n    }\n\n    function getProgramId(model, program) {\n        var programs = model._rendererResources.programs;\n        for (var id in programs) {\n            if (programs.hasOwnProperty(id)) {\n                if (programs[id] === program) {\n                    return id;\n                }\n            }\n        }\n    }\n\n    function createSilhouetteProgram(model, program, frameState) {\n        var vs = program.vertexShaderSource.sources[0];\n        var attributeLocations = program._attributeLocations;\n        var normalAttributeName = model._normalAttributeName;\n\n        // Modified from http://forum.unity3d.com/threads/toon-outline-but-with-diffuse-surface.24668/\n        vs = ShaderSource.replaceMain(vs, 'gltf_silhouette_main');\n        vs +=\n            'uniform float gltf_silhouetteSize; \\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    gltf_silhouette_main(); \\n' +\n            '    vec3 n = normalize(czm_normal3D * ' + normalAttributeName + '); \\n' +\n            '    n.x *= czm_projection[0][0]; \\n' +\n            '    n.y *= czm_projection[1][1]; \\n' +\n            '    vec4 clip = gl_Position; \\n' +\n            '    clip.xy += n.xy * clip.w * gltf_silhouetteSize * czm_pixelRatio / czm_viewport.z; \\n' +\n            '    gl_Position = clip; \\n' +\n            '}';\n\n        var fs =\n            'uniform vec4 gltf_silhouetteColor; \\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    gl_FragColor = czm_gammaCorrect(gltf_silhouetteColor); \\n' +\n            '}';\n\n        return ShaderProgram.fromCache({\n            context : frameState.context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n    }\n\n    function hasSilhouette(model, frameState) {\n        return silhouetteSupported(frameState.context) && (model.silhouetteSize > 0.0) && (model.silhouetteColor.alpha > 0.0) && defined(model._normalAttributeName);\n    }\n\n    function hasTranslucentCommands(model) {\n        var nodeCommands = model._nodeCommands;\n        var length = nodeCommands.length;\n        for (var i = 0; i < length; ++i) {\n            var nodeCommand = nodeCommands[i];\n            var command = nodeCommand.command;\n            if (command.pass === Pass.TRANSLUCENT) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isTranslucent(model) {\n        return (model.color.alpha > 0.0) && (model.color.alpha < 1.0);\n    }\n\n    function isInvisible(model) {\n        return (model.color.alpha === 0.0);\n    }\n\n    function alphaDirty(currAlpha, prevAlpha) {\n        // Returns whether the alpha state has changed between invisible, translucent, or opaque\n        return (Math.floor(currAlpha) !== Math.floor(prevAlpha)) || (Math.ceil(currAlpha) !== Math.ceil(prevAlpha));\n    }\n\n    var silhouettesLength = 0;\n\n    function createSilhouetteCommands(model, frameState) {\n        // Wrap around after exceeding the 8-bit stencil limit.\n        // The reference is unique to each model until this point.\n        var stencilReference = (++silhouettesLength) % 255;\n\n        // If the model is translucent the silhouette needs to be in the translucent pass.\n        // Otherwise the silhouette would be rendered before the model.\n        var silhouetteTranslucent = hasTranslucentCommands(model) || isTranslucent(model) || (model.silhouetteColor.alpha < 1.0);\n        var silhouettePrograms = model._rendererResources.silhouettePrograms;\n        var scene3DOnly = frameState.scene3DOnly;\n        var nodeCommands = model._nodeCommands;\n        var length = nodeCommands.length;\n        for (var i = 0; i < length; ++i) {\n            var nodeCommand = nodeCommands[i];\n            var command = nodeCommand.command;\n\n            // Create model command\n            var modelCommand = isTranslucent(model) ? nodeCommand.translucentCommand : command;\n            var silhouetteModelCommand = DrawCommand.shallowClone(modelCommand);\n            var renderState = clone(modelCommand.renderState);\n\n            // Write the reference value into the stencil buffer.\n            renderState.stencilTest = {\n                enabled : true,\n                frontFunction : WebGLConstants.ALWAYS,\n                backFunction : WebGLConstants.ALWAYS,\n                reference : stencilReference,\n                mask : ~0,\n                frontOperation : {\n                    fail : WebGLConstants.KEEP,\n                    zFail : WebGLConstants.KEEP,\n                    zPass : WebGLConstants.REPLACE\n                },\n                backOperation : {\n                    fail : WebGLConstants.KEEP,\n                    zFail : WebGLConstants.KEEP,\n                    zPass : WebGLConstants.REPLACE\n                }\n            };\n\n            if (isInvisible(model)) {\n                // When the model is invisible disable color and depth writes but still write into the stencil buffer\n                renderState.colorMask = {\n                    red : false,\n                    green : false,\n                    blue : false,\n                    alpha : false\n                };\n                renderState.depthMask = false;\n            }\n            renderState = RenderState.fromCache(renderState);\n            silhouetteModelCommand.renderState = renderState;\n            nodeCommand.silhouetteModelCommand = silhouetteModelCommand;\n\n            // Create color command\n            var silhouetteColorCommand = DrawCommand.shallowClone(command);\n            renderState = clone(command.renderState, true);\n            renderState.depthTest.enabled = true;\n            renderState.cull.enabled = false;\n            if (silhouetteTranslucent) {\n                silhouetteColorCommand.pass = Pass.TRANSLUCENT;\n                renderState.depthMask = false;\n                renderState.blending = BlendingState.ALPHA_BLEND;\n            }\n\n            // Only render silhouette if the value in the stencil buffer equals the reference\n            renderState.stencilTest = {\n                enabled : true,\n                frontFunction : WebGLConstants.NOTEQUAL,\n                backFunction : WebGLConstants.NOTEQUAL,\n                reference : stencilReference,\n                mask : ~0,\n                frontOperation : {\n                    fail : WebGLConstants.KEEP,\n                    zFail : WebGLConstants.KEEP,\n                    zPass : WebGLConstants.KEEP\n                },\n                backOperation : {\n                    fail : WebGLConstants.KEEP,\n                    zFail : WebGLConstants.KEEP,\n                    zPass : WebGLConstants.KEEP\n                }\n            };\n            renderState = RenderState.fromCache(renderState);\n\n            // If the silhouette program has already been cached use it\n            var program = command.shaderProgram;\n            var id = getProgramId(model, program);\n            var silhouetteProgram = silhouettePrograms[id];\n            if (!defined(silhouetteProgram)) {\n                silhouetteProgram = createSilhouetteProgram(model, program, frameState);\n                silhouettePrograms[id] = silhouetteProgram;\n            }\n\n            var silhouetteUniformMap = combine(command.uniformMap, {\n                gltf_silhouetteColor : createSilhouetteColorFunction(model),\n                gltf_silhouetteSize : createSilhouetteSizeFunction(model)\n            });\n\n            silhouetteColorCommand.renderState = renderState;\n            silhouetteColorCommand.shaderProgram = silhouetteProgram;\n            silhouetteColorCommand.uniformMap = silhouetteUniformMap;\n            silhouetteColorCommand.castShadows = false;\n            silhouetteColorCommand.receiveShadows = false;\n            nodeCommand.silhouetteColorCommand = silhouetteColorCommand;\n\n            if (!scene3DOnly) {\n                var command2D = nodeCommand.command2D;\n                var silhouetteModelCommand2D = DrawCommand.shallowClone(silhouetteModelCommand);\n                silhouetteModelCommand2D.boundingVolume = command2D.boundingVolume;\n                silhouetteModelCommand2D.modelMatrix = command2D.modelMatrix;\n                nodeCommand.silhouetteModelCommand2D = silhouetteModelCommand2D;\n\n                var silhouetteColorCommand2D = DrawCommand.shallowClone(silhouetteColorCommand);\n                silhouetteModelCommand2D.boundingVolume = command2D.boundingVolume;\n                silhouetteModelCommand2D.modelMatrix = command2D.modelMatrix;\n                nodeCommand.silhouetteColorCommand2D = silhouetteColorCommand2D;\n            }\n        }\n    }\n\n    function modifyShaderForClippingPlanes(shader, clippingPlaneCollection, context) {\n        shader = ShaderSource.replaceMain(shader, 'gltf_clip_main');\n        shader += Model._getClippingFunction(clippingPlaneCollection, context) + '\\n';\n        shader +=\n            'uniform sampler2D gltf_clippingPlanes; \\n' +\n            'uniform mat4 gltf_clippingPlanesMatrix; \\n' +\n            'uniform vec4 gltf_clippingPlanesEdgeStyle; \\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    gltf_clip_main(); \\n' +\n            getClipAndStyleCode('gltf_clippingPlanes', 'gltf_clippingPlanesMatrix', 'gltf_clippingPlanesEdgeStyle') +\n            '} \\n';\n        return shader;\n    }\n\n    function updateSilhouette(model, frameState, force) {\n        // Generate silhouette commands when the silhouette size is greater than 0.0 and the alpha is greater than 0.0\n        // There are two silhouette commands:\n        //     1. silhouetteModelCommand : render model normally while enabling stencil mask\n        //     2. silhouetteColorCommand : render enlarged model with a solid color while enabling stencil tests\n        if (!hasSilhouette(model, frameState)) {\n            return;\n        }\n\n        var nodeCommands = model._nodeCommands;\n        var dirty = alphaDirty(model.color.alpha, model._colorPreviousAlpha) ||\n                    alphaDirty(model.silhouetteColor.alpha, model._silhouetteColorPreviousAlpha) ||\n                    !defined(nodeCommands[0].silhouetteModelCommand);\n\n        model._colorPreviousAlpha = model.color.alpha;\n        model._silhouetteColorPreviousAlpha = model.silhouetteColor.alpha;\n\n        if (dirty || force) {\n            createSilhouetteCommands(model, frameState);\n        }\n    }\n\n    function updateClippingPlanes(model, frameState) {\n        var clippingPlanes = model._clippingPlanes;\n        if (defined(clippingPlanes) && clippingPlanes.owner === model) {\n            if (clippingPlanes.enabled) {\n                clippingPlanes.update(frameState);\n            }\n        }\n    }\n\n    var scratchBoundingSphere = new BoundingSphere();\n\n    function scaleInPixels(positionWC, radius, frameState) {\n        scratchBoundingSphere.center = positionWC;\n        scratchBoundingSphere.radius = radius;\n        return frameState.camera.getPixelSize(scratchBoundingSphere, frameState.context.drawingBufferWidth, frameState.context.drawingBufferHeight);\n    }\n\n    var scratchPosition = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n\n    function getScale(model, frameState) {\n        var scale = model.scale;\n\n        if (model.minimumPixelSize !== 0.0) {\n            // Compute size of bounding sphere in pixels\n            var context = frameState.context;\n            var maxPixelSize = Math.max(context.drawingBufferWidth, context.drawingBufferHeight);\n            var m = defined(model._clampedModelMatrix) ? model._clampedModelMatrix : model.modelMatrix;\n            scratchPosition.x = m[12];\n            scratchPosition.y = m[13];\n            scratchPosition.z = m[14];\n\n            if (defined(model._rtcCenter)) {\n                Cartesian3.add(model._rtcCenter, scratchPosition, scratchPosition);\n            }\n\n            if (model._mode !== SceneMode.SCENE3D) {\n                var projection = frameState.mapProjection;\n                var cartographic = projection.ellipsoid.cartesianToCartographic(scratchPosition, scratchCartographic);\n                projection.project(cartographic, scratchPosition);\n                Cartesian3.fromElements(scratchPosition.z, scratchPosition.x, scratchPosition.y, scratchPosition);\n            }\n\n            var radius = model.boundingSphere.radius;\n            var metersPerPixel = scaleInPixels(scratchPosition, radius, frameState);\n\n            // metersPerPixel is always > 0.0\n            var pixelsPerMeter = 1.0 / metersPerPixel;\n            var diameterInPixels = Math.min(pixelsPerMeter * (2.0 * radius), maxPixelSize);\n\n            // Maintain model's minimum pixel size\n            if (diameterInPixels < model.minimumPixelSize) {\n                scale = (model.minimumPixelSize * metersPerPixel) / (2.0 * model._initialRadius);\n            }\n        }\n\n        return defined(model.maximumScale) ? Math.min(model.maximumScale, scale) : scale;\n    }\n\n    function releaseCachedGltf(model) {\n        if (defined(model._cacheKey) && defined(model._cachedGltf) && (--model._cachedGltf.count === 0)) {\n            delete gltfCache[model._cacheKey];\n        }\n        model._cachedGltf = undefined;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function CachedRendererResources(context, cacheKey) {\n        this.buffers = undefined;\n        this.vertexArrays = undefined;\n        this.programs = undefined;\n        this.sourceShaders = undefined;\n        this.silhouettePrograms = undefined;\n        this.textures = undefined;\n        this.samplers = undefined;\n        this.renderStates = undefined;\n        this.ready = false;\n\n        this.context = context;\n        this.cacheKey = cacheKey;\n        this.count = 0;\n    }\n\n    function destroy(property) {\n        for (var name in property) {\n            if (property.hasOwnProperty(name)) {\n                property[name].destroy();\n            }\n        }\n    }\n\n    function destroyCachedRendererResources(resources) {\n        destroy(resources.buffers);\n        destroy(resources.vertexArrays);\n        destroy(resources.programs);\n        destroy(resources.silhouettePrograms);\n        destroy(resources.textures);\n    }\n\n    CachedRendererResources.prototype.release = function() {\n        if (--this.count === 0) {\n            if (defined(this.cacheKey)) {\n                // Remove if this was cached\n                delete this.context.cache.modelRendererResourceCache[this.cacheKey];\n            }\n            destroyCachedRendererResources(this);\n            return destroyObject(this);\n        }\n\n        return undefined;\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function getUpdateHeightCallback(model, ellipsoid, cartoPosition) {\n        return function(clampedPosition) {\n            if (model.heightReference === HeightReference.RELATIVE_TO_GROUND) {\n                var clampedCart = ellipsoid.cartesianToCartographic(clampedPosition, scratchCartographic);\n                clampedCart.height += cartoPosition.height;\n                ellipsoid.cartographicToCartesian(clampedCart, clampedPosition);\n            }\n\n            var clampedModelMatrix = model._clampedModelMatrix;\n\n            // Modify clamped model matrix to use new height\n            Matrix4.clone(model.modelMatrix, clampedModelMatrix);\n            clampedModelMatrix[12] = clampedPosition.x;\n            clampedModelMatrix[13] = clampedPosition.y;\n            clampedModelMatrix[14] = clampedPosition.z;\n\n            model._heightChanged = true;\n        };\n    }\n\n    function updateClamping(model) {\n        if (defined(model._removeUpdateHeightCallback)) {\n            model._removeUpdateHeightCallback();\n            model._removeUpdateHeightCallback = undefined;\n        }\n\n        var scene = model._scene;\n        if (!defined(scene) || !defined(scene.globe) || (model.heightReference === HeightReference.NONE)) {\n            \n            model._clampedModelMatrix = undefined;\n            return;\n        }\n\n        var globe = scene.globe;\n        var ellipsoid = globe.ellipsoid;\n\n        // Compute cartographic position so we don't recompute every update\n        var modelMatrix = model.modelMatrix;\n        scratchPosition.x = modelMatrix[12];\n        scratchPosition.y = modelMatrix[13];\n        scratchPosition.z = modelMatrix[14];\n        var cartoPosition = ellipsoid.cartesianToCartographic(scratchPosition);\n\n        if (!defined(model._clampedModelMatrix)) {\n            model._clampedModelMatrix = Matrix4.clone(modelMatrix, new Matrix4());\n        }\n\n        // Install callback to handle updating of terrain tiles\n        var surface = globe._surface;\n        model._removeUpdateHeightCallback = surface.updateHeight(cartoPosition, getUpdateHeightCallback(model, ellipsoid, cartoPosition));\n\n        // Set the correct height now\n        var height = globe.getHeight(cartoPosition);\n        if (defined(height)) {\n            // Get callback with cartoPosition being the non-clamped position\n            var cb = getUpdateHeightCallback(model, ellipsoid, cartoPosition);\n\n            // Compute the clamped cartesian and call updateHeight callback\n            Cartographic.clone(cartoPosition, scratchCartographic);\n            scratchCartographic.height = height;\n            ellipsoid.cartographicToCartesian(scratchCartographic, scratchPosition);\n            cb(scratchPosition);\n        }\n    }\n\n    var scratchDisplayConditionCartesian = new Cartesian3();\n    var scratchDistanceDisplayConditionCartographic = new Cartographic();\n\n    function distanceDisplayConditionVisible(model, frameState) {\n        var distance2;\n        var ddc = model.distanceDisplayCondition;\n        var nearSquared = ddc.near * ddc.near;\n        var farSquared = ddc.far * ddc.far;\n\n        if (frameState.mode === SceneMode.SCENE2D) {\n            var frustum2DWidth = frameState.camera.frustum.right - frameState.camera.frustum.left;\n            distance2 = frustum2DWidth * 0.5;\n            distance2 = distance2 * distance2;\n        } else {\n            // Distance to center of primitive's reference frame\n            var position = Matrix4.getTranslation(model.modelMatrix, scratchDisplayConditionCartesian);\n            if (frameState.mode === SceneMode.COLUMBUS_VIEW) {\n                var projection = frameState.mapProjection;\n                var ellipsoid = projection.ellipsoid;\n                var cartographic = ellipsoid.cartesianToCartographic(position, scratchDistanceDisplayConditionCartographic);\n                position = projection.project(cartographic, position);\n                Cartesian3.fromElements(position.z, position.x, position.y, position);\n            }\n            distance2 = Cartesian3.distanceSquared(position, frameState.camera.positionWC);\n        }\n\n        return (distance2 >= nearSquared) && (distance2 <= farSquared);\n    }\n\n    /**\n     * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n     * get the draw commands needed to render this primitive.\n     * <p>\n     * Do not call this function directly.  This is documented just to\n     * list the exceptions that may be propagated when the scene is rendered:\n     * </p>\n     *\n     * @exception {RuntimeError} Failed to load external reference.\n     */\n    Model.prototype.update = function(frameState) {\n        if (frameState.mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        if (!FeatureDetection.supportsWebP.initialized) {\n            FeatureDetection.supportsWebP.initialize();\n            return;\n        }\n        var supportsWebP = FeatureDetection.supportsWebP();\n\n        var context = frameState.context;\n        this._defaultTexture = context.defaultTexture;\n\n        if ((this._state === ModelState.NEEDS_LOAD) && defined(this.gltf)) {\n            // Use renderer resources from cache instead of loading/creating them?\n            var cachedRendererResources;\n            var cacheKey = this.cacheKey;\n            if (defined(cacheKey)) { // cache key given? this model will pull from or contribute to context level cache\n                context.cache.modelRendererResourceCache = defaultValue(context.cache.modelRendererResourceCache, {});\n                var modelCaches = context.cache.modelRendererResourceCache;\n\n                cachedRendererResources = modelCaches[this.cacheKey];\n                if (defined(cachedRendererResources)) {\n                    if (!cachedRendererResources.ready) {\n                        // Cached resources for the model are not loaded yet.  We'll\n                        // try again every frame until they are.\n                        return;\n                    }\n\n                    ++cachedRendererResources.count;\n                    this._loadRendererResourcesFromCache = true;\n                } else {\n                    cachedRendererResources = new CachedRendererResources(context, cacheKey);\n                    cachedRendererResources.count = 1;\n                    modelCaches[this.cacheKey] = cachedRendererResources;\n                }\n                this._cachedRendererResources = cachedRendererResources;\n            } else { // cache key not given? this model doesn't care about context level cache at all. Cache is here to simplify freeing on destroy.\n                cachedRendererResources = new CachedRendererResources(context);\n                cachedRendererResources.count = 1;\n                this._cachedRendererResources = cachedRendererResources;\n            }\n\n            this._state = ModelState.LOADING;\n            if (this._state !== ModelState.FAILED) {\n                var extensions = this.gltf.extensions;\n                if (defined(extensions) && defined(extensions.CESIUM_RTC)) {\n                    var center = Cartesian3.fromArray(extensions.CESIUM_RTC.center);\n                    if (!Cartesian3.equals(center, Cartesian3.ZERO)) {\n                        this._rtcCenter3D = center;\n\n                        var projection = frameState.mapProjection;\n                        var ellipsoid = projection.ellipsoid;\n                        var cartographic = ellipsoid.cartesianToCartographic(this._rtcCenter3D);\n                        var projectedCart = projection.project(cartographic);\n                        Cartesian3.fromElements(projectedCart.z, projectedCart.x, projectedCart.y, projectedCart);\n                        this._rtcCenter2D = projectedCart;\n\n                        this._rtcCenterEye = new Cartesian3();\n                        this._rtcCenter = this._rtcCenter3D;\n                    }\n                }\n\n                addPipelineExtras(this.gltf);\n\n                this._loadResources = new ModelLoadResources();\n                if (!this._loadRendererResourcesFromCache) {\n                    // Buffers are required to updateVersion\n                    ModelUtility.parseBuffers(this, bufferLoad);\n                }\n            }\n        }\n\n        var loadResources = this._loadResources;\n        var incrementallyLoadTextures = this._incrementallyLoadTextures;\n        var justLoaded = false;\n\n        if (this._state === ModelState.LOADING) {\n            // Transition from LOADING -> LOADED once resources are downloaded and created.\n            // Textures may continue to stream in while in the LOADED state.\n            if (loadResources.pendingBufferLoads === 0) {\n                if (!loadResources.initialized) {\n                    frameState.brdfLutGenerator.update(frameState);\n\n                    ModelUtility.checkSupportedExtensions(this.extensionsRequired, supportsWebP);\n                    ModelUtility.updateForwardAxis(this);\n\n                    // glTF pipeline updates, not needed if loading from cache\n                    if (!defined(this.gltf.extras.sourceVersion)) {\n                        var gltf = this.gltf;\n                        // Add the original version so it remains cached\n                        gltf.extras.sourceVersion = ModelUtility.getAssetVersion(gltf);\n                        gltf.extras.sourceKHRTechniquesWebGL = defined(ModelUtility.getUsedExtensions(gltf).KHR_techniques_webgl);\n\n                        this._sourceVersion = gltf.extras.sourceVersion;\n                        this._sourceKHRTechniquesWebGL = gltf.extras.sourceKHRTechniquesWebGL;\n\n                        updateVersion(gltf);\n                        addDefaults(gltf);\n\n                        var options = {\n                            addBatchIdToGeneratedShaders: this._addBatchIdToGeneratedShaders\n                        };\n\n                        processModelMaterialsCommon(gltf, options);\n                        processPbrMaterials(gltf, options);\n                    }\n\n                    this._sourceVersion = this.gltf.extras.sourceVersion;\n                    this._sourceKHRTechniquesWebGL = this.gltf.extras.sourceKHRTechniquesWebGL;\n\n                    // Skip dequantizing in the shader if not encoded\n                    this._dequantizeInShader = this._dequantizeInShader && DracoLoader.hasExtension(this);\n\n                    // We do this after to make sure that the ids don't change\n                    addBuffersToLoadResources(this);\n                    parseArticulations(this);\n                    parseTechniques(this);\n                    if (!this._loadRendererResourcesFromCache) {\n                        parseBufferViews(this);\n                        parseShaders(this);\n                        parsePrograms(this);\n                        parseTextures(this, context, supportsWebP);\n                    }\n                    parseMaterials(this);\n                    parseMeshes(this);\n                    parseNodes(this);\n\n                    // Start draco decoding\n                    DracoLoader.parse(this, context);\n\n                    loadResources.initialized = true;\n                }\n\n                if (!loadResources.finishedDecoding()) {\n                    DracoLoader.decodeModel(this, context)\n                        .otherwise(ModelUtility.getFailedLoadFunction(this, 'model', this.basePath));\n                }\n\n                if (loadResources.finishedDecoding() && !loadResources.resourcesParsed) {\n                    this._boundingSphere = ModelUtility.computeBoundingSphere(this);\n                    this._initialRadius = this._boundingSphere.radius;\n\n                    DracoLoader.cacheDataForModel(this);\n\n                    loadResources.resourcesParsed = true;\n                }\n\n                if (loadResources.resourcesParsed &&\n                    loadResources.pendingShaderLoads === 0) {\n                    createResources(this, frameState);\n                }\n            }\n\n            if (loadResources.finished() ||\n                (incrementallyLoadTextures && loadResources.finishedEverythingButTextureCreation())) {\n                this._state = ModelState.LOADED;\n                justLoaded = true;\n            }\n        }\n\n        // Incrementally stream textures.\n        if (defined(loadResources) && (this._state === ModelState.LOADED)) {\n            if (incrementallyLoadTextures && !justLoaded) {\n                createResources(this, frameState);\n            }\n\n            if (loadResources.finished()) {\n                this._loadResources = undefined;  // Clear CPU memory since WebGL resources were created.\n\n                var resources = this._rendererResources;\n                var cachedResources = this._cachedRendererResources;\n\n                cachedResources.buffers = resources.buffers;\n                cachedResources.vertexArrays = resources.vertexArrays;\n                cachedResources.programs = resources.programs;\n                cachedResources.sourceShaders = resources.sourceShaders;\n                cachedResources.silhouettePrograms = resources.silhouettePrograms;\n                cachedResources.textures = resources.textures;\n                cachedResources.samplers = resources.samplers;\n                cachedResources.renderStates = resources.renderStates;\n                cachedResources.ready = true;\n\n                // The normal attribute name is required for silhouettes, so get it before the gltf JSON is released\n                this._normalAttributeName = ModelUtility.getAttributeOrUniformBySemantic(this.gltf, 'NORMAL');\n\n                // Vertex arrays are unique to this model, do not store in cache.\n                if (defined(this._precreatedAttributes)) {\n                    cachedResources.vertexArrays = {};\n                }\n\n                if (this.releaseGltfJson) {\n                    releaseCachedGltf(this);\n                }\n            }\n        }\n\n        var iblSupported = OctahedralProjectedCubeMap.isSupported(context);\n        if (this._shouldUpdateSpecularMapAtlas && iblSupported) {\n            this._shouldUpdateSpecularMapAtlas = false;\n            this._specularEnvironmentMapAtlas = this._specularEnvironmentMapAtlas && this._specularEnvironmentMapAtlas.destroy();\n            this._specularEnvironmentMapAtlas = undefined;\n            if (defined(this._specularEnvironmentMaps)) {\n                this._specularEnvironmentMapAtlas = new OctahedralProjectedCubeMap(this._specularEnvironmentMaps);\n                var that = this;\n                this._specularEnvironmentMapAtlas.readyPromise\n                    .then(function() {\n                        that._shouldRegenerateShaders = true;\n                    })\n                    .otherwise(function(error) {\n                        console.error('Error loading specularEnvironmentMaps: ' + error);\n                    });\n            }\n\n            // Regenerate shaders to not use an environment map. Will be set to true again if there was a new environment map and it is ready.\n            this._shouldRegenerateShaders = true;\n        }\n\n        if (defined(this._specularEnvironmentMapAtlas)) {\n            this._specularEnvironmentMapAtlas.update(frameState);\n        }\n\n        var recompileWithDefaultAtlas = !defined(this._specularEnvironmentMapAtlas) && defined(frameState.specularEnvironmentMaps) && !this._useDefaultSpecularMaps;\n        var recompileWithoutDefaultAtlas = !defined(frameState.specularEnvironmentMaps) && this._useDefaultSpecularMaps;\n\n        var recompileWithDefaultSHCoeffs = !defined(this._sphericalHarmonicCoefficients) && defined(frameState.sphericalHarmonicCoefficients) && !this._useDefaultSphericalHarmonics;\n        var recompileWithoutDefaultSHCoeffs = !defined(frameState.sphericalHarmonicCoefficients) && this._useDefaultSphericalHarmonics;\n\n        this._shouldRegenerateShaders = this._shouldRegenerateShaders || recompileWithDefaultAtlas || recompileWithoutDefaultAtlas || recompileWithDefaultSHCoeffs || recompileWithoutDefaultSHCoeffs;\n\n        this._useDefaultSpecularMaps = !defined(this._specularEnvironmentMapAtlas) && defined(frameState.specularEnvironmentMaps);\n        this._useDefaultSphericalHarmonics = !defined(this._sphericalHarmonicCoefficients) && defined(frameState.sphericalHarmonicCoefficients);\n\n        var silhouette = hasSilhouette(this, frameState);\n        var translucent = isTranslucent(this);\n        var invisible = isInvisible(this);\n        var displayConditionPassed = defined(this.distanceDisplayCondition) ? distanceDisplayConditionVisible(this, frameState) : true;\n        var show = this.show && displayConditionPassed && (this.scale !== 0.0) && (!invisible || silhouette);\n\n        if ((show && this._state === ModelState.LOADED) || justLoaded) {\n            var animated = this.activeAnimations.update(frameState) || this._cesiumAnimationsDirty;\n            this._cesiumAnimationsDirty = false;\n            this._dirty = false;\n            var modelMatrix = this.modelMatrix;\n\n            var modeChanged = frameState.mode !== this._mode;\n            this._mode = frameState.mode;\n\n            // Model's model matrix needs to be updated\n            var modelTransformChanged = !Matrix4.equals(this._modelMatrix, modelMatrix) ||\n                (this._scale !== this.scale) ||\n                (this._minimumPixelSize !== this.minimumPixelSize) || (this.minimumPixelSize !== 0.0) || // Minimum pixel size changed or is enabled\n                (this._maximumScale !== this.maximumScale) ||\n                (this._heightReference !== this.heightReference) || this._heightChanged ||\n                modeChanged;\n\n            if (modelTransformChanged || justLoaded) {\n                Matrix4.clone(modelMatrix, this._modelMatrix);\n\n                updateClamping(this);\n\n                if (defined(this._clampedModelMatrix)) {\n                    modelMatrix = this._clampedModelMatrix;\n                }\n\n                this._scale = this.scale;\n                this._minimumPixelSize = this.minimumPixelSize;\n                this._maximumScale = this.maximumScale;\n                this._heightReference = this.heightReference;\n                this._heightChanged = false;\n\n                var scale = getScale(this, frameState);\n                var computedModelMatrix = this._computedModelMatrix;\n                Matrix4.multiplyByUniformScale(modelMatrix, scale, computedModelMatrix);\n                if (this._upAxis === Axis.Y) {\n                    Matrix4.multiplyTransformation(computedModelMatrix, Axis.Y_UP_TO_Z_UP, computedModelMatrix);\n                } else if (this._upAxis === Axis.X) {\n                    Matrix4.multiplyTransformation(computedModelMatrix, Axis.X_UP_TO_Z_UP, computedModelMatrix);\n                }\n                if (this.forwardAxis === Axis.Z) {\n                    // glTF 2.0 has a Z-forward convention that must be adapted here to X-forward.\n                    Matrix4.multiplyTransformation(computedModelMatrix, Axis.Z_UP_TO_X_UP, computedModelMatrix);\n                }\n            }\n\n            // Update modelMatrix throughout the graph as needed\n            if (animated || modelTransformChanged || justLoaded) {\n                updateNodeHierarchyModelMatrix(this, modelTransformChanged, justLoaded, frameState.mapProjection);\n                this._dirty = true;\n\n                if (animated || justLoaded) {\n                    // Apply skins if animation changed any node transforms\n                    applySkins(this);\n                }\n            }\n\n            if (this._perNodeShowDirty) {\n                this._perNodeShowDirty = false;\n                updatePerNodeShow(this);\n            }\n            updatePickIds(this, context);\n            updateWireframe(this);\n            updateShowBoundingVolume(this);\n            updateShadows(this);\n            updateClippingPlanes(this, frameState);\n\n            // Regenerate shaders if ClippingPlaneCollection state changed or it was removed\n            var clippingPlanes = this._clippingPlanes;\n            var currentClippingPlanesState = 0;\n            var useClippingPlanes = defined(clippingPlanes) && clippingPlanes.enabled && clippingPlanes.length > 0;\n            var usesSH = defined(this._sphericalHarmonicCoefficients) || this._useDefaultSphericalHarmonics;\n            var usesSM = (defined(this._specularEnvironmentMapAtlas) && this._specularEnvironmentMapAtlas.ready) || this._useDefaultSpecularMaps;\n            if (useClippingPlanes || usesSH || usesSM) {\n                var clippingPlanesOriginMatrix = defaultValue(this.clippingPlanesOriginMatrix, modelMatrix);\n                Matrix4.multiply(context.uniformState.view3D, clippingPlanesOriginMatrix, this._clippingPlaneModelViewMatrix);\n            }\n\n            if (useClippingPlanes) {\n                currentClippingPlanesState = clippingPlanes.clippingPlanesState;\n            }\n\n            var shouldRegenerateShaders = this._shouldRegenerateShaders;\n            shouldRegenerateShaders = shouldRegenerateShaders || this._clippingPlanesState !== currentClippingPlanesState;\n            this._clippingPlanesState = currentClippingPlanesState;\n\n            // Regenerate shaders if color shading changed from last update\n            var currentlyColorShadingEnabled = isColorShadingEnabled(this);\n            if (currentlyColorShadingEnabled !== this._colorShadingEnabled) {\n                this._colorShadingEnabled = currentlyColorShadingEnabled;\n                shouldRegenerateShaders = true;\n            }\n\n            if (shouldRegenerateShaders) {\n                regenerateShaders(this, frameState);\n            } else {\n                updateColor(this, frameState, false);\n                updateSilhouette(this, frameState, false);\n            }\n        }\n\n        if (justLoaded) {\n            // Called after modelMatrix update.\n            var model = this;\n            frameState.afterRender.push(function() {\n                model._ready = true;\n                model._readyPromise.resolve(model);\n            });\n            return;\n        }\n\n        // We don't check show at the top of the function since we\n        // want to be able to progressively load models when they are not shown,\n        // and then have them visible immediately when show is set to true.\n        if (show && !this._ignoreCommands) {\n            // PERFORMANCE_IDEA: This is terrible\n            var commandList = frameState.commandList;\n            var passes = frameState.passes;\n            var nodeCommands = this._nodeCommands;\n            var length = nodeCommands.length;\n            var i;\n            var nc;\n\n            var idl2D = frameState.mapProjection.ellipsoid.maximumRadius * CesiumMath.PI;\n            var boundingVolume;\n\n            if (passes.render || (passes.pick && this.allowPicking)) {\n                for (i = 0; i < length; ++i) {\n                    nc = nodeCommands[i];\n                    if (nc.show) {\n                        var command = translucent ? nc.translucentCommand : nc.command;\n                        command = silhouette ? nc.silhouetteModelCommand : command;\n                        commandList.push(command);\n                        boundingVolume = nc.command.boundingVolume;\n                        if (frameState.mode === SceneMode.SCENE2D &&\n                            (boundingVolume.center.y + boundingVolume.radius > idl2D || boundingVolume.center.y - boundingVolume.radius < idl2D)) {\n                            var command2D = translucent ? nc.translucentCommand2D : nc.command2D;\n                            command2D = silhouette ? nc.silhouetteModelCommand2D : command2D;\n                            commandList.push(command2D);\n                        }\n                    }\n                }\n\n                if (silhouette && !passes.pick) {\n                    // Render second silhouette pass\n                    for (i = 0; i < length; ++i) {\n                        nc = nodeCommands[i];\n                        if (nc.show) {\n                            commandList.push(nc.silhouetteColorCommand);\n                            boundingVolume = nc.command.boundingVolume;\n                            if (frameState.mode === SceneMode.SCENE2D &&\n                                (boundingVolume.center.y + boundingVolume.radius > idl2D || boundingVolume.center.y - boundingVolume.radius < idl2D)) {\n                                commandList.push(nc.silhouetteColorCommand2D);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        var credit = this._credit;\n        if (defined(credit)) {\n            frameState.creditDisplay.addCredit(credit);\n        }\n\n        var resourceCredits = this._resourceCredits;\n        var creditCount = resourceCredits.length;\n        for (var c = 0; c < creditCount; c++) {\n            frameState.creditDisplay.addCredit(resourceCredits[c]);\n        }\n    };\n\n    function destroyIfNotCached(rendererResources, cachedRendererResources) {\n        if (rendererResources.programs !== cachedRendererResources.programs) {\n            destroy(rendererResources.programs);\n        }\n        if (rendererResources.silhouettePrograms !== cachedRendererResources.silhouettePrograms) {\n            destroy(rendererResources.silhouettePrograms);\n        }\n    }\n\n    // Run from update iff:\n    // - everything is loaded\n    // - clipping planes state change OR color state set\n    // Run this from destructor after removing color state and clipping plane state\n    function regenerateShaders(model, frameState) {\n        // In regards to _cachedRendererResources:\n        // Fair to assume that this is data that should just never get modified due to clipping planes or model color.\n        // So if clipping planes or model color active:\n        // - delink _rendererResources.*programs and create new dictionaries.\n        // - do NOT destroy any programs - might be used by copies of the model or by might be needed in the future if clipping planes/model color is deactivated\n\n        // If clipping planes and model color inactive:\n        // - destroy _rendererResources.*programs\n        // - relink _rendererResources.*programs to _cachedRendererResources\n\n        // In both cases, need to mark commands as dirty, re-run derived commands (elsewhere)\n\n        var rendererResources = model._rendererResources;\n        var cachedRendererResources = model._cachedRendererResources;\n        destroyIfNotCached(rendererResources, cachedRendererResources);\n\n        var programId;\n        if (isClippingEnabled(model) || isColorShadingEnabled(model) || model._shouldRegenerateShaders) {\n            model._shouldRegenerateShaders = false;\n\n            rendererResources.programs = {};\n            rendererResources.silhouettePrograms = {};\n\n            var visitedPrograms = {};\n            var techniques = model._sourceTechniques;\n            var technique;\n\n            for (var techniqueId in techniques) {\n                if (techniques.hasOwnProperty(techniqueId)) {\n                    technique = techniques[techniqueId];\n                    programId = technique.program;\n                    if (!visitedPrograms[programId]) {\n                        visitedPrograms[programId] = true;\n                        recreateProgram({\n                            programId: programId,\n                            techniqueId: techniqueId\n                        }, model, frameState.context);\n                    }\n                }\n            }\n        } else {\n            rendererResources.programs = cachedRendererResources.programs;\n            rendererResources.silhouettePrograms = cachedRendererResources.silhouettePrograms;\n        }\n\n        // Fix all the commands, marking them as dirty so everything that derives will re-derive\n        var rendererPrograms = rendererResources.programs;\n\n        var nodeCommands = model._nodeCommands;\n        var commandCount = nodeCommands.length;\n        for (var i = 0; i < commandCount; ++i) {\n            var nodeCommand = nodeCommands[i];\n            programId = nodeCommand.programId;\n\n            var renderProgram = rendererPrograms[programId];\n            nodeCommand.command.shaderProgram = renderProgram;\n            if (defined(nodeCommand.command2D)) {\n                nodeCommand.command2D.shaderProgram = renderProgram;\n            }\n        }\n\n        // Force update silhouette commands/shaders\n        updateColor(model, frameState, true);\n        updateSilhouette(model, frameState, true);\n    }\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see Model#destroy\n     */\n    Model.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * model = model && model.destroy();\n     *\n     * @see Model#isDestroyed\n     */\n    Model.prototype.destroy = function() {\n        // Vertex arrays are unique to this model, destroy here.\n        if (defined(this._precreatedAttributes)) {\n            destroy(this._rendererResources.vertexArrays);\n        }\n\n        if (defined(this._removeUpdateHeightCallback)) {\n            this._removeUpdateHeightCallback();\n            this._removeUpdateHeightCallback = undefined;\n        }\n\n        if (defined(this._terrainProviderChangedCallback)) {\n            this._terrainProviderChangedCallback();\n            this._terrainProviderChangedCallback = undefined;\n        }\n\n        // Shaders modified for clipping and for color don't get cached, so destroy these manually\n        if (defined(this._cachedRendererResources)) {\n            destroyIfNotCached(this._rendererResources, this._cachedRendererResources);\n        }\n\n        this._rendererResources = undefined;\n        this._cachedRendererResources = this._cachedRendererResources && this._cachedRendererResources.release();\n        DracoLoader.destroyCachedDataForModel(this);\n\n        var pickIds = this._pickIds;\n        var length = pickIds.length;\n        for (var i = 0; i < length; ++i) {\n            pickIds[i].destroy();\n        }\n\n        releaseCachedGltf(this);\n        this._quantizedVertexShaders = undefined;\n\n        // Only destroy the ClippingPlaneCollection if this is the owner - if this model is part of a Cesium3DTileset,\n        // _clippingPlanes references a ClippingPlaneCollection that this model does not own.\n        var clippingPlaneCollection = this._clippingPlanes;\n        if (defined(clippingPlaneCollection) && !clippingPlaneCollection.isDestroyed() && clippingPlaneCollection.owner === this) {\n            clippingPlaneCollection.destroy();\n        }\n        this._clippingPlanes = undefined;\n\n        this._specularEnvironmentMapAtlas = this._specularEnvironmentMapAtlas && this._specularEnvironmentMapAtlas.destroy();\n\n        return destroyObject(this);\n    };\n\n    // exposed for testing\n    Model._getClippingFunction = getClippingFunction;\n    Model._modifyShaderForColor = modifyShaderForColor;\nexport default Model;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Axis from '../Scene/Axis.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Resource from '../Core/Resource.js';\nimport ColorBlendMode from '../Scene/ColorBlendMode.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport Model from '../Scene/Model.js';\nimport ModelAnimationLoop from '../Scene/ModelAnimationLoop.js';\nimport ShadowMode from '../Scene/ShadowMode.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\n    var defaultScale = 1.0;\n    var defaultMinimumPixelSize = 0.0;\n    var defaultIncrementallyLoadTextures = true;\n    var defaultClampAnimations = true;\n    var defaultShadows = ShadowMode.ENABLED;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultSilhouetteColor = Color.RED;\n    var defaultSilhouetteSize = 0.0;\n    var defaultColor = Color.WHITE;\n    var defaultColorBlendMode = ColorBlendMode.HIGHLIGHT;\n    var defaultColorBlendAmount = 0.5;\n    var defaultImageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n    var defaultUpAxis = Axis.Y;\n\n    var modelMatrixScratch = new Matrix4();\n    var nodeMatrixScratch = new Matrix4();\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#model} to a {@link Model}.\n     * @alias ModelVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function ModelVisualizer(scene, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n\n        this._scene = scene;\n        this._primitives = scene.primitives;\n        this._entityCollection = entityCollection;\n        this._modelHash = {};\n        this._entitiesToVisualize = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates models created this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    ModelVisualizer.prototype.update = function(time) {\n        \n\n        var entities = this._entitiesToVisualize.values;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n\n        for (var i = 0, len = entities.length; i < len; i++) {\n            var entity = entities[i];\n            var modelGraphics = entity._model;\n\n            var resource;\n            var modelData = modelHash[entity.id];\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(modelGraphics._show, time, true);\n\n            var modelMatrix;\n            if (show) {\n                modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n                resource = Resource.createIfNeeded(Property.getValueOrUndefined(modelGraphics._uri, time));\n                show = defined(modelMatrix) && defined(resource);\n            }\n\n            if (!show) {\n                if (defined(modelData)) {\n                    modelData.modelPrimitive.show = false;\n                }\n                continue;\n            }\n\n            var model = defined(modelData) ? modelData.modelPrimitive : undefined;\n            if (!defined(model) || resource.url !== modelData.url) {\n                if (defined(model)) {\n                    primitives.removeAndDestroy(model);\n                    delete modelHash[entity.id];\n                }\n                model = Model.fromGltf({\n                    url : resource,\n                    incrementallyLoadTextures : Property.getValueOrDefault(modelGraphics._incrementallyLoadTextures, time, defaultIncrementallyLoadTextures),\n                    scene : this._scene\n                });\n                model.id = entity;\n                primitives.add(model);\n\n                modelData = {\n                    modelPrimitive : model,\n                    url : resource.url,\n                    animationsRunning : false,\n                    nodeTransformationsScratch : {},\n                    articulationsScratch : {},\n                    loadFail : false\n                };\n                modelHash[entity.id] = modelData;\n\n                checkModelLoad(model, entity, modelHash);\n            }\n\n            model.show = true;\n            model.scale = Property.getValueOrDefault(modelGraphics._scale, time, defaultScale);\n            model.minimumPixelSize = Property.getValueOrDefault(modelGraphics._minimumPixelSize, time, defaultMinimumPixelSize);\n            model.maximumScale = Property.getValueOrUndefined(modelGraphics._maximumScale, time);\n            model.modelMatrix = Matrix4.clone(modelMatrix, model.modelMatrix);\n            model.shadows = Property.getValueOrDefault(modelGraphics._shadows, time, defaultShadows);\n            model.heightReference = Property.getValueOrDefault(modelGraphics._heightReference, time, defaultHeightReference);\n            model.distanceDisplayCondition = Property.getValueOrUndefined(modelGraphics._distanceDisplayCondition, time);\n            model.silhouetteColor = Property.getValueOrDefault(modelGraphics._silhouetteColor, time, defaultSilhouetteColor, model._silhouetteColor);\n            model.silhouetteSize = Property.getValueOrDefault(modelGraphics._silhouetteSize, time, defaultSilhouetteSize);\n            model.color = Property.getValueOrDefault(modelGraphics._color, time, defaultColor, model._color);\n            model.colorBlendMode = Property.getValueOrDefault(modelGraphics._colorBlendMode, time, defaultColorBlendMode);\n            model.colorBlendAmount = Property.getValueOrDefault(modelGraphics._colorBlendAmount, time, defaultColorBlendAmount);\n            model.clippingPlanes = Property.getValueOrUndefined(modelGraphics._clippingPlanes, time);\n            model.clampAnimations = Property.getValueOrDefault(modelGraphics._clampAnimations, time, defaultClampAnimations);\n            model.imageBasedLightingFactor = Property.getValueOrDefault(modelGraphics._imageBasedLightingFactor, time, defaultImageBasedLightingFactor);\n            model.lightColor = Property.getValueOrUndefined(modelGraphics._lightColor, time);\n            model._upAxis = Property.getValueOrDefault(modelGraphics._upAxis, time, defaultUpAxis);\n            model._forwardAxis = Property.getValueOrUndefined(modelGraphics._forwardAxis, time);\n\n            if (model.ready) {\n                var runAnimations = Property.getValueOrDefault(modelGraphics._runAnimations, time, true);\n                if (modelData.animationsRunning !== runAnimations) {\n                    if (runAnimations) {\n                        model.activeAnimations.addAll({\n                            loop : ModelAnimationLoop.REPEAT\n                        });\n                    } else {\n                        model.activeAnimations.removeAll();\n                    }\n                    modelData.animationsRunning = runAnimations;\n                }\n\n                // Apply node transformations\n                var nodeTransformations = Property.getValueOrUndefined(modelGraphics._nodeTransformations, time, modelData.nodeTransformationsScratch);\n                if (defined(nodeTransformations)) {\n                    var nodeNames = Object.keys(nodeTransformations);\n                    for (var nodeIndex = 0, nodeLength = nodeNames.length; nodeIndex < nodeLength; ++nodeIndex) {\n                        var nodeName = nodeNames[nodeIndex];\n\n                        var nodeTransformation = nodeTransformations[nodeName];\n                        if (!defined(nodeTransformation)) {\n                            continue;\n                        }\n\n                        var modelNode = model.getNode(nodeName);\n                        if (!defined(modelNode)) {\n                            continue;\n                        }\n\n                        var transformationMatrix = Matrix4.fromTranslationRotationScale(nodeTransformation, nodeMatrixScratch);\n                        modelNode.matrix = Matrix4.multiply(modelNode.originalMatrix, transformationMatrix, transformationMatrix);\n                    }\n                }\n\n                // Apply articulations\n                var anyArticulationUpdated = false;\n                var articulations = Property.getValueOrUndefined(modelGraphics._articulations, time, modelData.articulationsScratch);\n                if (defined(articulations)) {\n                    var articulationStageKeys = Object.keys(articulations);\n                    for (var s = 0, numKeys = articulationStageKeys.length; s < numKeys; ++s) {\n                        var key = articulationStageKeys[s];\n\n                        var articulationStageValue = articulations[key];\n                        if (!defined(articulationStageValue)) {\n                            continue;\n                        }\n\n                        anyArticulationUpdated = true;\n                        model.setArticulationStage(key, articulationStageValue);\n                    }\n                }\n\n                if (anyArticulationUpdated) {\n                    model.applyArticulations();\n                }\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    ModelVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    ModelVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entitiesToVisualize.values;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n        for (var i = entities.length - 1; i > -1; i--) {\n            removeModel(this, entities[i], modelHash, primitives);\n        }\n        return destroyObject(this);\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    ModelVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var modelData = this._modelHash[entity.id];\n        if (!defined(modelData) || modelData.loadFail) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var model = modelData.modelPrimitive;\n        if (!defined(model) || !model.show) {\n            return BoundingSphereState.FAILED;\n        }\n\n        if (!model.ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        if (model.heightReference === HeightReference.NONE) {\n            BoundingSphere.transform(model.boundingSphere, model.modelMatrix, result);\n        } else {\n            if (!defined(model._clampedModelMatrix) || model._heightChanged) {\n                return BoundingSphereState.PENDING;\n            }\n            BoundingSphere.transform(model.boundingSphere, model._clampedModelMatrix, result);\n        }\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * @private\n     */\n    ModelVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var entities = this._entitiesToVisualize;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._model) && defined(entity._position)) {\n                entities.set(entity.id, entity);\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._model) && defined(entity._position)) {\n                clearNodeTransformationsArticulationsScratch(entity, modelHash);\n                entities.set(entity.id, entity);\n            } else {\n                removeModel(this, entity, modelHash, primitives);\n                entities.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            removeModel(this, entity, modelHash, primitives);\n            entities.remove(entity.id);\n        }\n    };\n\n    function removeModel(visualizer, entity, modelHash, primitives) {\n        var modelData = modelHash[entity.id];\n        if (defined(modelData)) {\n            primitives.removeAndDestroy(modelData.modelPrimitive);\n            delete modelHash[entity.id];\n        }\n    }\n\n    function clearNodeTransformationsArticulationsScratch(entity, modelHash) {\n        var modelData = modelHash[entity.id];\n        if (defined(modelData)) {\n            modelData.nodeTransformationsScratch = {};\n            modelData.articulationsScratch = {};\n        }\n    }\n\n    function checkModelLoad(model, entity, modelHash){\n        model.readyPromise.otherwise(function(error){\n            console.error(error);\n            modelHash[entity.id].loadFail = true;\n        });\n    }\nexport default ModelVisualizer;\n","\n    /**\n     * Defines how per-feature colors set from the Cesium API or declarative styling blend with the source colors from\n     * the original feature, e.g. glTF material or per-point color in the tile.\n     * <p>\n     * When <code>REPLACE</code> or <code>MIX</code> are used and the source color is a glTF material, the technique must assign the\n     * <code>_3DTILESDIFFUSE</code> semantic to the diffuse color parameter. Otherwise only <code>HIGHLIGHT</code> is supported.\n     * </p>\n     * <p>\n     * A feature whose color evaluates to white (1.0, 1.0, 1.0) is always rendered without color blending, regardless of the\n     * tileset's color blend mode.\n     * </p>\n     * <pre><code>\n     * \"techniques\": {\n     *   \"technique0\": {\n     *     \"parameters\": {\n     *       \"diffuse\": {\n     *         \"semantic\": \"_3DTILESDIFFUSE\",\n     *         \"type\": 35666\n     *       }\n     *     }\n     *   }\n     * }\n     * </code></pre>\n     *\n     * @exports Cesium3DTileColorBlendMode\n     */\n    var Cesium3DTileColorBlendMode = {\n        /**\n         * Multiplies the source color by the feature color.\n         *\n         * @type {Number}\n         * @constant\n         */\n        HIGHLIGHT : 0,\n\n        /**\n         * Replaces the source color with the feature color.\n         *\n         * @type {Number}\n         * @constant\n         */\n        REPLACE : 1,\n\n        /**\n         * Blends the source color and feature color together.\n         *\n         * @type {Number}\n         * @constant\n         */\n        MIX : 2\n    };\nexport default Object.freeze(Cesium3DTileColorBlendMode);\n","import Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport Matrix2 from '../Core/Matrix2.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\n\n    var ComponentsPerAttribute = {\n        SCALAR : 1,\n        VEC2 : 2,\n        VEC3 : 3,\n        VEC4 : 4,\n        MAT2 : 4,\n        MAT3 : 9,\n        MAT4 : 16\n    };\n\n    var ClassPerType = {\n        SCALAR : undefined,\n        VEC2 : Cartesian2,\n        VEC3 : Cartesian3,\n        VEC4 : Cartesian4,\n        MAT2 : Matrix2,\n        MAT3 : Matrix3,\n        MAT4 : Matrix4\n    };\n\n    /**\n     * @private\n     */\n    function getBinaryAccessor(accessor) {\n        var componentType = accessor.componentType;\n        var componentDatatype;\n        if (typeof componentType === 'string') {\n            componentDatatype = ComponentDatatype.fromName(componentType);\n        } else {\n            componentDatatype = componentType;\n        }\n\n        var componentsPerAttribute = ComponentsPerAttribute[accessor.type];\n        var classType = ClassPerType[accessor.type];\n        return {\n            componentsPerAttribute : componentsPerAttribute,\n            classType : classType,\n            createArrayBufferView : function(buffer, byteOffset, length) {\n                return ComponentDatatype.createArrayBufferView(componentDatatype, buffer, byteOffset, componentsPerAttribute * length);\n            }\n        };\n    }\nexport default getBinaryAccessor;\n","import arrayFill from '../Core/arrayFill.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Check from '../Core/Check.js';\nimport clone from '../Core/clone.js';\nimport Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport deprecationWarning from '../Core/deprecationWarning.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport CesiumMath from '../Core/Math.js';\nimport PixelFormat from '../Core/PixelFormat.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport ContextLimits from '../Renderer/ContextLimits.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport PixelDatatype from '../Renderer/PixelDatatype.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport Sampler from '../Renderer/Sampler.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport Texture from '../Renderer/Texture.js';\nimport AttributeType from './AttributeType.js';\nimport BlendingState from './BlendingState.js';\nimport Cesium3DTileColorBlendMode from './Cesium3DTileColorBlendMode.js';\nimport CullFace from './CullFace.js';\nimport getBinaryAccessor from './getBinaryAccessor.js';\nimport StencilConstants from './StencilConstants.js';\nimport StencilFunction from './StencilFunction.js';\nimport StencilOperation from './StencilOperation.js';\n\n    var DEFAULT_COLOR_VALUE = Color.WHITE;\n    var DEFAULT_SHOW_VALUE = true;\n\n    /**\n     * @private\n     */\n    function Cesium3DTileBatchTable(content, featuresLength, batchTableJson, batchTableBinary, colorChangedCallback) {\n        /**\n         * @readonly\n         */\n        this.featuresLength = featuresLength;\n\n        this._translucentFeaturesLength = 0; // Number of features in the tile that are translucent\n\n        var extensions;\n        if (defined(batchTableJson)) {\n            extensions = batchTableJson.extensions;\n        }\n        this._extensions = defaultValue(extensions, {});\n\n        var properties = initializeProperties(batchTableJson);\n        this._properties = properties;\n\n        this._batchTableHierarchy = initializeHierarchy(this, batchTableJson, batchTableBinary);\n        this._batchTableBinaryProperties = getBinaryProperties(featuresLength, properties, batchTableBinary);\n\n        // PERFORMANCE_IDEA: These parallel arrays probably generate cache misses in get/set color/show\n        // and use A LOT of memory.  How can we use less memory?\n        this._showAlphaProperties = undefined; // [Show (0 or 255), Alpha (0 to 255)] property for each feature\n        this._batchValues = undefined;  // Per-feature RGBA (A is based on the color's alpha and feature's show property)\n\n        this._batchValuesDirty = false;\n        this._batchTexture = undefined;\n        this._defaultTexture = undefined;\n\n        this._pickTexture = undefined;\n        this._pickIds = [];\n\n        this._content = content;\n\n        this._colorChangedCallback = colorChangedCallback;\n\n        // Dimensions for batch and pick textures\n        var textureDimensions;\n        var textureStep;\n\n        if (featuresLength > 0) {\n            // PERFORMANCE_IDEA: this can waste memory in the last row in the uncommon case\n            // when more than one row is needed (e.g., > 16K features in one tile)\n            var width = Math.min(featuresLength, ContextLimits.maximumTextureSize);\n            var height = Math.ceil(featuresLength / ContextLimits.maximumTextureSize);\n            var stepX = 1.0 / width;\n            var centerX = stepX * 0.5;\n            var stepY = 1.0 / height;\n            var centerY = stepY * 0.5;\n\n            textureDimensions = new Cartesian2(width, height);\n            textureStep = new Cartesian4(stepX, centerX, stepY, centerY);\n        }\n\n        this._textureDimensions = textureDimensions;\n        this._textureStep = textureStep;\n    }\n\n    // This can be overridden for testing purposes\n    Cesium3DTileBatchTable._deprecationWarning = deprecationWarning;\n\n    Object.defineProperties(Cesium3DTileBatchTable.prototype, {\n        memorySizeInBytes : {\n            get : function() {\n                var memory = 0;\n                if (defined(this._pickTexture)) {\n                    memory += this._pickTexture.sizeInBytes;\n                }\n                if (defined(this._batchTexture)) {\n                    memory += this._batchTexture.sizeInBytes;\n                }\n                return memory;\n            }\n        }\n    });\n\n    function initializeProperties(jsonHeader) {\n        var properties = {};\n\n        if (!defined(jsonHeader)) {\n            return properties;\n        }\n\n        for (var propertyName in jsonHeader) {\n            if (jsonHeader.hasOwnProperty(propertyName)\n                    && propertyName !== 'HIERARCHY' // Deprecated HIERARCHY property\n                    && propertyName !== 'extensions'\n                    && propertyName !== 'extras') {\n                properties[propertyName] = clone(jsonHeader[propertyName], true);\n            }\n        }\n\n        return properties;\n    }\n\n    function initializeHierarchy(batchTable, jsonHeader, binaryBody) {\n        if (!defined(jsonHeader)) {\n            return;\n        }\n\n        var hierarchy = batchTable._extensions['3DTILES_batch_table_hierarchy'];\n\n        var legacyHierarchy = jsonHeader.HIERARCHY;\n        if (defined(legacyHierarchy)) {\n            Cesium3DTileBatchTable._deprecationWarning('batchTableHierarchyExtension', 'The batch table HIERARCHY property has been moved to an extension. Use extensions.3DTILES_batch_table_hierarchy instead.');\n            batchTable._extensions['3DTILES_batch_table_hierarchy'] = legacyHierarchy;\n            hierarchy = legacyHierarchy;\n        }\n\n        if (!defined(hierarchy)) {\n            return;\n        }\n\n        return initializeHierarchyValues(hierarchy, binaryBody);\n    }\n\n    function initializeHierarchyValues(hierarchyJson, binaryBody) {\n        var i;\n        var classId;\n        var binaryAccessor;\n\n        var instancesLength = hierarchyJson.instancesLength;\n        var classes = hierarchyJson.classes;\n        var classIds = hierarchyJson.classIds;\n        var parentCounts = hierarchyJson.parentCounts;\n        var parentIds = hierarchyJson.parentIds;\n        var parentIdsLength = instancesLength;\n\n        if (defined(classIds.byteOffset)) {\n            classIds.componentType = defaultValue(classIds.componentType, ComponentDatatype.UNSIGNED_SHORT);\n            classIds.type = AttributeType.SCALAR;\n            binaryAccessor = getBinaryAccessor(classIds);\n            classIds = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + classIds.byteOffset, instancesLength);\n        }\n\n        var parentIndexes;\n        if (defined(parentCounts)) {\n            if (defined(parentCounts.byteOffset)) {\n                parentCounts.componentType = defaultValue(parentCounts.componentType, ComponentDatatype.UNSIGNED_SHORT);\n                parentCounts.type = AttributeType.SCALAR;\n                binaryAccessor = getBinaryAccessor(parentCounts);\n                parentCounts = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentCounts.byteOffset, instancesLength);\n            }\n            parentIndexes = new Uint16Array(instancesLength);\n            parentIdsLength = 0;\n            for (i = 0; i < instancesLength; ++i) {\n                parentIndexes[i] = parentIdsLength;\n                parentIdsLength += parentCounts[i];\n            }\n        }\n\n        if (defined(parentIds) && defined(parentIds.byteOffset)) {\n            parentIds.componentType = defaultValue(parentIds.componentType, ComponentDatatype.UNSIGNED_SHORT);\n            parentIds.type = AttributeType.SCALAR;\n            binaryAccessor = getBinaryAccessor(parentIds);\n            parentIds = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + parentIds.byteOffset, parentIdsLength);\n        }\n\n        var classesLength = classes.length;\n        for (i = 0; i < classesLength; ++i) {\n            var classInstancesLength = classes[i].length;\n            var properties = classes[i].instances;\n            var binaryProperties = getBinaryProperties(classInstancesLength, properties, binaryBody);\n            classes[i].instances = combine(binaryProperties, properties);\n        }\n\n        var classCounts = arrayFill(new Array(classesLength), 0);\n        var classIndexes = new Uint16Array(instancesLength);\n        for (i = 0; i < instancesLength; ++i) {\n            classId = classIds[i];\n            classIndexes[i] = classCounts[classId];\n            ++classCounts[classId];\n        }\n\n        var hierarchy = {\n            classes : classes,\n            classIds : classIds,\n            classIndexes : classIndexes,\n            parentCounts : parentCounts,\n            parentIndexes : parentIndexes,\n            parentIds : parentIds\n        };\n\n        \n\n        return hierarchy;\n    }\n\n    \n\n    function getBinaryProperties(featuresLength, properties, binaryBody) {\n        var binaryProperties;\n        for (var name in properties) {\n            if (properties.hasOwnProperty(name)) {\n                var property = properties[name];\n                var byteOffset = property.byteOffset;\n                if (defined(byteOffset)) {\n                    // This is a binary property\n                    var componentType = property.componentType;\n                    var type = property.type;\n                    if (!defined(componentType)) {\n                        throw new RuntimeError('componentType is required.');\n                    }\n                    if (!defined(type)) {\n                        throw new RuntimeError('type is required.');\n                    }\n                    if (!defined(binaryBody)) {\n                        throw new RuntimeError('Property ' + name + ' requires a batch table binary.');\n                    }\n\n                    var binaryAccessor = getBinaryAccessor(property);\n                    var componentCount = binaryAccessor.componentsPerAttribute;\n                    var classType = binaryAccessor.classType;\n                    var typedArray = binaryAccessor.createArrayBufferView(binaryBody.buffer, binaryBody.byteOffset + byteOffset, featuresLength);\n\n                    if (!defined(binaryProperties)) {\n                        binaryProperties = {};\n                    }\n\n                    // Store any information needed to access the binary data, including the typed array,\n                    // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n                    binaryProperties[name] = {\n                        typedArray : typedArray,\n                        componentCount : componentCount,\n                        type : classType\n                    };\n                }\n            }\n        }\n        return binaryProperties;\n    }\n\n    Cesium3DTileBatchTable.getBinaryProperties = function(featuresLength, batchTableJson, batchTableBinary) {\n        return getBinaryProperties(featuresLength, batchTableJson, batchTableBinary);\n    };\n\n    function getByteLength(batchTable) {\n        var dimensions = batchTable._textureDimensions;\n        return (dimensions.x * dimensions.y) * 4;\n    }\n\n    function getBatchValues(batchTable) {\n        if (!defined(batchTable._batchValues)) {\n            // Default batch texture to RGBA = 255: white highlight (RGB) and show/alpha = true/255 (A).\n            var byteLength = getByteLength(batchTable);\n            var bytes = new Uint8Array(byteLength);\n            arrayFill(bytes, 255);\n            batchTable._batchValues = bytes;\n        }\n\n        return batchTable._batchValues;\n    }\n\n    function getShowAlphaProperties(batchTable) {\n        if (!defined(batchTable._showAlphaProperties)) {\n            var byteLength = 2 * batchTable.featuresLength;\n            var bytes = new Uint8Array(byteLength);\n            // [Show = true, Alpha = 255]\n            arrayFill(bytes, 255);\n            batchTable._showAlphaProperties = bytes;\n        }\n        return batchTable._showAlphaProperties;\n    }\n\n    function checkBatchId(batchId, featuresLength) {\n        if (!defined(batchId) || (batchId < 0) || (batchId > featuresLength)) {\n            throw new DeveloperError('batchId is required and between zero and featuresLength - 1 (' + featuresLength - + ').');\n        }\n    }\n\n    Cesium3DTileBatchTable.prototype.setShow = function(batchId, show) {\n        \n\n        if (show && !defined(this._showAlphaProperties)) {\n            // Avoid allocating since the default is show = true\n            return;\n        }\n\n        var showAlphaProperties = getShowAlphaProperties(this);\n        var propertyOffset = batchId * 2;\n\n        var newShow = show ? 255 : 0;\n        if (showAlphaProperties[propertyOffset] !== newShow) {\n            showAlphaProperties[propertyOffset] = newShow;\n\n            var batchValues = getBatchValues(this);\n\n            // Compute alpha used in the shader based on show and color.alpha properties\n            var offset = (batchId * 4) + 3;\n            batchValues[offset] = show ? showAlphaProperties[propertyOffset + 1] : 0;\n\n            this._batchValuesDirty = true;\n        }\n    };\n\n    Cesium3DTileBatchTable.prototype.setAllShow = function(show) {\n        \n\n        var featuresLength = this.featuresLength;\n        for (var i = 0; i < featuresLength; ++i) {\n            this.setShow(i, show);\n        }\n    };\n\n    Cesium3DTileBatchTable.prototype.getShow = function(batchId) {\n        \n\n        if (!defined(this._showAlphaProperties)) {\n            // Avoid allocating since the default is show = true\n            return true;\n        }\n\n        var offset = batchId * 2;\n        return (this._showAlphaProperties[offset] === 255);\n    };\n\n    var scratchColorBytes = new Array(4);\n\n    Cesium3DTileBatchTable.prototype.setColor = function(batchId, color) {\n        \n\n        if (Color.equals(color, DEFAULT_COLOR_VALUE) && !defined(this._batchValues)) {\n            // Avoid allocating since the default is white\n            return;\n        }\n\n        var newColor = color.toBytes(scratchColorBytes);\n        var newAlpha = newColor[3];\n\n        var batchValues = getBatchValues(this);\n        var offset = batchId * 4;\n\n        var showAlphaProperties = getShowAlphaProperties(this);\n        var propertyOffset = batchId * 2;\n\n        if ((batchValues[offset] !== newColor[0]) ||\n            (batchValues[offset + 1] !== newColor[1]) ||\n            (batchValues[offset + 2] !== newColor[2]) ||\n            (showAlphaProperties[propertyOffset + 1] !== newAlpha)) {\n\n            batchValues[offset] = newColor[0];\n            batchValues[offset + 1] = newColor[1];\n            batchValues[offset + 2] = newColor[2];\n\n            var wasTranslucent = (showAlphaProperties[propertyOffset + 1] !== 255);\n\n            // Compute alpha used in the shader based on show and color.alpha properties\n            var show = showAlphaProperties[propertyOffset] !== 0;\n            batchValues[offset + 3] = show ? newAlpha : 0;\n            showAlphaProperties[propertyOffset + 1] = newAlpha;\n\n            // Track number of translucent features so we know if this tile needs\n            // opaque commands, translucent commands, or both for rendering.\n            var isTranslucent = (newAlpha !== 255);\n            if (isTranslucent && !wasTranslucent) {\n                ++this._translucentFeaturesLength;\n            } else if (!isTranslucent && wasTranslucent) {\n                --this._translucentFeaturesLength;\n            }\n\n            this._batchValuesDirty = true;\n\n            if (defined(this._colorChangedCallback)) {\n                this._colorChangedCallback(batchId, color);\n            }\n        }\n    };\n\n    Cesium3DTileBatchTable.prototype.setAllColor = function(color) {\n        \n\n        var featuresLength = this.featuresLength;\n        for (var i = 0; i < featuresLength; ++i) {\n            this.setColor(i, color);\n        }\n    };\n\n    Cesium3DTileBatchTable.prototype.getColor = function(batchId, result) {\n        \n\n        if (!defined(this._batchValues)) {\n            return Color.clone(DEFAULT_COLOR_VALUE, result);\n        }\n\n        var batchValues = this._batchValues;\n        var offset = batchId * 4;\n\n        var showAlphaProperties = this._showAlphaProperties;\n        var propertyOffset = batchId * 2;\n\n        return Color.fromBytes(batchValues[offset],\n            batchValues[offset + 1],\n            batchValues[offset + 2],\n            showAlphaProperties[propertyOffset + 1],\n            result);\n    };\n\n    Cesium3DTileBatchTable.prototype.getPickColor = function(batchId) {\n        \n        return this._pickIds[batchId];\n    };\n\n    var scratchColor = new Color();\n\n    Cesium3DTileBatchTable.prototype.applyStyle = function(style) {\n        if (!defined(style)) {\n            this.setAllColor(DEFAULT_COLOR_VALUE);\n            this.setAllShow(DEFAULT_SHOW_VALUE);\n            return;\n        }\n\n        var content = this._content;\n        var length = this.featuresLength;\n        for (var i = 0; i < length; ++i) {\n            var feature = content.getFeature(i);\n            var color = defined(style.color) ? style.color.evaluateColor(feature, scratchColor) : DEFAULT_COLOR_VALUE;\n            var show = defined(style.show) ? style.show.evaluate(feature) : DEFAULT_SHOW_VALUE;\n            this.setColor(i, color);\n            this.setShow(i, show);\n        }\n    };\n\n    function getBinaryProperty(binaryProperty, index) {\n        var typedArray = binaryProperty.typedArray;\n        var componentCount = binaryProperty.componentCount;\n        if (componentCount === 1) {\n            return typedArray[index];\n        }\n        return binaryProperty.type.unpack(typedArray, index * componentCount);\n    }\n\n    function setBinaryProperty(binaryProperty, index, value) {\n        var typedArray = binaryProperty.typedArray;\n        var componentCount = binaryProperty.componentCount;\n        if (componentCount === 1) {\n            typedArray[index] = value;\n        } else {\n            binaryProperty.type.pack(value, typedArray, index * componentCount);\n        }\n    }\n\n    // The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\n    var scratchVisited = [];\n    var scratchStack = [];\n    var marker = 0;\n    function traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback) {\n        var classIds = hierarchy.classIds;\n        var parentCounts = hierarchy.parentCounts;\n        var parentIds = hierarchy.parentIds;\n        var parentIndexes = hierarchy.parentIndexes;\n        var instancesLength = classIds.length;\n\n        // Ignore instances that have already been visited. This occurs in diamond inheritance situations.\n        // Use a marker value to indicate that an instance has been visited, which increments with each run.\n        // This is more efficient than clearing the visited array every time.\n        var visited = scratchVisited;\n        visited.length = Math.max(visited.length, instancesLength);\n        var visitedMarker = ++marker;\n\n        var stack = scratchStack;\n        stack.length = 0;\n        stack.push(instanceIndex);\n\n        while (stack.length > 0) {\n            instanceIndex = stack.pop();\n            if (visited[instanceIndex] === visitedMarker) {\n                // This instance has already been visited, stop traversal\n                continue;\n            }\n            visited[instanceIndex] = visitedMarker;\n            var result = endConditionCallback(hierarchy, instanceIndex);\n            if (defined(result)) {\n                // The end condition was met, stop the traversal and return the result\n                return result;\n            }\n            var parentCount = parentCounts[instanceIndex];\n            var parentIndex = parentIndexes[instanceIndex];\n            for (var i = 0; i < parentCount; ++i) {\n                var parentId = parentIds[parentIndex + i];\n                // Stop the traversal when the instance has no parent (its parentId equals itself)\n                // else add the parent to the stack to continue the traversal.\n                if (parentId !== instanceIndex) {\n                    stack.push(parentId);\n                }\n            }\n        }\n    }\n\n    function traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback) {\n        var hasParent = true;\n        while (hasParent) {\n            var result = endConditionCallback(hierarchy, instanceIndex);\n            if (defined(result)) {\n                // The end condition was met, stop the traversal and return the result\n                return result;\n            }\n            var parentId = hierarchy.parentIds[instanceIndex];\n            hasParent = parentId !== instanceIndex;\n            instanceIndex = parentId;\n        }\n    }\n\n    function traverseHierarchy(hierarchy, instanceIndex, endConditionCallback) {\n        // Traverse over the hierarchy and process each instance with the endConditionCallback.\n        // When the endConditionCallback returns a value, the traversal stops and that value is returned.\n        var parentCounts = hierarchy.parentCounts;\n        var parentIds = hierarchy.parentIds;\n        if (!defined(parentIds)) {\n            return endConditionCallback(hierarchy, instanceIndex);\n        } else if (defined(parentCounts)) {\n            return traverseHierarchyMultipleParents(hierarchy, instanceIndex, endConditionCallback);\n        }\n        return traverseHierarchySingleParent(hierarchy, instanceIndex, endConditionCallback);\n    }\n\n    function hasPropertyInHierarchy(batchTable, batchId, name) {\n        var hierarchy = batchTable._batchTableHierarchy;\n        var result = traverseHierarchy(hierarchy, batchId, function(hierarchy, instanceIndex) {\n            var classId = hierarchy.classIds[instanceIndex];\n            var instances = hierarchy.classes[classId].instances;\n            if (defined(instances[name])) {\n                return true;\n            }\n        });\n        return defined(result);\n    }\n\n    function getPropertyNamesInHierarchy(batchTable, batchId, results) {\n        var hierarchy = batchTable._batchTableHierarchy;\n        traverseHierarchy(hierarchy, batchId, function(hierarchy, instanceIndex) {\n            var classId = hierarchy.classIds[instanceIndex];\n            var instances = hierarchy.classes[classId].instances;\n            for (var name in instances) {\n                if (instances.hasOwnProperty(name)) {\n                    if (results.indexOf(name) === -1) {\n                        results.push(name);\n                    }\n                }\n            }\n        });\n    }\n\n    function getHierarchyProperty(batchTable, batchId, name) {\n        var hierarchy = batchTable._batchTableHierarchy;\n        return traverseHierarchy(hierarchy, batchId, function(hierarchy, instanceIndex) {\n            var classId = hierarchy.classIds[instanceIndex];\n            var instanceClass = hierarchy.classes[classId];\n            var indexInClass = hierarchy.classIndexes[instanceIndex];\n            var propertyValues = instanceClass.instances[name];\n            if (defined(propertyValues)) {\n                if (defined(propertyValues.typedArray)) {\n                    return getBinaryProperty(propertyValues, indexInClass);\n                }\n                return clone(propertyValues[indexInClass], true);\n            }\n        });\n    }\n\n    function setHierarchyProperty(batchTable, batchId, name, value) {\n        var hierarchy = batchTable._batchTableHierarchy;\n        var result = traverseHierarchy(hierarchy, batchId, function(hierarchy, instanceIndex) {\n            var classId = hierarchy.classIds[instanceIndex];\n            var instanceClass = hierarchy.classes[classId];\n            var indexInClass = hierarchy.classIndexes[instanceIndex];\n            var propertyValues = instanceClass.instances[name];\n            if (defined(propertyValues)) {\n                \n                if (defined(propertyValues.typedArray)) {\n                    setBinaryProperty(propertyValues, indexInClass, value);\n                } else {\n                    propertyValues[indexInClass] = clone(value, true);\n                }\n                return true;\n            }\n        });\n        return defined(result);\n    }\n\n    Cesium3DTileBatchTable.prototype.isClass = function(batchId, className) {\n        \n\n        // PERFORMANCE_IDEA : cache results in the ancestor classes to speed up this check if this area becomes a hotspot\n        var hierarchy = this._batchTableHierarchy;\n        if (!defined(hierarchy)) {\n            return false;\n        }\n\n        // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n        var result = traverseHierarchy(hierarchy, batchId, function(hierarchy, instanceIndex) {\n            var classId = hierarchy.classIds[instanceIndex];\n            var instanceClass = hierarchy.classes[classId];\n            if (instanceClass.name === className) {\n                return true;\n            }\n        });\n        return defined(result);\n    };\n\n    Cesium3DTileBatchTable.prototype.isExactClass = function(batchId, className) {\n        \n\n        return (this.getExactClassName(batchId) === className);\n    };\n\n    Cesium3DTileBatchTable.prototype.getExactClassName = function(batchId) {\n        \n\n        var hierarchy = this._batchTableHierarchy;\n        if (!defined(hierarchy)) {\n            return undefined;\n        }\n        var classId = hierarchy.classIds[batchId];\n        var instanceClass = hierarchy.classes[classId];\n        return instanceClass.name;\n    };\n\n    Cesium3DTileBatchTable.prototype.hasProperty = function(batchId, name) {\n        \n\n        return (defined(this._properties[name])) || (defined(this._batchTableHierarchy) && hasPropertyInHierarchy(this, batchId, name));\n    };\n\n    Cesium3DTileBatchTable.prototype.getPropertyNames = function(batchId, results) {\n        \n\n        results = defined(results) ? results : [];\n        results.length = 0;\n\n        var propertyNames = Object.keys(this._properties);\n        results.push.apply(results, propertyNames);\n\n        if (defined(this._batchTableHierarchy)) {\n            getPropertyNamesInHierarchy(this, batchId, results);\n        }\n\n        return results;\n    };\n\n    Cesium3DTileBatchTable.prototype.getProperty = function(batchId, name) {\n        \n\n        if (defined(this._batchTableBinaryProperties)) {\n            var binaryProperty = this._batchTableBinaryProperties[name];\n            if (defined(binaryProperty)) {\n                return getBinaryProperty(binaryProperty, batchId);\n            }\n        }\n\n        var propertyValues = this._properties[name];\n        if (defined(propertyValues)) {\n            return clone(propertyValues[batchId], true);\n        }\n\n        if (defined(this._batchTableHierarchy)) {\n            var hierarchyProperty = getHierarchyProperty(this, batchId, name);\n            if (defined(hierarchyProperty)) {\n                return hierarchyProperty;\n            }\n        }\n\n        return undefined;\n    };\n\n    Cesium3DTileBatchTable.prototype.setProperty = function(batchId, name, value) {\n        var featuresLength = this.featuresLength;\n        \n\n        if (defined(this._batchTableBinaryProperties)) {\n            var binaryProperty = this._batchTableBinaryProperties[name];\n            if (defined(binaryProperty)) {\n                setBinaryProperty(binaryProperty, batchId, value);\n                return;\n            }\n        }\n\n        if (defined(this._batchTableHierarchy)) {\n            if (setHierarchyProperty(this, batchId, name, value)) {\n                return;\n            }\n        }\n\n        var propertyValues = this._properties[name];\n        if (!defined(propertyValues)) {\n            // Property does not exist. Create it.\n            this._properties[name] = new Array(featuresLength);\n            propertyValues = this._properties[name];\n        }\n\n        propertyValues[batchId] = clone(value, true);\n    };\n\n    function getGlslComputeSt(batchTable) {\n        // GLSL batchId is zero-based: [0, featuresLength - 1]\n        if (batchTable._textureDimensions.y === 1) {\n            return 'uniform vec4 tile_textureStep; \\n' +\n                'vec2 computeSt(float batchId) \\n' +\n                '{ \\n' +\n                '    float stepX = tile_textureStep.x; \\n' +\n                '    float centerX = tile_textureStep.y; \\n' +\n                '    return vec2(centerX + (batchId * stepX), 0.5); \\n' +\n                '} \\n';\n        }\n\n        return 'uniform vec4 tile_textureStep; \\n' +\n            'uniform vec2 tile_textureDimensions; \\n' +\n            'vec2 computeSt(float batchId) \\n' +\n            '{ \\n' +\n            '    float stepX = tile_textureStep.x; \\n' +\n            '    float centerX = tile_textureStep.y; \\n' +\n            '    float stepY = tile_textureStep.z; \\n' +\n            '    float centerY = tile_textureStep.w; \\n' +\n            '    float xId = mod(batchId, tile_textureDimensions.x); \\n' +\n            '    float yId = floor(batchId / tile_textureDimensions.x); \\n' +\n            '    return vec2(centerX + (xId * stepX), centerY + (yId * stepY)); \\n' +\n            '} \\n';\n    }\n\n    Cesium3DTileBatchTable.prototype.getVertexShaderCallback = function(handleTranslucent, batchIdAttributeName, diffuseAttributeOrUniformName) {\n        if (this.featuresLength === 0) {\n            return;\n        }\n\n        var that = this;\n        return function(source) {\n            // If the color blend mode is HIGHLIGHT, the highlight color will always be applied in the fragment shader.\n            // No need to apply the highlight color in the vertex shader as well.\n            var renamedSource = modifyDiffuse(source, diffuseAttributeOrUniformName, false);\n            var newMain;\n\n            if (ContextLimits.maximumVertexTextureImageUnits > 0) {\n                // When VTF is supported, perform per-feature show/hide in the vertex shader\n                newMain = '';\n                if (handleTranslucent) {\n                    newMain += 'uniform bool tile_translucentCommand; \\n';\n                }\n                newMain +=\n                    'uniform sampler2D tile_batchTexture; \\n' +\n                    'varying vec4 tile_featureColor; \\n' +\n                    'varying vec2 tile_featureSt; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    vec2 st = computeSt(' + batchIdAttributeName + '); \\n' +\n                    '    vec4 featureProperties = texture2D(tile_batchTexture, st); \\n' +\n                    '    tile_color(featureProperties); \\n' +\n                    '    float show = ceil(featureProperties.a); \\n' +      // 0 - false, non-zeo - true\n                    '    gl_Position *= show; \\n';                          // Per-feature show/hide\n                if (handleTranslucent) {\n                    newMain +=\n                        '    bool isStyleTranslucent = (featureProperties.a != 1.0); \\n' +\n                        '    if (czm_pass == czm_passTranslucent) \\n' +\n                        '    { \\n' +\n                        '        if (!isStyleTranslucent && !tile_translucentCommand) \\n' + // Do not render opaque features in the translucent pass\n                        '        { \\n' +\n                        '            gl_Position *= 0.0; \\n' +\n                        '        } \\n' +\n                        '    } \\n' +\n                        '    else \\n' +\n                        '    { \\n' +\n                        '        if (isStyleTranslucent) \\n' + // Do not render translucent features in the opaque pass\n                        '        { \\n' +\n                        '            gl_Position *= 0.0; \\n' +\n                        '        } \\n' +\n                        '    } \\n';\n                }\n                newMain +=\n                    '    tile_featureColor = featureProperties; \\n' +\n                    '    tile_featureSt = st; \\n' +\n                    '}';\n            } else {\n                // When VTF is not supported, color blend mode MIX will look incorrect due to the feature's color not being available in the vertex shader\n                newMain =\n                    'varying vec2 tile_featureSt; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    tile_color(vec4(1.0)); \\n' +\n                    '    tile_featureSt = computeSt(' + batchIdAttributeName + '); \\n' +\n                    '}';\n            }\n\n            return renamedSource + '\\n' + getGlslComputeSt(that) + newMain;\n        };\n    };\n\n    function getDefaultShader(source, applyHighlight) {\n        source = ShaderSource.replaceMain(source, 'tile_main');\n\n        if (!applyHighlight) {\n            return source +\n                   'void tile_color(vec4 tile_featureColor) \\n' +\n                   '{ \\n' +\n                   '    tile_main(); \\n' +\n                   '} \\n';\n        }\n\n        // The color blend mode is intended for the RGB channels so alpha is always just multiplied.\n        // gl_FragColor is multiplied by the tile color only when tile_colorBlend is 0.0 (highlight)\n        return source +\n               'uniform float tile_colorBlend; \\n' +\n               'void tile_color(vec4 tile_featureColor) \\n' +\n               '{ \\n' +\n               '    tile_main(); \\n' +\n               '    tile_featureColor = czm_gammaCorrect(tile_featureColor); \\n' +\n               '    gl_FragColor.a *= tile_featureColor.a; \\n' +\n               '    float highlight = ceil(tile_colorBlend); \\n' +\n               '    gl_FragColor.rgb *= mix(tile_featureColor.rgb, vec3(1.0), highlight); \\n' +\n               '} \\n';\n    }\n\n    function replaceDiffuseTextureCalls(source, diffuseAttributeOrUniformName) {\n        var functionCall = 'texture2D(' + diffuseAttributeOrUniformName;\n\n        var fromIndex = 0;\n        var startIndex = source.indexOf(functionCall, fromIndex);\n        var endIndex;\n\n        while (startIndex > -1) {\n            var nestedLevel = 0;\n            for (var i = startIndex; i < source.length; ++i) {\n                var character = source.charAt(i);\n                if (character === '(') {\n                    ++nestedLevel;\n                } else if (character === ')') {\n                    --nestedLevel;\n                    if (nestedLevel === 0) {\n                        endIndex = i + 1;\n                        break;\n                    }\n                }\n            }\n            var extractedFunction = source.slice(startIndex, endIndex);\n            var replacedFunction = 'tile_diffuse_final(' + extractedFunction + ', tile_diffuse)';\n\n            source = source.slice(0, startIndex) + replacedFunction + source.slice(endIndex);\n            fromIndex = startIndex + replacedFunction.length;\n            startIndex = source.indexOf(functionCall, fromIndex);\n        }\n\n        return source;\n    }\n\n    function modifyDiffuse(source, diffuseAttributeOrUniformName, applyHighlight) {\n        // If the glTF does not specify the _3DTILESDIFFUSE semantic, return the default shader.\n        // Otherwise if _3DTILESDIFFUSE is defined prefer the shader below that can switch the color mode at runtime.\n        if (!defined(diffuseAttributeOrUniformName)) {\n            return getDefaultShader(source, applyHighlight);\n        }\n\n        // Find the diffuse uniform. Examples matches:\n        //   uniform vec3 u_diffuseColor;\n        //   uniform sampler2D diffuseTexture;\n        var regex = new RegExp('(uniform|attribute|in)\\\\s+(vec[34]|sampler2D)\\\\s+' + diffuseAttributeOrUniformName + ';');\n        var uniformMatch = source.match(regex);\n\n        if (!defined(uniformMatch)) {\n            // Could not find uniform declaration of type vec3, vec4, or sampler2D\n            return getDefaultShader(source, applyHighlight);\n        }\n\n        var declaration = uniformMatch[0];\n        var type = uniformMatch[2];\n\n        source = ShaderSource.replaceMain(source, 'tile_main');\n        source = source.replace(declaration, ''); // Remove uniform declaration for now so the replace below doesn't affect it\n\n        // If the tile color is white, use the source color. This implies the feature has not been styled.\n        // Highlight: tile_colorBlend is 0.0 and the source color is used\n        // Replace: tile_colorBlend is 1.0 and the tile color is used\n        // Mix: tile_colorBlend is between 0.0 and 1.0, causing the source color and tile color to mix\n        var finalDiffuseFunction =\n            'bool isWhite(vec3 color) \\n' +\n            '{ \\n' +\n            '    return all(greaterThan(color, vec3(1.0 - czm_epsilon3))); \\n' +\n            '} \\n' +\n            'vec4 tile_diffuse_final(vec4 sourceDiffuse, vec4 tileDiffuse) \\n' +\n            '{ \\n' +\n            '    vec4 blendDiffuse = mix(sourceDiffuse, tileDiffuse, tile_colorBlend); \\n' +\n            '    vec4 diffuse = isWhite(tileDiffuse.rgb) ? sourceDiffuse : blendDiffuse; \\n' +\n            '    return vec4(diffuse.rgb, sourceDiffuse.a); \\n' +\n            '} \\n';\n\n        // The color blend mode is intended for the RGB channels so alpha is always just multiplied.\n        // gl_FragColor is multiplied by the tile color only when tile_colorBlend is 0.0 (highlight)\n        var highlight =\n            '    tile_featureColor = czm_gammaCorrect(tile_featureColor); \\n' +\n            '    gl_FragColor.a *= tile_featureColor.a; \\n' +\n            '    float highlight = ceil(tile_colorBlend); \\n' +\n            '    gl_FragColor.rgb *= mix(tile_featureColor.rgb, vec3(1.0), highlight); \\n';\n\n        var setColor;\n        if (type === 'vec3' || type === 'vec4') {\n            var sourceDiffuse = (type === 'vec3') ? ('vec4(' + diffuseAttributeOrUniformName + ', 1.0)') : diffuseAttributeOrUniformName;\n            var replaceDiffuse = (type === 'vec3') ? 'tile_diffuse.xyz' : 'tile_diffuse';\n            regex = new RegExp(diffuseAttributeOrUniformName, 'g');\n            source = source.replace(regex, replaceDiffuse);\n            setColor =\n                '    vec4 source = ' + sourceDiffuse + '; \\n' +\n                '    tile_diffuse = tile_diffuse_final(source, tile_featureColor); \\n' +\n                '    tile_main(); \\n';\n        } else if (type === 'sampler2D') {\n            // Handles any number of nested parentheses\n            // E.g. texture2D(u_diffuse, uv)\n            // E.g. texture2D(u_diffuse, computeUV(index))\n            source = replaceDiffuseTextureCalls(source, diffuseAttributeOrUniformName);\n            setColor =\n                '    tile_diffuse = tile_featureColor; \\n' +\n                '    tile_main(); \\n';\n        }\n\n        source =\n            'uniform float tile_colorBlend; \\n' +\n            'vec4 tile_diffuse = vec4(1.0); \\n' +\n            finalDiffuseFunction +\n            declaration + '\\n' +\n            source + '\\n' +\n            'void tile_color(vec4 tile_featureColor) \\n' +\n            '{ \\n' +\n            setColor;\n\n        if (applyHighlight) {\n            source += highlight;\n        }\n\n        source += '} \\n';\n        return source;\n    }\n\n    Cesium3DTileBatchTable.prototype.getFragmentShaderCallback = function(handleTranslucent, diffuseAttributeOrUniformName) {\n        if (this.featuresLength === 0) {\n            return;\n        }\n        return function(source) {\n            source = modifyDiffuse(source, diffuseAttributeOrUniformName, true);\n            if (ContextLimits.maximumVertexTextureImageUnits > 0) {\n                // When VTF is supported, per-feature show/hide already happened in the fragment shader\n                source +=\n                    'uniform sampler2D tile_pickTexture; \\n' +\n                    'varying vec2 tile_featureSt; \\n' +\n                    'varying vec4 tile_featureColor; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    tile_color(tile_featureColor); \\n' +\n                    '}';\n            } else {\n                if (handleTranslucent) {\n                    source += 'uniform bool tile_translucentCommand; \\n';\n                }\n                source +=\n                    'uniform sampler2D tile_pickTexture; \\n' +\n                    'uniform sampler2D tile_batchTexture; \\n' +\n                    'varying vec2 tile_featureSt; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    vec4 featureProperties = texture2D(tile_batchTexture, tile_featureSt); \\n' +\n                    '    if (featureProperties.a == 0.0) { \\n' + // show: alpha == 0 - false, non-zeo - true\n                    '        discard; \\n' +\n                    '    } \\n';\n\n                if (handleTranslucent) {\n                    source +=\n                        '    bool isStyleTranslucent = (featureProperties.a != 1.0); \\n' +\n                        '    if (czm_pass == czm_passTranslucent) \\n' +\n                        '    { \\n' +\n                        '        if (!isStyleTranslucent && !tile_translucentCommand) \\n' + // Do not render opaque features in the translucent pass\n                        '        { \\n' +\n                        '            discard; \\n' +\n                        '        } \\n' +\n                        '    } \\n' +\n                        '    else \\n' +\n                        '    { \\n' +\n                        '        if (isStyleTranslucent) \\n' + // Do not render translucent features in the opaque pass\n                        '        { \\n' +\n                        '            discard; \\n' +\n                        '        } \\n' +\n                        '    } \\n';\n                }\n\n                source +=\n                    '    tile_color(featureProperties); \\n' +\n                    '} \\n';\n            }\n            return source;\n        };\n    };\n\n    Cesium3DTileBatchTable.prototype.getClassificationFragmentShaderCallback = function() {\n        if (this.featuresLength === 0) {\n            return;\n        }\n        return function(source) {\n            source = ShaderSource.replaceMain(source, 'tile_main');\n            if (ContextLimits.maximumVertexTextureImageUnits > 0) {\n                // When VTF is supported, per-feature show/hide already happened in the fragment shader\n                source +=\n                    'uniform sampler2D tile_pickTexture;\\n' +\n                    'varying vec2 tile_featureSt; \\n' +\n                    'varying vec4 tile_featureColor; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    tile_main(); \\n' +\n                    '    gl_FragColor = tile_featureColor; \\n' +\n                    '}';\n            } else {\n                source +=\n                    'uniform sampler2D tile_batchTexture; \\n' +\n                    'uniform sampler2D tile_pickTexture;\\n' +\n                    'varying vec2 tile_featureSt; \\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    tile_main(); \\n' +\n                    '    vec4 featureProperties = texture2D(tile_batchTexture, tile_featureSt); \\n' +\n                    '    if (featureProperties.a == 0.0) { \\n' + // show: alpha == 0 - false, non-zeo - true\n                    '        discard; \\n' +\n                    '    } \\n' +\n                    '    gl_FragColor = featureProperties; \\n' +\n                    '} \\n';\n            }\n            return source;\n        };\n    };\n\n    function getColorBlend(batchTable) {\n        var tileset = batchTable._content.tileset;\n        var colorBlendMode = tileset.colorBlendMode;\n        var colorBlendAmount = tileset.colorBlendAmount;\n        if (colorBlendMode === Cesium3DTileColorBlendMode.HIGHLIGHT) {\n            return 0.0;\n        }\n        if (colorBlendMode === Cesium3DTileColorBlendMode.REPLACE) {\n            return 1.0;\n        }\n        if (colorBlendMode === Cesium3DTileColorBlendMode.MIX) {\n            // The value 0.0 is reserved for highlight, so clamp to just above 0.0.\n            return CesiumMath.clamp(colorBlendAmount, CesiumMath.EPSILON4, 1.0);\n        }\n        \n    }\n\n    Cesium3DTileBatchTable.prototype.getUniformMapCallback = function() {\n        if (this.featuresLength === 0) {\n            return;\n        }\n\n        var that = this;\n        return function(uniformMap) {\n            var batchUniformMap = {\n                tile_batchTexture : function() {\n                    // PERFORMANCE_IDEA: we could also use a custom shader that avoids the texture read.\n                    return defaultValue(that._batchTexture, that._defaultTexture);\n                },\n                tile_textureDimensions : function() {\n                    return that._textureDimensions;\n                },\n                tile_textureStep : function() {\n                    return that._textureStep;\n                },\n                tile_colorBlend : function() {\n                    return getColorBlend(that);\n                },\n                tile_pickTexture : function() {\n                    return that._pickTexture;\n                }\n            };\n\n            return combine(uniformMap, batchUniformMap);\n        };\n    };\n\n    Cesium3DTileBatchTable.prototype.getPickId = function() {\n        return 'texture2D(tile_pickTexture, tile_featureSt)';\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var StyleCommandsNeeded = {\n        ALL_OPAQUE : 0,\n        ALL_TRANSLUCENT : 1,\n        OPAQUE_AND_TRANSLUCENT : 2\n    };\n\n    Cesium3DTileBatchTable.prototype.addDerivedCommands = function(frameState, commandStart) {\n        var commandList = frameState.commandList;\n        var commandEnd = commandList.length;\n        var tile = this._content._tile;\n        var finalResolution = tile._finalResolution;\n        var tileset = tile.tileset;\n        var bivariateVisibilityTest = tileset._skipLevelOfDetail && tileset._hasMixedContent && frameState.context.stencilBuffer;\n        var styleCommandsNeeded = getStyleCommandsNeeded(this);\n\n        for (var i = commandStart; i < commandEnd; ++i) {\n            var command = commandList[i];\n            var derivedCommands = command.derivedCommands.tileset;\n            if (!defined(derivedCommands) || command.dirty) {\n                derivedCommands = {};\n                command.derivedCommands.tileset = derivedCommands;\n                derivedCommands.originalCommand = deriveCommand(command);\n                command.dirty = false;\n            }\n            var originalCommand = derivedCommands.originalCommand;\n\n            if (styleCommandsNeeded !== StyleCommandsNeeded.ALL_OPAQUE && command.pass !== Pass.TRANSLUCENT) {\n                if (!defined(derivedCommands.translucent)) {\n                    derivedCommands.translucent = deriveTranslucentCommand(originalCommand);\n                }\n            }\n\n            if (styleCommandsNeeded !== StyleCommandsNeeded.ALL_TRANSLUCENT && command.pass !== Pass.TRANSLUCENT) {\n                if (!defined(derivedCommands.opaque)) {\n                    derivedCommands.opaque = deriveOpaqueCommand(originalCommand);\n                }\n\n                if (bivariateVisibilityTest) {\n                    if (!finalResolution) {\n                        if (!defined(derivedCommands.zback)) {\n                            derivedCommands.zback = deriveZBackfaceCommand(frameState.context, originalCommand);\n                        }\n                        tileset._backfaceCommands.push(derivedCommands.zback);\n                    }\n                    if (!defined(derivedCommands.stencil) || (tile._selectionDepth !== getLastSelectionDepth(derivedCommands.stencil))) {\n                        if (command.renderState.depthMask) {\n                            derivedCommands.stencil = deriveStencilCommand(originalCommand, tile._selectionDepth);\n                        } else {\n                            // Ignore if tile does not write depth\n                            derivedCommands.stencil = derivedCommands.opaque;\n                        }\n                    }\n                }\n            }\n\n            var opaqueCommand = bivariateVisibilityTest ? derivedCommands.stencil : derivedCommands.opaque;\n            var translucentCommand = derivedCommands.translucent;\n\n            // If the command was originally opaque:\n            //    * If the styling applied to the tile is all opaque, use the opaque command\n            //      (with one additional uniform needed for the shader).\n            //    * If the styling is all translucent, use new (cached) derived commands (front\n            //      and back faces) with a translucent render state.\n            //    * If the styling causes both opaque and translucent features in this tile,\n            //      then use both sets of commands.\n            if (command.pass !== Pass.TRANSLUCENT) {\n                if (styleCommandsNeeded === StyleCommandsNeeded.ALL_OPAQUE) {\n                    commandList[i] = opaqueCommand;\n                }\n                if (styleCommandsNeeded === StyleCommandsNeeded.ALL_TRANSLUCENT) {\n                    commandList[i] = translucentCommand;\n                }\n                if (styleCommandsNeeded === StyleCommandsNeeded.OPAQUE_AND_TRANSLUCENT) {\n                    // PERFORMANCE_IDEA: if the tile has multiple commands, we do not know what features are in what\n                    // commands so this case may be overkill.\n                    commandList[i] = opaqueCommand;\n                    commandList.push(translucentCommand);\n                }\n            } else {\n                // Command was originally translucent so no need to derive new commands;\n                // as of now, a style can't change an originally translucent feature to\n                // opaque since the style's alpha is modulated, not a replacement.  When\n                // this changes, we need to derive new opaque commands here.\n                commandList[i] = originalCommand;\n            }\n        }\n    };\n\n    function getStyleCommandsNeeded(batchTable) {\n        var translucentFeaturesLength = batchTable._translucentFeaturesLength;\n\n        if (translucentFeaturesLength === 0) {\n            return StyleCommandsNeeded.ALL_OPAQUE;\n        } else if (translucentFeaturesLength === batchTable.featuresLength) {\n            return StyleCommandsNeeded.ALL_TRANSLUCENT;\n        }\n\n        return StyleCommandsNeeded.OPAQUE_AND_TRANSLUCENT;\n    }\n\n    function deriveCommand(command) {\n        var derivedCommand = DrawCommand.shallowClone(command);\n\n        // Add a uniform to indicate if the original command was translucent so\n        // the shader knows not to cull vertices that were originally transparent\n        // even though their style is opaque.\n        var translucentCommand = (derivedCommand.pass === Pass.TRANSLUCENT);\n\n        derivedCommand.uniformMap = defined(derivedCommand.uniformMap) ? derivedCommand.uniformMap : {};\n        derivedCommand.uniformMap.tile_translucentCommand = function() {\n            return translucentCommand;\n        };\n\n        return derivedCommand;\n    }\n\n    function deriveTranslucentCommand(command) {\n        var derivedCommand = DrawCommand.shallowClone(command);\n        derivedCommand.pass = Pass.TRANSLUCENT;\n        derivedCommand.renderState = getTranslucentRenderState(command.renderState);\n        return derivedCommand;\n    }\n\n    function deriveOpaqueCommand(command) {\n        var derivedCommand = DrawCommand.shallowClone(command);\n        derivedCommand.renderState = getOpaqueRenderState(command.renderState);\n        return derivedCommand;\n    }\n\n    function getLogDepthPolygonOffsetFragmentShaderProgram(context, shaderProgram) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'zBackfaceLogDepth');\n        if (!defined(shader)) {\n            var fs = shaderProgram.fragmentShaderSource.clone();\n            fs.defines = defined(fs.defines) ? fs.defines.slice(0) : [];\n            fs.defines.push('POLYGON_OFFSET');\n\n            fs.sources.unshift('#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n');\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'zBackfaceLogDepth', {\n                vertexShaderSource : shaderProgram.vertexShaderSource,\n                fragmentShaderSource : fs,\n                attributeLocations : shaderProgram._attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    function deriveZBackfaceCommand(context, command) {\n        // Write just backface depth of unresolved tiles so resolved stenciled tiles do not appear in front\n        var derivedCommand = DrawCommand.shallowClone(command);\n        var rs = clone(derivedCommand.renderState, true);\n        rs.cull.enabled = true;\n        rs.cull.face = CullFace.FRONT;\n        // Back faces do not need to write color.\n        rs.colorMask = {\n            red : false,\n            green : false,\n            blue : false,\n            alpha : false\n        };\n        // Push back face depth away from the camera so it is less likely that back faces and front faces of the same tile\n        // intersect and overlap. This helps avoid flickering for very thin double-sided walls.\n        rs.polygonOffset = {\n            enabled : true,\n            factor : 5.0,\n            units : 5.0\n        };\n        // Set the 3D Tiles bit\n        rs.stencilTest = StencilConstants.setCesium3DTileBit();\n        rs.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK;\n\n        derivedCommand.renderState = RenderState.fromCache(rs);\n        derivedCommand.castShadows = false;\n        derivedCommand.receiveShadows = false;\n        derivedCommand.uniformMap = clone(command.uniformMap);\n\n        var polygonOffset = new Cartesian2(5.0, 5.0);\n        derivedCommand.uniformMap.u_polygonOffset = function() {\n            return polygonOffset;\n        };\n\n        // Make the log depth depth fragment write account for the polygon offset, too.\n        // Otherwise, the back face commands will cause the higher resolution\n        // tiles to disappear.\n        derivedCommand.shaderProgram = getLogDepthPolygonOffsetFragmentShaderProgram(context, command.shaderProgram);\n        return derivedCommand;\n    }\n\n    function deriveStencilCommand(command, reference) {\n        // Tiles only draw if their selection depth is >= the tile drawn already. They write their\n        // selection depth to the stencil buffer to prevent ancestor tiles from drawing on top\n        var derivedCommand = DrawCommand.shallowClone(command);\n        var rs = clone(derivedCommand.renderState, true);\n        // Stencil test is masked to the most significant 3 bits so the reference is shifted. Writes 0 for the terrain bit\n        rs.stencilTest.enabled = true;\n        rs.stencilTest.mask = StencilConstants.SKIP_LOD_MASK;\n        rs.stencilTest.reference = StencilConstants.CESIUM_3D_TILE_MASK | (reference << StencilConstants.SKIP_LOD_BIT_SHIFT);\n        rs.stencilTest.frontFunction = StencilFunction.GREATER_OR_EQUAL;\n        rs.stencilTest.frontOperation.zPass = StencilOperation.REPLACE;\n        rs.stencilTest.backFunction = StencilFunction.GREATER_OR_EQUAL;\n        rs.stencilTest.backOperation.zPass = StencilOperation.REPLACE;\n        rs.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK | StencilConstants.SKIP_LOD_MASK;\n        derivedCommand.renderState = RenderState.fromCache(rs);\n        return derivedCommand;\n    }\n\n    function getLastSelectionDepth(stencilCommand) {\n        // Isolate the selection depth from the stencil reference.\n        var reference = stencilCommand.renderState.stencilTest.reference;\n        return (reference & StencilConstants.SKIP_LOD_MASK) >>> StencilConstants.SKIP_LOD_BIT_SHIFT;\n    }\n\n    function getTranslucentRenderState(renderState) {\n        var rs = clone(renderState, true);\n        rs.cull.enabled = false;\n        rs.depthTest.enabled = true;\n        rs.depthMask = false;\n        rs.blending = BlendingState.ALPHA_BLEND;\n\n        return RenderState.fromCache(rs);\n    }\n\n    function getOpaqueRenderState(renderState) {\n        var rs = clone(renderState, true);\n        rs.stencilTest = StencilConstants.setCesium3DTileBit();\n        rs.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK;\n\n        return RenderState.fromCache(rs);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function createTexture(batchTable, context, bytes) {\n        var dimensions = batchTable._textureDimensions;\n        return new Texture({\n            context : context,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            source : {\n                width : dimensions.x,\n                height : dimensions.y,\n                arrayBufferView : bytes\n            },\n            flipY : false,\n            sampler : Sampler.NEAREST\n        });\n    }\n\n    function createPickTexture(batchTable, context) {\n        var featuresLength = batchTable.featuresLength;\n        if (!defined(batchTable._pickTexture) && (featuresLength > 0)) {\n            var pickIds = batchTable._pickIds;\n            var byteLength = getByteLength(batchTable);\n            var bytes = new Uint8Array(byteLength);\n            var content = batchTable._content;\n\n            // PERFORMANCE_IDEA: we could skip the pick texture completely by allocating\n            // a continuous range of pickIds and then converting the base pickId + batchId\n            // to RGBA in the shader.  The only consider is precision issues, which might\n            // not be an issue in WebGL 2.\n            for (var i = 0; i < featuresLength; ++i) {\n                var pickId = context.createPickId(content.getFeature(i));\n                pickIds.push(pickId);\n\n                var pickColor = pickId.color;\n                var offset = i * 4;\n                bytes[offset] = Color.floatToByte(pickColor.red);\n                bytes[offset + 1] = Color.floatToByte(pickColor.green);\n                bytes[offset + 2] = Color.floatToByte(pickColor.blue);\n                bytes[offset + 3] = Color.floatToByte(pickColor.alpha);\n            }\n\n            batchTable._pickTexture = createTexture(batchTable, context, bytes);\n            content.tileset._statistics.batchTableByteLength += batchTable._pickTexture.sizeInBytes;\n        }\n    }\n\n    function updateBatchTexture(batchTable) {\n        var dimensions = batchTable._textureDimensions;\n        // PERFORMANCE_IDEA: Instead of rewriting the entire texture, use fine-grained\n        // texture updates when less than, for example, 10%, of the values changed.  Or\n        // even just optimize the common case when one feature show/color changed.\n        batchTable._batchTexture.copyFrom({\n            width : dimensions.x,\n            height : dimensions.y,\n            arrayBufferView : batchTable._batchValues\n        });\n    }\n\n    Cesium3DTileBatchTable.prototype.update = function(tileset, frameState) {\n        var context = frameState.context;\n        this._defaultTexture = context.defaultTexture;\n\n        var passes = frameState.passes;\n        if (passes.pick || passes.postProcess) {\n            createPickTexture(this, context);\n        }\n\n        if (this._batchValuesDirty) {\n            this._batchValuesDirty = false;\n\n            // Create batch texture on-demand\n            if (!defined(this._batchTexture)) {\n                this._batchTexture = createTexture(this, context, this._batchValues);\n                tileset._statistics.batchTableByteLength += this._batchTexture.sizeInBytes;\n            }\n\n            updateBatchTexture(this);  // Apply per-feature show/color updates\n        }\n    };\n\n    Cesium3DTileBatchTable.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Cesium3DTileBatchTable.prototype.destroy = function() {\n        this._batchTexture = this._batchTexture && this._batchTexture.destroy();\n        this._pickTexture = this._pickTexture && this._pickTexture.destroy();\n\n        var pickIds = this._pickIds;\n        var length = pickIds.length;\n        for (var i = 0; i < length; ++i) {\n            pickIds[i].destroy();\n        }\n\n        return destroyObject(this);\n    };\nexport default Cesium3DTileBatchTable;\n","import ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\n\n    /**\n     * @private\n     */\n    function Cesium3DTileFeatureTable(featureTableJson, featureTableBinary) {\n        this.json = featureTableJson;\n        this.buffer = featureTableBinary;\n        this._cachedTypedArrays = {};\n        this.featuresLength = 0;\n    }\n\n    function getTypedArrayFromBinary(featureTable, semantic, componentType, componentLength, count, byteOffset) {\n        var cachedTypedArrays = featureTable._cachedTypedArrays;\n        var typedArray = cachedTypedArrays[semantic];\n        if (!defined(typedArray)) {\n            typedArray = ComponentDatatype.createArrayBufferView(componentType, featureTable.buffer.buffer, featureTable.buffer.byteOffset + byteOffset, count * componentLength);\n            cachedTypedArrays[semantic] = typedArray;\n        }\n        return typedArray;\n    }\n\n    function getTypedArrayFromArray(featureTable, semantic, componentType, array) {\n        var cachedTypedArrays = featureTable._cachedTypedArrays;\n        var typedArray = cachedTypedArrays[semantic];\n        if (!defined(typedArray)) {\n            typedArray = ComponentDatatype.createTypedArray(componentType, array);\n            cachedTypedArrays[semantic] = typedArray;\n        }\n        return typedArray;\n    }\n\n    Cesium3DTileFeatureTable.prototype.getGlobalProperty = function(semantic, componentType, componentLength) {\n        var jsonValue = this.json[semantic];\n        if (!defined(jsonValue)) {\n            return undefined;\n        }\n\n        if (defined(jsonValue.byteOffset)) {\n            componentType = defaultValue(componentType, ComponentDatatype.UNSIGNED_INT);\n            componentLength = defaultValue(componentLength, 1);\n            return getTypedArrayFromBinary(this, semantic, componentType, componentLength, 1, jsonValue.byteOffset);\n        }\n\n        return jsonValue;\n    };\n\n    Cesium3DTileFeatureTable.prototype.getPropertyArray = function(semantic, componentType, componentLength) {\n        var jsonValue = this.json[semantic];\n        if (!defined(jsonValue)) {\n            return undefined;\n        }\n\n        if (defined(jsonValue.byteOffset)) {\n            if (defined(jsonValue.componentType)) {\n                componentType = ComponentDatatype.fromName(jsonValue.componentType);\n            }\n            return getTypedArrayFromBinary(this, semantic, componentType, componentLength, this.featuresLength, jsonValue.byteOffset);\n        }\n\n        return getTypedArrayFromArray(this, semantic, componentType, jsonValue);\n    };\n\n    Cesium3DTileFeatureTable.prototype.getProperty = function(semantic, componentType, componentLength, featureId, result) {\n        var jsonValue = this.json[semantic];\n        if (!defined(jsonValue)) {\n            return undefined;\n        }\n\n        var typedArray = this.getPropertyArray(semantic, componentType, componentLength);\n\n        if (componentLength === 1) {\n            return typedArray[featureId];\n        }\n\n        for (var i = 0; i < componentLength; ++i) {\n            result[i] = typedArray[componentLength * featureId + i];\n        }\n\n        return result;\n    };\nexport default Cesium3DTileFeatureTable;\n","\n    /**\n     * Describes a renderable batch of geometry.\n     *\n     * @alias Vector3DTileBatch\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {Number} options.offset The offset of the batch into the indices buffer.\n     * @param {Number} options.count The number of indices in the batch.\n     * @param {Color} options.color The color of the geometry in the batch.\n     * @param {Number[]} options.batchIds An array where each element is the batch id of the geometry in the batch.\n     *\n     * @private\n     */\n    function Vector3DTileBatch(options) {\n        /**\n         * The offset of the batch into the indices buffer.\n         * @type {Number}\n         */\n        this.offset = options.offset;\n        /**\n         * The number of indices in the batch.\n         * @type {Number}\n         */\n        this.count = options.count;\n        /**\n         * The color of the geometry in the batch.\n         * @type {Color}\n         */\n        this.color = options.color;\n        /**\n         * An array where each element is the batch id of the geometry in the batch.\n         * @type {Number[]}\n         */\n        this.batchIds = options.batchIds;\n    }\nexport default Vector3DTileBatch;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position;\\n\\\nattribute float a_batchId;\\n\\\n\\n\\\nuniform mat4 u_modifiedModelViewProjection;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = czm_depthClampFarPlane(u_modifiedModelViewProjection * vec4(position, 1.0));\\n\\\n}\\n\\\n\";\n","//     JavaScript Expression Parser (JSEP) 0.3.1\n//     JSEP may be freely distributed under the MIT License\n//     http://jsep.from.so/\n\nvar tmp = {};\n\n/*global module: true, exports: true, console: true */\n(function (root) {\n\t'use strict';\n\t// Node Types\n\t// ----------\n\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tvar COMPOUND = 'Compound',\n\t\tIDENTIFIER = 'Identifier',\n\t\tMEMBER_EXP = 'MemberExpression',\n\t\tLITERAL = 'Literal',\n\t\tTHIS_EXP = 'ThisExpression',\n\t\tCALL_EXP = 'CallExpression',\n\t\tUNARY_EXP = 'UnaryExpression',\n\t\tBINARY_EXP = 'BinaryExpression',\n\t\tLOGICAL_EXP = 'LogicalExpression',\n\t\tCONDITIONAL_EXP = 'ConditionalExpression',\n\t\tARRAY_EXP = 'ArrayExpression',\n\n\t\tPERIOD_CODE = 46, // '.'\n\t\tCOMMA_CODE  = 44, // ','\n\t\tSQUOTE_CODE = 39, // single quote\n\t\tDQUOTE_CODE = 34, // double quotes\n\t\tOPAREN_CODE = 40, // (\n\t\tCPAREN_CODE = 41, // )\n\t\tOBRACK_CODE = 91, // [\n\t\tCBRACK_CODE = 93, // ]\n\t\tQUMARK_CODE = 63, // ?\n\t\tSEMCOL_CODE = 59, // ;\n\t\tCOLON_CODE  = 58, // :\n\n\t\tthrowError = function(message, index) {\n\t\t\tvar error = new Error(message + ' at character ' + index);\n\t\t\terror.index = index;\n\t\t\terror.description = message;\n\t\t\tthrow error;\n\t\t},\n\n\t// Operations\n\t// ----------\n\n\t// Set `t` to `true` to save space (when minified, not gzipped)\n\t\tt = true,\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `true` (it really doesn't matter)\n\t\tunary_ops = {'-': t, '!': t, '~': t, '+': t},\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference:\n\t// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)\n\t\tbinary_ops = {\n\t\t\t'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,\n\t\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t\t'<': 7,  '>': 7,  '<=': 7,  '>=': 7,\n\t\t\t'<<':8,  '>>': 8, '>>>': 8,\n\t\t\t'+': 9, '-': 9,\n\t\t\t'*': 10, '/': 10, '%': 10\n\t\t},\n\t// Get return the longest key length of any object\n\t\tgetMaxKeyLen = function(obj) {\n\t\t\tvar max_len = 0, len;\n\t\t\tfor(var key in obj) {\n\t\t\t\tif((len = key.length) > max_len && obj.hasOwnProperty(key)) {\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max_len;\n\t\t},\n\t\tmax_unop_len = getMaxKeyLen(unary_ops),\n\t\tmax_binop_len = getMaxKeyLen(binary_ops),\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\t\tliterals = {\n\t\t\t'true': true,\n\t\t\t'false': false,\n\t\t\t'null': null\n\t\t},\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\t\tthis_str = 'this',\n\t// Returns the precedence of a binary operator or `0` if it isn't a binary operator\n\t\tbinaryPrecedence = function(op_val) {\n\t\t\treturn binary_ops[op_val] || 0;\n\t\t},\n\t// Utility function (gets called from multiple places)\n\t// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n\t\tcreateBinaryExpression = function (operator, left, right) {\n\t\t\tvar type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;\n\t\t\treturn {\n\t\t\t\ttype: type,\n\t\t\t\toperator: operator,\n\t\t\t\tleft: left,\n\t\t\t\tright: right\n\t\t\t};\n\t\t},\n\t\t// `ch` is a character code in the next three functions\n\t\tisDecimalDigit = function(ch) {\n\t\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t\t},\n\t\tisIdentifierStart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\n\t\t},\n\t\tisIdentifierPart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t\t\t(ch >= 48 && ch <= 57) || // 0...9\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\n\t\t},\n\n\t\t// Parsing\n\t\t// -------\n\t\t// `expr` is a string with the passed in expression\n\t\tjsep = function(expr) {\n\t\t\t// `index` stores the character number we are currently at while `length` is a constant\n\t\t\t// All of the gobbles below will modify `index` as we move along\n\t\t\tvar index = 0,\n\t\t\t\tcharAtFunc = expr.charAt,\n\t\t\t\tcharCodeAtFunc = expr.charCodeAt,\n\t\t\t\texprI = function(i) { return charAtFunc.call(expr, i); },\n\t\t\t\texprICode = function(i) { return charCodeAtFunc.call(expr, i); },\n\t\t\t\tlength = expr.length,\n\n\t\t\t\t// Push `index` up to the next non-space character\n\t\t\t\tgobbleSpaces = function() {\n\t\t\t\t\tvar ch = exprICode(index);\n\t\t\t\t\t// space or tab\n\t\t\t\t\twhile(ch === 32 || ch === 9) {\n\t\t\t\t\t\tch = exprICode(++index);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// The main parsing function. Much of this code is dedicated to ternary expressions\n\t\t\t\tgobbleExpression = function() {\n\t\t\t\t\tvar test = gobbleBinaryExpression(),\n\t\t\t\t\t\tconsequent, alternate;\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === QUMARK_CODE) {\n\t\t\t\t\t\t// Ternary expression: test ? consequent : alternate\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tconsequent = gobbleExpression();\n\t\t\t\t\t\tif(!consequent) {\n\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tif(exprICode(index) === COLON_CODE) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\talternate = gobbleExpression();\n\t\t\t\t\t\t\tif(!alternate) {\n\t\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\t\t\ttest: test,\n\t\t\t\t\t\t\t\tconsequent: consequent,\n\t\t\t\t\t\t\t\talternate: alternate\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowError('Expected :', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn test;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Search for the operation portion of the string (e.g. `+`, `===`)\n\t\t\t\t// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t\t\t\t// and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t\t\t\t// then, return that binary operation\n\t\t\t\tgobbleBinaryOp = function() {\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tvar biop, to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;\n\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\tif(binary_ops.hasOwnProperty(to_check)) {\n\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\treturn to_check;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// This function is responsible for gobbling an individual expression,\n\t\t\t\t// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t\t\t\tgobbleBinaryExpression = function() {\n\t\t\t\t\tvar ch_i, node, biop, prec, stack, biop_info, left, right, i;\n\n\t\t\t\t\t// First, try to get the leftmost thing\n\t\t\t\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t\t\t\tleft = gobbleToken();\n\t\t\t\t\tbiop = gobbleBinaryOp();\n\n\t\t\t\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\t\t\t\tif(!biop) {\n\t\t\t\t\t\treturn left;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t\t\t\t// precedence structure\n\t\t\t\t\tbiop_info = { value: biop, prec: binaryPrecedence(biop)};\n\n\t\t\t\t\tright = gobbleToken();\n\t\t\t\t\tif(!right) {\n\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\n\t\t\t\t\t}\n\t\t\t\t\tstack = [left, biop_info, right];\n\n\t\t\t\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\t\t\t\twhile((biop = gobbleBinaryOp())) {\n\t\t\t\t\t\tprec = binaryPrecedence(biop);\n\n\t\t\t\t\t\tif(prec === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbiop_info = { value: biop, prec: prec };\n\n\t\t\t\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\t\t\t\twhile ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t\t\t\t\t\t\tright = stack.pop();\n\t\t\t\t\t\t\tbiop = stack.pop().value;\n\t\t\t\t\t\t\tleft = stack.pop();\n\t\t\t\t\t\t\tnode = createBinaryExpression(biop, left, right);\n\t\t\t\t\t\t\tstack.push(node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode = gobbleToken();\n\t\t\t\t\t\tif(!node) {\n\t\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstack.push(biop_info, node);\n\t\t\t\t\t}\n\n\t\t\t\t\ti = stack.length - 1;\n\t\t\t\t\tnode = stack[i];\n\t\t\t\t\twhile(i > 1) {\n\t\t\t\t\t\tnode = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);\n\t\t\t\t\t\ti -= 2;\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// An individual part of a binary expression:\n\t\t\t\t// e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t\t\t\tgobbleToken = function() {\n\t\t\t\t\tvar ch, to_check, tc_len;\n\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch = exprICode(index);\n\n\t\t\t\t\tif(isDecimalDigit(ch) || ch === PERIOD_CODE) {\n\t\t\t\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\t\t\t\treturn gobbleNumericLiteral();\n\t\t\t\t\t} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n\t\t\t\t\t\t// Single or double quotes\n\t\t\t\t\t\treturn gobbleStringLiteral();\n\t\t\t\t\t} else if(isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis\n\t\t\t\t\t\t// `foo`, `bar.baz`\n\t\t\t\t\t\treturn gobbleVariable();\n\t\t\t\t\t} else if (ch === OBRACK_CODE) {\n\t\t\t\t\t\treturn gobbleArray();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tto_check = expr.substr(index, max_unop_len);\n\t\t\t\t\t\ttc_len = to_check.length;\n\t\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\t\tif(unary_ops.hasOwnProperty(to_check)) {\n\t\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: UNARY_EXP,\n\t\t\t\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\t\t\t\targument: gobbleToken(),\n\t\t\t\t\t\t\t\t\tprefix: true\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t\t\t\t// keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t\t\t\tgobbleNumericLiteral = function() {\n\t\t\t\t\tvar number = '', ch, chCode;\n\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tch = exprI(index);\n\t\t\t\t\tif(ch === 'e' || ch === 'E') { // exponent marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\tch = exprI(index);\n\t\t\t\t\t\tif(ch === '+' || ch === '-') { // exponent sign\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) { //exponent itself\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isDecimalDigit(exprICode(index-1)) ) {\n\t\t\t\t\t\t\tthrowError('Expected exponent (' + number + exprI(index) + ')', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\tchCode = exprICode(index);\n\t\t\t\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\t\t\t\tif(isIdentifierStart(chCode)) {\n\t\t\t\t\t\tthrowError('Variable names cannot start with a number (' +\n\t\t\t\t\t\t\t\t\tnumber + exprI(index) + ')', index);\n\t\t\t\t\t} else if(chCode === PERIOD_CODE) {\n\t\t\t\t\t\tthrowError('Unexpected period', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: parseFloat(number),\n\t\t\t\t\t\traw: number\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t// Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t\t\t\t// e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t\t\t\tgobbleStringLiteral = function() {\n\t\t\t\t\tvar str = '', quote = exprI(index++), closed = false, ch;\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\tif(ch === quote) {\n\t\t\t\t\t\t\tclosed = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if(ch === '\\\\') {\n\t\t\t\t\t\t\t// Check for all of the common escape codes\n\t\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\t\tswitch(ch) {\n\t\t\t\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\t\t\t\tdefault : str += '\\\\' + ch;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += ch;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!closed) {\n\t\t\t\t\t\tthrowError('Unclosed quote after \"'+str+'\"', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: str,\n\t\t\t\t\t\traw: quote + str + quote\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t// Gobbles only identifiers\n\t\t\t\t// e.g.: `foo`, `_value`, `$x1`\n\t\t\t\t// Also, this function checks if that identifier is a literal:\n\t\t\t\t// (e.g. `true`, `false`, `null`) or `this`\n\t\t\t\tgobbleIdentifier = function() {\n\t\t\t\t\tvar ch = exprICode(index), start = index, identifier;\n\n\t\t\t\t\tif(isIdentifierStart(ch)) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unexpected ' + exprI(index), index);\n\t\t\t\t\t}\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprICode(index);\n\t\t\t\t\t\tif(isIdentifierPart(ch)) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tidentifier = expr.slice(start, index);\n\n\t\t\t\t\tif(literals.hasOwnProperty(identifier)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\t\tvalue: literals[identifier],\n\t\t\t\t\t\t\traw: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if(identifier === this_str) {\n\t\t\t\t\t\treturn { type: THIS_EXP };\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: IDENTIFIER,\n\t\t\t\t\t\t\tname: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Gobbles a list of arguments within the context of a function call\n\t\t\t\t// or array literal. This function also assumes that the opening character\n\t\t\t\t// `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t\t\t\t// until the terminator character `)` or `]` is encountered.\n\t\t\t\t// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t\t\t\tgobbleArguments = function(termination) {\n\t\t\t\t\tvar ch_i, args = [], node, closed = false;\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\tif(ch_i === termination) { // done parsing\n\t\t\t\t\t\t\tclosed = true;\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (ch_i === COMMA_CODE) { // between expressions\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = gobbleExpression();\n\t\t\t\t\t\t\tif(!node || node.type === COMPOUND) {\n\t\t\t\t\t\t\t\tthrowError('Expected comma', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\targs.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!closed) {\n\t\t\t\t\t\tthrowError('Expected ' + String.fromCharCode(termination), index);\n\t\t\t\t\t}\n\t\t\t\t\treturn args;\n\t\t\t\t},\n\n\t\t\t\t// Gobble a non-literal variable name. This variable name may include properties\n\t\t\t\t// e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t\t\t\t// It also gobbles function calls:\n\t\t\t\t// e.g. `Math.acos(obj.angle)`\n\t\t\t\tgobbleVariable = function() {\n\t\t\t\t\tvar ch_i, node;\n\t\t\t\t\tch_i = exprICode(index);\n\n\t\t\t\t\tif(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tnode = gobbleGroup();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = gobbleIdentifier();\n\t\t\t\t\t}\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\twhile(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif(ch_i === PERIOD_CODE) {\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: false,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleIdentifier()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if(ch_i === OBRACK_CODE) {\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: true,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleExpression()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\t\tif(ch_i !== CBRACK_CODE) {\n\t\t\t\t\t\t\t\tthrowError('Unclosed [', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else if(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: CALL_EXP,\n\t\t\t\t\t\t\t\t'arguments': gobbleArguments(CPAREN_CODE),\n\t\t\t\t\t\t\t\tcallee: node\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing a group of things within parentheses `()`\n\t\t\t\t// This function assumes that it needs to gobble the opening parenthesis\n\t\t\t\t// and then tries to gobble everything within that parenthesis, assuming\n\t\t\t\t// that the next thing it should see is the close parenthesis. If not,\n\t\t\t\t// then the expression probably doesn't have a `)`\n\t\t\t\tgobbleGroup = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\tvar node = gobbleExpression();\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === CPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unclosed (', index);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing Array literals `[1, 2, 3]`\n\t\t\t\t// This function assumes that it needs to gobble the opening bracket\n\t\t\t\t// and then tries to gobble the expressions as arguments.\n\t\t\t\tgobbleArray = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: ARRAY_EXP,\n\t\t\t\t\t\telements: gobbleArguments(CBRACK_CODE)\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tnodes = [], ch_i, node;\n\n\t\t\twhile(index < length) {\n\t\t\t\tch_i = exprICode(index);\n\n\t\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t\t// separators\n\t\t\t\tif(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {\n\t\t\t\t\tindex++; // ignore separators\n\t\t\t\t} else {\n\t\t\t\t\t// Try to gobble each expression individually\n\t\t\t\t\tif((node = gobbleExpression())) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t\t} else if(index < length) {\n\t\t\t\t\t\tthrowError('Unexpected \"' + exprI(index) + '\"', index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there's only one expression just try returning the expression\n\t\t\tif(nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: COMPOUND,\n\t\t\t\t\tbody: nodes\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t// To be filled in by the template\n\tjsep.version = '0.3.1';\n\tjsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };\n\n\t/**\n\t * @method jsep.addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @return jsep\n\t */\n\tjsep.addUnaryOp = function(op_name) {\n\t\tmax_unop_len = Math.max(op_name.length, max_unop_len);\n\t\tunary_ops[op_name] = t; return this;\n\t};\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float)\n\t * @return jsep\n\t */\n\tjsep.addBinaryOp = function(op_name, precedence) {\n\t\tmax_binop_len = Math.max(op_name.length, max_binop_len);\n\t\tbinary_ops[op_name] = precedence;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.addLiteral\n\t * @param {string} literal_name The name of the literal to add\n\t * @param {*} literal_value The value of the literal\n\t * @return jsep\n\t */\n\tjsep.addLiteral = function(literal_name, literal_value) {\n\t\tliterals[literal_name] = literal_value;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeUnaryOp = function(op_name) {\n\t\tdelete unary_ops[op_name];\n\t\tif(op_name.length === max_unop_len) {\n\t\t\tmax_unop_len = getMaxKeyLen(unary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllUnaryOps\n\t * @return jsep\n\t */\n\tjsep.removeAllUnaryOps = function() {\n\t\tunary_ops = {};\n\t\tmax_unop_len = 0;\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeBinaryOp = function(op_name) {\n\t\tdelete binary_ops[op_name];\n\t\tif(op_name.length === max_binop_len) {\n\t\t\tmax_binop_len = getMaxKeyLen(binary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllBinaryOps\n\t * @return jsep\n\t */\n\tjsep.removeAllBinaryOps = function() {\n\t\tbinary_ops = {};\n\t\tmax_binop_len = 0;\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeLiteral\n\t * @param {string} literal_name The name of the literal to remove\n\t * @return jsep\n\t */\n\tjsep.removeLiteral = function(literal_name) {\n\t\tdelete literals[literal_name];\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllLiterals\n\t * @return jsep\n\t */\n\tjsep.removeAllLiterals = function() {\n\t\tliterals = {};\n\n\t\treturn this;\n\t};\n\n    root.jsep = jsep;\n}(tmp));\n\nexport default tmp.jsep;\n","\n    /**\n     * @private\n     */\n    var ExpressionNodeType = {\n        VARIABLE : 0,\n        UNARY : 1,\n        BINARY : 2,\n        TERNARY : 3,\n        CONDITIONAL : 4,\n        MEMBER : 5,\n        FUNCTION_CALL : 6,\n        ARRAY : 7,\n        REGEX: 8,\n        VARIABLE_IN_STRING : 9,\n        LITERAL_NULL : 10,\n        LITERAL_BOOLEAN : 11,\n        LITERAL_NUMBER : 12,\n        LITERAL_STRING : 13,\n        LITERAL_COLOR : 14,\n        LITERAL_VECTOR : 15,\n        LITERAL_REGEX : 16,\n        LITERAL_UNDEFINED : 17,\n        BUILTIN_VARIABLE : 18\n    };\nexport default Object.freeze(ExpressionNodeType);\n","import Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport CesiumMath from '../Core/Math.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport jsep from '../ThirdParty/jsep.js';\nimport ExpressionNodeType from './ExpressionNodeType.js';\n\n    /**\n     * An expression for a style applied to a {@link Cesium3DTileset}.\n     * <p>\n     * Evaluates an expression defined using the\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}.\n     * </p>\n     * <p>\n     * Implements the {@link StyleExpression} interface.\n     * </p>\n     *\n     * @alias Expression\n     * @constructor\n     *\n     * @param {String} [expression] The expression defined using the 3D Tiles Styling language.\n     * @param {Object} [defines] Defines in the style.\n     *\n     * @example\n     * var expression = new Cesium.Expression('(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)');\n     * expression.evaluate(feature); // returns true or false depending on the feature's properties\n     *\n     * @example\n     * var expression = new Cesium.Expression('(${Temperature} > 90) ? color(\"red\") : color(\"white\")');\n     * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n     */\n    function Expression(expression, defines) {\n        \n\n        this._expression = expression;\n        expression = replaceDefines(expression, defines);\n        expression = replaceVariables(removeBackslashes(expression));\n\n        // customize jsep operators\n        jsep.addBinaryOp('=~', 0);\n        jsep.addBinaryOp('!~', 0);\n\n        var ast;\n        try {\n            ast = jsep(expression);\n        } catch (e) {\n            throw new RuntimeError(e);\n        }\n\n        this._runtimeAst = createRuntimeAst(this, ast);\n    }\n\n    Object.defineProperties(Expression.prototype, {\n        /**\n         * Gets the expression defined in the 3D Tiles Styling language.\n         *\n         * @memberof Expression.prototype\n         *\n         * @type {String}\n         * @readonly\n         *\n         * @default undefined\n         */\n        expression : {\n            get : function() {\n                return this._expression;\n            }\n        }\n    });\n\n    // Scratch storage manager while evaluating deep expressions.\n    // For example, an expression like dot(vec4(${red}), vec4(${green}) * vec4(${blue}) requires 3 scratch Cartesian4's\n    var scratchStorage = {\n        arrayIndex : 0,\n        arrayArray : [[]],\n        cartesian2Index : 0,\n        cartesian3Index : 0,\n        cartesian4Index : 0,\n        cartesian2Array : [new Cartesian2()],\n        cartesian3Array : [new Cartesian3()],\n        cartesian4Array : [new Cartesian4()],\n        reset : function() {\n            this.arrayIndex = 0;\n            this.cartesian2Index = 0;\n            this.cartesian3Index = 0;\n            this.cartesian4Index = 0;\n        },\n        getArray : function() {\n            if (this.arrayIndex >= this.arrayArray.length) {\n                this.arrayArray.push([]);\n            }\n            var array = this.arrayArray[this.arrayIndex++];\n            array.length = 0;\n            return array;\n        },\n        getCartesian2 : function() {\n            if (this.cartesian2Index >= this.cartesian2Array.length) {\n                this.cartesian2Array.push(new Cartesian2());\n            }\n            return this.cartesian2Array[this.cartesian2Index++];\n        },\n        getCartesian3 : function() {\n            if (this.cartesian3Index >= this.cartesian3Array.length) {\n                this.cartesian3Array.push(new Cartesian3());\n            }\n            return this.cartesian3Array[this.cartesian3Index++];\n        },\n        getCartesian4 : function() {\n            if (this.cartesian4Index >= this.cartesian4Array.length) {\n                this.cartesian4Array.push(new Cartesian4());\n            }\n            return this.cartesian4Array[this.cartesian4Index++];\n        }\n    };\n\n    /**\n     * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n     * the expression in the\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n     * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n     * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n     * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n     * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n     * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n     *\n     * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n     * @param {Object} [result] The object onto which to store the result.\n     * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n     */\n    Expression.prototype.evaluate = function(feature, result) {\n        scratchStorage.reset();\n        var value = this._runtimeAst.evaluate(feature);\n        if ((result instanceof Color) && (value instanceof Cartesian4)) {\n            return Color.fromCartesian4(value, result);\n        }\n        if ((value instanceof Cartesian2) || (value instanceof Cartesian3) || (value instanceof Cartesian4)) {\n            return value.clone(result);\n        }\n        return value;\n    };\n\n    /**\n     * Evaluates the result of a Color expression, optionally using the provided feature's properties.\n     * <p>\n     * This is equivalent to {@link Expression#evaluate} but always returns a {@link Color} object.\n     * </p>\n     *\n     * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n     * @param {Color} [result] The object in which to store the result\n     * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n     */\n    Expression.prototype.evaluateColor = function(feature, result) {\n        scratchStorage.reset();\n        var color = this._runtimeAst.evaluate(feature);\n        return Color.fromCartesian4(color, result);\n    };\n\n    /**\n     * Gets the shader function for this expression.\n     * Returns undefined if the shader function can't be generated from this expression.\n     *\n     * @param {String} functionName Name to give to the generated function.\n     * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n     * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n     * @param {String} returnType The return type of the generated function.\n     *\n     * @returns {String} The shader function.\n     *\n     * @private\n     */\n    Expression.prototype.getShaderFunction = function(functionName, attributePrefix, shaderState, returnType) {\n        var shaderExpression = this.getShaderExpression(attributePrefix, shaderState);\n\n        shaderExpression = returnType + ' ' + functionName + '() \\n' +\n                           '{ \\n' +\n                           '    return ' + shaderExpression + '; \\n' +\n                           '} \\n';\n\n        return shaderExpression;\n    };\n\n    /**\n     * Gets the shader expression for this expression.\n     * Returns undefined if the shader expression can't be generated from this expression.\n     *\n     * @param {String} attributePrefix Prefix that is added to any variable names to access vertex attributes.\n     * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n     *\n     * @returns {String} The shader expression.\n     *\n     * @private\n     */\n    Expression.prototype.getShaderExpression = function(attributePrefix, shaderState) {\n        return this._runtimeAst.getShaderExpression(attributePrefix, shaderState);\n    };\n\n    var unaryOperators = ['!', '-', '+'];\n    var binaryOperators = ['+', '-', '*', '/', '%', '===', '!==', '>', '>=', '<', '<=', '&&', '||', '!~', '=~'];\n\n    var variableRegex = /\\${(.*?)}/g; // Matches ${variable_name}\n    var backslashRegex = /\\\\/g;\n    var backslashReplacement = '@#%';\n    var replacementRegex = /@#%/g;\n\n    var scratchColor = new Color();\n\n    var unaryFunctions = {\n        abs : getEvaluateUnaryComponentwise(Math.abs),\n        sqrt : getEvaluateUnaryComponentwise(Math.sqrt),\n        cos : getEvaluateUnaryComponentwise(Math.cos),\n        sin : getEvaluateUnaryComponentwise(Math.sin),\n        tan : getEvaluateUnaryComponentwise(Math.tan),\n        acos : getEvaluateUnaryComponentwise(Math.acos),\n        asin : getEvaluateUnaryComponentwise(Math.asin),\n        atan : getEvaluateUnaryComponentwise(Math.atan),\n        radians : getEvaluateUnaryComponentwise(CesiumMath.toRadians),\n        degrees : getEvaluateUnaryComponentwise(CesiumMath.toDegrees),\n        sign : getEvaluateUnaryComponentwise(CesiumMath.sign),\n        floor : getEvaluateUnaryComponentwise(Math.floor),\n        ceil : getEvaluateUnaryComponentwise(Math.ceil),\n        round : getEvaluateUnaryComponentwise(Math.round),\n        exp : getEvaluateUnaryComponentwise(Math.exp),\n        exp2 : getEvaluateUnaryComponentwise(exp2),\n        log : getEvaluateUnaryComponentwise(Math.log),\n        log2 : getEvaluateUnaryComponentwise(log2),\n        fract : getEvaluateUnaryComponentwise(fract),\n        length : length,\n        normalize: normalize\n    };\n\n    var binaryFunctions = {\n        atan2 : getEvaluateBinaryComponentwise(Math.atan2, false),\n        pow : getEvaluateBinaryComponentwise(Math.pow, false),\n        min : getEvaluateBinaryComponentwise(Math.min, true),\n        max : getEvaluateBinaryComponentwise(Math.max, true),\n        distance : distance,\n        dot : dot,\n        cross : cross\n    };\n\n    var ternaryFunctions = {\n        clamp : getEvaluateTernaryComponentwise(CesiumMath.clamp, true),\n        mix : getEvaluateTernaryComponentwise(CesiumMath.lerp, true)\n    };\n\n    function fract(number) {\n        return number - Math.floor(number);\n    }\n\n    function exp2(exponent) {\n        return Math.pow(2.0,exponent);\n    }\n\n    function log2(number) {\n        return CesiumMath.log2(number);\n    }\n\n    function getEvaluateUnaryComponentwise(operation) {\n        return function(call, left) {\n            if (typeof left === 'number') {\n                return operation(left);\n            } else if (left instanceof Cartesian2) {\n                return Cartesian2.fromElements(operation(left.x), operation(left.y), scratchStorage.getCartesian2());\n            } else if (left instanceof Cartesian3) {\n                return Cartesian3.fromElements(operation(left.x), operation(left.y), operation(left.z), scratchStorage.getCartesian3());\n            } else if (left instanceof Cartesian4) {\n                return Cartesian4.fromElements(operation(left.x), operation(left.y), operation(left.z), operation(left.w), scratchStorage.getCartesian4());\n            }\n            throw new RuntimeError('Function \"' + call + '\" requires a vector or number argument. Argument is ' + left + '.');\n        };\n    }\n\n    function getEvaluateBinaryComponentwise(operation, allowScalar) {\n        return function(call, left, right) {\n            if (allowScalar && typeof right === 'number') {\n                if (typeof left === 'number') {\n                    return operation(left, right);\n                } else if (left instanceof Cartesian2) {\n                    return Cartesian2.fromElements(operation(left.x, right), operation(left.y, right), scratchStorage.getCartesian2());\n                } else if (left instanceof Cartesian3) {\n                    return Cartesian3.fromElements(operation(left.x, right), operation(left.y, right), operation(left.z, right), scratchStorage.getCartesian3());\n                } else if (left instanceof Cartesian4) {\n                    return Cartesian4.fromElements(operation(left.x, right), operation(left.y, right), operation(left.z, right), operation(left.w, right), scratchStorage.getCartesian4());\n                }\n            }\n\n            if (typeof left === 'number' && typeof right === 'number') {\n                return operation(left, right);\n            } else if (left instanceof Cartesian2 && right instanceof Cartesian2) {\n                return Cartesian2.fromElements(operation(left.x, right.x), operation(left.y, right.y), scratchStorage.getCartesian2());\n            } else if (left instanceof Cartesian3 && right instanceof Cartesian3) {\n                return Cartesian3.fromElements(operation(left.x, right.x), operation(left.y, right.y), operation(left.z, right.z), scratchStorage.getCartesian3());\n            } else if (left instanceof Cartesian4 && right instanceof Cartesian4) {\n                return Cartesian4.fromElements(operation(left.x, right.x), operation(left.y, right.y), operation(left.z, right.z), operation(left.w, right.w), scratchStorage.getCartesian4());\n            }\n\n            throw new RuntimeError('Function \"' + call + '\" requires vector or number arguments of matching types. Arguments are ' + left + ' and ' + right + '.');\n        };\n    }\n\n    function getEvaluateTernaryComponentwise(operation, allowScalar) {\n        return function(call, left, right, test) {\n            if (allowScalar && typeof test === 'number') {\n                if (typeof left === 'number' && typeof right === 'number') {\n                    return operation(left, right, test);\n                } else if (left instanceof Cartesian2 && right instanceof Cartesian2) {\n                    return Cartesian2.fromElements(operation(left.x, right.x, test), operation(left.y, right.y, test), scratchStorage.getCartesian2());\n                } else if (left instanceof Cartesian3 && right instanceof Cartesian3) {\n                    return Cartesian3.fromElements(operation(left.x, right.x, test), operation(left.y, right.y, test), operation(left.z, right.z, test), scratchStorage.getCartesian3());\n                } else if (left instanceof Cartesian4 && right instanceof Cartesian4) {\n                    return Cartesian4.fromElements(operation(left.x, right.x, test), operation(left.y, right.y, test), operation(left.z, right.z, test), operation(left.w, right.w, test), scratchStorage.getCartesian4());\n                }\n            }\n\n            if (typeof left === 'number' && typeof right === 'number' && typeof test === 'number') {\n                return operation(left, right, test);\n            } else if (left instanceof Cartesian2 && right instanceof Cartesian2 && test instanceof Cartesian2) {\n                return Cartesian2.fromElements(operation(left.x, right.x, test.x), operation(left.y, right.y, test.y), scratchStorage.getCartesian2());\n            } else if (left instanceof Cartesian3 && right instanceof Cartesian3 && test instanceof Cartesian3) {\n                return Cartesian3.fromElements(operation(left.x, right.x, test.x), operation(left.y, right.y, test.y), operation(left.z, right.z, test.z), scratchStorage.getCartesian3());\n            } else if (left instanceof Cartesian4 && right instanceof Cartesian4 && test instanceof Cartesian4) {\n                return Cartesian4.fromElements(operation(left.x, right.x, test.x), operation(left.y, right.y, test.y), operation(left.z, right.z, test.z), operation(left.w, right.w, test.w), scratchStorage.getCartesian4());\n            }\n\n            throw new RuntimeError('Function \"' + call + '\" requires vector or number arguments of matching types. Arguments are ' + left + ', ' + right + ', and ' + test + '.');\n        };\n    }\n\n    function length(call, left) {\n        if (typeof left === 'number') {\n            return Math.abs(left);\n        } else if (left instanceof Cartesian2) {\n            return Cartesian2.magnitude(left);\n        } else if (left instanceof Cartesian3) {\n            return Cartesian3.magnitude(left);\n        } else if (left instanceof Cartesian4) {\n            return Cartesian4.magnitude(left);\n        }\n\n        throw new RuntimeError('Function \"' + call + '\" requires a vector or number argument. Argument is ' + left + '.');\n    }\n\n    function normalize(call, left) {\n        if (typeof left === 'number') {\n            return 1.0;\n        } else if (left instanceof Cartesian2) {\n            return Cartesian2.normalize(left, scratchStorage.getCartesian2());\n        } else if (left instanceof Cartesian3) {\n            return Cartesian3.normalize(left, scratchStorage.getCartesian3());\n        } else if (left instanceof Cartesian4) {\n            return Cartesian4.normalize(left, scratchStorage.getCartesian4());\n        }\n\n        throw new RuntimeError('Function \"' + call + '\" requires a vector or number argument. Argument is ' + left + '.');\n    }\n\n    function distance(call, left, right) {\n        if (typeof left === 'number' && typeof right === 'number') {\n            return Math.abs(left - right);\n        } else if (left instanceof Cartesian2 && right instanceof Cartesian2) {\n            return Cartesian2.distance(left, right);\n        } else if (left instanceof Cartesian3 && right instanceof Cartesian3) {\n            return Cartesian3.distance(left, right);\n        } else if (left instanceof Cartesian4 && right instanceof Cartesian4) {\n            return Cartesian4.distance(left, right);\n        }\n\n        throw new RuntimeError('Function \"' + call + '\" requires vector or number arguments of matching types. Arguments are ' + left + ' and ' + right + '.');\n    }\n\n    function dot(call, left, right) {\n        if (typeof left === 'number' && typeof right === 'number') {\n            return left * right;\n        } else if (left instanceof Cartesian2 && right instanceof Cartesian2) {\n            return Cartesian2.dot(left, right);\n        } else if (left instanceof Cartesian3 && right instanceof Cartesian3) {\n            return Cartesian3.dot(left, right);\n        } else if (left instanceof Cartesian4 && right instanceof Cartesian4) {\n            return Cartesian4.dot(left, right);\n        }\n\n        throw new RuntimeError('Function \"' + call + '\" requires vector or number arguments of matching types. Arguments are ' + left + ' and ' + right + '.');\n    }\n\n    function cross(call, left, right) {\n        if (left instanceof Cartesian3 && right instanceof Cartesian3) {\n            return Cartesian3.cross(left, right, scratchStorage.getCartesian3());\n        }\n\n        throw new RuntimeError('Function \"' + call + '\" requires vec3 arguments. Arguments are ' + left + ' and ' + right + '.');\n    }\n\n    function Node(type, value, left, right, test) {\n        this._type = type;\n        this._value = value;\n        this._left = left;\n        this._right = right;\n        this._test = test;\n        this.evaluate = undefined;\n\n        setEvaluateFunction(this);\n    }\n\n    function replaceDefines(expression, defines) {\n        if (!defined(defines)) {\n            return expression;\n        }\n        for (var key in defines) {\n            if (defines.hasOwnProperty(key)) {\n                var definePlaceholder = new RegExp('\\\\$\\\\{' + key + '\\\\}', 'g');\n                var defineReplace = '(' + defines[key] + ')';\n                if (defined(defineReplace)) {\n                    expression = expression.replace(definePlaceholder, defineReplace);\n                }\n            }\n        }\n        return expression;\n    }\n\n    function removeBackslashes(expression) {\n        return expression.replace(backslashRegex, backslashReplacement);\n    }\n\n    function replaceBackslashes(expression) {\n        return expression.replace(replacementRegex, '\\\\');\n    }\n\n    function replaceVariables(expression) {\n        var exp = expression;\n        var result = '';\n        var i = exp.indexOf('${');\n        while (i >= 0) {\n            // Check if string is inside quotes\n            var openSingleQuote = exp.indexOf('\\'');\n            var openDoubleQuote = exp.indexOf('\"');\n            var closeQuote;\n            if (openSingleQuote >= 0 && openSingleQuote < i) {\n                closeQuote = exp.indexOf('\\'', openSingleQuote + 1);\n                result += exp.substr(0, closeQuote + 1);\n                exp = exp.substr(closeQuote + 1);\n                i = exp.indexOf('${');\n            } else if (openDoubleQuote >= 0 && openDoubleQuote < i) {\n                closeQuote = exp.indexOf('\"', openDoubleQuote + 1);\n                result += exp.substr(0, closeQuote + 1);\n                exp = exp.substr(closeQuote + 1);\n                i = exp.indexOf('${');\n            } else {\n                result += exp.substr(0, i);\n                var j = exp.indexOf('}');\n                if (j < 0) {\n                    throw new RuntimeError('Unmatched {.');\n                }\n                result += 'czm_' + exp.substr(i + 2, j - (i + 2));\n                exp = exp.substr(j + 1);\n                i = exp.indexOf('${');\n            }\n        }\n        result += exp;\n        return result;\n    }\n\n    function parseLiteral(ast) {\n        var type = typeof ast.value;\n        if (ast.value === null) {\n            return new Node(ExpressionNodeType.LITERAL_NULL, null);\n        } else if (type === 'boolean') {\n            return new Node(ExpressionNodeType.LITERAL_BOOLEAN, ast.value);\n        } else if (type === 'number') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, ast.value);\n        } else if (type === 'string') {\n            if (ast.value.indexOf('${') >= 0) {\n                return new Node(ExpressionNodeType.VARIABLE_IN_STRING, ast.value);\n            }\n            return new Node(ExpressionNodeType.LITERAL_STRING, replaceBackslashes(ast.value));\n        }\n    }\n\n    function parseCall(expression, ast) {\n        var args = ast.arguments;\n        var argsLength = args.length;\n        var call;\n        var val, left, right;\n\n        // Member function calls\n        if (ast.callee.type === 'MemberExpression') {\n            call = ast.callee.property.name;\n            var object = ast.callee.object;\n            if (call === 'test' || call === 'exec') {\n                // Make sure this is called on a valid type\n                if (object.callee.name !== 'regExp') {\n                    throw new RuntimeError(call + ' is not a function.');\n                }\n                if (argsLength === 0) {\n                    if (call === 'test') {\n                        return new Node(ExpressionNodeType.LITERAL_BOOLEAN, false);\n                    }\n                    return new Node(ExpressionNodeType.LITERAL_NULL, null);\n                }\n                left = createRuntimeAst(expression, object);\n                right = createRuntimeAst(expression, args[0]);\n                return new Node(ExpressionNodeType.FUNCTION_CALL, call, left, right);\n            } else if (call === 'toString') {\n                val = createRuntimeAst(expression, object);\n                return new Node(ExpressionNodeType.FUNCTION_CALL, call, val);\n            }\n\n            throw new RuntimeError('Unexpected function call \"' + call + '\".');\n        }\n\n        // Non-member function calls\n        call = ast.callee.name;\n        if (call === 'color') {\n            if (argsLength === 0) {\n                return new Node(ExpressionNodeType.LITERAL_COLOR, call);\n            }\n            val = createRuntimeAst(expression, args[0]);\n            if (defined(args[1])) {\n                var alpha = createRuntimeAst(expression, args[1]);\n                return new Node(ExpressionNodeType.LITERAL_COLOR, call, [val, alpha]);\n            }\n            return new Node(ExpressionNodeType.LITERAL_COLOR, call, [val]);\n        } else if (call === 'rgb' || call === 'hsl') {\n            if (argsLength < 3) {\n                throw new RuntimeError(call + ' requires three arguments.');\n            }\n            val = [\n                createRuntimeAst(expression, args[0]),\n                createRuntimeAst(expression, args[1]),\n                createRuntimeAst(expression, args[2])\n            ];\n            return new Node(ExpressionNodeType.LITERAL_COLOR, call, val);\n        } else if (call === 'rgba' || call === 'hsla') {\n            if (argsLength < 4) {\n                throw new RuntimeError(call + ' requires four arguments.');\n            }\n            val = [\n                createRuntimeAst(expression, args[0]),\n                createRuntimeAst(expression, args[1]),\n                createRuntimeAst(expression, args[2]),\n                createRuntimeAst(expression, args[3])\n            ];\n            return new Node(ExpressionNodeType.LITERAL_COLOR, call, val);\n        } else if (call === 'vec2' || call === 'vec3' || call === 'vec4') {\n            // Check for invalid constructors at evaluation time\n            val = new Array(argsLength);\n            for (var i = 0; i < argsLength; ++i) {\n                val[i] = createRuntimeAst(expression, args[i]);\n            }\n            return new Node(ExpressionNodeType.LITERAL_VECTOR, call, val);\n        } else if (call === 'isNaN' || call === 'isFinite') {\n            if (argsLength === 0) {\n                if (call === 'isNaN') {\n                    return new Node(ExpressionNodeType.LITERAL_BOOLEAN, true);\n                }\n                return new Node(ExpressionNodeType.LITERAL_BOOLEAN, false);\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (call === 'isExactClass' || call === 'isClass') {\n            if (argsLength < 1 || argsLength > 1) {\n                throw new RuntimeError(call + ' requires exactly one argument.');\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (call === 'getExactClassName') {\n            if (argsLength > 0) {\n                throw new RuntimeError(call + ' does not take any argument.');\n            }\n            return new Node(ExpressionNodeType.UNARY, call);\n        } else if (defined(unaryFunctions[call])) {\n            if (argsLength !== 1) {\n                throw new RuntimeError(call + ' requires exactly one argument.');\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (defined(binaryFunctions[call])) {\n            if (argsLength !== 2) {\n                throw new RuntimeError(call + ' requires exactly two arguments.');\n            }\n            left = createRuntimeAst(expression, args[0]);\n            right = createRuntimeAst(expression, args[1]);\n            return new Node(ExpressionNodeType.BINARY, call, left, right);\n        } else if (defined(ternaryFunctions[call])) {\n            if (argsLength !== 3) {\n                throw new RuntimeError(call + ' requires exactly three arguments.');\n            }\n            left = createRuntimeAst(expression, args[0]);\n            right = createRuntimeAst(expression, args[1]);\n            var test = createRuntimeAst(expression, args[2]);\n            return new Node(ExpressionNodeType.TERNARY, call, left, right, test);\n        } else if (call === 'Boolean') {\n            if (argsLength === 0) {\n                return new Node(ExpressionNodeType.LITERAL_BOOLEAN, false);\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (call === 'Number') {\n            if (argsLength === 0) {\n                return new Node(ExpressionNodeType.LITERAL_NUMBER, 0);\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (call === 'String') {\n            if (argsLength === 0) {\n                return new Node(ExpressionNodeType.LITERAL_STRING, '');\n            }\n            val = createRuntimeAst(expression, args[0]);\n            return new Node(ExpressionNodeType.UNARY, call, val);\n        } else if (call === 'regExp') {\n            return parseRegex(expression, ast);\n        }\n\n        throw new RuntimeError('Unexpected function call \"' + call + '\".');\n    }\n\n    function parseRegex(expression, ast) {\n        var args = ast.arguments;\n        // no arguments, return default regex\n        if (args.length === 0) {\n            return new Node(ExpressionNodeType.LITERAL_REGEX, new RegExp());\n        }\n\n        var pattern = createRuntimeAst(expression, args[0]);\n        var exp;\n\n        // optional flag argument supplied\n        if (args.length > 1) {\n            var flags = createRuntimeAst(expression, args[1]);\n            if (isLiteralType(pattern) && isLiteralType(flags)) {\n                try {\n                    exp = new RegExp(replaceBackslashes(String(pattern._value)), flags._value);\n                } catch (e) {\n                    throw new RuntimeError(e);\n                }\n                return new Node(ExpressionNodeType.LITERAL_REGEX, exp);\n            }\n            return new Node(ExpressionNodeType.REGEX, pattern, flags);\n        }\n\n        // only pattern argument supplied\n        if (isLiteralType(pattern)) {\n            try {\n                exp = new RegExp(replaceBackslashes(String(pattern._value)));\n            } catch (e) {\n                throw new RuntimeError(e);\n            }\n            return new Node(ExpressionNodeType.LITERAL_REGEX, exp);\n        }\n        return new Node(ExpressionNodeType.REGEX, pattern);\n    }\n\n    function parseKeywordsAndVariables(ast) {\n        if (isVariable(ast.name)) {\n            var name = getPropertyName(ast.name);\n            if (name.substr(0, 8) === 'tiles3d_') {\n                return new Node(ExpressionNodeType.BUILTIN_VARIABLE, name);\n            }\n            return new Node(ExpressionNodeType.VARIABLE, name);\n        } else if (ast.name === 'NaN') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, NaN);\n        } else if (ast.name === 'Infinity') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, Infinity);\n        } else if (ast.name === 'undefined') {\n            return new Node(ExpressionNodeType.LITERAL_UNDEFINED, undefined);\n        }\n\n        throw new RuntimeError(ast.name + ' is not defined.');\n    }\n\n    function parseMathConstant(ast) {\n        var name = ast.property.name;\n        if (name === 'PI') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, Math.PI);\n        } else if (name === 'E') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, Math.E);\n        }\n    }\n\n    function parseNumberConstant(ast) {\n        var name = ast.property.name;\n        if (name === 'POSITIVE_INFINITY') {\n            return new Node(ExpressionNodeType.LITERAL_NUMBER, Number.POSITIVE_INFINITY);\n        }\n    }\n\n    function parseMemberExpression(expression, ast) {\n        if (ast.object.name === 'Math') {\n            return parseMathConstant(ast);\n        } else if (ast.object.name === 'Number') {\n            return parseNumberConstant(ast);\n        }\n\n        var val;\n        var obj = createRuntimeAst(expression, ast.object);\n        if (ast.computed) {\n            val = createRuntimeAst(expression, ast.property);\n            return new Node(ExpressionNodeType.MEMBER, 'brackets', obj, val);\n        }\n\n        val = new Node(ExpressionNodeType.LITERAL_STRING, ast.property.name);\n        return new Node(ExpressionNodeType.MEMBER, 'dot', obj, val);\n    }\n\n    function isLiteralType(node) {\n        return (node._type >= ExpressionNodeType.LITERAL_NULL);\n    }\n\n    function isVariable(name) {\n        return (name.substr(0, 4) === 'czm_');\n    }\n\n    function getPropertyName(variable) {\n        return variable.substr(4);\n    }\n\n    function createRuntimeAst(expression, ast) {\n        var node;\n        var op;\n        var left;\n        var right;\n\n        if (ast.type === 'Literal') {\n            node = parseLiteral(ast);\n        } else if (ast.type === 'CallExpression') {\n            node = parseCall(expression, ast);\n        } else if (ast.type === 'Identifier') {\n            node = parseKeywordsAndVariables(ast);\n        } else if (ast.type === 'UnaryExpression') {\n            op = ast.operator;\n            var child = createRuntimeAst(expression, ast.argument);\n            if (unaryOperators.indexOf(op) > -1) {\n                node = new Node(ExpressionNodeType.UNARY, op, child);\n            } else {\n                throw new RuntimeError('Unexpected operator \"' + op + '\".');\n            }\n        } else if (ast.type === 'BinaryExpression') {\n            op = ast.operator;\n            left = createRuntimeAst(expression, ast.left);\n            right = createRuntimeAst(expression, ast.right);\n            if (binaryOperators.indexOf(op) > -1) {\n                node = new Node(ExpressionNodeType.BINARY, op, left, right);\n            } else {\n                throw new RuntimeError('Unexpected operator \"' + op + '\".');\n            }\n        } else if (ast.type === 'LogicalExpression') {\n            op = ast.operator;\n            left = createRuntimeAst(expression, ast.left);\n            right = createRuntimeAst(expression, ast.right);\n            if (binaryOperators.indexOf(op) > -1) {\n                node = new Node(ExpressionNodeType.BINARY, op, left, right);\n            }\n        } else if (ast.type === 'ConditionalExpression') {\n            var test = createRuntimeAst(expression, ast.test);\n            left = createRuntimeAst(expression, ast.consequent);\n            right = createRuntimeAst(expression, ast.alternate);\n            node = new Node(ExpressionNodeType.CONDITIONAL, '?', left, right, test);\n        } else if (ast.type === 'MemberExpression') {\n            node = parseMemberExpression(expression, ast);\n        } else if (ast.type === 'ArrayExpression') {\n            var val = [];\n            for (var i = 0; i < ast.elements.length; i++) {\n                val[i] = createRuntimeAst(expression, ast.elements[i]);\n            }\n            node = new Node(ExpressionNodeType.ARRAY, val);\n        } else if (ast.type === 'Compound') {\n            // empty expression or multiple expressions\n            throw new RuntimeError('Provide exactly one expression.');\n        } else {\n            throw new RuntimeError('Cannot parse expression.');\n        }\n\n        return node;\n    }\n\n    function setEvaluateFunction(node) {\n        if (node._type === ExpressionNodeType.CONDITIONAL) {\n            node.evaluate = node._evaluateConditional;\n        } else if (node._type === ExpressionNodeType.FUNCTION_CALL) {\n            if (node._value === 'test') {\n                node.evaluate = node._evaluateRegExpTest;\n            } else if (node._value === 'exec') {\n                node.evaluate = node._evaluateRegExpExec;\n            } else if (node._value === 'toString') {\n                node.evaluate = node._evaluateToString;\n            }\n        } else if (node._type === ExpressionNodeType.UNARY) {\n            if (node._value === '!') {\n                node.evaluate = node._evaluateNot;\n            } else if (node._value === '-') {\n                node.evaluate = node._evaluateNegative;\n            } else if (node._value === '+') {\n                node.evaluate = node._evaluatePositive;\n            } else if (node._value === 'isNaN') {\n                node.evaluate = node._evaluateNaN;\n            } else if (node._value === 'isFinite') {\n                node.evaluate = node._evaluateIsFinite;\n            } else if (node._value === 'isExactClass') {\n                node.evaluate = node._evaluateIsExactClass;\n            } else if (node._value === 'isClass') {\n                node.evaluate = node._evaluateIsClass;\n            } else if (node._value === 'getExactClassName') {\n                node.evaluate = node._evaluateGetExactClassName;\n            } else if (node._value === 'Boolean') {\n                node.evaluate = node._evaluateBooleanConversion;\n            } else if (node._value === 'Number') {\n                node.evaluate = node._evaluateNumberConversion;\n            } else if (node._value === 'String') {\n                node.evaluate = node._evaluateStringConversion;\n            } else if (defined(unaryFunctions[node._value])) {\n                node.evaluate = getEvaluateUnaryFunction(node._value);\n            }\n        } else if (node._type === ExpressionNodeType.BINARY) {\n            if (node._value === '+') {\n                node.evaluate = node._evaluatePlus;\n            } else if (node._value === '-') {\n                node.evaluate = node._evaluateMinus;\n            } else if (node._value === '*') {\n                node.evaluate = node._evaluateTimes;\n            } else if (node._value === '/') {\n                node.evaluate = node._evaluateDivide;\n            } else if (node._value === '%') {\n                node.evaluate = node._evaluateMod;\n            } else if (node._value === '===') {\n                node.evaluate = node._evaluateEqualsStrict;\n            } else if (node._value === '!==') {\n                node.evaluate = node._evaluateNotEqualsStrict;\n            } else if (node._value === '<') {\n                node.evaluate = node._evaluateLessThan;\n            } else if (node._value === '<=') {\n                node.evaluate = node._evaluateLessThanOrEquals;\n            } else if (node._value === '>') {\n                node.evaluate = node._evaluateGreaterThan;\n            } else if (node._value === '>=') {\n                node.evaluate = node._evaluateGreaterThanOrEquals;\n            } else if (node._value === '&&') {\n                node.evaluate = node._evaluateAnd;\n            } else if (node._value === '||') {\n                node.evaluate = node._evaluateOr;\n            } else if (node._value === '=~') {\n                node.evaluate = node._evaluateRegExpMatch;\n            } else if (node._value === '!~') {\n                node.evaluate = node._evaluateRegExpNotMatch;\n            } else if (defined(binaryFunctions[node._value])) {\n                node.evaluate = getEvaluateBinaryFunction(node._value);\n            }\n        } else if (node._type === ExpressionNodeType.TERNARY) {\n            node.evaluate = getEvaluateTernaryFunction(node._value);\n        } else if (node._type === ExpressionNodeType.MEMBER) {\n            if (node._value === 'brackets') {\n                node.evaluate = node._evaluateMemberBrackets;\n            } else {\n                node.evaluate = node._evaluateMemberDot;\n            }\n        } else if (node._type === ExpressionNodeType.ARRAY) {\n            node.evaluate = node._evaluateArray;\n        } else if (node._type === ExpressionNodeType.VARIABLE) {\n            node.evaluate = node._evaluateVariable;\n        } else if (node._type === ExpressionNodeType.VARIABLE_IN_STRING) {\n            node.evaluate = node._evaluateVariableString;\n        } else if (node._type === ExpressionNodeType.LITERAL_COLOR) {\n            node.evaluate = node._evaluateLiteralColor;\n        } else if (node._type === ExpressionNodeType.LITERAL_VECTOR) {\n            node.evaluate = node._evaluateLiteralVector;\n        } else if (node._type === ExpressionNodeType.LITERAL_STRING) {\n            node.evaluate = node._evaluateLiteralString;\n        } else if (node._type === ExpressionNodeType.REGEX) {\n            node.evaluate = node._evaluateRegExp;\n        } else if (node._type === ExpressionNodeType.BUILTIN_VARIABLE) {\n            if (node._value === 'tiles3d_tileset_time') {\n                node.evaluate = evaluateTilesetTime;\n            }\n        } else {\n            node.evaluate = node._evaluateLiteral;\n        }\n    }\n\n    function evaluateTilesetTime(feature) {\n        if (!defined(feature)) {\n            return 0.0;\n        }\n        return feature.content.tileset.timeSinceLoad;\n    }\n\n    function getEvaluateUnaryFunction(call) {\n        var evaluate = unaryFunctions[call];\n        return function(feature) {\n            var left = this._left.evaluate(feature);\n            return evaluate(call, left);\n        };\n    }\n\n    function getEvaluateBinaryFunction(call) {\n        var evaluate = binaryFunctions[call];\n        return function(feature) {\n            var left = this._left.evaluate(feature);\n            var right = this._right.evaluate(feature);\n            return evaluate(call, left, right);\n        };\n    }\n\n    function getEvaluateTernaryFunction(call) {\n        var evaluate = ternaryFunctions[call];\n        return function(feature) {\n            var left = this._left.evaluate(feature);\n            var right = this._right.evaluate(feature);\n            var test = this._test.evaluate(feature);\n            return evaluate(call, left, right, test);\n        };\n    }\n\n    function getFeatureProperty(feature, name) {\n        // Returns undefined if the feature is not defined or the property name is not defined for that feature\n        if (defined(feature)) {\n            return feature.getProperty(name);\n        }\n    }\n\n    Node.prototype._evaluateLiteral = function() {\n        return this._value;\n    };\n\n    Node.prototype._evaluateLiteralColor = function(feature) {\n        var color = scratchColor;\n        var args = this._left;\n        if (this._value === 'color') {\n            if (!defined(args)) {\n                Color.fromBytes(255, 255, 255, 255, color);\n            } else if (args.length > 1) {\n                Color.fromCssColorString(args[0].evaluate(feature), color);\n                color.alpha = args[1].evaluate(feature);\n            } else {\n                Color.fromCssColorString(args[0].evaluate(feature), color);\n            }\n        } else if (this._value === 'rgb') {\n            Color.fromBytes(\n                args[0].evaluate(feature),\n                args[1].evaluate(feature),\n                args[2].evaluate(feature),\n                255, color);\n        } else if (this._value === 'rgba') {\n            // convert between css alpha (0 to 1) and cesium alpha (0 to 255)\n            var a = args[3].evaluate(feature) * 255;\n            Color.fromBytes(\n                args[0].evaluate(feature),\n                args[1].evaluate(feature),\n                args[2].evaluate(feature),\n                a, color);\n        } else if (this._value === 'hsl') {\n            Color.fromHsl(\n                args[0].evaluate(feature),\n                args[1].evaluate(feature),\n                args[2].evaluate(feature),\n                1.0, color);\n        } else if (this._value === 'hsla') {\n            Color.fromHsl(\n                args[0].evaluate(feature),\n                args[1].evaluate(feature),\n                args[2].evaluate(feature),\n                args[3].evaluate(feature),\n                color);\n        }\n        return Cartesian4.fromColor(color, scratchStorage.getCartesian4());\n    };\n\n    Node.prototype._evaluateLiteralVector = function(feature) {\n        // Gather the components that make up the vector, which includes components from interior vectors.\n        // For example vec3(1, 2, 3) or vec3(vec2(1, 2), 3) are both valid.\n        //\n        // If the number of components does not equal the vector's size, then a RuntimeError is thrown - with two exceptions:\n        // 1. A vector may be constructed from a larger vector and drop the extra components.\n        // 2. A vector may be constructed from a single component - vec3(1) will become vec3(1, 1, 1).\n        //\n        // Examples of invalid constructors include:\n        // vec4(1, 2)        // not enough components\n        // vec3(vec2(1, 2))  // not enough components\n        // vec3(1, 2, 3, 4)  // too many components\n        // vec2(vec4(1), 1)  // too many components\n\n        var components = scratchStorage.getArray();\n        var call = this._value;\n        var args = this._left;\n        var argsLength = args.length;\n        for (var i = 0; i < argsLength; ++i) {\n            var value = args[i].evaluate(feature);\n            if (typeof value === 'number') {\n                components.push(value);\n            } else if (value instanceof Cartesian2) {\n                components.push(value.x, value.y);\n            } else if (value instanceof Cartesian3) {\n                components.push(value.x, value.y, value.z);\n            } else if (value instanceof Cartesian4) {\n                components.push(value.x, value.y, value.z, value.w);\n            } else {\n                throw new RuntimeError(call + ' argument must be a vector or number. Argument is ' + value + '.');\n            }\n        }\n\n        var componentsLength = components.length;\n        var vectorLength = parseInt(call.charAt(3));\n\n        if (componentsLength === 0) {\n            throw new RuntimeError('Invalid ' + call + ' constructor. No valid arguments.');\n        } else if ((componentsLength < vectorLength) && (componentsLength > 1)) {\n            throw new RuntimeError('Invalid ' + call + ' constructor. Not enough arguments.');\n        } else if ((componentsLength > vectorLength) && (argsLength > 1)) {\n            throw new RuntimeError('Invalid ' + call + ' constructor. Too many arguments.');\n        }\n\n        if (componentsLength === 1) {\n            // Add the same component 3 more times\n            var component = components[0];\n            components.push(component, component, component);\n        }\n\n        if (call === 'vec2') {\n            return Cartesian2.fromArray(components, 0, scratchStorage.getCartesian2());\n        } else if (call === 'vec3') {\n            return Cartesian3.fromArray(components, 0, scratchStorage.getCartesian3());\n        } else if (call === 'vec4') {\n            return Cartesian4.fromArray(components, 0, scratchStorage.getCartesian4());\n        }\n    };\n\n    Node.prototype._evaluateLiteralString = function() {\n        return this._value;\n    };\n\n    Node.prototype._evaluateVariableString = function(feature) {\n        var result = this._value;\n        var match = variableRegex.exec(result);\n        while (match !== null) {\n            var placeholder = match[0];\n            var variableName = match[1];\n            var property = getFeatureProperty(feature, variableName);\n            if (!defined(property)) {\n                property = '';\n            }\n            result = result.replace(placeholder, property);\n            match = variableRegex.exec(result);\n        }\n        return result;\n    };\n\n    Node.prototype._evaluateVariable = function(feature) {\n        // evaluates to undefined if the property name is not defined for that feature\n        return getFeatureProperty(feature, this._value);\n    };\n\n    function checkFeature (ast) {\n        return (ast._value === 'feature');\n    }\n\n    // PERFORMANCE_IDEA: Determine if parent property needs to be computed before runtime\n    Node.prototype._evaluateMemberDot = function(feature) {\n        if (checkFeature(this._left)) {\n            return getFeatureProperty(feature, this._right.evaluate(feature));\n        }\n        var property = this._left.evaluate(feature);\n        if (!defined(property)) {\n            return undefined;\n        }\n\n        var member = this._right.evaluate(feature);\n        if ((property instanceof Cartesian2) || (property instanceof Cartesian3) || (property instanceof Cartesian4)) {\n            // Vector components may be accessed with .r, .g, .b, .a and implicitly with .x, .y, .z, .w\n            if (member === 'r') {\n                return property.x;\n            } else if (member === 'g') {\n                return property.y;\n            } else if (member === 'b') {\n                return property.z;\n            } else if (member === 'a') {\n                return property.w;\n            }\n        }\n        return property[member];\n    };\n\n    Node.prototype._evaluateMemberBrackets = function(feature) {\n        if (checkFeature(this._left)) {\n            return getFeatureProperty(feature, this._right.evaluate(feature));\n        }\n        var property = this._left.evaluate(feature);\n        if (!defined(property)) {\n            return undefined;\n        }\n\n        var member = this._right.evaluate(feature);\n        if ((property instanceof Cartesian2) || (property instanceof Cartesian3) || (property instanceof Cartesian4)) {\n            // Vector components may be accessed with [0][1][2][3], ['r']['g']['b']['a'] and implicitly with ['x']['y']['z']['w']\n            // For Cartesian2 and Cartesian3 out-of-range components will just return undefined\n            if (member === 0 || member === 'r') {\n                return property.x;\n            } else if (member === 1 || member === 'g') {\n                return property.y;\n            } else if (member === 2 || member === 'b') {\n                return property.z;\n            } else if (member === 3 || member === 'a') {\n                return property.w;\n            }\n        }\n        return property[member];\n    };\n\n    Node.prototype._evaluateArray = function(feature) {\n        var array = [];\n        for (var i = 0; i < this._value.length; i++) {\n            array[i] = this._value[i].evaluate(feature);\n        }\n        return array;\n    };\n\n    // PERFORMANCE_IDEA: Have \"fast path\" functions that deal only with specific types\n    // that we can assign if we know the types before runtime\n\n    Node.prototype._evaluateNot = function(feature) {\n        var left = this._left.evaluate(feature);\n        if (typeof left !== 'boolean') {\n            throw new RuntimeError('Operator \"!\" requires a boolean argument. Argument is ' + left + '.');\n        }\n        return !left;\n    };\n\n    Node.prototype._evaluateNegative = function(feature) {\n        var left = this._left.evaluate(feature);\n        if (left instanceof Cartesian2) {\n            return Cartesian2.negate(left, scratchStorage.getCartesian2());\n        } else if (left instanceof Cartesian3) {\n            return Cartesian3.negate(left, scratchStorage.getCartesian3());\n        } else if (left instanceof Cartesian4) {\n            return Cartesian4.negate(left, scratchStorage.getCartesian4());\n        } else if (typeof left === 'number') {\n            return -left;\n        }\n\n        throw new RuntimeError('Operator \"-\" requires a vector or number argument. Argument is ' + left + '.');\n    };\n\n    Node.prototype._evaluatePositive = function(feature) {\n        var left = this._left.evaluate(feature);\n\n        if (!((left instanceof Cartesian2) || (left instanceof Cartesian3) || (left instanceof Cartesian4) || (typeof left === 'number'))) {\n            throw new RuntimeError('Operator \"+\" requires a vector or number argument. Argument is ' + left + '.');\n        }\n\n        return left;\n    };\n\n    Node.prototype._evaluateLessThan = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((typeof left !== 'number') || (typeof right !== 'number')) {\n            throw new RuntimeError('Operator \"<\" requires number arguments. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        return left < right;\n    };\n\n    Node.prototype._evaluateLessThanOrEquals = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((typeof left !== 'number') || (typeof right !== 'number')) {\n            throw new RuntimeError('Operator \"<=\" requires number arguments. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        return left <= right;\n    };\n\n    Node.prototype._evaluateGreaterThan = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((typeof left !== 'number') || (typeof right !== 'number')) {\n            throw new RuntimeError('Operator \">\" requires number arguments. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        return left > right;\n    };\n\n    Node.prototype._evaluateGreaterThanOrEquals = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((typeof left !== 'number') || (typeof right !== 'number')) {\n            throw new RuntimeError('Operator \">=\" requires number arguments. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        return left >= right;\n    };\n\n    Node.prototype._evaluateOr = function(feature) {\n        var left = this._left.evaluate(feature);\n        if (typeof left !== 'boolean') {\n            throw new RuntimeError('Operator \"||\" requires boolean arguments. First argument is ' + left + '.');\n        }\n\n        // short circuit the expression\n        if (left) {\n            return true;\n        }\n\n        var right = this._right.evaluate(feature);\n        if (typeof right !== 'boolean') {\n            throw new RuntimeError('Operator \"||\" requires boolean arguments. Second argument is ' + right + '.');\n        }\n\n        return left || right;\n    };\n\n    Node.prototype._evaluateAnd = function(feature) {\n        var left = this._left.evaluate(feature);\n        if (typeof left !== 'boolean') {\n            throw new RuntimeError('Operator \"&&\" requires boolean arguments. First argument is ' + left + '.');\n        }\n\n        // short circuit the expression\n        if (!left) {\n            return false;\n        }\n\n        var right = this._right.evaluate(feature);\n        if (typeof right !== 'boolean') {\n            throw new RuntimeError('Operator \"&&\" requires boolean arguments. Second argument is ' + right + '.');\n        }\n\n        return left && right;\n    };\n\n    Node.prototype._evaluatePlus = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2)) {\n            return Cartesian2.add(left, right, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian3) && (left instanceof Cartesian3)) {\n            return Cartesian3.add(left, right, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return Cartesian4.add(left, right, scratchStorage.getCartesian4());\n        } else if ((typeof left === 'string') || (typeof right === 'string')) {\n            // If only one argument is a string the other argument calls its toString function.\n            return left + right;\n        } else if ((typeof left === 'number') && (typeof right === 'number')) {\n            return left + right;\n        }\n\n        throw new RuntimeError('Operator \"+\" requires vector or number arguments of matching types, or at least one string argument. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateMinus = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2)) {\n            return Cartesian2.subtract(left, right, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian3) && (left instanceof Cartesian3)) {\n            return Cartesian3.subtract(left, right, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return Cartesian4.subtract(left, right, scratchStorage.getCartesian4());\n        } else if ((typeof left === 'number') && (typeof right === 'number')) {\n            return left - right;\n        }\n\n        throw new RuntimeError('Operator \"-\" requires vector or number arguments of matching types. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateTimes = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2)) {\n            return Cartesian2.multiplyComponents(left, right, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian2) && (typeof left === 'number')) {\n            return Cartesian2.multiplyByScalar(right, left, scratchStorage.getCartesian2());\n        } else if ((left instanceof Cartesian2) && (typeof right === 'number')) {\n            return Cartesian2.multiplyByScalar(left, right, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian3) && (left instanceof Cartesian3)) {\n            return Cartesian3.multiplyComponents(left, right, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian3) && (typeof left === 'number')) {\n            return Cartesian3.multiplyByScalar(right, left, scratchStorage.getCartesian3());\n        } else if ((left instanceof Cartesian3) && (typeof right === 'number')) {\n            return Cartesian3.multiplyByScalar(left, right, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return Cartesian4.multiplyComponents(left, right, scratchStorage.getCartesian4());\n        } else if ((right instanceof Cartesian4) && (typeof left === 'number')) {\n            return Cartesian4.multiplyByScalar(right, left, scratchStorage.getCartesian4());\n        } else if ((left instanceof Cartesian4) && (typeof right === 'number')) {\n            return Cartesian4.multiplyByScalar(left, right, scratchStorage.getCartesian4());\n        } else if ((typeof left === 'number') && (typeof right === 'number')) {\n            return left * right;\n        }\n\n        throw new RuntimeError('Operator \"*\" requires vector or number arguments. If both arguments are vectors they must be matching types. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateDivide = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2)) {\n            return Cartesian2.divideComponents(left, right, scratchStorage.getCartesian2());\n        } else if ((left instanceof Cartesian2) && (typeof right === 'number')) {\n            return Cartesian2.divideByScalar(left, right, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian3) && (left instanceof Cartesian3)) {\n            return Cartesian3.divideComponents(left, right, scratchStorage.getCartesian3());\n        } else if ((left instanceof Cartesian3) && (typeof right === 'number')) {\n            return Cartesian3.divideByScalar(left, right, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return Cartesian4.divideComponents(left, right, scratchStorage.getCartesian4());\n        } else if ((left instanceof Cartesian4) && (typeof right === 'number')) {\n            return Cartesian4.divideByScalar(left, right, scratchStorage.getCartesian4());\n        } else if ((typeof left === 'number') && (typeof right === 'number')) {\n            return left / right;\n        }\n\n        throw new RuntimeError('Operator \"/\" requires vector or number arguments of matching types, or a number as the second argument. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateMod = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2)) {\n            return Cartesian2.fromElements(left.x % right.x, left.y % right.y, scratchStorage.getCartesian2());\n        } else if ((right instanceof Cartesian3) && (left instanceof Cartesian3)) {\n            return Cartesian3.fromElements(left.x % right.x, left.y % right.y, left.z % right.z, scratchStorage.getCartesian3());\n        } else if ((right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return Cartesian4.fromElements(left.x % right.x, left.y % right.y, left.z % right.z, left.w % right.w, scratchStorage.getCartesian4());\n        } else if ((typeof left === 'number') && (typeof right === 'number')) {\n            return left % right;\n        }\n\n        throw new RuntimeError('Operator \"%\" requires vector or number arguments of matching types. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateEqualsStrict = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2) ||\n            (right instanceof Cartesian3) && (left instanceof Cartesian3) ||\n            (right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return left.equals(right);\n        }\n        return left === right;\n    };\n\n    Node.prototype._evaluateNotEqualsStrict = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n        if ((right instanceof Cartesian2) && (left instanceof Cartesian2) ||\n            (right instanceof Cartesian3) && (left instanceof Cartesian3) ||\n            (right instanceof Cartesian4) && (left instanceof Cartesian4)) {\n            return !left.equals(right);\n        }\n        return left !== right;\n    };\n\n    Node.prototype._evaluateConditional = function(feature) {\n        var test = this._test.evaluate(feature);\n\n        if (typeof test !== 'boolean') {\n            throw new RuntimeError('Conditional argument of conditional expression must be a boolean. Argument is ' + test + '.');\n        }\n\n        if (test) {\n            return this._left.evaluate(feature);\n        }\n        return this._right.evaluate(feature);\n    };\n\n    Node.prototype._evaluateNaN = function(feature) {\n        return isNaN(this._left.evaluate(feature));\n    };\n\n    Node.prototype._evaluateIsFinite = function(feature) {\n        return isFinite(this._left.evaluate(feature));\n    };\n\n    Node.prototype._evaluateIsExactClass = function(feature) {\n        if (defined(feature)) {\n            return feature.isExactClass(this._left.evaluate(feature));\n        }\n        return false;\n    };\n\n    Node.prototype._evaluateIsClass = function(feature) {\n        if (defined(feature)) {\n            return feature.isClass(this._left.evaluate(feature));\n        }\n        return false;\n    };\n\n    Node.prototype._evaluateGetExactClassName = function(feature) {\n        if (defined(feature)) {\n            return feature.getExactClassName();\n        }\n    };\n\n    Node.prototype._evaluateBooleanConversion = function(feature) {\n        return Boolean(this._left.evaluate(feature));\n    };\n\n    Node.prototype._evaluateNumberConversion = function(feature) {\n        return Number(this._left.evaluate(feature));\n    };\n\n    Node.prototype._evaluateStringConversion = function(feature) {\n        return String(this._left.evaluate(feature));\n    };\n\n    Node.prototype._evaluateRegExp = function(feature) {\n        var pattern = this._value.evaluate(feature);\n        var flags = '';\n\n        if (defined(this._left)) {\n            flags = this._left.evaluate(feature);\n        }\n\n        var exp;\n        try {\n            exp = new RegExp(pattern, flags);\n        } catch (e) {\n            throw new RuntimeError(e);\n        }\n        return exp;\n    };\n\n    Node.prototype._evaluateRegExpTest = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if (!((left instanceof RegExp) && (typeof right === 'string'))) {\n            throw new RuntimeError('RegExp.test requires the first argument to be a RegExp and the second argument to be a string. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        return left.test(right);\n    };\n\n    Node.prototype._evaluateRegExpMatch = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((left instanceof RegExp) && (typeof right === 'string')) {\n            return left.test(right);\n        } else if ((right instanceof RegExp) && (typeof left === 'string')) {\n            return right.test(left);\n        }\n\n        throw new RuntimeError('Operator \"=~\" requires one RegExp argument and one string argument. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateRegExpNotMatch = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if ((left instanceof RegExp) && (typeof right === 'string')) {\n            return !(left.test(right));\n        } else if ((right instanceof RegExp) && (typeof left === 'string')) {\n            return !(right.test(left));\n        }\n\n        throw new RuntimeError('Operator \"!~\" requires one RegExp argument and one string argument. Arguments are ' + left + ' and ' + right + '.');\n    };\n\n    Node.prototype._evaluateRegExpExec = function(feature) {\n        var left = this._left.evaluate(feature);\n        var right = this._right.evaluate(feature);\n\n        if (!((left instanceof RegExp) && (typeof right === 'string'))) {\n            throw new RuntimeError('RegExp.exec requires the first argument to be a RegExp and the second argument to be a string. Arguments are ' + left + ' and ' + right + '.');\n        }\n\n        var exec = left.exec(right);\n        if (!defined(exec)) {\n            return null;\n        }\n        return exec[1];\n    };\n\n    Node.prototype._evaluateToString = function(feature) {\n        var left = this._left.evaluate(feature);\n        if ((left instanceof RegExp) || (left instanceof Cartesian2) || (left instanceof Cartesian3) || (left instanceof Cartesian4)) {\n            return String(left);\n        }\n\n        throw new RuntimeError('Unexpected function call \"' + this._value + '\".');\n    };\n\n    function convertHSLToRGB(ast) {\n        // Check if the color contains any nested expressions to see if the color can be converted here.\n        // E.g. \"hsl(0.9, 0.6, 0.7)\" is able to convert directly to rgb, \"hsl(0.9, 0.6, ${Height})\" is not.\n        var channels = ast._left;\n        var length = channels.length;\n        for (var i = 0; i < length; ++i) {\n            if (channels[i]._type !== ExpressionNodeType.LITERAL_NUMBER) {\n                return undefined;\n            }\n        }\n        var h = channels[0]._value;\n        var s = channels[1]._value;\n        var l = channels[2]._value;\n        var a = (length === 4) ? channels[3]._value : 1.0;\n        return Color.fromHsl(h, s, l, a, scratchColor);\n    }\n\n    function convertRGBToColor(ast) {\n        // Check if the color contains any nested expressions to see if the color can be converted here.\n        // E.g. \"rgb(255, 255, 255)\" is able to convert directly to Color, \"rgb(255, 255, ${Height})\" is not.\n        var channels = ast._left;\n        var length = channels.length;\n        for (var i = 0; i < length; ++i) {\n            if (channels[i]._type !== ExpressionNodeType.LITERAL_NUMBER) {\n                return undefined;\n            }\n        }\n        var color = scratchColor;\n        color.red = channels[0]._value / 255.0;\n        color.green = channels[1]._value / 255.0;\n        color.blue = channels[2]._value / 255.0;\n        color.alpha = (length === 4) ? channels[3]._value : 1.0;\n        return color;\n    }\n\n    function numberToString(number) {\n        if (number % 1 === 0) {\n            // Add a .0 to whole numbers\n            return number.toFixed(1);\n        }\n\n        return number.toString();\n    }\n\n    function colorToVec3(color) {\n        var r = numberToString(color.red);\n        var g = numberToString(color.green);\n        var b = numberToString(color.blue);\n        return 'vec3(' + r + ', ' + g + ', ' + b + ')';\n    }\n\n    function colorToVec4(color) {\n        var r = numberToString(color.red);\n        var g = numberToString(color.green);\n        var b = numberToString(color.blue);\n        var a = numberToString(color.alpha);\n        return 'vec4(' + r + ', ' + g + ', ' + b + ', ' + a + ')';\n    }\n\n    function getExpressionArray(array, attributePrefix, shaderState, parent) {\n        var length = array.length;\n        var expressions = new Array(length);\n        for (var i = 0; i < length; ++i) {\n            expressions[i] = array[i].getShaderExpression(attributePrefix, shaderState, parent);\n        }\n        return expressions;\n    }\n\n    var nullSentinel = 'czm_infinity'; // null just needs to be some sentinel value that will cause \"[expression] === null\" to be false in nearly all cases. GLSL doesn't have a NaN constant so use czm_infinity.\n\n    Node.prototype.getShaderExpression = function(attributePrefix, shaderState, parent) {\n        var color;\n        var left;\n        var right;\n        var test;\n\n        var type = this._type;\n        var value = this._value;\n\n        if (defined(this._left)) {\n            if (Array.isArray(this._left)) {\n                // Left can be an array if the type is LITERAL_COLOR or LITERAL_VECTOR\n                left = getExpressionArray(this._left, attributePrefix, shaderState, this);\n            } else {\n                left = this._left.getShaderExpression(attributePrefix, shaderState, this);\n            }\n        }\n\n        if (defined(this._right)) {\n            right = this._right.getShaderExpression(attributePrefix, shaderState, this);\n        }\n\n        if (defined(this._test)) {\n            test = this._test.getShaderExpression(attributePrefix, shaderState, this);\n        }\n\n        if (Array.isArray(this._value)) {\n            // For ARRAY type\n            value = getExpressionArray(this._value, attributePrefix, shaderState, this);\n        }\n\n        switch (type) {\n            case ExpressionNodeType.VARIABLE:\n                return attributePrefix + value;\n            case ExpressionNodeType.UNARY:\n                // Supported types: +, -, !, Boolean, Number\n                if (value === 'Boolean') {\n                    return 'bool(' + left + ')';\n                } else if (value === 'Number') {\n                    return 'float(' + left + ')';\n                } else if (value === 'round') {\n                    return 'floor(' + left + ' + 0.5)';\n                } else if (defined(unaryFunctions[value])) {\n                    return value + '(' + left + ')';\n                } else if (value === 'isNaN') {\n                    // In GLSL 2.0 use isnan instead\n                    return '(' + left + ' != ' + left + ')';\n                } else if (value === 'isFinite') {\n                    // In GLSL 2.0 use isinf instead. GLSL doesn't have an infinity constant so use czm_infinity which is an arbitrarily big enough number.\n                    return '(abs(' + left + ') < czm_infinity)';\n                } else if ((value === 'String') || (value === 'isExactClass') || (value === 'isClass') || (value === 'getExactClassName')) {\n                    throw new RuntimeError('Error generating style shader: \"' + value + '\" is not supported.');\n                } else if (defined(unaryFunctions[value])) {\n                    return value + '(' + left + ')';\n                }\n                return value + left;\n            case ExpressionNodeType.BINARY:\n                // Supported types: ||, &&, ===, !==, <, >, <=, >=, +, -, *, /, %\n                if (value === '%') {\n                    return 'mod(' + left + ', ' + right + ')';\n                } else if (value === '===') {\n                    return '(' + left + ' == ' + right + ')';\n                } else if (value === '!==') {\n                    return '(' + left + ' != ' + right + ')';\n                } else if (value === 'atan2') {\n                    return 'atan(' + left + ', ' + right + ')';\n                } else if (defined(binaryFunctions[value])) {\n                    return value + '(' + left + ', ' + right + ')';\n                }\n                return '(' + left + ' ' + value + ' ' + right + ')';\n            case ExpressionNodeType.TERNARY:\n                if (defined(ternaryFunctions[value])) {\n                    return value + '(' + left + ', ' + right + ', ' + test + ')';\n                }\n                break;\n            case ExpressionNodeType.CONDITIONAL:\n                return '(' + test + ' ? ' + left + ' : ' + right + ')';\n            case ExpressionNodeType.MEMBER:\n                // This is intended for accessing the components of vector properties. String members aren't supported.\n                // Check for 0.0 rather than 0 because all numbers are previously converted to decimals.\n                if (right === 'r' || right === 'x' || right === '0.0') {\n                    return left + '[0]';\n                } else if (right === 'g' || right === 'y' || right === '1.0') {\n                    return left + '[1]';\n                } else if (right === 'b' || right === 'z' || right === '2.0') {\n                    return left + '[2]';\n                } else if (right === 'a' || right === 'w' || right === '3.0') {\n                    return left + '[3]';\n                }\n                return left + '[int(' + right + ')]';\n            case ExpressionNodeType.FUNCTION_CALL:\n                throw new RuntimeError('Error generating style shader: \"' + value + '\" is not supported.');\n            case ExpressionNodeType.ARRAY:\n                if (value.length === 4) {\n                    return 'vec4(' + value[0] + ', ' + value[1] + ', ' + value[2] + ', ' + value[3] + ')';\n                } else if (value.length === 3) {\n                    return 'vec3(' + value[0] + ', ' + value[1] + ', ' + value[2] + ')';\n                } else if (value.length === 2) {\n                    return 'vec2(' + value[0] + ', ' + value[1] + ')';\n                }\n                throw new RuntimeError('Error generating style shader: Invalid array length. Array length should be 2, 3, or 4.');\n            case ExpressionNodeType.REGEX:\n                throw new RuntimeError('Error generating style shader: Regular expressions are not supported.');\n            case ExpressionNodeType.VARIABLE_IN_STRING:\n                throw new RuntimeError('Error generating style shader: Converting a variable to a string is not supported.');\n            case ExpressionNodeType.LITERAL_NULL:\n                return nullSentinel;\n            case ExpressionNodeType.LITERAL_BOOLEAN:\n                return value ? 'true' : 'false';\n            case ExpressionNodeType.LITERAL_NUMBER:\n                return numberToString(value);\n            case ExpressionNodeType.LITERAL_STRING:\n                if (defined(parent) && (parent._type === ExpressionNodeType.MEMBER)) {\n                    if (value === 'r' || value === 'g' || value === 'b' || value === 'a' ||\n                        value === 'x' || value === 'y' || value === 'z' || value === 'w') {\n                        return value;\n                    }\n                }\n                // Check for css color strings\n                color = Color.fromCssColorString(value, scratchColor);\n                if (defined(color)) {\n                    return colorToVec3(color);\n                }\n                throw new RuntimeError('Error generating style shader: String literals are not supported.');\n            case ExpressionNodeType.LITERAL_COLOR:\n                var args = left;\n                if (value === 'color') {\n                    if (!defined(args)) {\n                        return 'vec4(1.0)';\n                    } else if (args.length > 1) {\n                        var rgb = args[0];\n                        var alpha = args[1];\n                        if (alpha !== '1.0') {\n                            shaderState.translucent = true;\n                        }\n                        return 'vec4(' + rgb + ', ' + alpha + ')';\n                    }\n                    return 'vec4(' + args[0] + ', 1.0)';\n                } else if (value === 'rgb') {\n                    color = convertRGBToColor(this);\n                    if (defined(color)) {\n                        return colorToVec4(color);\n                    }\n                    return 'vec4(' + args[0] + ' / 255.0, ' + args[1] + ' / 255.0, ' + args[2] + ' / 255.0, 1.0)';\n                } else if (value === 'rgba') {\n                    if (args[3] !== '1.0') {\n                        shaderState.translucent = true;\n                    }\n                    color = convertRGBToColor(this);\n                    if (defined(color)) {\n                        return colorToVec4(color);\n                    }\n                    return 'vec4(' + args[0] + ' / 255.0, ' + args[1] + ' / 255.0, ' + args[2] + ' / 255.0, ' + args[3] + ')';\n                } else if (value === 'hsl') {\n                    color = convertHSLToRGB(this);\n                    if (defined(color)) {\n                        return colorToVec4(color);\n                    }\n                    return 'vec4(czm_HSLToRGB(vec3(' + args[0] + ', ' + args[1] + ', ' + args[2] + ')), 1.0)';\n                } else if (value === 'hsla') {\n                    color = convertHSLToRGB(this);\n                    if (defined(color)) {\n                        if (color.alpha !== 1.0) {\n                            shaderState.translucent = true;\n                        }\n                        return colorToVec4(color);\n                    }\n                    if (args[3] !== '1.0') {\n                        shaderState.translucent = true;\n                    }\n                    return 'vec4(czm_HSLToRGB(vec3(' + args[0] + ', ' + args[1] + ', ' + args[2] + ')), ' + args[3] + ')';\n                }\n                break;\n            case ExpressionNodeType.LITERAL_VECTOR:\n                \n                var length = left.length;\n                var vectorExpression = value + '(';\n                for (var i = 0; i < length; ++i) {\n                    vectorExpression += left[i];\n                    if (i < (length - 1)) {\n                        vectorExpression += ', ';\n                    }\n                }\n                vectorExpression += ')';\n                return vectorExpression;\n            case ExpressionNodeType.LITERAL_REGEX:\n                throw new RuntimeError('Error generating style shader: Regular expressions are not supported.');\n            case ExpressionNodeType.LITERAL_UNDEFINED:\n                return nullSentinel;\n            case ExpressionNodeType.BUILTIN_VARIABLE:\n                if (value === 'tiles3d_tileset_time') {\n                    return 'u_time';\n                }\n        }\n    };\nexport default Expression;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport ShaderProgram from '../Renderer/ShaderProgram.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport VertexArray from '../Renderer/VertexArray.js';\nimport ShadowVolumeFS from '../Shaders/ShadowVolumeFS.js';\nimport VectorTileVS from '../Shaders/VectorTileVS.js';\nimport BlendingState from './BlendingState.js';\nimport Cesium3DTileFeature from './Cesium3DTileFeature.js';\nimport ClassificationType from './ClassificationType.js';\nimport DepthFunction from './DepthFunction.js';\nimport Expression from './Expression.js';\nimport StencilConstants from './StencilConstants.js';\nimport StencilFunction from './StencilFunction.js';\nimport StencilOperation from './StencilOperation.js';\nimport Vector3DTileBatch from './Vector3DTileBatch.js';\n\n    /**\n     * Creates a batch of classification meshes.\n     *\n     * @alias Vector3DTilePrimitive\n     * @constructor\n     *\n     * @param {Object} options An object with following properties:\n     * @param {Float32Array} options.positions The positions of the meshes.\n     * @param {Uint16Array|Uint32Array} options.indices The indices of the triangulated meshes. The indices must be contiguous so that\n     * the indices for mesh n are in [i, i + indexCounts[n]] where i = sum{indexCounts[0], indexCounts[n - 1]}.\n     * @param {Uint32Array} options.indexCounts The number of indices for each mesh.\n     * @param {Uint32Array} options.indexOffsets The offset into the index buffer for each mesh.\n     * @param {Vector3DTileBatch[]} options.batchedIndices The index offset and count for each batch with the same color.\n     * @param {Cartesian3} [options.center=Cartesian3.ZERO] The RTC center.\n     * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched meshes.\n     * @param {Uint16Array} options.batchIds The batch ids for each mesh.\n     * @param {Uint16Array} options.vertexBatchIds The batch id for each vertex.\n     * @param {BoundingSphere} options.boundingVolume The bounding volume for the entire batch of meshes.\n     * @param {BoundingSphere[]} options.boundingVolumes The bounding volume for each mesh.\n     * @param {ClassificationType} [options.classificationType] What this tile will classify.\n     *\n     * @private\n     */\n    function Vector3DTilePrimitive(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        this._batchTable = options.batchTable;\n        this._batchIds = options.batchIds;\n\n        // These arrays are released after VAO creation.\n        this._positions = options.positions;\n        this._vertexBatchIds = options.vertexBatchIds;\n\n        // These arrays are kept for re-batching indices based on colors.\n        // If WebGL 2 is supported, indices will be released and re-batching uses buffer-to-buffer copies.\n        this._indices = options.indices;\n        this._indexCounts = options.indexCounts;\n        this._indexOffsets = options.indexOffsets;\n        this._batchedIndices = options.batchedIndices;\n\n        this._boundingVolume = options.boundingVolume;\n        this._boundingVolumes = options.boundingVolumes;\n\n        this._center = defaultValue(options.center, Cartesian3.ZERO);\n\n        this._va = undefined;\n        this._sp = undefined;\n        this._spStencil = undefined;\n        this._spPick = undefined;\n        this._uniformMap = undefined;\n\n        // Only used with WebGL 2 to ping-pong ibos after copy.\n        this._vaSwap = undefined;\n\n        this._rsStencilPreloadPass = undefined;\n        this._rsStencilPreloadPass3DTiles = undefined;\n        this._rsStencilDepthPass = undefined;\n        this._rsStencilDepthPass3DTiles = undefined;\n        this._rsColorPass = undefined;\n        this._rsPickPass = undefined;\n        this._rsWireframe = undefined;\n\n        this._commands = [];\n        this._commandsIgnoreShow = [];\n        this._pickCommands = [];\n\n        this._constantColor = Color.clone(Color.WHITE);\n        this._highlightColor = this._constantColor;\n\n        this._batchDirty = true;\n        this._pickCommandsDirty = true;\n        this._framesSinceLastRebatch = 0;\n\n        this._updatingAllCommands = false;\n\n        this._trianglesLength = this._indices.length / 3;\n        this._geometryByteLength = this._indices.byteLength + this._positions.byteLength + this._vertexBatchIds.byteLength;\n\n        /**\n         * Draw the wireframe of the classification meshes.\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugWireframe = false;\n        this._debugWireframe = this.debugWireframe;\n        this._wireframeDirty = false;\n\n        /**\n         * Forces a re-batch instead of waiting after a number of frames have been rendered. For testing only.\n         * @type {Boolean}\n         * @default false\n         */\n        this.forceRebatch = false;\n\n        /**\n         * What this tile will classify.\n         * @type {ClassificationType}\n         * @default ClassificationType.BOTH\n         */\n        this.classificationType = defaultValue(options.classificationType, ClassificationType.BOTH);\n\n        // Hidden options\n        this._vertexShaderSource = options._vertexShaderSource;\n        this._fragmentShaderSource = options._fragmentShaderSource;\n        this._attributeLocations = options._attributeLocations;\n        this._uniformMap = options._uniformMap;\n        this._pickId = options._pickId;\n        this._modelMatrix = options._modelMatrix;\n        this._boundingSphere = options._boundingSphere;\n\n        this._batchIdLookUp = {};\n\n        var length = this._batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = this._batchIds[i];\n            this._batchIdLookUp[batchId] = i;\n        }\n    }\n\n    Object.defineProperties(Vector3DTilePrimitive.prototype, {\n        /**\n         * Gets the number of triangles.\n         *\n         * @memberof Vector3DTilePrimitive.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        trianglesLength : {\n            get : function() {\n                return this._trianglesLength;\n            }\n        },\n\n        /**\n         * Gets the geometry memory in bytes.\n         *\n         * @memberof Vector3DTilePrimitive.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        geometryByteLength : {\n            get : function() {\n                return this._geometryByteLength;\n            }\n        }\n    });\n\n    var defaultAttributeLocations = {\n        position : 0,\n        a_batchId : 1\n    };\n\n    function createVertexArray(primitive, context) {\n        if (defined(primitive._va)) {\n            return;\n        }\n\n        var positionBuffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : primitive._positions,\n            usage : BufferUsage.STATIC_DRAW\n        });\n        var idBuffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : primitive._vertexBatchIds,\n            usage : BufferUsage.STATIC_DRAW\n        });\n        var indexBuffer = Buffer.createIndexBuffer({\n            context : context,\n            typedArray : primitive._indices,\n            usage : BufferUsage.DYNAMIC_DRAW,\n            indexDatatype : (primitive._indices.BYTES_PER_ELEMENT === 2) ?  IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT\n        });\n\n        var vertexAttributes = [{\n            index : 0,\n            vertexBuffer : positionBuffer,\n            componentDatatype : ComponentDatatype.fromTypedArray(primitive._positions),\n            componentsPerAttribute : 3\n        }, {\n            index : 1,\n            vertexBuffer : idBuffer,\n            componentDatatype : ComponentDatatype.fromTypedArray(primitive._vertexBatchIds),\n            componentsPerAttribute : 1\n        }];\n\n        primitive._va = new VertexArray({\n            context : context,\n            attributes : vertexAttributes,\n            indexBuffer : indexBuffer\n        });\n\n        if (context.webgl2) {\n            primitive._vaSwap = new VertexArray({\n                context : context,\n                attributes : vertexAttributes,\n                indexBuffer : Buffer.createIndexBuffer({\n                    context : context,\n                    sizeInBytes : indexBuffer.sizeInBytes,\n                    usage : BufferUsage.DYNAMIC_DRAW,\n                    indexDatatype : indexBuffer.indexDatatype\n                })\n            });\n        }\n\n        primitive._batchedPositions = undefined;\n        primitive._transferrableBatchIds = undefined;\n        primitive._vertexBatchIds = undefined;\n        primitive._verticesPromise = undefined;\n    }\n\n    function createShaders(primitive, context) {\n        if (defined(primitive._sp)) {\n            return;\n        }\n\n        var batchTable = primitive._batchTable;\n        var attributeLocations = defaultValue(primitive._attributeLocations, defaultAttributeLocations);\n\n        var pickId = primitive._pickId;\n        var vertexShaderSource = primitive._vertexShaderSource;\n        var fragmentShaderSource = primitive._fragmentShaderSource;\n        if (defined(vertexShaderSource)) {\n            primitive._sp = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : vertexShaderSource,\n                fragmentShaderSource : fragmentShaderSource,\n                attributeLocations : attributeLocations\n            });\n            primitive._spStencil = primitive._sp;\n\n            fragmentShaderSource = ShaderSource.replaceMain(fragmentShaderSource, 'czm_non_pick_main');\n            fragmentShaderSource =\n                fragmentShaderSource +\n                'void main() \\n' +\n                '{ \\n' +\n                '    czm_non_pick_main(); \\n' +\n                '    gl_FragColor = ' + pickId + '; \\n' +\n                '} \\n';\n            primitive._spPick = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : vertexShaderSource,\n                fragmentShaderSource : fragmentShaderSource,\n                attributeLocations : attributeLocations\n            });\n            return;\n        }\n\n        var vsSource = batchTable.getVertexShaderCallback(false, 'a_batchId', undefined)(VectorTileVS);\n        var fsSource = batchTable.getFragmentShaderCallback()(ShadowVolumeFS, false, undefined);\n\n        pickId = batchTable.getPickId();\n\n        var vs = new ShaderSource({\n            sources : [vsSource]\n        });\n        var fs = new ShaderSource({\n            defines : ['VECTOR_TILE'],\n            sources : [fsSource]\n        });\n\n        primitive._sp = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n\n        vs = new ShaderSource({\n            sources : [VectorTileVS]\n        });\n        fs = new ShaderSource({\n            defines : ['VECTOR_TILE'],\n            sources : [ShadowVolumeFS]\n        });\n\n        primitive._spStencil = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n\n        fsSource = ShaderSource.replaceMain(fsSource, 'czm_non_pick_main');\n        fsSource =\n            fsSource + '\\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    czm_non_pick_main(); \\n' +\n            '    gl_FragColor = ' + pickId + '; \\n' +\n            '} \\n';\n\n        var pickVS = new ShaderSource({\n            sources : [vsSource]\n        });\n        var pickFS = new ShaderSource({\n            defines : ['VECTOR_TILE'],\n            sources : [fsSource]\n        });\n        primitive._spPick = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : pickVS,\n            fragmentShaderSource : pickFS,\n            attributeLocations : attributeLocations\n        });\n    }\n\n    function getStencilPreloadRenderState(mask3DTiles) {\n        var stencilFunction = mask3DTiles ? StencilFunction.EQUAL : StencilFunction.ALWAYS;\n        return {\n            colorMask : {\n                red : false,\n                green : false,\n                blue : false,\n                alpha : false\n            },\n            stencilTest : {\n                enabled : true,\n                frontFunction : stencilFunction,\n                frontOperation : {\n                    fail : StencilOperation.KEEP,\n                    zFail : StencilOperation.DECREMENT_WRAP,\n                    zPass : StencilOperation.DECREMENT_WRAP\n                },\n                backFunction : stencilFunction,\n                backOperation : {\n                    fail : StencilOperation.KEEP,\n                    zFail : StencilOperation.INCREMENT_WRAP,\n                    zPass : StencilOperation.INCREMENT_WRAP\n                },\n                reference : StencilConstants.CESIUM_3D_TILE_MASK,\n                mask : StencilConstants.CESIUM_3D_TILE_MASK\n            },\n            stencilMask : StencilConstants.CLASSIFICATION_MASK,\n            depthTest : {\n                enabled : false\n            },\n            depthMask : false\n        };\n    }\n\n    function getStencilDepthRenderState(mask3DTiles) {\n        var stencilFunction = mask3DTiles ? StencilFunction.EQUAL : StencilFunction.ALWAYS;\n        return {\n            colorMask : {\n                red : false,\n                green : false,\n                blue : false,\n                alpha : false\n            },\n            stencilTest : {\n                enabled : true,\n                frontFunction : stencilFunction,\n                frontOperation : {\n                    fail : StencilOperation.KEEP,\n                    zFail : StencilOperation.KEEP,\n                    zPass : StencilOperation.INCREMENT_WRAP\n                },\n                backFunction : stencilFunction,\n                backOperation : {\n                    fail : StencilOperation.KEEP,\n                    zFail : StencilOperation.KEEP,\n                    zPass : StencilOperation.DECREMENT_WRAP\n                },\n                reference : StencilConstants.CESIUM_3D_TILE_MASK,\n                mask : StencilConstants.CESIUM_3D_TILE_MASK\n            },\n            stencilMask : StencilConstants.CLASSIFICATION_MASK,\n            depthTest : {\n                enabled : true,\n                func : DepthFunction.LESS_OR_EQUAL\n            },\n            depthMask : false\n        };\n    }\n\n    var colorRenderState = {\n        stencilTest : {\n            enabled : true,\n            frontFunction : StencilFunction.NOT_EQUAL,\n            frontOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.DECREMENT_WRAP\n            },\n            backFunction : StencilFunction.NOT_EQUAL,\n            backOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.DECREMENT_WRAP\n            },\n            reference : 0,\n            mask : StencilConstants.CLASSIFICATION_MASK\n        },\n        stencilMask : StencilConstants.CLASSIFICATION_MASK,\n        depthTest : {\n            enabled : false\n        },\n        depthMask : false,\n        blending : BlendingState.ALPHA_BLEND\n    };\n\n    var pickRenderState = {\n        stencilTest : {\n            enabled : true,\n            frontFunction : StencilFunction.NOT_EQUAL,\n            frontOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.DECREMENT_WRAP\n            },\n            backFunction : StencilFunction.NOT_EQUAL,\n            backOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.DECREMENT_WRAP\n            },\n            reference : 0,\n            mask : StencilConstants.CLASSIFICATION_MASK\n        },\n        stencilMask : StencilConstants.CLASSIFICATION_MASK,\n        depthTest : {\n            enabled : false\n        },\n        depthMask : false\n    };\n\n    function createRenderStates(primitive) {\n        if (defined(primitive._rsStencilPreloadPass)) {\n            return;\n        }\n\n        primitive._rsStencilPreloadPass = RenderState.fromCache(getStencilPreloadRenderState(false));\n        primitive._rsStencilPreloadPass3DTiles = RenderState.fromCache(getStencilPreloadRenderState(true));\n        primitive._rsStencilDepthPass = RenderState.fromCache(getStencilDepthRenderState(false));\n        primitive._rsStencilDepthPass3DTiles = RenderState.fromCache(getStencilDepthRenderState(true));\n        primitive._rsColorPass = RenderState.fromCache(colorRenderState);\n        primitive._rsPickPass = RenderState.fromCache(pickRenderState);\n    }\n\n    var modifiedModelViewScratch = new Matrix4();\n    var rtcScratch = new Cartesian3();\n\n    function createUniformMap(primitive, context) {\n        if (defined(primitive._uniformMap)) {\n            return;\n        }\n\n        var uniformMap = {\n            u_modifiedModelViewProjection : function() {\n                var viewMatrix = context.uniformState.view;\n                var projectionMatrix = context.uniformState.projection;\n                Matrix4.clone(viewMatrix, modifiedModelViewScratch);\n                Matrix4.multiplyByPoint(modifiedModelViewScratch, primitive._center, rtcScratch);\n                Matrix4.setTranslation(modifiedModelViewScratch, rtcScratch, modifiedModelViewScratch);\n                Matrix4.multiply(projectionMatrix, modifiedModelViewScratch, modifiedModelViewScratch);\n                return modifiedModelViewScratch;\n            },\n            u_highlightColor : function() {\n                return primitive._highlightColor;\n            }\n        };\n\n        primitive._uniformMap = primitive._batchTable.getUniformMapCallback()(uniformMap);\n    }\n\n    function copyIndicesCPU(indices, newIndices, currentOffset, offsets, counts, batchIds, batchIdLookUp) {\n        var sizeInBytes = indices.constructor.BYTES_PER_ELEMENT;\n\n        var batchedIdsLength = batchIds.length;\n        for (var j = 0; j < batchedIdsLength; ++j) {\n            var batchedId = batchIds[j];\n            var index = batchIdLookUp[batchedId];\n            var offset = offsets[index];\n            var count = counts[index];\n\n            var subarray = new indices.constructor(indices.buffer, sizeInBytes * offset, count);\n            newIndices.set(subarray, currentOffset);\n\n            offsets[index] = currentOffset;\n            currentOffset += count;\n        }\n\n        return currentOffset;\n    }\n\n    function rebatchCPU(primitive, batchedIndices) {\n        var indices = primitive._indices;\n        var indexOffsets = primitive._indexOffsets;\n        var indexCounts = primitive._indexCounts;\n        var batchIdLookUp = primitive._batchIdLookUp;\n\n        var newIndices = new indices.constructor(indices.length);\n\n        var current = batchedIndices.pop();\n        var newBatchedIndices = [current];\n\n        var currentOffset = copyIndicesCPU(indices, newIndices, 0, indexOffsets, indexCounts, current.batchIds, batchIdLookUp);\n\n        current.offset = 0;\n        current.count = currentOffset;\n\n        while (batchedIndices.length > 0) {\n            var next = batchedIndices.pop();\n            if (Color.equals(next.color, current.color)) {\n                currentOffset = copyIndicesCPU(indices, newIndices, currentOffset, indexOffsets, indexCounts, next.batchIds, batchIdLookUp);\n                current.batchIds = current.batchIds.concat(next.batchIds);\n                current.count = currentOffset - current.offset;\n            } else {\n                var offset = currentOffset;\n                currentOffset = copyIndicesCPU(indices, newIndices, currentOffset, indexOffsets, indexCounts, next.batchIds, batchIdLookUp);\n\n                next.offset = offset;\n                next.count = currentOffset - offset;\n                newBatchedIndices.push(next);\n                current = next;\n            }\n        }\n\n        primitive._va.indexBuffer.copyFromArrayView(newIndices);\n\n        primitive._indices = newIndices;\n        primitive._batchedIndices = newBatchedIndices;\n    }\n\n    function copyIndicesGPU(readBuffer, writeBuffer, currentOffset, offsets, counts, batchIds, batchIdLookUp) {\n        var sizeInBytes = readBuffer.bytesPerIndex;\n\n        var batchedIdsLength = batchIds.length;\n        for (var j = 0; j < batchedIdsLength; ++j) {\n            var batchedId = batchIds[j];\n            var index = batchIdLookUp[batchedId];\n            var offset = offsets[index];\n            var count = counts[index];\n\n            writeBuffer.copyFromBuffer(readBuffer, offset * sizeInBytes, currentOffset * sizeInBytes, count * sizeInBytes);\n\n            offsets[index] = currentOffset;\n            currentOffset += count;\n        }\n\n        return currentOffset;\n    }\n\n    function rebatchGPU(primitive, batchedIndices) {\n        var indexOffsets = primitive._indexOffsets;\n        var indexCounts = primitive._indexCounts;\n        var batchIdLookUp = primitive._batchIdLookUp;\n\n        var current = batchedIndices.pop();\n        var newBatchedIndices = [current];\n\n        var readBuffer = primitive._va.indexBuffer;\n        var writeBuffer = primitive._vaSwap.indexBuffer;\n\n        var currentOffset = copyIndicesGPU(readBuffer, writeBuffer, 0, indexOffsets, indexCounts, current.batchIds, batchIdLookUp);\n\n        current.offset = 0;\n        current.count = currentOffset;\n\n        while (batchedIndices.length > 0) {\n            var next = batchedIndices.pop();\n            if (Color.equals(next.color, current.color)) {\n                currentOffset = copyIndicesGPU(readBuffer, writeBuffer, currentOffset, indexOffsets, indexCounts, next.batchIds, batchIdLookUp);\n                current.batchIds = current.batchIds.concat(next.batchIds);\n                current.count = currentOffset - current.offset;\n            } else {\n                var offset = currentOffset;\n                currentOffset = copyIndicesGPU(readBuffer, writeBuffer, currentOffset, indexOffsets, indexCounts, next.batchIds, batchIdLookUp);\n                next.offset = offset;\n                next.count = currentOffset - offset;\n                newBatchedIndices.push(next);\n                current = next;\n            }\n        }\n\n        var temp = primitive._va;\n        primitive._va = primitive._vaSwap;\n        primitive._vaSwap = temp;\n\n        primitive._batchedIndices = newBatchedIndices;\n    }\n\n    function compareColors(a, b) {\n        return b.color.toRgba() - a.color.toRgba();\n    }\n\n    // PERFORMANCE_IDEA: For WebGL 2, we can use copyBufferSubData for buffer-to-buffer copies.\n    // PERFORMANCE_IDEA: Not supported, but we could use glMultiDrawElements here.\n    function rebatchCommands(primitive, context) {\n        if (!primitive._batchDirty) {\n            return false;\n        }\n\n        var batchedIndices = primitive._batchedIndices;\n        var length = batchedIndices.length;\n\n        var needToRebatch = false;\n        var colorCounts = {};\n\n        for (var i = 0; i < length; ++i) {\n            var color = batchedIndices[i].color;\n            var rgba = color.toRgba();\n            if (defined(colorCounts[rgba])) {\n                needToRebatch = true;\n                break;\n            } else {\n                colorCounts[rgba] = true;\n            }\n        }\n\n        if (!needToRebatch) {\n            primitive._batchDirty = false;\n            return false;\n        }\n\n        if (needToRebatch && !primitive.forceRebatch && primitive._framesSinceLastRebatch < 120) {\n            ++primitive._framesSinceLastRebatch;\n            return;\n        }\n\n        batchedIndices.sort(compareColors);\n\n        if (context.webgl2) {\n            rebatchGPU(primitive, batchedIndices);\n        } else {\n            rebatchCPU(primitive, batchedIndices);\n        }\n\n        primitive._framesSinceLastRebatch = 0;\n        primitive._batchDirty = false;\n        primitive._pickCommandsDirty = true;\n        primitive._wireframeDirty = true;\n        return true;\n    }\n\n    function createColorCommands(primitive, context) {\n        var needsRebatch = rebatchCommands(primitive, context);\n\n        var commands = primitive._commands;\n        var batchedIndices = primitive._batchedIndices;\n        var length = batchedIndices.length;\n        var commandsLength = length * 3;\n\n        if (defined(commands) &&\n            !needsRebatch &&\n            commands.length === commandsLength) {\n            return;\n        }\n\n        commands.length = commandsLength;\n\n        var vertexArray = primitive._va;\n        var sp = primitive._sp;\n        var modelMatrix = defaultValue(primitive._modelMatrix, Matrix4.IDENTITY);\n        var uniformMap = primitive._uniformMap;\n        var bv = primitive._boundingVolume;\n\n        for (var j = 0; j < length; ++j) {\n            var offset = batchedIndices[j].offset;\n            var count = batchedIndices[j].count;\n\n            var stencilPreloadCommand = commands[j * 3];\n            if (!defined(stencilPreloadCommand)) {\n                stencilPreloadCommand = commands[j * 3] = new DrawCommand({\n                    owner : primitive\n                });\n            }\n\n            stencilPreloadCommand.vertexArray = vertexArray;\n            stencilPreloadCommand.modelMatrix = modelMatrix;\n            stencilPreloadCommand.offset = offset;\n            stencilPreloadCommand.count = count;\n            stencilPreloadCommand.renderState = primitive._rsStencilPreloadPass;\n            stencilPreloadCommand.shaderProgram = sp;\n            stencilPreloadCommand.uniformMap = uniformMap;\n            stencilPreloadCommand.boundingVolume = bv;\n            stencilPreloadCommand.cull = false;\n            stencilPreloadCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var stencilPreloadDerivedCommand = DrawCommand.shallowClone(stencilPreloadCommand, stencilPreloadCommand.derivedCommands.tileset);\n            stencilPreloadDerivedCommand.renderState = primitive._rsStencilPreloadPass3DTiles;\n            stencilPreloadDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            stencilPreloadCommand.derivedCommands.tileset = stencilPreloadDerivedCommand;\n\n            var stencilDepthCommand = commands[j * 3 + 1];\n            if (!defined(stencilDepthCommand)) {\n                stencilDepthCommand = commands[j * 3 + 1] = new DrawCommand({\n                    owner : primitive\n                });\n            }\n\n            stencilDepthCommand.vertexArray = vertexArray;\n            stencilDepthCommand.modelMatrix = modelMatrix;\n            stencilDepthCommand.offset = offset;\n            stencilDepthCommand.count = count;\n            stencilDepthCommand.renderState = primitive._rsStencilDepthPass;\n            stencilDepthCommand.shaderProgram = sp;\n            stencilDepthCommand.uniformMap = uniformMap;\n            stencilDepthCommand.boundingVolume = bv;\n            stencilDepthCommand.cull = false;\n            stencilDepthCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var stencilDepthDerivedCommand = DrawCommand.shallowClone(stencilDepthCommand, stencilDepthCommand.derivedCommands.tileset);\n            stencilDepthDerivedCommand.renderState = primitive._rsStencilDepthPass3DTiles;\n            stencilDepthDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            stencilDepthCommand.derivedCommands.tileset = stencilDepthDerivedCommand;\n\n            var colorCommand = commands[j * 3 + 2];\n            if (!defined(colorCommand)) {\n                colorCommand = commands[j * 3 + 2] = new DrawCommand({\n                    owner : primitive\n                });\n            }\n\n            colorCommand.vertexArray = vertexArray;\n            colorCommand.modelMatrix = modelMatrix;\n            colorCommand.offset = offset;\n            colorCommand.count = count;\n            colorCommand.renderState = primitive._rsColorPass;\n            colorCommand.shaderProgram = sp;\n            colorCommand.uniformMap = uniformMap;\n            colorCommand.boundingVolume = bv;\n            colorCommand.cull = false;\n            colorCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var colorDerivedCommand = DrawCommand.shallowClone(colorCommand, colorCommand.derivedCommands.tileset);\n            colorDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            colorCommand.derivedCommands.tileset = colorDerivedCommand;\n        }\n\n        primitive._commandsDirty = true;\n    }\n\n    function createColorCommandsIgnoreShow(primitive, frameState) {\n        if (primitive.classificationType === ClassificationType.TERRAIN ||\n            !frameState.invertClassification ||\n            (defined(primitive._commandsIgnoreShow) && !primitive._commandsDirty)) {\n            return;\n        }\n\n        var commands = primitive._commands;\n        var commandsIgnoreShow = primitive._commandsIgnoreShow;\n        var spStencil = primitive._spStencil;\n\n        var commandsLength = commands.length;\n        var length = commandsIgnoreShow.length = commandsLength / 3 * 2;\n\n        var commandIndex = 0;\n        for (var j = 0; j < length; j += 2) {\n            var commandIgnoreShow = commandsIgnoreShow[j] = DrawCommand.shallowClone(commands[commandIndex], commandsIgnoreShow[j]);\n            commandIgnoreShow.shaderProgram = spStencil;\n            commandIgnoreShow.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW;\n\n            commandIgnoreShow = commandsIgnoreShow[j + 1] = DrawCommand.shallowClone(commands[commandIndex + 1], commandsIgnoreShow[j + 1]);\n            commandIgnoreShow.shaderProgram = spStencil;\n            commandIgnoreShow.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW;\n\n            commandIndex += 3;\n        }\n\n        primitive._commandsDirty = false;\n    }\n\n    function createPickCommands(primitive) {\n        if (!primitive._pickCommandsDirty) {\n            return;\n        }\n\n        var length = primitive._indexOffsets.length;\n        var pickCommands = primitive._pickCommands;\n        pickCommands.length = length * 3;\n\n        var vertexArray = primitive._va;\n        var spStencil = primitive._spStencil;\n        var spPick = primitive._spPick;\n        var modelMatrix = defaultValue(primitive._modelMatrix, Matrix4.IDENTITY);\n        var uniformMap = primitive._uniformMap;\n\n        for (var j = 0; j < length; ++j) {\n            var offset = primitive._indexOffsets[j];\n            var count = primitive._indexCounts[j];\n            var bv = defined(primitive._boundingVolumes) ? primitive._boundingVolumes[j] : primitive.boundingVolume;\n\n            var stencilPreloadCommand = pickCommands[j * 3];\n            if (!defined(stencilPreloadCommand)) {\n                stencilPreloadCommand = pickCommands[j * 3] = new DrawCommand({\n                    owner : primitive,\n                    pickOnly : true\n                });\n            }\n\n            stencilPreloadCommand.vertexArray = vertexArray;\n            stencilPreloadCommand.modelMatrix = modelMatrix;\n            stencilPreloadCommand.offset = offset;\n            stencilPreloadCommand.count = count;\n            stencilPreloadCommand.renderState = primitive._rsStencilPreloadPass;\n            stencilPreloadCommand.shaderProgram = spStencil;\n            stencilPreloadCommand.uniformMap = uniformMap;\n            stencilPreloadCommand.boundingVolume = bv;\n            stencilPreloadCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var stencilPreloadDerivedCommand = DrawCommand.shallowClone(stencilPreloadCommand, stencilPreloadCommand.derivedCommands.tileset);\n            stencilPreloadDerivedCommand.renderState = primitive._rsStencilPreloadPass3DTiles;\n            stencilPreloadDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            stencilPreloadCommand.derivedCommands.tileset = stencilPreloadDerivedCommand;\n\n            var stencilDepthCommand = pickCommands[j * 3 + 1];\n            if (!defined(stencilDepthCommand)) {\n                stencilDepthCommand = pickCommands[j * 3 + 1] = new DrawCommand({\n                    owner : primitive,\n                    pickOnly : true\n                });\n            }\n\n            stencilDepthCommand.vertexArray = vertexArray;\n            stencilDepthCommand.modelMatrix = modelMatrix;\n            stencilDepthCommand.offset = offset;\n            stencilDepthCommand.count = count;\n            stencilDepthCommand.renderState = primitive._rsStencilDepthPass;\n            stencilDepthCommand.shaderProgram = spStencil;\n            stencilDepthCommand.uniformMap = uniformMap;\n            stencilDepthCommand.boundingVolume = bv;\n            stencilDepthCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var stencilDepthDerivedCommand = DrawCommand.shallowClone(stencilDepthCommand, stencilDepthCommand.derivedCommands.tileset);\n            stencilDepthDerivedCommand.renderState = primitive._rsStencilDepthPass3DTiles;\n            stencilDepthDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            stencilDepthCommand.derivedCommands.tileset = stencilDepthDerivedCommand;\n\n            var colorCommand = pickCommands[j * 3 + 2];\n            if (!defined(colorCommand)) {\n                colorCommand = pickCommands[j * 3 + 2] = new DrawCommand({\n                    owner : primitive,\n                    pickOnly : true\n                });\n            }\n\n            colorCommand.vertexArray = vertexArray;\n            colorCommand.modelMatrix = modelMatrix;\n            colorCommand.offset = offset;\n            colorCommand.count = count;\n            colorCommand.renderState = primitive._rsPickPass;\n            colorCommand.shaderProgram = spPick;\n            colorCommand.uniformMap = uniformMap;\n            colorCommand.boundingVolume = bv;\n            colorCommand.pass = Pass.TERRAIN_CLASSIFICATION;\n\n            var colorDerivedCommand = DrawCommand.shallowClone(colorCommand, colorCommand.derivedCommands.tileset);\n            colorDerivedCommand.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n            colorCommand.derivedCommands.tileset = colorDerivedCommand;\n        }\n\n        primitive._pickCommandsDirty = false;\n    }\n\n    /**\n     * Creates features for each mesh and places it at the batch id index of features.\n     *\n     * @param {Vector3DTileContent} content The vector tile content.\n     * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n     */\n    Vector3DTilePrimitive.prototype.createFeatures = function(content, features) {\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            features[batchId] = new Cesium3DTileFeature(content, batchId);\n        }\n    };\n\n    /**\n     * Colors the entire tile when enabled is true. The resulting color will be (mesh batch table color * color).\n     *\n     * @param {Boolean} enabled Whether to enable debug coloring.\n     * @param {Color} color The debug color.\n     */\n    Vector3DTilePrimitive.prototype.applyDebugSettings = function(enabled, color) {\n        this._highlightColor = enabled ? color : this._constantColor;\n    };\n\n    function clearStyle(polygons, features) {\n        polygons._updatingAllCommands = true;\n\n        var batchIds = polygons._batchIds;\n        var length = batchIds.length;\n        var i;\n\n        for (i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            feature.show = true;\n            feature.color = Color.WHITE;\n        }\n\n        var batchedIndices = polygons._batchedIndices;\n        length = batchedIndices.length;\n\n        for (i = 0; i < length; ++i) {\n            batchedIndices[i].color = Color.clone(Color.WHITE);\n        }\n\n        polygons._updatingAllCommands = false;\n        polygons._batchDirty = true;\n    }\n\n    var scratchColor = new Color();\n\n    var DEFAULT_COLOR_VALUE = Color.WHITE;\n    var DEFAULT_SHOW_VALUE = true;\n\n    var complexExpressionReg = /\\$/;\n\n    /**\n     * Apply a style to the content.\n     *\n     * @param {Cesium3DTileStyle} style The style.\n     * @param {Cesium3DTileFeature[]} features The array of features.\n     */\n    Vector3DTilePrimitive.prototype.applyStyle = function(style, features) {\n        if (!defined(style)) {\n            clearStyle(this, features);\n            return;\n        }\n\n        var colorExpression = style.color;\n        var isSimpleStyle = colorExpression instanceof Expression && !complexExpressionReg.test(colorExpression.expression);\n        this._updatingAllCommands = isSimpleStyle;\n\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        var i;\n\n        for (i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            feature.color = defined(style.color) ? style.color.evaluateColor(feature, scratchColor) : DEFAULT_COLOR_VALUE;\n            feature.show = defined(style.show) ? style.show.evaluate(feature) : DEFAULT_SHOW_VALUE;\n        }\n\n        if (isSimpleStyle) {\n            var batchedIndices = this._batchedIndices;\n            length = batchedIndices.length;\n\n            for (i = 0; i < length; ++i) {\n                batchedIndices[i].color = Color.clone(Color.WHITE);\n            }\n\n            this._updatingAllCommands = false;\n            this._batchDirty = true;\n        }\n    };\n\n    /**\n     * Call when updating the color of a mesh with batchId changes color. The meshes will need to be re-batched\n     * on the next update.\n     *\n     * @param {Number} batchId The batch id of the meshes whose color has changed.\n     * @param {Color} color The new polygon color.\n     */\n    Vector3DTilePrimitive.prototype.updateCommands = function(batchId, color) {\n        if (this._updatingAllCommands) {\n            return;\n        }\n\n        var batchIdLookUp = this._batchIdLookUp;\n        var index = batchIdLookUp[batchId];\n        if (!defined(index)) {\n            return;\n        }\n\n        var indexOffsets = this._indexOffsets;\n        var indexCounts = this._indexCounts;\n\n        var offset = indexOffsets[index];\n        var count = indexCounts[index];\n\n        var batchedIndices = this._batchedIndices;\n        var length = batchedIndices.length;\n\n        var i;\n        for (i = 0; i < length; ++i) {\n            var batchedOffset = batchedIndices[i].offset;\n            var batchedCount = batchedIndices[i].count;\n\n            if (offset >= batchedOffset && offset < batchedOffset + batchedCount) {\n                break;\n            }\n        }\n\n        batchedIndices.push(new Vector3DTileBatch({\n            color : Color.clone(color),\n            offset : offset,\n            count : count,\n            batchIds : [batchId]\n        }));\n\n        var startIds = [];\n        var endIds = [];\n\n        var batchIds = batchedIndices[i].batchIds;\n        var batchIdsLength = batchIds.length;\n\n        for (var j = 0; j < batchIdsLength; ++j) {\n            var id = batchIds[j];\n            if (id === batchId) {\n                continue;\n            }\n\n            var offsetIndex = batchIdLookUp[id];\n            if (indexOffsets[offsetIndex] < offset) {\n                startIds.push(id);\n            } else {\n                endIds.push(id);\n            }\n        }\n\n        if (endIds.length !== 0) {\n            batchedIndices.push(new Vector3DTileBatch({\n                color : Color.clone(batchedIndices[i].color),\n                offset : offset + count,\n                count : batchedIndices[i].offset + batchedIndices[i].count - (offset + count),\n                batchIds : endIds\n            }));\n        }\n\n        if (startIds.length !== 0) {\n            batchedIndices[i].count = offset - batchedIndices[i].offset;\n            batchedIndices[i].batchIds = startIds;\n        } else {\n            batchedIndices.splice(i, 1);\n        }\n\n        this._batchDirty = true;\n    };\n\n    function queueCommands(primitive, frameState, commands, commandsIgnoreShow) {\n        var classificationType = primitive.classificationType;\n        var queueTerrainCommands = (classificationType !== ClassificationType.CESIUM_3D_TILE);\n        var queue3DTilesCommands = (classificationType !== ClassificationType.TERRAIN);\n\n        var commandList = frameState.commandList;\n        var commandLength = commands.length;\n        var command;\n        var i;\n        for (i = 0; i < commandLength; ++i) {\n            if (queueTerrainCommands) {\n                command = commands[i];\n                command.pass = Pass.TERRAIN_CLASSIFICATION;\n                commandList.push(command);\n            }\n            if (queue3DTilesCommands) {\n                command = commands[i].derivedCommands.tileset;\n                command.pass = Pass.CESIUM_3D_TILE_CLASSIFICATION;\n                commandList.push(command);\n            }\n        }\n\n        if (!frameState.invertClassification || !defined(commandsIgnoreShow)) {\n            return;\n        }\n\n        commandLength = commandsIgnoreShow.length;\n        for (i = 0; i < commandLength; ++i) {\n            commandList.push(commandsIgnoreShow[i]);\n        }\n    }\n\n    function queueWireframeCommands(frameState, commands) {\n        var commandList = frameState.commandList;\n        var commandLength = commands.length;\n        for (var i = 0; i < commandLength; i += 3) {\n            var command = commands[i + 2];\n            command.pass = Pass.OPAQUE;\n            commandList.push(command);\n        }\n    }\n\n    function updateWireframe(primitive) {\n        var earlyExit = primitive.debugWireframe === primitive._debugWireframe;\n        earlyExit = earlyExit && !(primitive.debugWireframe && primitive._wireframeDirty);\n        if (earlyExit) {\n            return;\n        }\n\n        if (!defined(primitive._rsWireframe)) {\n            primitive._rsWireframe = RenderState.fromCache({});\n        }\n\n        var rs;\n        var type;\n\n        if (primitive.debugWireframe) {\n            rs = primitive._rsWireframe;\n            type = PrimitiveType.LINES;\n        } else {\n            rs = primitive._rsColorPass;\n            type = PrimitiveType.TRIANGLES;\n        }\n\n        var commands = primitive._commands;\n        var commandLength = commands.length;\n        for (var i = 0; i < commandLength; i += 3) {\n            var command = commands[i + 2];\n            command.renderState = rs;\n            command.primitiveType = type;\n        }\n\n        primitive._debugWireframe = primitive.debugWireframe;\n        primitive._wireframeDirty = false;\n    }\n\n    /**\n     * Updates the batches and queues the commands for rendering.\n     *\n     * @param {FrameState} frameState The current frame state.\n     */\n    Vector3DTilePrimitive.prototype.update = function(frameState) {\n        var context = frameState.context;\n\n        createVertexArray(this, context);\n        createShaders(this, context);\n        createRenderStates(this);\n        createUniformMap(this, context);\n\n        var passes = frameState.passes;\n        if (passes.render) {\n            createColorCommands(this, context);\n            createColorCommandsIgnoreShow(this, frameState);\n            updateWireframe(this);\n\n            if (this._debugWireframe) {\n                queueWireframeCommands(frameState, this._commands);\n            } else {\n                queueCommands(this, frameState, this._commands, this._commandsIgnoreShow);\n            }\n        }\n\n        if (passes.pick) {\n            createPickCommands(this);\n            queueCommands(this, frameState, this._pickCommands);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    Vector3DTilePrimitive.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    Vector3DTilePrimitive.prototype.destroy = function() {\n        this._va = this._va && this._va.destroy();\n        this._sp = this._sp && this._sp.destroy();\n        this._spPick = this._spPick && this._spPick.destroy();\n        this._vaSwap = this._vaSwap && this._vaSwap.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTilePrimitive;\n","import arraySlice from '../Core/arraySlice.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport FeatureDetection from '../Core/FeatureDetection.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Transforms from '../Core/Transforms.js';\nimport WebGLConstants from '../Core/WebGLConstants.js';\nimport addDefaults from '../ThirdParty/GltfPipeline/addDefaults.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport getAccessorByteStride from '../ThirdParty/GltfPipeline/getAccessorByteStride.js';\nimport numberOfComponentsForType from '../ThirdParty/GltfPipeline/numberOfComponentsForType.js';\nimport parseGlb from '../ThirdParty/GltfPipeline/parseGlb.js';\nimport updateVersion from '../ThirdParty/GltfPipeline/updateVersion.js';\nimport when from '../ThirdParty/when.js';\nimport Axis from './Axis.js';\nimport ModelLoadResources from './ModelLoadResources.js';\nimport ModelUtility from './ModelUtility.js';\nimport processModelMaterialsCommon from './processModelMaterialsCommon.js';\nimport processPbrMaterials from './processPbrMaterials.js';\nimport SceneMode from './SceneMode.js';\nimport Vector3DTileBatch from './Vector3DTileBatch.js';\nimport Vector3DTilePrimitive from './Vector3DTilePrimitive.js';\n\n    var boundingSphereCartesian3Scratch = new Cartesian3();\n\n    var ModelState = ModelUtility.ModelState;\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * A 3D model for classifying other 3D assets based on glTF, the runtime 3D asset format.\n     * This is a special case when a model of a 3D tileset becomes a classifier when setting {@link Cesium3DTileset#classificationType}.\n     *\n     * @alias ClassificationModel\n     * @constructor\n     *\n     * @private\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {ArrayBuffer|Uint8Array} options.gltf A binary glTF buffer.\n     * @param {Boolean} [options.show=true] Determines if the model primitive will be shown.\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the model from model to world coordinates.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for each draw command in the model.\n     * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the model in wireframe.\n     * @param {ClassificationType} [options.classificationType] What this model will classify.\n     *\n     * @exception {RuntimeError} Only binary glTF is supported.\n     * @exception {RuntimeError} Buffer data must be embedded in the binary glTF.\n     * @exception {RuntimeError} Only one node is supported for classification and it must have a mesh.\n     * @exception {RuntimeError} Only one mesh is supported when using b3dm for classification.\n     * @exception {RuntimeError} Only one primitive per mesh is supported when using b3dm for classification.\n     * @exception {RuntimeError} The mesh must have a position attribute.\n     * @exception {RuntimeError} The mesh must have a batch id attribute.\n     */\n    function ClassificationModel(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var gltf = options.gltf;\n        if (gltf instanceof ArrayBuffer) {\n            gltf = new Uint8Array(gltf);\n        }\n\n        if (gltf instanceof Uint8Array) {\n            // Parse and update binary glTF\n            gltf = parseGlb(gltf);\n            updateVersion(gltf);\n            addDefaults(gltf);\n            processModelMaterialsCommon(gltf);\n            processPbrMaterials(gltf);\n        } else {\n            throw new RuntimeError('Only binary glTF is supported as a classifier.');\n        }\n\n        ForEach.buffer(gltf, function(buffer) {\n            if (!defined(buffer.extras._pipeline.source)) {\n                throw new RuntimeError('Buffer data must be embedded in the binary gltf.');\n            }\n        });\n\n        var gltfNodes = gltf.nodes;\n        var gltfMeshes = gltf.meshes;\n\n        var gltfNode = gltfNodes[0];\n        var meshId = gltfNode.mesh;\n        if (gltfNodes.length !== 1 || !defined(meshId)) {\n            throw new RuntimeError('Only one node is supported for classification and it must have a mesh.');\n        }\n\n        if (gltfMeshes.length !== 1) {\n            throw new RuntimeError('Only one mesh is supported when using b3dm for classification.');\n        }\n\n        var gltfPrimitives = gltfMeshes[0].primitives;\n        if (gltfPrimitives.length !== 1) {\n            throw new RuntimeError('Only one primitive per mesh is supported when using b3dm for classification.');\n        }\n\n        var gltfPositionAttribute = gltfPrimitives[0].attributes.POSITION;\n        if (!defined(gltfPositionAttribute)) {\n            throw new RuntimeError('The mesh must have a position attribute.');\n        }\n\n        var gltfBatchIdAttribute = gltfPrimitives[0].attributes._BATCHID;\n        if (!defined(gltfBatchIdAttribute)) {\n            throw new RuntimeError('The mesh must have a batch id attribute.');\n        }\n\n        this._gltf = gltf;\n\n        /**\n         * Determines if the model primitive will be shown.\n         *\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * The 4x4 transformation matrix that transforms the model from model to world coordinates.\n         * When this is the identity matrix, the model is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n         * Local reference frames can be used by providing a different transformation matrix, like that returned\n         * by {@link Transforms.eastNorthUpToFixedFrame}.\n         *\n         * @type {Matrix4}\n         *\n         * @default {@link Matrix4.IDENTITY}\n         *\n         * @example\n         * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n         * m.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n         */\n        this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n        this._modelMatrix = Matrix4.clone(this.modelMatrix);\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the bounding sphere for each draw command in the model.  A glTF primitive corresponds\n         * to one draw command.  A glTF mesh has an array of primitives, often of length one.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n        this._debugShowBoundingVolume = false;\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the model in wireframe.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugWireframe = defaultValue(options.debugWireframe, false);\n        this._debugWireframe = false;\n\n        this._classificationType = options.classificationType;\n\n        // Undocumented options\n        this._vertexShaderLoaded = options.vertexShaderLoaded;\n        this._classificationShaderLoaded = options.classificationShaderLoaded;\n        this._uniformMapLoaded = options.uniformMapLoaded;\n        this._pickIdLoaded = options.pickIdLoaded;\n        this._ignoreCommands = defaultValue(options.ignoreCommands, false);\n        this._upAxis = defaultValue(options.upAxis, Axis.Y);\n        this._batchTable = options.batchTable;\n\n        this._computedModelMatrix = new Matrix4(); // Derived from modelMatrix and axis\n        this._initialRadius = undefined;           // Radius without model's scale property, model-matrix scale, animations, or skins\n        this._boundingSphere = undefined;\n        this._scaledBoundingSphere = new BoundingSphere();\n        this._state = ModelState.NEEDS_LOAD;\n        this._loadResources = undefined;\n\n        this._mode = undefined;\n        this._dirty = false;                       // true when the model was transformed this frame\n\n        this._nodeMatrix = new Matrix4();\n        this._primitive = undefined;\n\n        this._extensionsUsed = undefined;     // Cached used glTF extensions\n        this._extensionsRequired = undefined; // Cached required glTF extensions\n        this._quantizedUniforms = undefined;  // Quantized uniforms for WEB3D_quantized_attributes\n\n        this._buffers = {};\n        this._vertexArray = undefined;\n        this._shaderProgram = undefined;\n        this._uniformMap = undefined;\n\n        this._geometryByteLength = 0;\n        this._trianglesLength = 0;\n\n        // CESIUM_RTC extension\n        this._rtcCenter = undefined;    // reference to either 3D or 2D\n        this._rtcCenterEye = undefined; // in eye coordinates\n        this._rtcCenter3D = undefined;  // in world coordinates\n        this._rtcCenter2D = undefined;  // in projected world coordinates\n    }\n\n    Object.defineProperties(ClassificationModel.prototype, {\n        /**\n         * The object for the glTF JSON, including properties with default values omitted\n         * from the JSON provided to this model.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Object}\n         * @readonly\n         *\n         * @default undefined\n         */\n        gltf : {\n            get : function() {\n                return this._gltf;\n            }\n        },\n\n        /**\n         * The model's bounding sphere in its local coordinate system.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         *\n         * @default undefined\n         *\n         * @exception {DeveloperError} The model is not loaded.  Use ClassificationModel.readyPromise or wait for ClassificationModel.ready to be true.\n         *\n         * @example\n         * // Center in WGS84 coordinates\n         * var center = Cesium.Matrix4.multiplyByPoint(model.modelMatrix, model.boundingSphere.center, new Cesium.Cartesian3());\n         */\n        boundingSphere : {\n            get : function() {\n                \n\n                var modelMatrix = this.modelMatrix;\n                var nonUniformScale = Matrix4.getScale(modelMatrix, boundingSphereCartesian3Scratch);\n\n                var scaledBoundingSphere = this._scaledBoundingSphere;\n                scaledBoundingSphere.center = Cartesian3.multiplyComponents(this._boundingSphere.center, nonUniformScale, scaledBoundingSphere.center);\n                scaledBoundingSphere.radius = Cartesian3.maximumComponent(nonUniformScale) * this._initialRadius;\n\n                if (defined(this._rtcCenter)) {\n                    Cartesian3.add(this._rtcCenter, scaledBoundingSphere.center, scaledBoundingSphere.center);\n                }\n\n                return scaledBoundingSphere;\n            }\n        },\n\n        /**\n         * When <code>true</code>, this model is ready to render, i.e., the external binary, image,\n         * and shader files were downloaded and the WebGL resources were created.  This is set to\n         * <code>true</code> right before {@link ClassificationModel#readyPromise} is resolved.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n\n        /**\n         * Gets the promise that will be resolved when this model is ready to render, i.e., when the external binary, image,\n         * and shader files were downloaded and the WebGL resources were created.\n         * <p>\n         * This promise is resolved at the end of the frame before the first frame the model is rendered in.\n         * </p>\n         *\n         * @memberof ClassificationModel.prototype\n         * @type {Promise.<ClassificationModel>}\n         * @readonly\n         *\n         * @see ClassificationModel#ready\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        /**\n         * Returns true if the model was transformed this frame\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        dirty : {\n            get : function() {\n                return this._dirty;\n            }\n        },\n\n        /**\n         * Returns an object with all of the glTF extensions used.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        extensionsUsed : {\n            get : function() {\n                if (!defined(this._extensionsUsed)) {\n                    this._extensionsUsed = ModelUtility.getUsedExtensions(this.gltf);\n                }\n                return this._extensionsUsed;\n            }\n        },\n\n        /**\n         * Returns an object with all of the glTF extensions required.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        extensionsRequired : {\n            get : function() {\n                if (!defined(this._extensionsRequired)) {\n                    this._extensionsRequired = ModelUtility.getRequiredExtensions(this.gltf);\n                }\n                return this._extensionsRequired;\n            }\n        },\n\n        /**\n         * Gets the model's up-axis.\n         * By default models are y-up according to the glTF spec, however geo-referenced models will typically be z-up.\n         *\n         * @memberof ClassificationModel.prototype\n         *\n         * @type {Number}\n         * @default Axis.Y\n         * @readonly\n         *\n         * @private\n         */\n        upAxis : {\n            get : function() {\n                return this._upAxis;\n            }\n        },\n\n        /**\n         * Gets the model's triangle count.\n         *\n         * @private\n         */\n        trianglesLength : {\n            get : function() {\n                return this._trianglesLength;\n            }\n        },\n\n        /**\n         * Gets the model's geometry memory in bytes. This includes all vertex and index buffers.\n         *\n         * @private\n         */\n        geometryByteLength : {\n            get : function() {\n                return this._geometryByteLength;\n            }\n        },\n\n        /**\n         * Gets the model's texture memory in bytes.\n         *\n         * @private\n         */\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Gets the model's classification type.\n         * @memberof ClassificationModel.prototype\n         * @type {ClassificationType}\n         */\n        classificationType : {\n            get : function() {\n                return this._classificationType;\n            }\n        }\n    });\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function addBuffersToLoadResources(model) {\n        var gltf = model.gltf;\n        var loadResources = model._loadResources;\n        ForEach.buffer(gltf, function(buffer, id) {\n            loadResources.buffers[id] = buffer.extras._pipeline.source;\n        });\n    }\n\n    function parseBufferViews(model) {\n        var bufferViews = model.gltf.bufferViews;\n\n        var vertexBuffersToCreate = model._loadResources.vertexBuffersToCreate;\n\n        // Only ARRAY_BUFFER here.  ELEMENT_ARRAY_BUFFER created below.\n        ForEach.bufferView(model.gltf, function(bufferView, id) {\n            if (bufferView.target === WebGLConstants.ARRAY_BUFFER) {\n                vertexBuffersToCreate.enqueue(id);\n            }\n        });\n\n        var indexBuffersToCreate = model._loadResources.indexBuffersToCreate;\n        var indexBufferIds = {};\n\n        // The Cesium Renderer requires knowing the datatype for an index buffer\n        // at creation type, which is not part of the glTF bufferview so loop\n        // through glTF accessors to create the bufferview's index buffer.\n        ForEach.accessor(model.gltf, function(accessor) {\n            var bufferViewId = accessor.bufferView;\n            var bufferView = bufferViews[bufferViewId];\n\n            if ((bufferView.target === WebGLConstants.ELEMENT_ARRAY_BUFFER) && !defined(indexBufferIds[bufferViewId])) {\n                indexBufferIds[bufferViewId] = true;\n                indexBuffersToCreate.enqueue({\n                    id : bufferViewId,\n                    componentType : accessor.componentType\n                });\n            }\n        });\n    }\n\n    function createVertexBuffer(bufferViewId, model) {\n        var loadResources = model._loadResources;\n        var bufferViews = model.gltf.bufferViews;\n        var bufferView = bufferViews[bufferViewId];\n        var vertexBuffer = loadResources.getBuffer(bufferView);\n        model._buffers[bufferViewId] = vertexBuffer;\n        model._geometryByteLength += vertexBuffer.byteLength;\n    }\n\n    function createIndexBuffer(bufferViewId, componentType, model) {\n        var loadResources = model._loadResources;\n        var bufferViews = model.gltf.bufferViews;\n        var bufferView = bufferViews[bufferViewId];\n        var indexBuffer = {\n            typedArray : loadResources.getBuffer(bufferView),\n            indexDatatype : componentType\n        };\n        model._buffers[bufferViewId] = indexBuffer;\n        model._geometryByteLength += indexBuffer.typedArray.byteLength;\n    }\n\n    function createBuffers(model) {\n        var loadResources = model._loadResources;\n\n        if (loadResources.pendingBufferLoads !== 0) {\n            return;\n        }\n\n        var vertexBuffersToCreate = loadResources.vertexBuffersToCreate;\n        var indexBuffersToCreate = loadResources.indexBuffersToCreate;\n\n        while (vertexBuffersToCreate.length > 0) {\n            createVertexBuffer(vertexBuffersToCreate.dequeue(), model);\n        }\n\n        while (indexBuffersToCreate.length > 0) {\n            var i = indexBuffersToCreate.dequeue();\n            createIndexBuffer(i.id, i.componentType, model);\n        }\n    }\n\n    function modifyShaderForQuantizedAttributes(shader, model) {\n        var primitive = model.gltf.meshes[0].primitives[0];\n        var result = ModelUtility.modifyShaderForQuantizedAttributes(model.gltf, primitive, shader);\n        model._quantizedUniforms = result.uniforms;\n        return result.shader;\n    }\n\n    function modifyShader(shader, callback) {\n        if (defined(callback)) {\n            shader = callback(shader);\n        }\n        return shader;\n    }\n\n    function createProgram(model) {\n        var gltf = model.gltf;\n\n        var positionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'POSITION');\n        var batchIdName = ModelUtility.getAttributeOrUniformBySemantic(gltf, '_BATCHID');\n\n        var attributeLocations = {};\n        attributeLocations[positionName] = 0;\n        attributeLocations[batchIdName] = 1;\n\n        var modelViewProjectionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'MODELVIEWPROJECTION');\n\n        var uniformDecl;\n        var toClip;\n\n        if (!defined(modelViewProjectionName)) {\n            var projectionName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'PROJECTION');\n            var modelViewName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'MODELVIEW');\n            if (!defined(modelViewName)) {\n                modelViewName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'CESIUM_RTC_MODELVIEW');\n            }\n\n            uniformDecl =\n                'uniform mat4 ' + modelViewName + ';\\n' +\n                'uniform mat4 ' + projectionName + ';\\n';\n            toClip = projectionName + ' * ' + modelViewName + ' * vec4(' + positionName + ', 1.0)';\n        } else {\n            uniformDecl = 'uniform mat4 ' + modelViewProjectionName + ';\\n';\n            toClip = modelViewProjectionName + ' * vec4(' + positionName + ', 1.0)';\n        }\n\n        var computePosition = '    vec4 positionInClipCoords = ' + toClip + ';\\n';\n\n        var vs =\n            'attribute vec3 ' + positionName + ';\\n' +\n            'attribute float ' + batchIdName + ';\\n' +\n            uniformDecl +\n            'void main() {\\n' +\n            computePosition +\n            '    gl_Position = czm_depthClampFarPlane(positionInClipCoords);\\n' +\n            '}\\n';\n        var fs =\n            '#ifdef GL_EXT_frag_depth\\n' +\n            '#extension GL_EXT_frag_depth : enable\\n' +\n            '#endif\\n' +\n            'void main() \\n' +\n            '{ \\n' +\n            '    gl_FragColor = vec4(1.0); \\n' +\n            '    czm_writeDepthClampedToFarPlane();\\n' +\n            '}\\n';\n\n        if (model.extensionsUsed.WEB3D_quantized_attributes) {\n            vs = modifyShaderForQuantizedAttributes(vs, model);\n        }\n\n        var drawVS = modifyShader(vs, model._vertexShaderLoaded);\n        var drawFS = modifyShader(fs, model._classificationShaderLoaded);\n\n        drawVS = ModelUtility.modifyVertexShaderForLogDepth(drawVS, toClip);\n        drawFS = ModelUtility.modifyFragmentShaderForLogDepth(drawFS);\n\n        model._shaderProgram = {\n            vertexShaderSource : drawVS,\n            fragmentShaderSource : drawFS,\n            attributeLocations : attributeLocations\n        };\n    }\n\n    function getAttributeLocations() {\n        return {\n            POSITION : 0,\n            _BATCHID : 1\n        };\n    }\n\n    function createVertexArray(model) {\n        var loadResources = model._loadResources;\n        if (!loadResources.finishedBuffersCreation() || defined(model._vertexArray)) {\n            return;\n        }\n\n        var rendererBuffers = model._buffers;\n        var gltf = model.gltf;\n        var accessors = gltf.accessors;\n        var meshes = gltf.meshes;\n        var primitives = meshes[0].primitives;\n\n        var primitive = primitives[0];\n        var attributeLocations = getAttributeLocations();\n        var attributes = {};\n        ForEach.meshPrimitiveAttribute(primitive, function(accessorId, attributeName) {\n            // Skip if the attribute is not used by the material, e.g., because the asset\n            // was exported with an attribute that wasn't used and the asset wasn't optimized.\n            var attributeLocation = attributeLocations[attributeName];\n            if (defined(attributeLocation)) {\n                var a = accessors[accessorId];\n                attributes[attributeName] = {\n                    index: attributeLocation,\n                    vertexBuffer: rendererBuffers[a.bufferView],\n                    componentsPerAttribute: numberOfComponentsForType(a.type),\n                    componentDatatype: a.componentType,\n                    offsetInBytes: a.byteOffset,\n                    strideInBytes: getAccessorByteStride(gltf, a)\n                };\n            }\n        });\n\n        var indexBuffer;\n        if (defined(primitive.indices)) {\n            var accessor = accessors[primitive.indices];\n            indexBuffer = rendererBuffers[accessor.bufferView];\n        }\n        model._vertexArray = {\n            attributes : attributes,\n            indexBuffer : indexBuffer\n        };\n    }\n\n    var gltfSemanticUniforms = {\n        PROJECTION : function(uniformState, model) {\n            return ModelUtility.getGltfSemanticUniforms().PROJECTION(uniformState, model);\n        },\n        MODELVIEW : function(uniformState, model) {\n            return ModelUtility.getGltfSemanticUniforms().MODELVIEW(uniformState, model);\n        },\n        CESIUM_RTC_MODELVIEW : function(uniformState, model) {\n            return ModelUtility.getGltfSemanticUniforms().CESIUM_RTC_MODELVIEW(uniformState, model);\n        },\n        MODELVIEWPROJECTION : function(uniformState, model) {\n            return ModelUtility.getGltfSemanticUniforms().MODELVIEWPROJECTION(uniformState, model);\n        }\n    };\n\n    function createUniformMap(model, context) {\n        if (defined(model._uniformMap)) {\n            return;\n        }\n\n        var uniformMap = {};\n        ForEach.technique(model.gltf, function(technique) {\n            ForEach.techniqueUniform(technique, function(uniform, uniformName) {\n                if (!defined(uniform.semantic) || !defined(gltfSemanticUniforms[uniform.semantic])) {\n                    return;\n                }\n\n                uniformMap[uniformName] = gltfSemanticUniforms[uniform.semantic](context.uniformState, model);\n            });\n        });\n\n        model._uniformMap = uniformMap;\n    }\n\n    function createUniformsForQuantizedAttributes(model, primitive) {\n        return ModelUtility.createUniformsForQuantizedAttributes(model.gltf, primitive, model._quantizedUniforms);\n    }\n\n    function triangleCountFromPrimitiveIndices(primitive, indicesCount) {\n        switch (primitive.mode) {\n            case PrimitiveType.TRIANGLES:\n                return (indicesCount / 3);\n            case PrimitiveType.TRIANGLE_STRIP:\n            case PrimitiveType.TRIANGLE_FAN:\n                return Math.max(indicesCount - 2, 0);\n            default:\n                return 0;\n        }\n    }\n\n    function createPrimitive(model) {\n        var batchTable = model._batchTable;\n\n        var uniformMap = model._uniformMap;\n        var vertexArray = model._vertexArray;\n\n        var gltf = model.gltf;\n        var accessors = gltf.accessors;\n        var gltfMeshes = gltf.meshes;\n        var primitive = gltfMeshes[0].primitives[0];\n        var ix = accessors[primitive.indices];\n\n        var positionAccessor = primitive.attributes.POSITION;\n        var minMax = ModelUtility.getAccessorMinMax(gltf, positionAccessor);\n        var boundingSphere = BoundingSphere.fromCornerPoints(Cartesian3.fromArray(minMax.min), Cartesian3.fromArray(minMax.max));\n\n        var offset;\n        var count;\n        if (defined(ix)) {\n            count = ix.count;\n            offset = (ix.byteOffset / IndexDatatype.getSizeInBytes(ix.componentType));  // glTF has offset in bytes.  Cesium has offsets in indices\n        }\n        else {\n            var positions = accessors[primitive.attributes.POSITION];\n            count = positions.count;\n            offset = 0;\n        }\n\n        // Update model triangle count using number of indices\n        model._trianglesLength += triangleCountFromPrimitiveIndices(primitive, count);\n\n        // Allow callback to modify the uniformMap\n        if (defined(model._uniformMapLoaded)) {\n            uniformMap = model._uniformMapLoaded(uniformMap);\n        }\n\n        // Add uniforms for decoding quantized attributes if used\n        if (model.extensionsUsed.WEB3D_quantized_attributes) {\n            var quantizedUniformMap = createUniformsForQuantizedAttributes(model, primitive);\n            uniformMap = combine(uniformMap, quantizedUniformMap);\n        }\n\n        var attribute = vertexArray.attributes.POSITION;\n        var componentDatatype = attribute.componentDatatype;\n        var typedArray = attribute.vertexBuffer;\n        var byteOffset = typedArray.byteOffset;\n        var bufferLength = typedArray.byteLength / ComponentDatatype.getSizeInBytes(componentDatatype);\n        var positionsBuffer = ComponentDatatype.createArrayBufferView(componentDatatype, typedArray.buffer, byteOffset, bufferLength);\n\n        attribute = vertexArray.attributes._BATCHID;\n        componentDatatype = attribute.componentDatatype;\n        typedArray = attribute.vertexBuffer;\n        byteOffset = typedArray.byteOffset;\n        bufferLength = typedArray.byteLength / ComponentDatatype.getSizeInBytes(componentDatatype);\n        var vertexBatchIds = ComponentDatatype.createArrayBufferView(componentDatatype, typedArray.buffer, byteOffset, bufferLength);\n\n        var buffer = vertexArray.indexBuffer.typedArray;\n        var indices;\n        if (vertexArray.indexBuffer.indexDatatype === IndexDatatype.UNSIGNED_SHORT) {\n            indices = new Uint16Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n        } else {\n            indices = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n        }\n\n        positionsBuffer = arraySlice(positionsBuffer);\n        vertexBatchIds = arraySlice(vertexBatchIds);\n        indices = arraySlice(indices, offset, offset + count);\n\n        var batchIds = [];\n        var indexCounts = [];\n        var indexOffsets = [];\n        var batchedIndices = [];\n\n        var currentId = vertexBatchIds[indices[0]];\n        batchIds.push(currentId);\n        indexOffsets.push(0);\n\n        var batchId;\n        var indexOffset;\n        var indexCount;\n        var indicesLength = indices.length;\n        for (var j = 1; j < indicesLength; ++j) {\n            batchId = vertexBatchIds[indices[j]];\n            if (batchId !== currentId) {\n                indexOffset = indexOffsets[indexOffsets.length - 1];\n                indexCount = j - indexOffset;\n\n                batchIds.push(batchId);\n                indexCounts.push(indexCount);\n                indexOffsets.push(j);\n\n                batchedIndices.push(new Vector3DTileBatch({\n                    offset : indexOffset,\n                    count : indexCount,\n                    batchIds : [currentId],\n                    color : Color.WHITE\n                }));\n\n                currentId = batchId;\n            }\n        }\n\n        indexOffset = indexOffsets[indexOffsets.length - 1];\n        indexCount = indicesLength - indexOffset;\n\n        indexCounts.push(indexCount);\n        batchedIndices.push(new Vector3DTileBatch({\n            offset : indexOffset,\n            count : indexCount,\n            batchIds : [currentId],\n            color : Color.WHITE\n        }));\n\n        var shader = model._shaderProgram;\n        var vertexShaderSource = shader.vertexShaderSource;\n        var fragmentShaderSource = shader.fragmentShaderSource;\n        var attributeLocations = shader.attributeLocations;\n        var pickId = defined(model._pickIdLoaded) ? model._pickIdLoaded() : undefined;\n\n        model._primitive = new Vector3DTilePrimitive({\n            classificationType : model._classificationType,\n            positions : positionsBuffer,\n            indices : indices,\n            indexOffsets : indexOffsets,\n            indexCounts : indexCounts,\n            batchIds : batchIds,\n            vertexBatchIds : vertexBatchIds,\n            batchedIndices : batchedIndices,\n            batchTable : batchTable,\n            boundingVolume : new BoundingSphere(), // updated in update()\n            _vertexShaderSource : vertexShaderSource,\n            _fragmentShaderSource : fragmentShaderSource,\n            _attributeLocations : attributeLocations,\n            _uniformMap : uniformMap,\n            _pickId : pickId,\n            _modelMatrix : new Matrix4(), // updated in update()\n            _boundingSphere : boundingSphere // used to update boundingVolume\n        });\n\n        // Release CPU resources\n        model._buffers = undefined;\n        model._vertexArray = undefined;\n        model._shaderProgram = undefined;\n        model._uniformMap = undefined;\n    }\n\n    function createRuntimeNodes(model) {\n        var loadResources = model._loadResources;\n        if (!loadResources.finished()) {\n            return;\n        }\n\n        if (defined(model._primitive)) {\n            return;\n        }\n\n        var gltf = model.gltf;\n        var nodes = gltf.nodes;\n        var gltfNode = nodes[0];\n        model._nodeMatrix = ModelUtility.getTransform(gltfNode, model._nodeMatrix);\n\n        createPrimitive(model);\n    }\n\n    function createResources(model, frameState) {\n        var context = frameState.context;\n\n        ModelUtility.checkSupportedGlExtensions(model.gltf.glExtensionsUsed, context);\n        createBuffers(model); // using glTF bufferViews\n        createProgram(model);\n        createVertexArray(model); // using glTF meshes\n        createUniformMap(model, context);  // using glTF materials/techniques\n        createRuntimeNodes(model); // using glTF scene\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var scratchComputedTranslation = new Cartesian4();\n    var scratchComputedMatrixIn2D = new Matrix4();\n\n    function updateNodeModelMatrix(model, modelTransformChanged, justLoaded, projection) {\n        var computedModelMatrix = model._computedModelMatrix;\n\n        if ((model._mode !== SceneMode.SCENE3D) && !model._ignoreCommands) {\n            var translation = Matrix4.getColumn(computedModelMatrix, 3, scratchComputedTranslation);\n            if (!Cartesian4.equals(translation, Cartesian4.UNIT_W)) {\n                computedModelMatrix = Transforms.basisTo2D(projection, computedModelMatrix, scratchComputedMatrixIn2D);\n                model._rtcCenter = model._rtcCenter3D;\n            } else {\n                var center = model.boundingSphere.center;\n                var to2D = Transforms.wgs84To2DModelMatrix(projection, center, scratchComputedMatrixIn2D);\n                computedModelMatrix = Matrix4.multiply(to2D, computedModelMatrix, scratchComputedMatrixIn2D);\n\n                if (defined(model._rtcCenter)) {\n                    Matrix4.setTranslation(computedModelMatrix, Cartesian4.UNIT_W, computedModelMatrix);\n                    model._rtcCenter = model._rtcCenter2D;\n                }\n            }\n        }\n\n        var primitive = model._primitive;\n\n        if (modelTransformChanged || justLoaded) {\n            Matrix4.multiplyTransformation(computedModelMatrix, model._nodeMatrix, primitive._modelMatrix);\n            BoundingSphere.transform(primitive._boundingSphere, primitive._modelMatrix, primitive._boundingVolume);\n\n            if (defined(model._rtcCenter)) {\n                Cartesian3.add(model._rtcCenter, primitive._boundingVolume.center, primitive._boundingVolume.center);\n            }\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    ClassificationModel.prototype.updateCommands = function(batchId, color) {\n        this._primitive.updateCommands(batchId, color);\n    };\n\n    ClassificationModel.prototype.update = function(frameState) {\n        if (frameState.mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        if (!FeatureDetection.supportsWebP.initialized) {\n            FeatureDetection.supportsWebP.initialize();\n            return;\n        }\n        var supportsWebP = FeatureDetection.supportsWebP();\n\n        if ((this._state === ModelState.NEEDS_LOAD) && defined(this.gltf)) {\n            this._state = ModelState.LOADING;\n            if (this._state !== ModelState.FAILED) {\n                var extensions = this.gltf.extensions;\n                if (defined(extensions) && defined(extensions.CESIUM_RTC)) {\n                    var center = Cartesian3.fromArray(extensions.CESIUM_RTC.center);\n                    if (!Cartesian3.equals(center, Cartesian3.ZERO)) {\n                        this._rtcCenter3D = center;\n\n                        var projection = frameState.mapProjection;\n                        var ellipsoid = projection.ellipsoid;\n                        var cartographic = ellipsoid.cartesianToCartographic(this._rtcCenter3D);\n                        var projectedCart = projection.project(cartographic);\n                        Cartesian3.fromElements(projectedCart.z, projectedCart.x, projectedCart.y, projectedCart);\n                        this._rtcCenter2D = projectedCart;\n\n                        this._rtcCenterEye = new Cartesian3();\n                        this._rtcCenter = this._rtcCenter3D;\n                    }\n                }\n\n                this._loadResources = new ModelLoadResources();\n                ModelUtility.parseBuffers(this);\n            }\n        }\n\n        var loadResources = this._loadResources;\n        var justLoaded = false;\n\n        if (this._state === ModelState.LOADING) {\n            // Transition from LOADING -> LOADED once resources are downloaded and created.\n            // Textures may continue to stream in while in the LOADED state.\n            if (loadResources.pendingBufferLoads === 0) {\n                ModelUtility.checkSupportedExtensions(this.extensionsRequired, supportsWebP);\n\n                addBuffersToLoadResources(this);\n                parseBufferViews(this);\n\n                this._boundingSphere = ModelUtility.computeBoundingSphere(this);\n                this._initialRadius = this._boundingSphere.radius;\n                createResources(this, frameState);\n            }\n            if (loadResources.finished()) {\n                this._state = ModelState.LOADED;\n                justLoaded = true;\n            }\n        }\n\n        if (defined(loadResources) && (this._state === ModelState.LOADED)) {\n            if (!justLoaded) {\n                createResources(this, frameState);\n            }\n\n            if (loadResources.finished()) {\n                this._loadResources = undefined;  // Clear CPU memory since WebGL resources were created.\n            }\n        }\n\n        var show = this.show;\n\n        if ((show && this._state === ModelState.LOADED) || justLoaded) {\n            this._dirty = false;\n            var modelMatrix = this.modelMatrix;\n\n            var modeChanged = frameState.mode !== this._mode;\n            this._mode = frameState.mode;\n\n            // ClassificationModel's model matrix needs to be updated\n            var modelTransformChanged = !Matrix4.equals(this._modelMatrix, modelMatrix) || modeChanged;\n\n            if (modelTransformChanged || justLoaded) {\n                Matrix4.clone(modelMatrix, this._modelMatrix);\n\n                var computedModelMatrix = this._computedModelMatrix;\n                Matrix4.clone(modelMatrix, computedModelMatrix);\n                if (this._upAxis === Axis.Y) {\n                    Matrix4.multiplyTransformation(computedModelMatrix, Axis.Y_UP_TO_Z_UP, computedModelMatrix);\n                } else if (this._upAxis === Axis.X) {\n                    Matrix4.multiplyTransformation(computedModelMatrix, Axis.X_UP_TO_Z_UP, computedModelMatrix);\n                }\n            }\n\n            // Update modelMatrix throughout the graph as needed\n            if (modelTransformChanged || justLoaded) {\n                updateNodeModelMatrix(this, modelTransformChanged, justLoaded, frameState.mapProjection);\n                this._dirty = true;\n            }\n        }\n\n        if (justLoaded) {\n            // Called after modelMatrix update.\n            var model = this;\n            frameState.afterRender.push(function() {\n                model._ready = true;\n                model._readyPromise.resolve(model);\n            });\n            return;\n        }\n\n        if (show && !this._ignoreCommands) {\n            this._primitive.debugShowBoundingVolume = this.debugShowBoundingVolume;\n            this._primitive.debugWireframe = this.debugWireframe;\n            this._primitive.update(frameState);\n        }\n    };\n\n    ClassificationModel.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    ClassificationModel.prototype.destroy = function() {\n        this._primitive = this._primitive && this._primitive.destroy();\n        return destroyObject(this);\n    };\nexport default ClassificationModel;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport deprecationWarning from '../Core/deprecationWarning.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport RequestType from '../Core/RequestType.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Pass from '../Renderer/Pass.js';\nimport Axis from './Axis.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Cesium3DTileFeature from './Cesium3DTileFeature.js';\nimport Cesium3DTileFeatureTable from './Cesium3DTileFeatureTable.js';\nimport ClassificationModel from './ClassificationModel.js';\nimport Model from './Model.js';\nimport ModelUtility from './ModelUtility.js';\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel|Batched 3D Model}\n     * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Batched3DModel3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Batched3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._model = undefined;\n        this._batchTable = undefined;\n        this._features = undefined;\n\n        // Populate from gltf when available\n        this._batchIdAttributeName = undefined;\n        this._diffuseAttributeOrUniformName = {};\n\n        this._rtcCenterTransform = undefined;\n        this._contentModelMatrix = undefined;\n\n        this.featurePropertiesDirty = false;\n\n        initialize(this, arrayBuffer, byteOffset);\n    }\n\n    // This can be overridden for testing purposes\n    Batched3DModel3DTileContent._deprecationWarning = deprecationWarning;\n\n    Object.defineProperties(Batched3DModel3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return this._batchTable.featuresLength;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                return this._model.trianglesLength;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                return this._model.geometryByteLength;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                return this._model.texturesByteLength;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return this._batchTable.memorySizeInBytes;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._model.readyPromise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url: {\n            get: function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return this._batchTable;\n            }\n        }\n    });\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n    function getBatchIdAttributeName(gltf) {\n        var batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(gltf, '_BATCHID');\n        if (!defined(batchIdAttributeName)) {\n            batchIdAttributeName = ModelUtility.getAttributeOrUniformBySemantic(gltf, 'BATCHID');\n            if (defined(batchIdAttributeName)) {\n                Batched3DModel3DTileContent._deprecationWarning('b3dm-legacy-batchid', 'The glTF in this b3dm uses the semantic `BATCHID`. Application-specific semantics should be prefixed with an underscore: `_BATCHID`.');\n            }\n        }\n        return batchIdAttributeName;\n    }\n\n    function getVertexShaderCallback(content) {\n        return function(vs, programId) {\n            var batchTable = content._batchTable;\n            var handleTranslucent = !defined(content._tileset.classificationType);\n\n            var gltf = content._model.gltf;\n            if (defined(gltf)) {\n                content._batchIdAttributeName = getBatchIdAttributeName(gltf);\n                content._diffuseAttributeOrUniformName[programId] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n            }\n\n            var callback = batchTable.getVertexShaderCallback(handleTranslucent, content._batchIdAttributeName, content._diffuseAttributeOrUniformName[programId]);\n            return defined(callback) ? callback(vs) : vs;\n        };\n    }\n\n    function getFragmentShaderCallback(content) {\n        return function(fs, programId) {\n            var batchTable = content._batchTable;\n            var handleTranslucent = !defined(content._tileset.classificationType);\n\n            var gltf = content._model.gltf;\n            if (defined(gltf)) {\n                content._diffuseAttributeOrUniformName[programId] = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n            }\n            var callback = batchTable.getFragmentShaderCallback(handleTranslucent, content._diffuseAttributeOrUniformName[programId]);\n            return defined(callback) ? callback(fs) : fs;\n        };\n    }\n\n    function getPickIdCallback(content) {\n        return function() {\n            return content._batchTable.getPickId();\n        };\n    }\n\n    function getClassificationFragmentShaderCallback(content) {\n        return function(fs) {\n            var batchTable = content._batchTable;\n            var callback = batchTable.getClassificationFragmentShaderCallback();\n            return defined(callback) ? callback(fs) : fs;\n        };\n    }\n\n    function createColorChangedCallback(content) {\n        return function(batchId, color) {\n            content._model.updateCommands(batchId, color);\n        };\n    }\n\n    function initialize(content, arrayBuffer, byteOffset) {\n        var tileset = content._tileset;\n        var tile = content._tile;\n        var resource = content._resource;\n\n        var byteStart = defaultValue(byteOffset, 0);\n        byteOffset = byteStart;\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Batched 3D Model version 1 is supported.  Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var byteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchLength;\n\n        // Legacy header #1: [batchLength] [batchTableByteLength]\n        // Legacy header #2: [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]\n        // Current header: [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n        // If the header is in the first legacy format 'batchTableJsonByteLength' will be the start of the JSON string (a quotation mark) or the glTF magic.\n        // Accordingly its first byte will be either 0x22 or 0x67, and so the minimum uint32 expected is 0x22000000 = 570425344 = 570MB. It is unlikely that the feature table JSON will exceed this length.\n        // The check for the second legacy format is similar, except it checks 'batchTableBinaryByteLength' instead\n        if (batchTableJsonByteLength >= 570425344) {\n            // First legacy check\n            byteOffset -= sizeOfUint32 * 2;\n            batchLength = featureTableJsonByteLength;\n            batchTableJsonByteLength = featureTableBinaryByteLength;\n            batchTableBinaryByteLength = 0;\n            featureTableJsonByteLength = 0;\n            featureTableBinaryByteLength = 0;\n            Batched3DModel3DTileContent._deprecationWarning('b3dm-legacy-header', 'This b3dm header is using the legacy format [batchLength] [batchTableByteLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.');\n        } else if (batchTableBinaryByteLength >= 570425344) {\n            // Second legacy check\n            byteOffset -= sizeOfUint32;\n            batchLength = batchTableJsonByteLength;\n            batchTableJsonByteLength = featureTableJsonByteLength;\n            batchTableBinaryByteLength = featureTableBinaryByteLength;\n            featureTableJsonByteLength = 0;\n            featureTableBinaryByteLength = 0;\n            Batched3DModel3DTileContent._deprecationWarning('b3dm-legacy-header', 'This b3dm header is using the legacy format [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength]. The new format is [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength] from https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Batched3DModel.');\n        }\n\n        var featureTableJson;\n        if (featureTableJsonByteLength === 0) {\n            featureTableJson = {\n                BATCH_LENGTH : defaultValue(batchLength, 0)\n            };\n        } else {\n            var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJsonByteLength);\n            featureTableJson = JSON.parse(featureTableString);\n            byteOffset += featureTableJsonByteLength;\n        }\n\n        var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n        byteOffset += featureTableBinaryByteLength;\n\n        var featureTable = new Cesium3DTileFeatureTable(featureTableJson, featureTableBinary);\n\n        batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n        featureTable.featuresLength = batchLength;\n\n        var batchTableJson;\n        var batchTableBinary;\n        if (batchTableJsonByteLength > 0) {\n            // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n            // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n            //\n            // We could also make another request for it, but that would make the property set/get\n            // API async, and would double the number of numbers in some cases.\n            var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJsonByteLength);\n            batchTableJson = JSON.parse(batchTableString);\n            byteOffset += batchTableJsonByteLength;\n\n            if (batchTableBinaryByteLength > 0) {\n                // Has a batch table binary\n                batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n                // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n                batchTableBinary = new Uint8Array(batchTableBinary);\n                byteOffset += batchTableBinaryByteLength;\n            }\n        }\n\n        var colorChangedCallback;\n        if (defined(tileset.classificationType)) {\n            colorChangedCallback = createColorChangedCallback(content);\n        }\n\n        var batchTable = new Cesium3DTileBatchTable(content, batchLength, batchTableJson, batchTableBinary, colorChangedCallback);\n        content._batchTable = batchTable;\n\n        var gltfByteLength = byteStart + byteLength - byteOffset;\n        if (gltfByteLength === 0) {\n            throw new RuntimeError('glTF byte length must be greater than 0.');\n        }\n\n        var gltfView;\n        if (byteOffset % 4 === 0) {\n            gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n        } else {\n            // Create a copy of the glb so that it is 4-byte aligned\n            Batched3DModel3DTileContent._deprecationWarning('b3dm-glb-unaligned', 'The embedded glb is not aligned to a 4-byte boundary.');\n            gltfView = new Uint8Array(uint8Array.subarray(byteOffset, byteOffset + gltfByteLength));\n        }\n\n        var pickObject = {\n            content : content,\n            primitive : tileset\n        };\n\n        content._rtcCenterTransform = Matrix4.IDENTITY;\n        var rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', ComponentDatatype.FLOAT, 3);\n        if (defined(rtcCenter)) {\n            content._rtcCenterTransform = Matrix4.fromTranslation(Cartesian3.fromArray(rtcCenter));\n        }\n\n        content._contentModelMatrix = Matrix4.multiply(tile.computedTransform, content._rtcCenterTransform, new Matrix4());\n\n        if (!defined(tileset.classificationType)) {\n            // PERFORMANCE_IDEA: patch the shader on demand, e.g., the first time show/color changes.\n            // The pick shader still needs to be patched.\n            content._model = new Model({\n                gltf : gltfView,\n                cull : false,           // The model is already culled by 3D Tiles\n                releaseGltfJson : true, // Models are unique and will not benefit from caching so save memory\n                opaquePass : Pass.CESIUM_3D_TILE, // Draw opaque portions of the model during the 3D Tiles pass\n                basePath : resource,\n                requestType : RequestType.TILES3D,\n                modelMatrix: content._contentModelMatrix,\n                upAxis : tileset._gltfUpAxis,\n                forwardAxis : Axis.X,\n                shadows: tileset.shadows,\n                debugWireframe: tileset.debugWireframe,\n                incrementallyLoadTextures : false,\n                vertexShaderLoaded : getVertexShaderCallback(content),\n                fragmentShaderLoaded : getFragmentShaderCallback(content),\n                uniformMapLoaded : batchTable.getUniformMapCallback(),\n                pickIdLoaded : getPickIdCallback(content),\n                addBatchIdToGeneratedShaders : (batchLength > 0), // If the batch table has values in it, generated shaders will need a batchId attribute\n                pickObject : pickObject,\n                imageBasedLightingFactor : tileset.imageBasedLightingFactor,\n                lightColor : tileset.lightColor,\n                luminanceAtZenith : tileset.luminanceAtZenith,\n                sphericalHarmonicCoefficients : tileset.sphericalHarmonicCoefficients,\n                specularEnvironmentMaps : tileset.specularEnvironmentMaps\n            });\n        } else {\n            // This transcodes glTF to an internal representation for geometry so we can take advantage of the re-batching of vector data.\n            // For a list of limitations on the input glTF, see the documentation for classificationType of Cesium3DTileset.\n            content._model = new ClassificationModel({\n                gltf : gltfView,\n                cull : false,           // The model is already culled by 3D Tiles\n                basePath : resource,\n                requestType : RequestType.TILES3D,\n                modelMatrix: content._contentModelMatrix,\n                upAxis : tileset._gltfUpAxis,\n                forwardAxis : Axis.X,\n                debugWireframe : tileset.debugWireframe,\n                vertexShaderLoaded : getVertexShaderCallback(content),\n                classificationShaderLoaded : getClassificationFragmentShaderCallback(content),\n                uniformMapLoaded : batchTable.getUniformMapCallback(),\n                pickIdLoaded : getPickIdCallback(content),\n                classificationType : tileset._classificationType,\n                batchTable : batchTable\n            });\n        }\n    }\n\n    function createFeatures(content) {\n        var featuresLength = content.featuresLength;\n        if (!defined(content._features) && (featuresLength > 0)) {\n            var features = new Array(featuresLength);\n            for (var i = 0; i < featuresLength; ++i) {\n                features[i] = new Cesium3DTileFeature(content, i);\n            }\n            content._features = features;\n        }\n    }\n\n    Batched3DModel3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return this._batchTable.hasProperty(batchId, name);\n    };\n\n    Batched3DModel3DTileContent.prototype.getFeature = function(batchId) {\n        \n\n        createFeatures(this);\n        return this._features[batchId];\n    };\n\n    Batched3DModel3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        color = enabled ? color : Color.WHITE;\n        if (this.featuresLength === 0) {\n            this._model.color = color;\n        } else {\n            this._batchTable.setAllColor(color);\n        }\n    };\n\n    Batched3DModel3DTileContent.prototype.applyStyle = function(style) {\n        if (this.featuresLength === 0) {\n            var hasColorStyle = defined(style) && defined(style.color);\n            var hasShowStyle = defined(style) && defined(style.show);\n            this._model.color = hasColorStyle ? style.color.evaluateColor(undefined, this._model.color) : Color.clone(Color.WHITE, this._model.color);\n            this._model.show = hasShowStyle ? style.show.evaluate(undefined) : true;\n        } else {\n            this._batchTable.applyStyle(style);\n        }\n    };\n\n    Batched3DModel3DTileContent.prototype.update = function(tileset, frameState) {\n        var commandStart = frameState.commandList.length;\n\n        // In the PROCESSING state we may be calling update() to move forward\n        // the content's resource loading.  In the READY state, it will\n        // actually generate commands.\n        this._batchTable.update(tileset, frameState);\n\n        this._contentModelMatrix = Matrix4.multiply(this._tile.computedTransform, this._rtcCenterTransform, this._contentModelMatrix);\n        this._model.modelMatrix = this._contentModelMatrix;\n\n        this._model.shadows = this._tileset.shadows;\n        this._model.imageBasedLightingFactor = this._tileset.imageBasedLightingFactor;\n        this._model.lightColor = this._tileset.lightColor;\n        this._model.luminanceAtZenith = this._tileset.luminanceAtZenith;\n        this._model.sphericalHarmonicCoefficients = this._tileset.sphericalHarmonicCoefficients;\n        this._model.specularEnvironmentMaps = this._tileset.specularEnvironmentMaps;\n        this._model.debugWireframe = this._tileset.debugWireframe;\n\n        // Update clipping planes\n        var tilesetClippingPlanes = this._tileset.clippingPlanes;\n        this._model.clippingPlanesOriginMatrix = this._tileset.clippingPlanesOriginMatrix;\n        if (defined(tilesetClippingPlanes) && this._tile.clippingPlanesDirty) {\n            // Dereference the clipping planes from the model if they are irrelevant.\n            // Link/Dereference directly to avoid ownership checks.\n            // This will also trigger synchronous shader regeneration to remove or add the clipping plane and color blending code.\n            this._model._clippingPlanes = (tilesetClippingPlanes.enabled && this._tile._isClipped) ? tilesetClippingPlanes : undefined;\n        }\n\n        // If the model references a different ClippingPlaneCollection due to the tileset's collection being replaced with a\n        // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n        if (defined(tilesetClippingPlanes) && defined(this._model._clippingPlanes) && this._model._clippingPlanes !== tilesetClippingPlanes) {\n            this._model._clippingPlanes = tilesetClippingPlanes;\n        }\n\n        this._model.update(frameState);\n\n        // If any commands were pushed, add derived commands\n        var commandEnd = frameState.commandList.length;\n        if ((commandStart < commandEnd) && (frameState.passes.render || frameState.passes.pick) && !defined(tileset.classificationType)) {\n            this._batchTable.addDerivedCommands(frameState, commandStart);\n        }\n   };\n\n    Batched3DModel3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Batched3DModel3DTileContent.prototype.destroy = function() {\n        this._model = this._model && this._model.destroy();\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n        return destroyObject(this);\n    };\nexport default Batched3DModel3DTileContent;\n","import defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport getMagic from '../Core/getMagic.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport when from '../ThirdParty/when.js';\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Composite|Composite}\n     * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Composite3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Composite3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset, factory) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._contents = [];\n        this._readyPromise = when.defer();\n\n        initialize(this, arrayBuffer, byteOffset, factory);\n    }\n\n    Object.defineProperties(Composite3DTileContent.prototype, {\n        featurePropertiesDirty : {\n            get : function() {\n                var contents = this._contents;\n                var length = contents.length;\n                for (var i = 0; i < length; ++i) {\n                    if (contents[i].featurePropertiesDirty) {\n                        return true;\n                    }\n                }\n\n                return false;\n            },\n            set : function(value) {\n                var contents = this._contents;\n                var length = contents.length;\n                for (var i = 0; i < length; ++i) {\n                    contents[i].featurePropertiesDirty = value;\n                }\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>featuresLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        featuresLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>pointsLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>trianglesLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        trianglesLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>geometryByteLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        geometryByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.   <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>texturesByteLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n         * always returns <code>0</code>.  Instead call <code>batchTableByteLength</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        batchTableByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return this._contents;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url : {\n            get : function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface. <code>Composite3DTileContent</code>\n         * always returns <code>undefined</code>.  Instead call <code>batchTable</code> for a tile in the composite.\n         * @memberof Composite3DTileContent.prototype\n         */\n        batchTable : {\n            get : function() {\n                return undefined;\n            }\n        }\n    });\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n    function initialize(content, arrayBuffer, byteOffset, factory) {\n        byteOffset = defaultValue(byteOffset, 0);\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Composite Tile version 1 is supported. Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        // Skip byteLength\n        byteOffset += sizeOfUint32;\n\n        var tilesLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var contentPromises = [];\n\n        for (var i = 0; i < tilesLength; ++i) {\n            var tileType = getMagic(uint8Array, byteOffset);\n\n            // Tile byte length is stored after magic and version\n            var tileByteLength = view.getUint32(byteOffset + sizeOfUint32 * 2, true);\n\n            var contentFactory = factory[tileType];\n\n            if (defined(contentFactory)) {\n                var innerContent = contentFactory(content._tileset, content._tile, content._resource, arrayBuffer, byteOffset);\n                content._contents.push(innerContent);\n                contentPromises.push(innerContent.readyPromise);\n            } else {\n                throw new RuntimeError('Unknown tile content type, ' + tileType + ', inside Composite tile');\n            }\n\n            byteOffset += tileByteLength;\n        }\n\n        when.all(contentPromises).then(function() {\n            content._readyPromise.resolve(content);\n        }).otherwise(function(error) {\n            content._readyPromise.reject(error);\n        });\n    }\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n     * always returns <code>false</code>.  Instead call <code>hasProperty</code> for a tile in the composite.\n     */\n    Composite3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return false;\n    };\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Composite3DTileContent</code>\n     * always returns <code>undefined</code>.  Instead call <code>getFeature</code> for a tile in the composite.\n     */\n    Composite3DTileContent.prototype.getFeature = function(batchId) {\n        return undefined;\n    };\n\n    Composite3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        var contents = this._contents;\n        var length = contents.length;\n        for (var i = 0; i < length; ++i) {\n            contents[i].applyDebugSettings(enabled, color);\n        }\n    };\n\n    Composite3DTileContent.prototype.applyStyle = function(style) {\n        var contents = this._contents;\n        var length = contents.length;\n        for (var i = 0; i < length; ++i) {\n            contents[i].applyStyle(style);\n        }\n    };\n\n    Composite3DTileContent.prototype.update = function(tileset, frameState) {\n        var contents = this._contents;\n        var length = contents.length;\n        for (var i = 0; i < length; ++i) {\n            contents[i].update(tileset, frameState);\n        }\n    };\n\n    Composite3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Composite3DTileContent.prototype.destroy = function() {\n        var contents = this._contents;\n        var length = contents.length;\n        for (var i = 0; i < length; ++i) {\n            contents[i].destroy();\n        }\n        return destroyObject(this);\n    };\nexport default Composite3DTileContent;\n","import arraySlice from '../Core/arraySlice.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport TaskProcessor from '../Core/TaskProcessor.js';\nimport when from '../ThirdParty/when.js';\nimport ClassificationType from './ClassificationType.js';\nimport Vector3DTileBatch from './Vector3DTileBatch.js';\nimport Vector3DTilePrimitive from './Vector3DTilePrimitive.js';\n\n    /**\n     * Creates a batch of box, cylinder, ellipsoid and/or sphere geometries intersecting terrain or 3D Tiles.\n     *\n     * @alias Vector3DTileGeometry\n     * @constructor\n     *\n     * @param {Object} options An object with following properties:\n     * @param {Float32Array} [options.boxes] The boxes in the tile.\n     * @param {Uint16Array} [options.boxBatchIds] The batch ids for each box.\n     * @param {Float32Array} [options.cylinders] The cylinders in the tile.\n     * @param {Uint16Array} [options.cylinderBatchIds] The batch ids for each cylinder.\n     * @param {Float32Array} [options.ellipsoids] The ellipsoids in the tile.\n     * @param {Uint16Array} [options.ellipsoidBatchIds] The batch ids for each ellipsoid.\n     * @param {Float32Array} [options.spheres] The spheres in the tile.\n     * @param {Uint16Array} [options.sphereBatchIds] The batch ids for each sphere.\n     * @param {Cartesian3} options.center The RTC center of all geometries.\n     * @param {Matrix4} options.modelMatrix The model matrix of all geometries. Applied after the individual geometry model matrices.\n     * @param {Cesium3DTileBatchTable} options.batchTable The batch table.\n     * @param {BoundingSphere} options.boundingVolume The bounding volume containing all of the geometry in the tile.\n     *\n     * @private\n     */\n    function Vector3DTileGeometry(options) {\n        // these will all be released after the primitive is created\n        this._boxes = options.boxes;\n        this._boxBatchIds = options.boxBatchIds;\n        this._cylinders = options.cylinders;\n        this._cylinderBatchIds = options.cylinderBatchIds;\n        this._ellipsoids = options.ellipsoids;\n        this._ellipsoidBatchIds = options.ellipsoidBatchIds;\n        this._spheres = options.spheres;\n        this._sphereBatchIds = options.sphereBatchIds;\n        this._modelMatrix = options.modelMatrix;\n        this._batchTable = options.batchTable;\n        this._boundingVolume = options.boundingVolume;\n\n        this._center = options.center;\n        if (!defined(this._center)) {\n            if (defined(this._boundingVolume)) {\n                this._center = Cartesian3.clone(this._boundingVolume.center);\n            } else {\n                this._center = Cartesian3.clone(Cartesian3.ZERO);\n            }\n        }\n\n        this._boundingVolumes = undefined;\n        this._batchedIndices = undefined;\n\n        this._indices = undefined;\n        this._indexOffsets = undefined;\n        this._indexCounts = undefined;\n\n        this._positions = undefined;\n        this._vertexBatchIds = undefined;\n\n        this._batchIds = undefined;\n\n        this._batchTableColors = undefined;\n        this._packedBuffer = undefined;\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n\n        this._verticesPromise = undefined;\n\n        this._primitive = undefined;\n\n        /**\n         * Draws the wireframe of the classification geometries.\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugWireframe = false;\n\n        /**\n         * Forces a re-batch instead of waiting after a number of frames have been rendered. For testing only.\n         * @type {Boolean}\n         * @default false\n         */\n        this.forceRebatch = false;\n\n        /**\n         * What this tile will classify.\n         * @type {ClassificationType}\n         * @default ClassificationType.BOTH\n         */\n        this.classificationType = ClassificationType.BOTH;\n    }\n\n    Object.defineProperties(Vector3DTileGeometry.prototype, {\n        /**\n         * Gets the number of triangles.\n         *\n         * @memberof Vector3DTileGeometry.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        trianglesLength : {\n            get : function() {\n                if (defined(this._primitive)) {\n                    return this._primitive.trianglesLength;\n                }\n                return 0;\n            }\n        },\n\n        /**\n         * Gets the geometry memory in bytes.\n         *\n         * @memberof Vector3DTileGeometry.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        geometryByteLength : {\n            get : function() {\n                if (defined(this._primitive)) {\n                    return this._primitive.geometryByteLength;\n                }\n                return 0;\n            }\n        },\n\n        /**\n         * Gets a promise that resolves when the primitive is ready to render.\n         * @memberof Vector3DTileGeometry.prototype\n         * @type {Promise}\n         * @readonly\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        }\n    });\n\n    Vector3DTileGeometry.packedBoxLength = Matrix4.packedLength + Cartesian3.packedLength;\n    Vector3DTileGeometry.packedCylinderLength = Matrix4.packedLength + 2;\n    Vector3DTileGeometry.packedEllipsoidLength = Matrix4.packedLength + Cartesian3.packedLength;\n    Vector3DTileGeometry.packedSphereLength = Cartesian3.packedLength + 1;\n\n    function packBuffer(geometries) {\n        var packedBuffer = new Float64Array(Matrix4.packedLength + Cartesian3.packedLength);\n\n        var offset = 0;\n        Cartesian3.pack(geometries._center, packedBuffer, offset);\n        offset += Cartesian3.packedLength;\n        Matrix4.pack(geometries._modelMatrix, packedBuffer, offset);\n\n        return packedBuffer;\n    }\n\n    function unpackBuffer(geometries, packedBuffer) {\n        var offset = 0;\n\n        var indicesBytesPerElement = packedBuffer[offset++];\n        var numBVS = packedBuffer[offset++];\n        var bvs = geometries._boundingVolumes = new Array(numBVS);\n\n        for (var i = 0; i < numBVS; ++i) {\n            bvs[i] = BoundingSphere.unpack(packedBuffer, offset);\n            offset += BoundingSphere.packedLength;\n        }\n\n        var numBatchedIndices = packedBuffer[offset++];\n        var bis = geometries._batchedIndices = new Array(numBatchedIndices);\n\n        for (var j = 0; j < numBatchedIndices; ++j) {\n            var color = Color.unpack(packedBuffer, offset);\n            offset += Color.packedLength;\n\n            var indexOffset = packedBuffer[offset++];\n            var count = packedBuffer[offset++];\n\n            var length = packedBuffer[offset++];\n            var batchIds = new Array(length);\n\n            for (var k = 0; k < length; ++k) {\n                batchIds[k] = packedBuffer[offset++];\n            }\n\n            bis[j] = new Vector3DTileBatch({\n                color : color,\n                offset : indexOffset,\n                count : count,\n                batchIds : batchIds\n            });\n        }\n\n        return indicesBytesPerElement;\n    }\n\n    var createVerticesTaskProcessor = new TaskProcessor('createVectorTileGeometries');\n    var scratchColor = new Color();\n\n    function createPrimitive(geometries) {\n        if (defined(geometries._primitive)) {\n            return;\n        }\n\n        if (!defined(geometries._verticesPromise)) {\n            var boxes = geometries._boxes;\n            var boxBatchIds = geometries._boxBatchIds;\n            var cylinders = geometries._cylinders;\n            var cylinderBatchIds = geometries._cylinderBatchIds;\n            var ellipsoids = geometries._ellipsoids;\n            var ellipsoidBatchIds = geometries._ellipsoidBatchIds;\n            var spheres = geometries._spheres;\n            var sphereBatchIds = geometries._sphereBatchIds;\n\n            var batchTableColors = geometries._batchTableColors;\n            var packedBuffer = geometries._packedBuffer;\n\n            if (!defined(batchTableColors)) {\n                // Copy because they may be the views on the same buffer.\n                var length = 0;\n                if (defined(geometries._boxes)) {\n                    boxes = geometries._boxes = arraySlice(boxes);\n                    boxBatchIds = geometries._boxBatchIds = arraySlice(boxBatchIds);\n                    length += boxBatchIds.length;\n                }\n                if (defined(geometries._cylinders)) {\n                    cylinders = geometries._cylinders = arraySlice(cylinders);\n                    cylinderBatchIds = geometries._cylinderBatchIds = arraySlice(cylinderBatchIds);\n                    length += cylinderBatchIds.length;\n                }\n                if (defined(geometries._ellipsoids)) {\n                    ellipsoids = geometries._ellipsoids = arraySlice(ellipsoids);\n                    ellipsoidBatchIds = geometries._ellipsoidBatchIds = arraySlice(ellipsoidBatchIds);\n                    length += ellipsoidBatchIds.length;\n                }\n                if (defined(geometries._spheres)) {\n                    spheres = geometries._sphere = arraySlice(spheres);\n                    sphereBatchIds = geometries._sphereBatchIds = arraySlice(sphereBatchIds);\n                    length += sphereBatchIds.length;\n                }\n\n                batchTableColors = geometries._batchTableColors = new Uint32Array(length);\n                var batchTable = geometries._batchTable;\n\n                for (var i = 0; i < length; ++i) {\n                    var color = batchTable.getColor(i, scratchColor);\n                    batchTableColors[i] = color.toRgba();\n                }\n\n                packedBuffer = geometries._packedBuffer = packBuffer(geometries);\n            }\n\n            var transferrableObjects = [];\n            if (defined(boxes)) {\n                transferrableObjects.push(boxes.buffer, boxBatchIds.buffer);\n            }\n            if (defined(cylinders)) {\n                transferrableObjects.push(cylinders.buffer, cylinderBatchIds.buffer);\n            }\n            if (defined(ellipsoids)) {\n                transferrableObjects.push(ellipsoids.buffer, ellipsoidBatchIds.buffer);\n            }\n            if (defined(spheres)) {\n                transferrableObjects.push(spheres.buffer, sphereBatchIds.buffer);\n            }\n            transferrableObjects.push(batchTableColors.buffer, packedBuffer.buffer);\n\n            var parameters = {\n                boxes : defined(boxes) ? boxes.buffer : undefined,\n                boxBatchIds : defined(boxes) ? boxBatchIds.buffer : undefined,\n                cylinders : defined(cylinders) ? cylinders.buffer : undefined,\n                cylinderBatchIds : defined(cylinders) ? cylinderBatchIds.buffer : undefined,\n                ellipsoids : defined(ellipsoids) ? ellipsoids.buffer : undefined,\n                ellipsoidBatchIds : defined(ellipsoids) ? ellipsoidBatchIds.buffer : undefined,\n                spheres : defined(spheres) ? spheres.buffer : undefined,\n                sphereBatchIds : defined(spheres) ? sphereBatchIds.buffer : undefined,\n                batchTableColors : batchTableColors.buffer,\n                packedBuffer : packedBuffer.buffer\n            };\n\n            var verticesPromise = geometries._verticesPromise = createVerticesTaskProcessor.scheduleTask(parameters, transferrableObjects);\n            if (!defined(verticesPromise)) {\n                // Postponed\n                return;\n            }\n\n            verticesPromise.then(function(result) {\n                var packedBuffer = new Float64Array(result.packedBuffer);\n                var indicesBytesPerElement = unpackBuffer(geometries, packedBuffer);\n\n                if (indicesBytesPerElement === 2) {\n                    geometries._indices = new Uint16Array(result.indices);\n                } else {\n                    geometries._indices = new Uint32Array(result.indices);\n                }\n\n                geometries._indexOffsets = new Uint32Array(result.indexOffsets);\n                geometries._indexCounts = new Uint32Array(result.indexCounts);\n\n                geometries._positions = new Float32Array(result.positions);\n                geometries._vertexBatchIds = new Uint16Array(result.vertexBatchIds);\n\n                geometries._batchIds = new Uint16Array(result.batchIds);\n\n                geometries._ready = true;\n            });\n        }\n\n        if (geometries._ready && !defined(geometries._primitive)) {\n            geometries._primitive = new Vector3DTilePrimitive({\n                batchTable : geometries._batchTable,\n                positions : geometries._positions,\n                batchIds : geometries._batchIds,\n                vertexBatchIds : geometries._vertexBatchIds,\n                indices : geometries._indices,\n                indexOffsets : geometries._indexOffsets,\n                indexCounts : geometries._indexCounts,\n                batchedIndices : geometries._batchedIndices,\n                boundingVolume : geometries._boundingVolume,\n                boundingVolumes : geometries._boundingVolumes,\n                center : geometries._center,\n                pickObject : defaultValue(geometries._pickObject, geometries)\n            });\n\n            geometries._boxes = undefined;\n            geometries._boxBatchIds = undefined;\n            geometries._cylinders = undefined;\n            geometries._cylinderBatchIds = undefined;\n            geometries._ellipsoids = undefined;\n            geometries._ellipsoidBatchIds = undefined;\n            geometries._spheres = undefined;\n            geometries._sphereBatchIds = undefined;\n            geometries._center = undefined;\n            geometries._modelMatrix = undefined;\n            geometries._batchTable = undefined;\n            geometries._boundingVolume = undefined;\n\n            geometries._boundingVolumes = undefined;\n            geometries._batchedIndices = undefined;\n\n            geometries._indices = undefined;\n            geometries._indexOffsets = undefined;\n            geometries._indexCounts = undefined;\n\n            geometries._positions = undefined;\n            geometries._vertexBatchIds = undefined;\n\n            geometries._batchIds = undefined;\n\n            geometries._batchTableColors = undefined;\n            geometries._packedBuffer = undefined;\n\n            geometries._verticesPromise = undefined;\n\n            geometries._readyPromise.resolve();\n        }\n    }\n\n    /**\n     * Creates features for each geometry and places it at the batch id index of features.\n     *\n     * @param {Vector3DTileContent} content The vector tile content.\n     * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n     */\n    Vector3DTileGeometry.prototype.createFeatures = function(content, features) {\n        this._primitive.createFeatures(content, features);\n    };\n\n    /**\n     * Colors the entire tile when enabled is true. The resulting color will be (geometry batch table color * color).\n     *\n     * @param {Boolean} enabled Whether to enable debug coloring.\n     * @param {Color} color The debug color.\n     */\n    Vector3DTileGeometry.prototype.applyDebugSettings = function(enabled, color) {\n        this._primitive.applyDebugSettings(enabled, color);\n    };\n\n    /**\n     * Apply a style to the content.\n     *\n     * @param {Cesium3DTileStyle} style The style.\n     * @param {Cesium3DTileFeature[]} features The array of features.\n     */\n    Vector3DTileGeometry.prototype.applyStyle = function(style, features) {\n        this._primitive.applyStyle(style, features);\n    };\n\n    /**\n     * Call when updating the color of a geometry with batchId changes color. The geometries will need to be re-batched\n     * on the next update.\n     *\n     * @param {Number} batchId The batch id of the geometries whose color has changed.\n     * @param {Color} color The new polygon color.\n     */\n    Vector3DTileGeometry.prototype.updateCommands = function(batchId, color) {\n        this._primitive.updateCommands(batchId, color);\n    };\n\n    /**\n     * Updates the batches and queues the commands for rendering.\n     *\n     * @param {FrameState} frameState The current frame state.\n     */\n    Vector3DTileGeometry.prototype.update = function(frameState) {\n        createPrimitive(this);\n\n        if (!this._ready) {\n            return;\n        }\n\n        this._primitive.debugWireframe = this.debugWireframe;\n        this._primitive.forceRebatch = this.forceRebatch;\n        this._primitive.classificationType = this.classificationType;\n        this._primitive.update(frameState);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    Vector3DTileGeometry.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    Vector3DTileGeometry.prototype.destroy = function() {\n        this._primitive = this._primitive && this._primitive.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTileGeometry;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport when from '../ThirdParty/when.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Vector3DTileGeometry from './Vector3DTileGeometry.js';\n\n    /**\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Geometry3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Geometry3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._geometries = undefined;\n\n        this._contentReadyPromise = undefined;\n        this._readyPromise = when.defer();\n\n        this._batchTable = undefined;\n        this._features = undefined;\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.\n         */\n        this.featurePropertiesDirty = false;\n\n        initialize(this, arrayBuffer, byteOffset);\n    }\n\n    Object.defineProperties(Geometry3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return defined(this._batchTable) ? this._batchTable.featuresLength : 0;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                if (defined(this._geometries)) {\n                    return this._geometries.trianglesLength;\n                }\n                return 0;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                if (defined(this._geometries)) {\n                    return this._geometries.geometryByteLength;\n                }\n                return 0;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return defined(this._batchTable) ? this._batchTable.memorySizeInBytes : 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url : {\n            get : function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return this._batchTable;\n            }\n        }\n    });\n\n    function createColorChangedCallback(content) {\n        return function(batchId, color) {\n            if (defined(content._geometries)) {\n                content._geometries.updateCommands(batchId, color);\n            }\n        };\n    }\n\n    function getBatchIds(featureTableJson, featureTableBinary) {\n        var boxBatchIds;\n        var cylinderBatchIds;\n        var ellipsoidBatchIds;\n        var sphereBatchIds;\n        var i;\n\n        var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n        var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n        var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n        var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n\n        if (numberOfBoxes > 0 && defined(featureTableJson.BOX_BATCH_IDS)) {\n            var boxBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.BOX_BATCH_IDS.byteOffset;\n            boxBatchIds = new Uint16Array(featureTableBinary.buffer, boxBatchIdsByteOffset, numberOfBoxes);\n        }\n\n        if (numberOfCylinders > 0 && defined(featureTableJson.CYLINDER_BATCH_IDS)) {\n            var cylinderBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.CYLINDER_BATCH_IDS.byteOffset;\n            cylinderBatchIds = new Uint16Array(featureTableBinary.buffer, cylinderBatchIdsByteOffset, numberOfCylinders);\n        }\n\n        if (numberOfEllipsoids > 0 && defined(featureTableJson.ELLIPSOID_BATCH_IDS)) {\n            var ellipsoidBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.ELLIPSOID_BATCH_IDS.byteOffset;\n            ellipsoidBatchIds = new Uint16Array(featureTableBinary.buffer, ellipsoidBatchIdsByteOffset, numberOfEllipsoids);\n        }\n\n        if (numberOfSpheres > 0 && defined(featureTableJson.SPHERE_BATCH_IDS)) {\n            var sphereBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.SPHERE_BATCH_IDS.byteOffset;\n            sphereBatchIds = new Uint16Array(featureTableBinary.buffer, sphereBatchIdsByteOffset, numberOfSpheres);\n        }\n\n        var atLeastOneDefined = defined(boxBatchIds) || defined(cylinderBatchIds) || defined(ellipsoidBatchIds) || defined(sphereBatchIds);\n        var atLeastOneUndefined = (numberOfBoxes > 0 && !defined(boxBatchIds)) ||\n                                  (numberOfCylinders > 0 && !defined(cylinderBatchIds)) ||\n                                  (numberOfEllipsoids > 0 && !defined(ellipsoidBatchIds)) ||\n                                  (numberOfSpheres > 0 && !defined(sphereBatchIds));\n\n        if (atLeastOneDefined && atLeastOneUndefined) {\n            throw new RuntimeError('If one group of batch ids is defined, then all batch ids must be defined.');\n        }\n\n        var allUndefinedBatchIds = !defined(boxBatchIds) && !defined(cylinderBatchIds) && !defined(ellipsoidBatchIds) && !defined(sphereBatchIds);\n        if (allUndefinedBatchIds) {\n            var id = 0;\n            if (!defined(boxBatchIds) && numberOfBoxes > 0) {\n                boxBatchIds = new Uint16Array(numberOfBoxes);\n                for (i = 0; i < numberOfBoxes; ++i) {\n                    boxBatchIds[i] = id++;\n                }\n            }\n            if (!defined(cylinderBatchIds) && numberOfCylinders > 0) {\n                cylinderBatchIds = new Uint16Array(numberOfCylinders);\n                for (i = 0; i < numberOfCylinders; ++i) {\n                    cylinderBatchIds[i] = id++;\n                }\n            }\n            if (!defined(ellipsoidBatchIds) && numberOfEllipsoids > 0) {\n                ellipsoidBatchIds = new Uint16Array(numberOfEllipsoids);\n                for (i = 0; i < numberOfEllipsoids; ++i) {\n                    ellipsoidBatchIds[i] = id++;\n                }\n            }\n            if (!defined(sphereBatchIds) && numberOfSpheres > 0) {\n                sphereBatchIds = new Uint16Array(numberOfSpheres);\n                for (i = 0; i < numberOfSpheres; ++i) {\n                    sphereBatchIds[i] = id++;\n                }\n            }\n        }\n\n        return {\n            boxes : boxBatchIds,\n            cylinders : cylinderBatchIds,\n            ellipsoids : ellipsoidBatchIds,\n            spheres : sphereBatchIds\n        };\n    }\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n    function initialize(content, arrayBuffer, byteOffset) {\n        byteOffset = defaultValue(byteOffset, 0);\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic number\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Geometry tile version 1 is supported.  Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var byteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        if (byteLength === 0) {\n            content._readyPromise.resolve(content);\n            return;\n        }\n\n        var featureTableJSONByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        if (featureTableJSONByteLength === 0) {\n            throw new RuntimeError('Feature table must have a byte length greater than zero');\n        }\n\n        var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var batchTableJSONByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJSONByteLength);\n        var featureTableJson = JSON.parse(featureTableString);\n        byteOffset += featureTableJSONByteLength;\n\n        var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n        byteOffset += featureTableBinaryByteLength;\n\n        var batchTableJson;\n        var batchTableBinary;\n        if (batchTableJSONByteLength > 0) {\n            // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n            // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n            //\n            // We could also make another request for it, but that would make the property set/get\n            // API async, and would double the number of numbers in some cases.\n            var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJSONByteLength);\n            batchTableJson = JSON.parse(batchTableString);\n            byteOffset += batchTableJSONByteLength;\n\n            if (batchTableBinaryByteLength > 0) {\n                // Has a batch table binary\n                batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n                // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n                batchTableBinary = new Uint8Array(batchTableBinary);\n            }\n        }\n\n        var numberOfBoxes = defaultValue(featureTableJson.BOXES_LENGTH, 0);\n        var numberOfCylinders = defaultValue(featureTableJson.CYLINDERS_LENGTH, 0);\n        var numberOfEllipsoids = defaultValue(featureTableJson.ELLIPSOIDS_LENGTH, 0);\n        var numberOfSpheres = defaultValue(featureTableJson.SPHERES_LENGTH, 0);\n\n        var totalPrimitives = numberOfBoxes + numberOfCylinders + numberOfEllipsoids + numberOfSpheres;\n\n        var batchTable = new Cesium3DTileBatchTable(content, totalPrimitives, batchTableJson, batchTableBinary, createColorChangedCallback(content));\n        content._batchTable = batchTable;\n\n        if (totalPrimitives === 0) {\n            return;\n        }\n\n        var modelMatrix = content.tile.computedTransform;\n\n        var center;\n        if (defined(featureTableJson.RTC_CENTER)) {\n            center = Cartesian3.unpack(featureTableJson.RTC_CENTER);\n            Matrix4.multiplyByPoint(modelMatrix, center, center);\n        }\n\n        var batchIds = getBatchIds(featureTableJson, featureTableBinary);\n\n        if (numberOfBoxes > 0 || numberOfCylinders > 0 || numberOfEllipsoids > 0 || numberOfSpheres > 0) {\n            var boxes;\n            var cylinders;\n            var ellipsoids;\n            var spheres;\n\n            if (numberOfBoxes > 0) {\n                var boxesByteOffset = featureTableBinary.byteOffset + featureTableJson.BOXES.byteOffset;\n                boxes = new Float32Array(featureTableBinary.buffer, boxesByteOffset, Vector3DTileGeometry.packedBoxLength * numberOfBoxes);\n            }\n\n            if (numberOfCylinders > 0) {\n                var cylindersByteOffset = featureTableBinary.byteOffset + featureTableJson.CYLINDERS.byteOffset;\n                cylinders = new Float32Array(featureTableBinary.buffer, cylindersByteOffset, Vector3DTileGeometry.packedCylinderLength * numberOfCylinders);\n            }\n\n            if (numberOfEllipsoids > 0) {\n                var ellipsoidsByteOffset = featureTableBinary.byteOffset + featureTableJson.ELLIPSOIDS.byteOffset;\n                ellipsoids = new Float32Array(featureTableBinary.buffer, ellipsoidsByteOffset, Vector3DTileGeometry.packedEllipsoidLength * numberOfEllipsoids);\n            }\n\n            if (numberOfSpheres > 0) {\n                var spheresByteOffset = featureTableBinary.byteOffset + featureTableJson.SPHERES.byteOffset;\n                spheres = new Float32Array(featureTableBinary.buffer, spheresByteOffset, Vector3DTileGeometry.packedSphereLength * numberOfSpheres);\n            }\n\n            content._geometries = new Vector3DTileGeometry({\n                boxes : boxes,\n                boxBatchIds : batchIds.boxes,\n                cylinders : cylinders,\n                cylinderBatchIds : batchIds.cylinders,\n                ellipsoids : ellipsoids,\n                ellipsoidBatchIds : batchIds.ellipsoids,\n                spheres : spheres,\n                sphereBatchIds : batchIds.spheres,\n                center : center,\n                modelMatrix : modelMatrix,\n                batchTable : batchTable,\n                boundingVolume : content.tile.boundingVolume.boundingVolume\n            });\n        }\n    }\n\n    function createFeatures(content) {\n        var featuresLength = content.featuresLength;\n        if (!defined(content._features) && (featuresLength > 0)) {\n            var features = new Array(featuresLength);\n            if (defined(content._geometries)) {\n                content._geometries.createFeatures(content, features);\n            }\n            content._features = features;\n        }\n    }\n\n    Geometry3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return this._batchTable.hasProperty(batchId, name);\n    };\n\n    Geometry3DTileContent.prototype.getFeature = function(batchId) {\n        \n\n        createFeatures(this);\n        return this._features[batchId];\n    };\n\n    Geometry3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        if (defined(this._geometries)) {\n            this._geometries.applyDebugSettings(enabled, color);\n        }\n    };\n\n    Geometry3DTileContent.prototype.applyStyle = function(style) {\n        createFeatures(this);\n        if (defined(this._geometries)) {\n            this._geometries.applyStyle(style, this._features);\n        }\n    };\n\n    Geometry3DTileContent.prototype.update = function(tileset, frameState) {\n        if (defined(this._geometries)) {\n            this._geometries.classificationType = this._tileset.classificationType;\n            this._geometries.debugWireframe = this._tileset.debugWireframe;\n            this._geometries.update(frameState);\n        }\n        if (defined(this._batchTable) && this._geometries._ready) {\n            this._batchTable.update(tileset, frameState);\n        }\n\n        if (!defined(this._contentReadyPromise)) {\n            var that = this;\n            this._contentReadyPromise = this._geometries.readyPromise.then(function() {\n                that._readyPromise.resolve(that);\n            });\n        }\n    };\n\n    Geometry3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Geometry3DTileContent.prototype.destroy = function() {\n        this._geometries = this._geometries && this._geometries.destroy();\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n        return destroyObject(this);\n    };\nexport default Geometry3DTileContent;\n","import Matrix4 from '../Core/Matrix4.js';\n\n    /**\n     * @private\n     */\n    function ModelInstance(collection, modelMatrix, instanceId) {\n        this.primitive = collection;\n        this._modelMatrix = Matrix4.clone(modelMatrix);\n        this._instanceId = instanceId;\n    }\n\n    Object.defineProperties(ModelInstance.prototype, {\n        instanceId : {\n            get : function() {\n                return this._instanceId;\n            }\n        },\n        model : {\n            get : function() {\n                return this.primitive._model;\n            }\n        },\n        modelMatrix : {\n            get : function() {\n                return Matrix4.clone(this._modelMatrix);\n            },\n            set : function(value) {\n                Matrix4.clone(value, this._modelMatrix);\n                this.primitive.expandBoundingSphere(this._modelMatrix);\n                this.primitive._dirty = true;\n            }\n        }\n    });\nexport default ModelInstance;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport clone from '../Core/clone.js';\nimport Color from '../Core/Color.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport Resource from '../Core/Resource.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Transforms from '../Core/Transforms.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport ForEach from '../ThirdParty/GltfPipeline/ForEach.js';\nimport when from '../ThirdParty/when.js';\nimport Model from './Model.js';\nimport ModelInstance from './ModelInstance.js';\nimport ModelUtility from './ModelUtility.js';\nimport SceneMode from './SceneMode.js';\nimport ShadowMode from './ShadowMode.js';\n\n    var LoadState = {\n        NEEDS_LOAD : 0,\n        LOADING : 1,\n        LOADED : 2,\n        FAILED : 3\n    };\n\n    /**\n     * A 3D model instance collection. All instances reference the same underlying model, but have unique\n     * per-instance properties like model matrix, pick id, etc.\n     *\n     * Instances are rendered relative-to-center and for best results instances should be positioned close to one another.\n     * Otherwise there may be precision issues if, for example, instances are placed on opposite sides of the globe.\n     *\n     * @alias ModelInstanceCollection\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Object[]} [options.instances] An array of instances, where each instance contains a modelMatrix and optional batchId when options.batchTable is defined.\n     * @param {Cesium3DTileBatchTable} [options.batchTable] The batch table of the instanced 3D Tile.\n     * @param {Resource|String} [options.url] The url to the .gltf file.\n     * @param {Object} [options.requestType] The request type, used for request prioritization\n     * @param {Object|ArrayBuffer|Uint8Array} [options.gltf] A glTF JSON object, or a binary glTF buffer.\n     * @param {Resource|String} [options.basePath=''] The base path that paths in the glTF JSON are relative to.\n     * @param {Boolean} [options.dynamic=false] Hint if instance model matrices will be updated frequently.\n     * @param {Boolean} [options.show=true] Determines if the collection will be shown.\n     * @param {Boolean} [options.allowPicking=true] When <code>true</code>, each instance is pickable with {@link Scene#pick}.\n     * @param {Boolean} [options.asynchronous=true] Determines if model WebGL resource creation will be spread out over several frames or block until completion once all glTF files are loaded.\n     * @param {Boolean} [options.incrementallyLoadTextures=true] Determine if textures may continue to stream in after the model is loaded.\n     * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the collection casts or receives shadows from light sources.\n     * @param {Cartesian2} [options.imageBasedLightingFactor=new Cartesian2(1.0, 1.0)] Scales the diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n     * @param {Cartesian3} [options.lightColor] The light color when shading models. When <code>undefined</code> the scene's light color is used instead.\n     * @param {Number} [options.luminanceAtZenith=0.2] The sun's luminance at the zenith in kilo candela per meter squared to use for this model's procedural environment map.\n     * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n     * @param {String} [options.specularEnvironmentMaps] A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Draws the bounding sphere for the collection.\n     * @param {Boolean} [options.debugWireframe=false] For debugging only. Draws the instances in wireframe.\n     *\n     * @exception {DeveloperError} Must specify either <options.gltf> or <options.url>, but not both.\n     * @exception {DeveloperError} Shader program cannot be optimized for instancing. Parameters cannot have any of the following semantics: MODEL, MODELINVERSE, MODELVIEWINVERSE, MODELVIEWPROJECTIONINVERSE, MODELINVERSETRANSPOSE.\n     *\n     * @private\n     */\n    function ModelInstanceCollection(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        this.show = defaultValue(options.show, true);\n\n        this._instancingSupported = false;\n        this._dynamic = defaultValue(options.dynamic, false);\n        this._allowPicking = defaultValue(options.allowPicking, true);\n        this._ready = false;\n        this._readyPromise = when.defer();\n        this._state = LoadState.NEEDS_LOAD;\n        this._dirty = false;\n\n        // Undocumented options\n        this._cull = defaultValue(options.cull, true);\n        this._opaquePass = defaultValue(options.opaquePass, Pass.OPAQUE);\n\n        this._instances = createInstances(this, options.instances);\n\n        // When the model instance collection is backed by an i3dm tile,\n        // use its batch table resources to modify the shaders, attributes, and uniform maps.\n        this._batchTable = options.batchTable;\n\n        this._model = undefined;\n        this._vertexBufferTypedArray = undefined; // Hold onto the vertex buffer contents when dynamic is true\n        this._vertexBuffer = undefined;\n        this._batchIdBuffer = undefined;\n        this._instancedUniformsByProgram = undefined;\n\n        this._drawCommands = [];\n        this._modelCommands = undefined;\n\n        this._boundingSphere = createBoundingSphere(this);\n        this._center = Cartesian3.clone(this._boundingSphere.center);\n        this._rtcTransform = new Matrix4();\n        this._rtcModelView = new Matrix4(); // Holds onto uniform\n\n        this._mode = undefined;\n\n        this.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n        this._modelMatrix = Matrix4.clone(this.modelMatrix);\n\n        // Passed on to Model\n        this._url = Resource.createIfNeeded(options.url);\n        this._requestType = options.requestType;\n        this._gltf = options.gltf;\n        this._basePath = Resource.createIfNeeded(options.basePath);\n        this._asynchronous = options.asynchronous;\n        this._incrementallyLoadTextures = options.incrementallyLoadTextures;\n        this._upAxis = options.upAxis; // Undocumented option\n        this._forwardAxis = options.forwardAxis; // Undocumented option\n\n        this.shadows = defaultValue(options.shadows, ShadowMode.ENABLED);\n        this._shadows = this.shadows;\n\n        this._pickIdLoaded = options.pickIdLoaded;\n\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n        this._debugShowBoundingVolume = false;\n\n        this.debugWireframe = defaultValue(options.debugWireframe, false);\n        this._debugWireframe = false;\n\n        this._imageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n        Cartesian2.clone(options.imageBasedLightingFactor, this._imageBasedLightingFactor);\n        this.lightColor = options.lightColor;\n        this.luminanceAtZenith = options.luminanceAtZenith;\n        this.sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n        this.specularEnvironmentMaps = options.specularEnvironmentMaps;\n    }\n\n    Object.defineProperties(ModelInstanceCollection.prototype, {\n        allowPicking : {\n            get : function() {\n                return this._allowPicking;\n            }\n        },\n        length : {\n            get : function() {\n                return this._instances.length;\n            }\n        },\n        activeAnimations : {\n            get : function() {\n                return this._model.activeAnimations;\n            }\n        },\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n        imageBasedLightingFactor : {\n            get : function() {\n                return this._imageBasedLightingFactor;\n            },\n            set : function(value) {\n                \n                Cartesian2.clone(value, this._imageBasedLightingFactor);\n            }\n        }\n    });\n\n    function createInstances(collection, instancesOptions) {\n        instancesOptions = defaultValue(instancesOptions, []);\n        var length = instancesOptions.length;\n        var instances = new Array(length);\n        for (var i = 0; i < length; ++i) {\n            var instanceOptions = instancesOptions[i];\n            var modelMatrix = instanceOptions.modelMatrix;\n            var instanceId = defaultValue(instanceOptions.batchId, i);\n            instances[i] = new ModelInstance(collection, modelMatrix, instanceId);\n        }\n        return instances;\n    }\n\n    function createBoundingSphere(collection) {\n        var instancesLength = collection.length;\n        var points = new Array(instancesLength);\n        for (var i = 0; i < instancesLength; ++i) {\n            points[i] = Matrix4.getTranslation(collection._instances[i]._modelMatrix, new Cartesian3());\n        }\n\n        return BoundingSphere.fromPoints(points);\n    }\n\n    var scratchCartesian = new Cartesian3();\n    var scratchMatrix = new Matrix4();\n\n    ModelInstanceCollection.prototype.expandBoundingSphere = function(instanceModelMatrix) {\n        var translation = Matrix4.getTranslation(instanceModelMatrix, scratchCartesian);\n        BoundingSphere.expand(this._boundingSphere, translation, this._boundingSphere);\n    };\n\n    function getCheckUniformSemanticFunction(modelSemantics, supportedSemantics, programId, uniformMap) {\n        return function(uniform, uniformName) {\n            var semantic = uniform.semantic;\n            if (defined(semantic) && (modelSemantics.indexOf(semantic) > -1)) {\n                if (supportedSemantics.indexOf(semantic) > -1) {\n                    uniformMap[uniformName] = semantic;\n                } else {\n                    throw new RuntimeError('Shader program cannot be optimized for instancing. ' +\n                        'Uniform \"' + uniformName + '\" in program \"' + programId +\n                        '\" uses unsupported semantic \"' + semantic + '\"'\n                    );\n                }\n            }\n        };\n    }\n\n    function getInstancedUniforms(collection, programId) {\n        if (defined(collection._instancedUniformsByProgram)) {\n            return collection._instancedUniformsByProgram[programId];\n        }\n\n        var instancedUniformsByProgram = {};\n        collection._instancedUniformsByProgram = instancedUniformsByProgram;\n\n        // When using CESIUM_RTC_MODELVIEW the CESIUM_RTC center is ignored. Instances are always rendered relative-to-center.\n        var modelSemantics = ['MODEL', 'MODELVIEW', 'CESIUM_RTC_MODELVIEW', 'MODELVIEWPROJECTION', 'MODELINVERSE', 'MODELVIEWINVERSE', 'MODELVIEWPROJECTIONINVERSE', 'MODELINVERSETRANSPOSE', 'MODELVIEWINVERSETRANSPOSE'];\n        var supportedSemantics = ['MODELVIEW', 'CESIUM_RTC_MODELVIEW', 'MODELVIEWPROJECTION', 'MODELVIEWINVERSETRANSPOSE'];\n\n        var techniques = collection._model._sourceTechniques;\n        for (var techniqueId in techniques) {\n            if (techniques.hasOwnProperty(techniqueId)) {\n                var technique = techniques[techniqueId];\n                var program = technique.program;\n\n                // Different techniques may share the same program, skip if already processed.\n                // This assumes techniques that share a program do not declare different semantics for the same uniforms.\n                if (!defined(instancedUniformsByProgram[program])) {\n                    var uniformMap = {};\n                    instancedUniformsByProgram[program] = uniformMap;\n                    ForEach.techniqueUniform(technique, getCheckUniformSemanticFunction(modelSemantics, supportedSemantics, programId, uniformMap));\n                }\n            }\n        }\n\n        return instancedUniformsByProgram[programId];\n    }\n\n    function getVertexShaderCallback(collection) {\n        return function(vs, programId) {\n            var instancedUniforms = getInstancedUniforms(collection, programId);\n            var usesBatchTable = defined(collection._batchTable);\n\n            var renamedSource = ShaderSource.replaceMain(vs, 'czm_instancing_main');\n\n            var globalVarsHeader = '';\n            var globalVarsMain = '';\n            for (var uniform in instancedUniforms) {\n                if (instancedUniforms.hasOwnProperty(uniform)) {\n                    var semantic = instancedUniforms[uniform];\n                    var varName;\n                    if (semantic === 'MODELVIEW' || semantic === 'CESIUM_RTC_MODELVIEW') {\n                        varName = 'czm_instanced_modelView';\n                    } else if (semantic === 'MODELVIEWPROJECTION') {\n                        varName = 'czm_instanced_modelViewProjection';\n                        globalVarsHeader += 'mat4 czm_instanced_modelViewProjection;\\n';\n                        globalVarsMain += 'czm_instanced_modelViewProjection = czm_projection * czm_instanced_modelView;\\n';\n                    } else if (semantic === 'MODELVIEWINVERSETRANSPOSE') {\n                        varName = 'czm_instanced_modelViewInverseTranspose';\n                        globalVarsHeader += 'mat3 czm_instanced_modelViewInverseTranspose;\\n';\n                        globalVarsMain += 'czm_instanced_modelViewInverseTranspose = mat3(czm_instanced_modelView);\\n';\n                    }\n\n                    // Remove the uniform declaration\n                    var regex = new RegExp('uniform.*' + uniform + '.*');\n                    renamedSource = renamedSource.replace(regex, '');\n\n                    // Replace all occurrences of the uniform with the global variable\n                    regex = new RegExp(uniform + '\\\\b', 'g');\n                    renamedSource = renamedSource.replace(regex, varName);\n                }\n            }\n\n            // czm_instanced_model is the model matrix of the instance relative to center\n            // czm_instanced_modifiedModelView is the transform from the center to view\n            // czm_instanced_nodeTransform is the local offset of the node within the model\n            var uniforms =\n                'uniform mat4 czm_instanced_modifiedModelView;\\n' +\n                'uniform mat4 czm_instanced_nodeTransform;\\n';\n\n            var batchIdAttribute;\n            var pickAttribute;\n            var pickVarying;\n\n            if (usesBatchTable) {\n                batchIdAttribute = 'attribute float a_batchId;\\n';\n                pickAttribute = '';\n                pickVarying = '';\n            } else {\n                batchIdAttribute = '';\n                pickAttribute = 'attribute vec4 pickColor;\\n' +\n                                'varying vec4 v_pickColor;\\n';\n                pickVarying = '    v_pickColor = pickColor;\\n';\n            }\n\n            var instancedSource =\n                uniforms +\n                globalVarsHeader +\n                'mat4 czm_instanced_modelView;\\n' +\n                'attribute vec4 czm_modelMatrixRow0;\\n' +\n                'attribute vec4 czm_modelMatrixRow1;\\n' +\n                'attribute vec4 czm_modelMatrixRow2;\\n' +\n                batchIdAttribute +\n                pickAttribute +\n                renamedSource +\n                'void main()\\n' +\n                '{\\n' +\n                '    mat4 czm_instanced_model = mat4(czm_modelMatrixRow0.x, czm_modelMatrixRow1.x, czm_modelMatrixRow2.x, 0.0, czm_modelMatrixRow0.y, czm_modelMatrixRow1.y, czm_modelMatrixRow2.y, 0.0, czm_modelMatrixRow0.z, czm_modelMatrixRow1.z, czm_modelMatrixRow2.z, 0.0, czm_modelMatrixRow0.w, czm_modelMatrixRow1.w, czm_modelMatrixRow2.w, 1.0);\\n' +\n                '    czm_instanced_modelView = czm_instanced_modifiedModelView * czm_instanced_model * czm_instanced_nodeTransform;\\n' +\n                     globalVarsMain +\n                '    czm_instancing_main();\\n' +\n                     pickVarying +\n                '}\\n';\n\n            if (usesBatchTable) {\n                var gltf = collection._model.gltf;\n                var diffuseAttributeOrUniformName = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n                instancedSource = collection._batchTable.getVertexShaderCallback(true, 'a_batchId', diffuseAttributeOrUniformName)(instancedSource);\n            }\n\n            return instancedSource;\n        };\n    }\n\n    function getFragmentShaderCallback(collection) {\n        return function(fs, programId) {\n            var batchTable = collection._batchTable;\n            if (defined(batchTable)) {\n                var gltf = collection._model.gltf;\n                var diffuseAttributeOrUniformName = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n                fs = batchTable.getFragmentShaderCallback(true, diffuseAttributeOrUniformName)(fs);\n            } else {\n                fs = 'varying vec4 v_pickColor;\\n' + fs;\n            }\n            return fs;\n        };\n    }\n\n    function createModifiedModelView(collection, context) {\n        return function() {\n            return Matrix4.multiply(context.uniformState.view, collection._rtcTransform, collection._rtcModelView);\n        };\n    }\n\n    function createNodeTransformFunction(node) {\n        return function() {\n            return node.computedMatrix;\n        };\n    }\n\n    function getUniformMapCallback(collection, context) {\n        return function(uniformMap, programId, node) {\n            uniformMap = clone(uniformMap);\n            uniformMap.czm_instanced_modifiedModelView = createModifiedModelView(collection, context);\n            uniformMap.czm_instanced_nodeTransform = createNodeTransformFunction(node);\n\n            // Remove instanced uniforms from the uniform map\n            var instancedUniforms = getInstancedUniforms(collection, programId);\n            for (var uniform in instancedUniforms) {\n                if (instancedUniforms.hasOwnProperty(uniform)) {\n                    delete uniformMap[uniform];\n                }\n            }\n\n            if (defined(collection._batchTable)) {\n                uniformMap = collection._batchTable.getUniformMapCallback()(uniformMap);\n            }\n\n            return uniformMap;\n        };\n    }\n\n    function getVertexShaderNonInstancedCallback(collection) {\n        return function(vs, programId) {\n            if (defined(collection._batchTable)) {\n                var gltf = collection._model.gltf;\n                var diffuseAttributeOrUniformName = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n                vs = collection._batchTable.getVertexShaderCallback(true, 'a_batchId', diffuseAttributeOrUniformName)(vs);\n                // Treat a_batchId as a uniform rather than a vertex attribute\n                vs = 'uniform float a_batchId\\n;' + vs;\n            }\n            return vs;\n        };\n    }\n\n    function getFragmentShaderNonInstancedCallback(collection) {\n        return function(fs, programId) {\n            var batchTable = collection._batchTable;\n            if (defined(batchTable)) {\n                var gltf = collection._model.gltf;\n                var diffuseAttributeOrUniformName = ModelUtility.getDiffuseAttributeOrUniform(gltf, programId);\n                fs = batchTable.getFragmentShaderCallback(true, diffuseAttributeOrUniformName)(fs);\n            } else {\n                fs = 'uniform vec4 czm_pickColor;\\n' + fs;\n            }\n            return fs;\n        };\n    }\n\n    function getUniformMapNonInstancedCallback(collection) {\n        return function(uniformMap) {\n            if (defined(collection._batchTable)) {\n                uniformMap = collection._batchTable.getUniformMapCallback()(uniformMap);\n            }\n\n            return uniformMap;\n        };\n    }\n\n    function getVertexBufferTypedArray(collection) {\n        var instances = collection._instances;\n        var instancesLength = collection.length;\n        var collectionCenter = collection._center;\n        var vertexSizeInFloats = 12;\n\n        var bufferData = collection._vertexBufferTypedArray;\n        if (!defined(bufferData)) {\n            bufferData = new Float32Array(instancesLength * vertexSizeInFloats);\n        }\n        if (collection._dynamic) {\n            // Hold onto the buffer data so we don't have to allocate new memory every frame.\n            collection._vertexBufferTypedArray = bufferData;\n        }\n\n        for (var i = 0; i < instancesLength; ++i) {\n            var modelMatrix = instances[i]._modelMatrix;\n\n            // Instance matrix is relative to center\n            var instanceMatrix = Matrix4.clone(modelMatrix, scratchMatrix);\n            instanceMatrix[12] -= collectionCenter.x;\n            instanceMatrix[13] -= collectionCenter.y;\n            instanceMatrix[14] -= collectionCenter.z;\n\n            var offset = i * vertexSizeInFloats;\n\n            // First three rows of the model matrix\n            bufferData[offset + 0]  = instanceMatrix[0];\n            bufferData[offset + 1]  = instanceMatrix[4];\n            bufferData[offset + 2]  = instanceMatrix[8];\n            bufferData[offset + 3]  = instanceMatrix[12];\n            bufferData[offset + 4]  = instanceMatrix[1];\n            bufferData[offset + 5]  = instanceMatrix[5];\n            bufferData[offset + 6]  = instanceMatrix[9];\n            bufferData[offset + 7]  = instanceMatrix[13];\n            bufferData[offset + 8]  = instanceMatrix[2];\n            bufferData[offset + 9]  = instanceMatrix[6];\n            bufferData[offset + 10] = instanceMatrix[10];\n            bufferData[offset + 11] = instanceMatrix[14];\n        }\n\n        return bufferData;\n    }\n\n    function createVertexBuffer(collection, context) {\n        var i;\n        var instances = collection._instances;\n        var instancesLength = collection.length;\n        var dynamic = collection._dynamic;\n        var usesBatchTable = defined(collection._batchTable);\n\n        if (usesBatchTable) {\n            var batchIdBufferData = new Uint16Array(instancesLength);\n            for (i = 0; i < instancesLength; ++i) {\n                batchIdBufferData[i] = instances[i]._instanceId;\n            }\n            collection._batchIdBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : batchIdBufferData,\n                usage : BufferUsage.STATIC_DRAW\n            });\n        }\n\n        if (!usesBatchTable) {\n            var pickIdBuffer = new Uint8Array(instancesLength * 4);\n            for (i = 0; i < instancesLength; ++i) {\n                var pickId = collection._pickIds[i];\n                var pickColor = pickId.color;\n                var offset = i * 4;\n                pickIdBuffer[offset] = Color.floatToByte(pickColor.red);\n                pickIdBuffer[offset + 1] = Color.floatToByte(pickColor.green);\n                pickIdBuffer[offset + 2] = Color.floatToByte(pickColor.blue);\n                pickIdBuffer[offset + 3] = Color.floatToByte(pickColor.alpha);\n            }\n            collection._pickIdBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : pickIdBuffer,\n                usage : BufferUsage.STATIC_DRAW\n            });\n        }\n\n        var vertexBufferTypedArray = getVertexBufferTypedArray(collection);\n        collection._vertexBuffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : vertexBufferTypedArray,\n            usage : dynamic ? BufferUsage.STREAM_DRAW : BufferUsage.STATIC_DRAW\n        });\n    }\n\n    function updateVertexBuffer(collection) {\n        var vertexBufferTypedArray = getVertexBufferTypedArray(collection);\n        collection._vertexBuffer.copyFromArrayView(vertexBufferTypedArray);\n    }\n\n    function createPickIds(collection, context) {\n        // PERFORMANCE_IDEA: we could skip the pick buffer completely by allocating\n        // a continuous range of pickIds and then converting the base pickId + batchId\n        // to RGBA in the shader.  The only consider is precision issues, which might\n        // not be an issue in WebGL 2.\n        var instances = collection._instances;\n        var instancesLength = instances.length;\n        var pickIds = new Array(instancesLength);\n        for (var i = 0; i < instancesLength; ++i) {\n            pickIds[i] = context.createPickId(instances[i]);\n        }\n        return pickIds;\n    }\n\n    function createModel(collection, context) {\n        var instancingSupported = collection._instancingSupported;\n        var usesBatchTable = defined(collection._batchTable);\n        var allowPicking = collection._allowPicking;\n\n        var modelOptions = {\n            url : collection._url,\n            requestType : collection._requestType,\n            gltf : collection._gltf,\n            basePath : collection._basePath,\n            shadows : collection._shadows,\n            cacheKey : undefined,\n            asynchronous : collection._asynchronous,\n            allowPicking : allowPicking,\n            incrementallyLoadTextures : collection._incrementallyLoadTextures,\n            upAxis : collection._upAxis,\n            forwardAxis : collection._forwardAxis,\n            precreatedAttributes : undefined,\n            vertexShaderLoaded : undefined,\n            fragmentShaderLoaded : undefined,\n            uniformMapLoaded : undefined,\n            pickIdLoaded : collection._pickIdLoaded,\n            ignoreCommands : true,\n            opaquePass : collection._opaquePass,\n            imageBasedLightingFactor : collection.imageBasedLightingFactor,\n            lightColor : collection.lightColor,\n            luminanceAtZenith : collection.luminanceAtZenith,\n            sphericalHarmonicCoefficients : collection.sphericalHarmonicCoefficients,\n            specularEnvironmentMaps : collection.specularEnvironmentMaps\n        };\n\n        if (!usesBatchTable) {\n            collection._pickIds = createPickIds(collection, context);\n        }\n\n        if (instancingSupported) {\n            createVertexBuffer(collection, context);\n\n            var vertexSizeInFloats = 12;\n            var componentSizeInBytes = ComponentDatatype.getSizeInBytes(ComponentDatatype.FLOAT);\n\n            var instancedAttributes = {\n                czm_modelMatrixRow0 : {\n                    index                  : 0, // updated in Model\n                    vertexBuffer           : collection._vertexBuffer,\n                    componentsPerAttribute : 4,\n                    componentDatatype      : ComponentDatatype.FLOAT,\n                    normalize              : false,\n                    offsetInBytes          : 0,\n                    strideInBytes          : componentSizeInBytes * vertexSizeInFloats,\n                    instanceDivisor        : 1\n                },\n                czm_modelMatrixRow1 : {\n                    index                  : 0, // updated in Model\n                    vertexBuffer           : collection._vertexBuffer,\n                    componentsPerAttribute : 4,\n                    componentDatatype      : ComponentDatatype.FLOAT,\n                    normalize              : false,\n                    offsetInBytes          : componentSizeInBytes * 4,\n                    strideInBytes          : componentSizeInBytes * vertexSizeInFloats,\n                    instanceDivisor        : 1\n                },\n                czm_modelMatrixRow2 : {\n                    index                  : 0, // updated in Model\n                    vertexBuffer           : collection._vertexBuffer,\n                    componentsPerAttribute : 4,\n                    componentDatatype      : ComponentDatatype.FLOAT,\n                    normalize              : false,\n                    offsetInBytes          : componentSizeInBytes * 8,\n                    strideInBytes          : componentSizeInBytes * vertexSizeInFloats,\n                    instanceDivisor        : 1\n                }\n            };\n\n            // When using a batch table, add a batch id attribute\n            if (usesBatchTable) {\n                instancedAttributes.a_batchId = {\n                    index                   : 0, // updated in Model\n                    vertexBuffer            : collection._batchIdBuffer,\n                    componentsPerAttribute  : 1,\n                    componentDatatype       : ComponentDatatype.UNSIGNED_SHORT,\n                    normalize               : false,\n                    offsetInBytes           : 0,\n                    strideInBytes           : 0,\n                    instanceDivisor         : 1\n                };\n            }\n\n            if (!usesBatchTable) {\n                instancedAttributes.pickColor = {\n                    index : 0, // updated in Model\n                    vertexBuffer            : collection._pickIdBuffer,\n                    componentsPerAttribute  : 4,\n                    componentDatatype       : ComponentDatatype.UNSIGNED_BYTE,\n                    normalize               : true,\n                    offsetInBytes           : 0,\n                    strideInBytes           : 0,\n                    instanceDivisor         : 1\n                };\n            }\n\n            modelOptions.precreatedAttributes = instancedAttributes;\n            modelOptions.vertexShaderLoaded = getVertexShaderCallback(collection);\n            modelOptions.fragmentShaderLoaded = getFragmentShaderCallback(collection);\n            modelOptions.uniformMapLoaded = getUniformMapCallback(collection, context);\n\n            if (defined(collection._url)) {\n                modelOptions.cacheKey = collection._url.getUrlComponent() + '#instanced';\n            }\n        } else {\n            modelOptions.vertexShaderLoaded = getVertexShaderNonInstancedCallback(collection);\n            modelOptions.fragmentShaderLoaded = getFragmentShaderNonInstancedCallback(collection);\n            modelOptions.uniformMapLoaded = getUniformMapNonInstancedCallback(collection, context);\n        }\n\n        if (defined(collection._url)) {\n            collection._model = Model.fromGltf(modelOptions);\n        } else {\n            collection._model = new Model(modelOptions);\n        }\n    }\n\n    function updateWireframe(collection) {\n        if (collection._debugWireframe !== collection.debugWireframe) {\n            collection._debugWireframe = collection.debugWireframe;\n\n            // This assumes the original primitive was TRIANGLES and that the triangles\n            // are connected for the wireframe to look perfect.\n            var primitiveType = collection.debugWireframe ? PrimitiveType.LINES : PrimitiveType.TRIANGLES;\n            var commands = collection._drawCommands;\n            var length = commands.length;\n            for (var i = 0; i < length; ++i) {\n                commands[i].primitiveType = primitiveType;\n            }\n        }\n    }\n    function updateShowBoundingVolume(collection) {\n        if (collection.debugShowBoundingVolume !== collection._debugShowBoundingVolume) {\n            collection._debugShowBoundingVolume = collection.debugShowBoundingVolume;\n\n            var commands = collection._drawCommands;\n            var length = commands.length;\n            for (var i = 0; i < length; ++i) {\n                commands[i].debugShowBoundingVolume = collection.debugShowBoundingVolume;\n            }\n        }\n    }\n\n    function createCommands(collection, drawCommands) {\n        var commandsLength = drawCommands.length;\n        var instancesLength = collection.length;\n        var boundingSphere = collection._boundingSphere;\n        var cull = collection._cull;\n\n        for (var i = 0; i < commandsLength; ++i) {\n            var drawCommand = DrawCommand.shallowClone(drawCommands[i]);\n            drawCommand.instanceCount = instancesLength;\n            drawCommand.boundingVolume = boundingSphere;\n            drawCommand.cull = cull;\n            if (defined(collection._batchTable)) {\n                drawCommand.pickId = collection._batchTable.getPickId();\n            } else {\n                drawCommand.pickId = 'v_pickColor';\n            }\n            collection._drawCommands.push(drawCommand);\n        }\n    }\n\n    function createBatchIdFunction(batchId) {\n        return function() {\n            return batchId;\n        };\n    }\n\n    function createPickColorFunction(color) {\n        return function() {\n            return color;\n        };\n    }\n\n    function createCommandsNonInstanced(collection, drawCommands) {\n        // When instancing is disabled, create commands for every instance.\n        var instances = collection._instances;\n        var commandsLength = drawCommands.length;\n        var instancesLength = collection.length;\n        var batchTable = collection._batchTable;\n        var usesBatchTable = defined(batchTable);\n        var cull = collection._cull;\n\n        for (var i = 0; i < commandsLength; ++i) {\n            for (var j = 0; j < instancesLength; ++j) {\n                var drawCommand = DrawCommand.shallowClone(drawCommands[i]);\n                drawCommand.modelMatrix = new Matrix4(); // Updated in updateCommandsNonInstanced\n                drawCommand.boundingVolume = new BoundingSphere(); // Updated in updateCommandsNonInstanced\n                drawCommand.cull = cull;\n                drawCommand.uniformMap = clone(drawCommand.uniformMap);\n                if (usesBatchTable) {\n                    drawCommand.uniformMap.a_batchId = createBatchIdFunction(instances[j]._instanceId);\n                } else {\n                    var pickId = collection._pickIds[j];\n                    drawCommand.uniformMap.czm_pickColor = createPickColorFunction(pickId.color);\n                }\n                collection._drawCommands.push(drawCommand);\n            }\n        }\n    }\n\n    function updateCommandsNonInstanced(collection) {\n        var modelCommands = collection._modelCommands;\n        var commandsLength = modelCommands.length;\n        var instancesLength = collection.length;\n        var collectionTransform = collection._rtcTransform;\n        var collectionCenter = collection._center;\n\n        for (var i = 0; i < commandsLength; ++i) {\n            var modelCommand = modelCommands[i];\n            for (var j = 0; j < instancesLength; ++j) {\n                var commandIndex = i * instancesLength + j;\n                var drawCommand = collection._drawCommands[commandIndex];\n                var instanceMatrix = Matrix4.clone(collection._instances[j]._modelMatrix, scratchMatrix);\n                instanceMatrix[12] -= collectionCenter.x;\n                instanceMatrix[13] -= collectionCenter.y;\n                instanceMatrix[14] -= collectionCenter.z;\n                instanceMatrix = Matrix4.multiply(collectionTransform, instanceMatrix, scratchMatrix);\n                var nodeMatrix = modelCommand.modelMatrix;\n                var modelMatrix = drawCommand.modelMatrix;\n                Matrix4.multiply(instanceMatrix, nodeMatrix, modelMatrix);\n\n                var nodeBoundingSphere = modelCommand.boundingVolume;\n                var boundingSphere = drawCommand.boundingVolume;\n                BoundingSphere.transform(nodeBoundingSphere, instanceMatrix, boundingSphere);\n            }\n        }\n    }\n\n    function getModelCommands(model) {\n        var nodeCommands = model._nodeCommands;\n        var length = nodeCommands.length;\n\n        var drawCommands = [];\n\n        for (var i = 0; i < length; ++i) {\n            var nc = nodeCommands[i];\n            if (nc.show) {\n                drawCommands.push(nc.command);\n            }\n        }\n\n        return drawCommands;\n    }\n\n    function commandsDirty(model) {\n        var nodeCommands = model._nodeCommands;\n        var length = nodeCommands.length;\n\n        for (var i = 0; i < length; i++) {\n            var nc = nodeCommands[i];\n            if (nc.command.dirty) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function generateModelCommands(modelInstanceCollection, instancingSupported) {\n        modelInstanceCollection._drawCommands = [];\n\n        var modelCommands = getModelCommands(modelInstanceCollection._model);\n        if (instancingSupported) {\n            createCommands(modelInstanceCollection, modelCommands);\n        } else {\n            createCommandsNonInstanced(modelInstanceCollection, modelCommands);\n            updateCommandsNonInstanced(modelInstanceCollection);\n        }\n    }\n\n    function updateShadows(collection) {\n        if (collection.shadows !== collection._shadows) {\n            collection._shadows = collection.shadows;\n\n            var castShadows = ShadowMode.castShadows(collection.shadows);\n            var receiveShadows = ShadowMode.receiveShadows(collection.shadows);\n\n            var drawCommands = collection._drawCommands;\n            var length = drawCommands.length;\n            for (var i = 0; i < length; ++i) {\n                var drawCommand = drawCommands[i];\n                drawCommand.castShadows = castShadows;\n                drawCommand.receiveShadows = receiveShadows;\n            }\n        }\n    }\n\n    ModelInstanceCollection.prototype.update = function(frameState) {\n        if (frameState.mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        if (!this.show) {\n            return;\n        }\n\n        if (this.length === 0) {\n            return;\n        }\n\n        var context = frameState.context;\n\n        if (this._state === LoadState.NEEDS_LOAD) {\n            this._state = LoadState.LOADING;\n            this._instancingSupported = context.instancedArrays;\n            createModel(this, context);\n            var that = this;\n            this._model.readyPromise.otherwise(function(error) {\n                that._state = LoadState.FAILED;\n                that._readyPromise.reject(error);\n            });\n        }\n\n        var instancingSupported = this._instancingSupported;\n        var model = this._model;\n\n        model.imageBasedLightingFactor = this.imageBasedLightingFactor;\n        model.lightColor = this.lightColor;\n        model.luminanceAtZenith = this.luminanceAtZenith;\n        model.sphericalHarmonicCoefficients = this.sphericalHarmonicCoefficients;\n        model.specularEnvironmentMaps = this.specularEnvironmentMaps;\n\n        model.update(frameState);\n\n        if (model.ready && (this._state === LoadState.LOADING)) {\n            this._state = LoadState.LOADED;\n            this._ready = true;\n\n            // Expand bounding volume to fit the radius of the loaded model including the model's offset from the center\n            var modelRadius = model.boundingSphere.radius + Cartesian3.magnitude(model.boundingSphere.center);\n            this._boundingSphere.radius += modelRadius;\n            this._modelCommands = getModelCommands(model);\n\n            generateModelCommands(this, instancingSupported);\n\n            this._readyPromise.resolve(this);\n            return;\n        }\n\n        if (this._state !== LoadState.LOADED) {\n            return;\n        }\n\n        var modeChanged = (frameState.mode !== this._mode);\n        var modelMatrix = this.modelMatrix;\n        var modelMatrixChanged = !Matrix4.equals(this._modelMatrix, modelMatrix);\n\n        if (modeChanged || modelMatrixChanged) {\n            this._mode = frameState.mode;\n            Matrix4.clone(modelMatrix, this._modelMatrix);\n            var rtcTransform = Matrix4.multiplyByTranslation(this._modelMatrix, this._center, this._rtcTransform);\n            if (this._mode !== SceneMode.SCENE3D) {\n                rtcTransform = Transforms.basisTo2D(frameState.mapProjection, rtcTransform, rtcTransform);\n            }\n            Matrix4.getTranslation(rtcTransform, this._boundingSphere.center);\n        }\n\n        if (instancingSupported && this._dirty) {\n            // If at least one instance has moved assume the collection is now dynamic\n            this._dynamic = true;\n            this._dirty = false;\n\n            // PERFORMANCE_IDEA: only update dirty sub-sections instead of the whole collection\n            updateVertexBuffer(this);\n        }\n\n        // If the model was set to rebuild shaders during update, rebuild instanced commands.\n        if (commandsDirty(model)) {\n            generateModelCommands(this, instancingSupported);\n        }\n\n        // If any node changes due to an animation, update the commands. This could be inefficient if the model is\n        // composed of many nodes and only one changes, however it is probably fine in the general use case.\n        // Only applies when instancing is disabled. The instanced shader automatically handles node transformations.\n        if (!instancingSupported && (model.dirty || this._dirty || modeChanged || modelMatrixChanged)) {\n            updateCommandsNonInstanced(this);\n        }\n\n        updateShadows(this);\n        updateWireframe(this);\n        updateShowBoundingVolume(this);\n\n        var passes = frameState.passes;\n        if (!passes.render && !passes.pick) {\n            return;\n        }\n\n        var commandList = frameState.commandList;\n        var commands = this._drawCommands;\n        var commandsLength = commands.length;\n\n        for (var i = 0; i < commandsLength; ++i) {\n            commandList.push(commands[i]);\n        }\n    };\n\n    ModelInstanceCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    ModelInstanceCollection.prototype.destroy = function() {\n        this._model = this._model && this._model.destroy();\n\n        var pickIds = this._pickIds;\n        if (defined(pickIds)) {\n            var length = pickIds.length;\n            for (var i = 0; i < length; ++i) {\n                pickIds[i].destroy();\n            }\n        }\n\n        return destroyObject(this);\n    };\nexport default ModelInstanceCollection;\n","import AttributeCompression from '../Core/AttributeCompression.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport deprecationWarning from '../Core/deprecationWarning.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Quaternion from '../Core/Quaternion.js';\nimport RequestType from '../Core/RequestType.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Transforms from '../Core/Transforms.js';\nimport TranslationRotationScale from '../Core/TranslationRotationScale.js';\nimport Pass from '../Renderer/Pass.js';\nimport Axis from './Axis.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Cesium3DTileFeature from './Cesium3DTileFeature.js';\nimport Cesium3DTileFeatureTable from './Cesium3DTileFeatureTable.js';\nimport ModelInstanceCollection from './ModelInstanceCollection.js';\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/Instanced3DModel|Instanced 3D Model}\n     * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Instanced3DModel3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Instanced3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._modelInstanceCollection = undefined;\n        this._batchTable = undefined;\n        this._features = undefined;\n\n        this.featurePropertiesDirty = false;\n\n        initialize(this, arrayBuffer, byteOffset);\n    }\n\n    // This can be overridden for testing purposes\n    Instanced3DModel3DTileContent._deprecationWarning = deprecationWarning;\n\n    Object.defineProperties(Instanced3DModel3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return this._batchTable.featuresLength;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                var model = this._modelInstanceCollection._model;\n                if (defined(model)) {\n                    return model.trianglesLength;\n                }\n                return 0;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                var model = this._modelInstanceCollection._model;\n                if (defined(model)) {\n                    return model.geometryByteLength;\n                }\n                return 0;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                var model = this._modelInstanceCollection._model;\n                if (defined(model)) {\n                    return model.texturesByteLength;\n                }\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return this._batchTable.memorySizeInBytes;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._modelInstanceCollection.readyPromise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url: {\n            get: function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return this._batchTable;\n            }\n        }\n    });\n\n    function getPickIdCallback(content) {\n        return function() {\n            return content._batchTable.getPickId();\n        };\n    }\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n    var propertyScratch1 = new Array(4);\n    var propertyScratch2 = new Array(4);\n\n    function initialize(content, arrayBuffer, byteOffset) {\n        var byteStart = defaultValue(byteOffset, 0);\n        byteOffset = byteStart;\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Instanced 3D Model version 1 is supported. Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var byteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n        if (featureTableJsonByteLength === 0) {\n            throw new RuntimeError('featureTableJsonByteLength is zero, the feature table must be defined.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var gltfFormat = view.getUint32(byteOffset, true);\n        if (gltfFormat !== 1 && gltfFormat !== 0) {\n            throw new RuntimeError('Only glTF format 0 (uri) or 1 (embedded) are supported. Format ' + gltfFormat + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJsonByteLength);\n        var featureTableJson = JSON.parse(featureTableString);\n        byteOffset += featureTableJsonByteLength;\n\n        var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n        byteOffset += featureTableBinaryByteLength;\n\n        var featureTable = new Cesium3DTileFeatureTable(featureTableJson, featureTableBinary);\n        var instancesLength = featureTable.getGlobalProperty('INSTANCES_LENGTH');\n        featureTable.featuresLength = instancesLength;\n\n        if (!defined(instancesLength)) {\n            throw new RuntimeError('Feature table global property: INSTANCES_LENGTH must be defined');\n        }\n\n        var batchTableJson;\n        var batchTableBinary;\n        if (batchTableJsonByteLength > 0) {\n            var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJsonByteLength);\n            batchTableJson = JSON.parse(batchTableString);\n            byteOffset += batchTableJsonByteLength;\n\n            if (batchTableBinaryByteLength > 0) {\n                // Has a batch table binary\n                batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n                // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n                batchTableBinary = new Uint8Array(batchTableBinary);\n                byteOffset += batchTableBinaryByteLength;\n            }\n        }\n\n        content._batchTable = new Cesium3DTileBatchTable(content, instancesLength, batchTableJson, batchTableBinary);\n\n        var gltfByteLength = byteStart + byteLength - byteOffset;\n        if (gltfByteLength === 0) {\n            throw new RuntimeError('glTF byte length is zero, i3dm must have a glTF to instance.');\n        }\n\n        var gltfView;\n        if (byteOffset % 4 === 0) {\n            gltfView = new Uint8Array(arrayBuffer, byteOffset, gltfByteLength);\n        } else {\n            // Create a copy of the glb so that it is 4-byte aligned\n            Instanced3DModel3DTileContent._deprecationWarning('i3dm-glb-unaligned', 'The embedded glb is not aligned to a 4-byte boundary.');\n            gltfView = new Uint8Array(uint8Array.subarray(byteOffset, byteOffset + gltfByteLength));\n        }\n\n        var tileset = content._tileset;\n\n        // Create model instance collection\n        var collectionOptions = {\n            instances : new Array(instancesLength),\n            batchTable : content._batchTable,\n            cull : false, // Already culled by 3D Tiles\n            url : undefined,\n            requestType : RequestType.TILES3D,\n            gltf : undefined,\n            basePath : undefined,\n            incrementallyLoadTextures : false,\n            upAxis : tileset._gltfUpAxis,\n            forwardAxis : Axis.X,\n            opaquePass : Pass.CESIUM_3D_TILE, // Draw opaque portions during the 3D Tiles pass\n            pickIdLoaded : getPickIdCallback(content),\n            imageBasedLightingFactor : tileset.imageBasedLightingFactor,\n            lightColor : tileset.lightColor,\n            luminanceAtZenith : tileset.luminanceAtZenith,\n            sphericalHarmonicCoefficients : tileset.sphericalHarmonicCoefficients,\n            specularEnvironmentMaps : tileset.specularEnvironmentMaps,\n            shadows : tileset.shadows\n        };\n\n        if (gltfFormat === 0) {\n            var gltfUrl = getStringFromTypedArray(gltfView);\n\n            // We need to remove padding from the end of the model URL in case this tile was part of a composite tile.\n            // This removes all white space and null characters from the end of the string.\n            gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n            collectionOptions.url = content._resource.getDerivedResource({\n                url: gltfUrl\n            });\n        } else {\n            collectionOptions.gltf = gltfView;\n            collectionOptions.basePath = content._resource.clone();\n        }\n\n        var eastNorthUp = featureTable.getGlobalProperty('EAST_NORTH_UP');\n\n        var rtcCenter;\n        var rtcCenterArray = featureTable.getGlobalProperty('RTC_CENTER', ComponentDatatype.FLOAT, 3);\n        if (defined(rtcCenterArray)) {\n            rtcCenter = Cartesian3.unpack(rtcCenterArray);\n        }\n\n        var instances = collectionOptions.instances;\n        var instancePosition = new Cartesian3();\n        var instancePositionArray = new Array(3);\n        var instanceNormalRight = new Cartesian3();\n        var instanceNormalUp = new Cartesian3();\n        var instanceNormalForward = new Cartesian3();\n        var instanceRotation = new Matrix3();\n        var instanceQuaternion = new Quaternion();\n        var instanceScale = new Cartesian3();\n        var instanceTranslationRotationScale = new TranslationRotationScale();\n        var instanceTransform = new Matrix4();\n        for (var i = 0; i < instancesLength; i++) {\n            // Get the instance position\n            var position = featureTable.getProperty('POSITION', ComponentDatatype.FLOAT, 3, i, propertyScratch1);\n            if (!defined(position)) {\n                position = instancePositionArray;\n                var positionQuantized = featureTable.getProperty('POSITION_QUANTIZED', ComponentDatatype.UNSIGNED_SHORT, 3, i, propertyScratch1);\n                if (!defined(positionQuantized)) {\n                    throw new RuntimeError('Either POSITION or POSITION_QUANTIZED must be defined for each instance.');\n                }\n                var quantizedVolumeOffset = featureTable.getGlobalProperty('QUANTIZED_VOLUME_OFFSET', ComponentDatatype.FLOAT, 3);\n                if (!defined(quantizedVolumeOffset)) {\n                    throw new RuntimeError('Global property: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n                }\n                var quantizedVolumeScale = featureTable.getGlobalProperty('QUANTIZED_VOLUME_SCALE', ComponentDatatype.FLOAT, 3);\n                if (!defined(quantizedVolumeScale)) {\n                    throw new RuntimeError('Global property: QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n                }\n                for (var j = 0; j < 3; j++) {\n                    position[j] = (positionQuantized[j] / 65535.0 * quantizedVolumeScale[j]) + quantizedVolumeOffset[j];\n                }\n            }\n            Cartesian3.unpack(position, 0, instancePosition);\n            if (defined(rtcCenter)) {\n                Cartesian3.add(instancePosition, rtcCenter, instancePosition);\n            }\n            instanceTranslationRotationScale.translation = instancePosition;\n\n            // Get the instance rotation\n            var normalUp = featureTable.getProperty('NORMAL_UP', ComponentDatatype.FLOAT, 3, i, propertyScratch1);\n            var normalRight = featureTable.getProperty('NORMAL_RIGHT', ComponentDatatype.FLOAT, 3, i, propertyScratch2);\n            var hasCustomOrientation = false;\n            if (defined(normalUp)) {\n                if (!defined(normalRight)) {\n                    throw new RuntimeError('To define a custom orientation, both NORMAL_UP and NORMAL_RIGHT must be defined.');\n                }\n                Cartesian3.unpack(normalUp, 0, instanceNormalUp);\n                Cartesian3.unpack(normalRight, 0, instanceNormalRight);\n                hasCustomOrientation = true;\n            } else {\n                var octNormalUp = featureTable.getProperty('NORMAL_UP_OCT32P', ComponentDatatype.UNSIGNED_SHORT, 2, i, propertyScratch1);\n                var octNormalRight = featureTable.getProperty('NORMAL_RIGHT_OCT32P', ComponentDatatype.UNSIGNED_SHORT, 2, i, propertyScratch2);\n                if (defined(octNormalUp)) {\n                    if (!defined(octNormalRight)) {\n                        throw new RuntimeError('To define a custom orientation with oct-encoded vectors, both NORMAL_UP_OCT32P and NORMAL_RIGHT_OCT32P must be defined.');\n                    }\n                    AttributeCompression.octDecodeInRange(octNormalUp[0], octNormalUp[1], 65535, instanceNormalUp);\n                    AttributeCompression.octDecodeInRange(octNormalRight[0], octNormalRight[1], 65535, instanceNormalRight);\n                    hasCustomOrientation = true;\n                } else if (eastNorthUp) {\n                    Transforms.eastNorthUpToFixedFrame(instancePosition, Ellipsoid.WGS84, instanceTransform);\n                    Matrix4.getMatrix3(instanceTransform, instanceRotation);\n                } else {\n                    Matrix3.clone(Matrix3.IDENTITY, instanceRotation);\n                }\n            }\n            if (hasCustomOrientation) {\n                Cartesian3.cross(instanceNormalRight, instanceNormalUp, instanceNormalForward);\n                Cartesian3.normalize(instanceNormalForward, instanceNormalForward);\n                Matrix3.setColumn(instanceRotation, 0, instanceNormalRight, instanceRotation);\n                Matrix3.setColumn(instanceRotation, 1, instanceNormalUp, instanceRotation);\n                Matrix3.setColumn(instanceRotation, 2, instanceNormalForward, instanceRotation);\n            }\n            Quaternion.fromRotationMatrix(instanceRotation, instanceQuaternion);\n            instanceTranslationRotationScale.rotation = instanceQuaternion;\n\n            // Get the instance scale\n            instanceScale = Cartesian3.fromElements(1.0, 1.0, 1.0, instanceScale);\n            var scale = featureTable.getProperty('SCALE', ComponentDatatype.FLOAT, 1, i);\n            if (defined(scale)) {\n                Cartesian3.multiplyByScalar(instanceScale, scale, instanceScale);\n            }\n            var nonUniformScale = featureTable.getProperty('SCALE_NON_UNIFORM', ComponentDatatype.FLOAT, 3, i, propertyScratch1);\n            if (defined(nonUniformScale)) {\n                instanceScale.x *= nonUniformScale[0];\n                instanceScale.y *= nonUniformScale[1];\n                instanceScale.z *= nonUniformScale[2];\n            }\n            instanceTranslationRotationScale.scale = instanceScale;\n\n            // Get the batchId\n            var batchId = featureTable.getProperty('BATCH_ID', ComponentDatatype.UNSIGNED_SHORT, 1, i);\n            if (!defined(batchId)) {\n                // If BATCH_ID semantic is undefined, batchId is just the instance number\n                batchId = i;\n            }\n\n            // Create the model matrix and the instance\n            Matrix4.fromTranslationRotationScale(instanceTranslationRotationScale, instanceTransform);\n            var modelMatrix = instanceTransform.clone();\n            instances[i] = {\n                modelMatrix : modelMatrix,\n                batchId : batchId\n            };\n        }\n\n        content._modelInstanceCollection = new ModelInstanceCollection(collectionOptions);\n    }\n\n    function createFeatures(content) {\n        var featuresLength = content.featuresLength;\n        if (!defined(content._features) && (featuresLength > 0)) {\n            var features = new Array(featuresLength);\n            for (var i = 0; i < featuresLength; ++i) {\n                features[i] = new Cesium3DTileFeature(content, i);\n            }\n            content._features = features;\n        }\n    }\n\n    Instanced3DModel3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return this._batchTable.hasProperty(batchId, name);\n    };\n\n    Instanced3DModel3DTileContent.prototype.getFeature = function(batchId) {\n        var featuresLength = this.featuresLength;\n        \n\n        createFeatures(this);\n        return this._features[batchId];\n    };\n\n    Instanced3DModel3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        color = enabled ? color : Color.WHITE;\n        this._batchTable.setAllColor(color);\n    };\n\n    Instanced3DModel3DTileContent.prototype.applyStyle = function(style) {\n        this._batchTable.applyStyle(style);\n    };\n\n    Instanced3DModel3DTileContent.prototype.update = function(tileset, frameState) {\n        var commandStart = frameState.commandList.length;\n\n        // In the PROCESSING state we may be calling update() to move forward\n        // the content's resource loading.  In the READY state, it will\n        // actually generate commands.\n        this._batchTable.update(tileset, frameState);\n        this._modelInstanceCollection.modelMatrix = this._tile.computedTransform;\n        this._modelInstanceCollection.shadows = this._tileset.shadows;\n        this._modelInstanceCollection.lightColor = this._tileset.lightColor;\n        this._modelInstanceCollection.luminanceAtZenith = this._tileset.luminanceAtZenith;\n        this._modelInstanceCollection.sphericalHarmonicCoefficients = this._tileset.sphericalHarmonicCoefficients;\n        this._modelInstanceCollection.specularEnvironmentMaps = this._tileset.specularEnvironmentMaps;\n        this._modelInstanceCollection.debugWireframe = this._tileset.debugWireframe;\n\n        var model = this._modelInstanceCollection._model;\n\n        if (defined(model)) {\n            // Update for clipping planes\n            var tilesetClippingPlanes = this._tileset.clippingPlanes;\n            model.clippingPlanesOriginMatrix = this._tileset.clippingPlanesOriginMatrix;\n            if (defined(tilesetClippingPlanes) && this._tile.clippingPlanesDirty) {\n                // Dereference the clipping planes from the model if they are irrelevant - saves on shading\n                // Link/Dereference directly to avoid ownership checks.\n                model._clippingPlanes = (tilesetClippingPlanes.enabled && this._tile._isClipped) ? tilesetClippingPlanes : undefined;\n            }\n\n            // If the model references a different ClippingPlaneCollection due to the tileset's collection being replaced with a\n            // ClippingPlaneCollection that gives this tile the same clipping status, update the model to use the new ClippingPlaneCollection.\n            if (defined(tilesetClippingPlanes) && defined(model._clippingPlanes) && model._clippingPlanes !== tilesetClippingPlanes) {\n                model._clippingPlanes = tilesetClippingPlanes;\n            }\n        }\n\n        this._modelInstanceCollection.update(frameState);\n\n        // If any commands were pushed, add derived commands\n        var commandEnd = frameState.commandList.length;\n        if ((commandStart < commandEnd) && (frameState.passes.render || frameState.passes.pick)) {\n            this._batchTable.addDerivedCommands(frameState, commandStart, false);\n        }\n    };\n\n    Instanced3DModel3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Instanced3DModel3DTileContent.prototype.destroy = function() {\n        this._modelInstanceCollection = this._modelInstanceCollection && this._modelInstanceCollection.destroy();\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n\n        return destroyObject(this);\n    };\nexport default Instanced3DModel3DTileContent;\n","import arraySlice from '../Core/arraySlice.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\nimport OrthographicFrustum from '../Core/OrthographicFrustum.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Transforms from '../Core/Transforms.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport ShaderProgram from '../Renderer/ShaderProgram.js';\nimport VertexArray from '../Renderer/VertexArray.js';\nimport when from '../ThirdParty/when.js';\nimport BlendingState from './BlendingState.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Cesium3DTileFeatureTable from './Cesium3DTileFeatureTable.js';\nimport DracoLoader from './DracoLoader.js';\nimport getClipAndStyleCode from './getClipAndStyleCode.js';\nimport getClippingFunction from './getClippingFunction.js';\nimport SceneMode from './SceneMode.js';\nimport ShadowMode from './ShadowMode.js';\nimport StencilConstants from './StencilConstants.js';\n\n    var DecodingState = {\n        NEEDS_DECODE : 0,\n        DECODING : 1,\n        READY : 2,\n        FAILED : 3\n    };\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud|Point Cloud}\n     * tile. Used internally by {@link PointCloud3DTileContent} and {@link TimeDynamicPointCloud}.\n     *\n     * @alias PointCloud\n     * @constructor\n     *\n     * @see PointCloud3DTileContent\n     * @see TimeDynamicPointCloud\n     *\n     * @private\n     */\n    function PointCloud(options) {\n        \n\n        // Hold onto the payload until the render resources are created\n        this._parsedContent = undefined;\n\n        this._drawCommand = undefined;\n        this._isTranslucent = false;\n        this._styleTranslucent = false;\n        this._constantColor = Color.clone(Color.DARKGRAY);\n        this._highlightColor = Color.clone(Color.WHITE);\n        this._pointSize = 1.0;\n\n        this._rtcCenter = undefined;\n        this._quantizedVolumeScale = undefined;\n        this._quantizedVolumeOffset = undefined;\n\n        // These values are used to regenerate the shader when the style changes\n        this._styleableShaderAttributes = undefined;\n        this._isQuantized = false;\n        this._isOctEncoded16P = false;\n        this._isRGB565 = false;\n        this._hasColors = false;\n        this._hasNormals = false;\n        this._hasBatchIds = false;\n\n        // Draco\n        this._decodingState = DecodingState.READY;\n        this._dequantizeInShader = true;\n        this._isQuantizedDraco = false;\n        this._isOctEncodedDraco = false;\n        this._quantizedRange = 0.0;\n        this._octEncodedRange = 0.0;\n\n        // Use per-point normals to hide back-facing points.\n        this.backFaceCulling = false;\n        this._backFaceCulling = false;\n\n        // Whether to enable normal shading\n        this.normalShading = true;\n        this._normalShading = true;\n\n        this._opaqueRenderState = undefined;\n        this._translucentRenderState = undefined;\n\n        this._mode = undefined;\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n        this._pointsLength = 0;\n        this._geometryByteLength = 0;\n\n        this._vertexShaderLoaded = options.vertexShaderLoaded;\n        this._fragmentShaderLoaded = options.fragmentShaderLoaded;\n        this._uniformMapLoaded = options.uniformMapLoaded;\n        this._batchTableLoaded = options.batchTableLoaded;\n        this._pickIdLoaded = options.pickIdLoaded;\n        this._opaquePass = defaultValue(options.opaquePass, Pass.OPAQUE);\n        this._cull = defaultValue(options.cull, true);\n\n        this.style = undefined;\n        this._style = undefined;\n        this.styleDirty = false;\n\n        this.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n        this._modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n\n        this.time = 0.0; // For styling\n        this.shadows = ShadowMode.ENABLED;\n        this._boundingSphere = undefined;\n\n        this.clippingPlanes = undefined;\n        this.isClipped = false;\n        this.clippingPlanesDirty = false;\n        // If defined, use this matrix to position the clipping planes instead of the modelMatrix.\n        // This is so that when point clouds are part of a tileset they all get clipped relative\n        // to the root tile.\n        this.clippingPlanesOriginMatrix = undefined;\n\n        this.attenuation = false;\n        this._attenuation = false;\n\n        // Options for geometric error based attenuation\n        this.geometricError = 0.0;\n        this.geometricErrorScale = 1.0;\n        this.maximumAttenuation = this._pointSize;\n\n        initialize(this, options);\n    }\n\n    Object.defineProperties(PointCloud.prototype, {\n        pointsLength : {\n            get : function() {\n                return this._pointsLength;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                return this._geometryByteLength;\n            }\n        },\n\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        color : {\n            get : function() {\n                return Color.clone(this._highlightColor);\n            },\n            set : function(value) {\n                this._highlightColor = Color.clone(value, this._highlightColor);\n            }\n        },\n\n        boundingSphere : {\n            get : function() {\n                if (defined(this._drawCommand)) {\n                    return this._drawCommand.boundingVolume;\n                }\n                return undefined;\n            },\n            set : function(value) {\n                this._boundingSphere = BoundingSphere.clone(value, this._boundingSphere);\n            }\n        }\n    });\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n    function initialize(pointCloud, options) {\n        var arrayBuffer = options.arrayBuffer;\n        var byteOffset = defaultValue(options.byteOffset, 0);\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Point Cloud tile version 1 is supported.  Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        // Skip byteLength\n        byteOffset += sizeOfUint32;\n\n        var featureTableJsonByteLength = view.getUint32(byteOffset, true);\n        if (featureTableJsonByteLength === 0) {\n            throw new RuntimeError('Feature table must have a byte length greater than zero');\n        }\n        byteOffset += sizeOfUint32;\n\n        var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var batchTableJsonByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJsonByteLength);\n        var featureTableJson = JSON.parse(featureTableString);\n        byteOffset += featureTableJsonByteLength;\n\n        var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n        byteOffset += featureTableBinaryByteLength;\n\n        // Get the batch table JSON and binary\n        var batchTableJson;\n        var batchTableBinary;\n        if (batchTableJsonByteLength > 0) {\n            // Has a batch table JSON\n            var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJsonByteLength);\n            batchTableJson = JSON.parse(batchTableString);\n            byteOffset += batchTableJsonByteLength;\n\n            if (batchTableBinaryByteLength > 0) {\n                // Has a batch table binary\n                batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n                byteOffset += batchTableBinaryByteLength;\n            }\n        }\n\n        var featureTable = new Cesium3DTileFeatureTable(featureTableJson, featureTableBinary);\n\n        var pointsLength = featureTable.getGlobalProperty('POINTS_LENGTH');\n        featureTable.featuresLength = pointsLength;\n\n        if (!defined(pointsLength)) {\n            throw new RuntimeError('Feature table global property: POINTS_LENGTH must be defined');\n        }\n\n        var rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', ComponentDatatype.FLOAT, 3);\n        if (defined(rtcCenter)) {\n            pointCloud._rtcCenter = Cartesian3.unpack(rtcCenter);\n        }\n\n        var positions;\n        var colors;\n        var normals;\n        var batchIds;\n\n        var hasPositions = false;\n        var hasColors = false;\n        var hasNormals = false;\n        var hasBatchIds = false;\n\n        var isQuantized = false;\n        var isTranslucent = false;\n        var isRGB565 = false;\n        var isOctEncoded16P = false;\n\n        var dracoBuffer;\n        var dracoFeatureTableProperties;\n        var dracoBatchTableProperties;\n\n        var featureTableDraco = defined(featureTableJson.extensions) ? featureTableJson.extensions['3DTILES_draco_point_compression'] : undefined;\n        var batchTableDraco = (defined(batchTableJson) && defined(batchTableJson.extensions)) ? batchTableJson.extensions['3DTILES_draco_point_compression'] : undefined;\n\n        if (defined(batchTableDraco)) {\n            dracoBatchTableProperties = batchTableDraco.properties;\n        }\n\n        if (defined(featureTableDraco)) {\n            dracoFeatureTableProperties = featureTableDraco.properties;\n            var dracoByteOffset = featureTableDraco.byteOffset;\n            var dracoByteLength = featureTableDraco.byteLength;\n            if (!defined(dracoFeatureTableProperties) || !defined(dracoByteOffset) || !defined(dracoByteLength)) {\n                throw new RuntimeError('Draco properties, byteOffset, and byteLength must be defined');\n            }\n            dracoBuffer = arraySlice(featureTableBinary, dracoByteOffset, dracoByteOffset + dracoByteLength);\n            hasPositions = defined(dracoFeatureTableProperties.POSITION);\n            hasColors = defined(dracoFeatureTableProperties.RGB) || defined(dracoFeatureTableProperties.RGBA);\n            hasNormals = defined(dracoFeatureTableProperties.NORMAL);\n            hasBatchIds = defined(dracoFeatureTableProperties.BATCH_ID);\n            isTranslucent = defined(dracoFeatureTableProperties.RGBA);\n            pointCloud._decodingState = DecodingState.NEEDS_DECODE;\n        }\n\n        var draco;\n        if (defined(dracoBuffer)) {\n            draco = {\n                buffer : dracoBuffer,\n                featureTableProperties : dracoFeatureTableProperties,\n                batchTableProperties : dracoBatchTableProperties,\n                properties : combine(dracoFeatureTableProperties, dracoBatchTableProperties),\n                dequantizeInShader : pointCloud._dequantizeInShader\n            };\n        }\n\n        if (!hasPositions) {\n            if (defined(featureTableJson.POSITION)) {\n                positions = featureTable.getPropertyArray('POSITION', ComponentDatatype.FLOAT, 3);\n                hasPositions = true;\n            } else if (defined(featureTableJson.POSITION_QUANTIZED)) {\n                positions = featureTable.getPropertyArray('POSITION_QUANTIZED', ComponentDatatype.UNSIGNED_SHORT, 3);\n                isQuantized = true;\n                hasPositions = true;\n\n                var quantizedVolumeScale = featureTable.getGlobalProperty('QUANTIZED_VOLUME_SCALE', ComponentDatatype.FLOAT, 3);\n                if (!defined(quantizedVolumeScale)) {\n                    throw new RuntimeError('Global property: QUANTIZED_VOLUME_SCALE must be defined for quantized positions.');\n                }\n                pointCloud._quantizedVolumeScale = Cartesian3.unpack(quantizedVolumeScale);\n                pointCloud._quantizedRange = (1 << 16) - 1;\n\n                var quantizedVolumeOffset = featureTable.getGlobalProperty('QUANTIZED_VOLUME_OFFSET', ComponentDatatype.FLOAT, 3);\n                if (!defined(quantizedVolumeOffset)) {\n                    throw new RuntimeError('Global property: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.');\n                }\n                pointCloud._quantizedVolumeOffset = Cartesian3.unpack(quantizedVolumeOffset);\n            }\n        }\n\n        if (!hasColors) {\n            if (defined(featureTableJson.RGBA)) {\n                colors = featureTable.getPropertyArray('RGBA', ComponentDatatype.UNSIGNED_BYTE, 4);\n                isTranslucent = true;\n                hasColors = true;\n            } else if (defined(featureTableJson.RGB)) {\n                colors = featureTable.getPropertyArray('RGB', ComponentDatatype.UNSIGNED_BYTE, 3);\n                hasColors = true;\n            } else if (defined(featureTableJson.RGB565)) {\n                colors = featureTable.getPropertyArray('RGB565', ComponentDatatype.UNSIGNED_SHORT, 1);\n                isRGB565 = true;\n                hasColors = true;\n            }\n        }\n\n        if (!hasNormals) {\n            if (defined(featureTableJson.NORMAL)) {\n                normals = featureTable.getPropertyArray('NORMAL', ComponentDatatype.FLOAT, 3);\n                hasNormals = true;\n            } else if (defined(featureTableJson.NORMAL_OCT16P)) {\n                normals = featureTable.getPropertyArray('NORMAL_OCT16P', ComponentDatatype.UNSIGNED_BYTE, 2);\n                isOctEncoded16P = true;\n                hasNormals = true;\n            }\n        }\n\n        if (!hasBatchIds) {\n            if (defined(featureTableJson.BATCH_ID)) {\n                batchIds = featureTable.getPropertyArray('BATCH_ID', ComponentDatatype.UNSIGNED_SHORT, 1);\n                hasBatchIds = true;\n            }\n        }\n\n        if (!hasPositions) {\n            throw new RuntimeError('Either POSITION or POSITION_QUANTIZED must be defined.');\n        }\n\n        if (defined(featureTableJson.CONSTANT_RGBA)) {\n            var constantRGBA = featureTable.getGlobalProperty('CONSTANT_RGBA', ComponentDatatype.UNSIGNED_BYTE, 4);\n            pointCloud._constantColor = Color.fromBytes(constantRGBA[0], constantRGBA[1], constantRGBA[2], constantRGBA[3], pointCloud._constantColor);\n        }\n\n        if (hasBatchIds) {\n            var batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n            if (!defined(batchLength)) {\n                throw new RuntimeError('Global property: BATCH_LENGTH must be defined when BATCH_ID is defined.');\n            }\n\n            if (defined(batchTableBinary)) {\n                // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n                batchTableBinary = new Uint8Array(batchTableBinary);\n            }\n\n            if (defined(pointCloud._batchTableLoaded)) {\n                pointCloud._batchTableLoaded(batchLength, batchTableJson, batchTableBinary);\n            }\n        }\n\n        // If points are not batched and there are per-point properties, use these properties for styling purposes\n        var styleableProperties;\n        if (!hasBatchIds && defined(batchTableBinary)) {\n            styleableProperties = Cesium3DTileBatchTable.getBinaryProperties(pointsLength, batchTableJson, batchTableBinary);\n        }\n\n        pointCloud._parsedContent = {\n            positions : positions,\n            colors : colors,\n            normals : normals,\n            batchIds : batchIds,\n            styleableProperties : styleableProperties,\n            draco : draco\n        };\n        pointCloud._pointsLength = pointsLength;\n        pointCloud._isQuantized = isQuantized;\n        pointCloud._isOctEncoded16P = isOctEncoded16P;\n        pointCloud._isRGB565 = isRGB565;\n        pointCloud._isTranslucent = isTranslucent;\n        pointCloud._hasColors = hasColors;\n        pointCloud._hasNormals = hasNormals;\n        pointCloud._hasBatchIds = hasBatchIds;\n    }\n\n    var scratchMin = new Cartesian3();\n    var scratchMax = new Cartesian3();\n    var scratchPosition = new Cartesian3();\n    var randomValues;\n\n    function getRandomValues(samplesLength) {\n        // Use same random values across all runs\n        if (!defined(randomValues)) {\n            CesiumMath.setRandomNumberSeed(0);\n            randomValues = new Array(samplesLength);\n            for (var i = 0; i < samplesLength; ++i) {\n                randomValues[i] = CesiumMath.nextRandomNumber();\n            }\n        }\n        return randomValues;\n    }\n\n    function computeApproximateBoundingSphereFromPositions(positions) {\n        var maximumSamplesLength = 20;\n        var pointsLength = positions.length / 3;\n        var samplesLength = Math.min(pointsLength, maximumSamplesLength);\n        var randomValues = getRandomValues(maximumSamplesLength);\n        var maxValue = Number.MAX_VALUE;\n        var minValue = -Number.MAX_VALUE;\n        var min = Cartesian3.fromElements(maxValue, maxValue, maxValue, scratchMin);\n        var max = Cartesian3.fromElements(minValue, minValue, minValue, scratchMax);\n        for (var i = 0; i < samplesLength; ++i) {\n            var index = Math.floor(randomValues[i] * pointsLength);\n            var position = Cartesian3.unpack(positions, index * 3, scratchPosition);\n            Cartesian3.minimumByComponent(min, position, min);\n            Cartesian3.maximumByComponent(max, position, max);\n        }\n\n        var boundingSphere = BoundingSphere.fromCornerPoints(min, max);\n        boundingSphere.radius += CesiumMath.EPSILON2; // To avoid radius of zero\n        return boundingSphere;\n    }\n\n    function prepareVertexAttribute(typedArray, name) {\n        // WebGL does not support UNSIGNED_INT, INT, or DOUBLE vertex attributes. Convert these to FLOAT.\n        var componentDatatype = ComponentDatatype.fromTypedArray(typedArray);\n        if (componentDatatype === ComponentDatatype.INT || componentDatatype === ComponentDatatype.UNSIGNED_INT || componentDatatype === ComponentDatatype.DOUBLE) {\n            oneTimeWarning('Cast pnts property to floats', 'Point cloud property \"' + name + '\" will be casted to a float array because INT, UNSIGNED_INT, and DOUBLE are not valid WebGL vertex attribute types. Some precision may be lost.');\n            return new Float32Array(typedArray);\n        }\n        return typedArray;\n    }\n\n    var scratchPointSizeAndTimeAndGeometricErrorAndDepthMultiplier = new Cartesian4();\n    var scratchQuantizedVolumeScaleAndOctEncodedRange = new Cartesian4();\n    var scratchColor = new Color();\n\n    var positionLocation = 0;\n    var colorLocation = 1;\n    var normalLocation = 2;\n    var batchIdLocation = 3;\n    var numberOfAttributes = 4;\n\n    var scratchClippingPlaneMatrix = new Matrix4();\n\n    function createResources(pointCloud, frameState) {\n        var context = frameState.context;\n        var parsedContent = pointCloud._parsedContent;\n        var pointsLength = pointCloud._pointsLength;\n        var positions = parsedContent.positions;\n        var colors = parsedContent.colors;\n        var normals = parsedContent.normals;\n        var batchIds = parsedContent.batchIds;\n        var styleableProperties = parsedContent.styleableProperties;\n        var hasStyleableProperties = defined(styleableProperties);\n        var isQuantized = pointCloud._isQuantized;\n        var isQuantizedDraco = pointCloud._isQuantizedDraco;\n        var isOctEncoded16P = pointCloud._isOctEncoded16P;\n        var isOctEncodedDraco = pointCloud._isOctEncodedDraco;\n        var quantizedRange = pointCloud._quantizedRange;\n        var octEncodedRange = pointCloud._octEncodedRange;\n        var isRGB565 = pointCloud._isRGB565;\n        var isTranslucent = pointCloud._isTranslucent;\n        var hasColors = pointCloud._hasColors;\n        var hasNormals = pointCloud._hasNormals;\n        var hasBatchIds = pointCloud._hasBatchIds;\n\n        var componentsPerAttribute;\n        var componentDatatype;\n\n        var styleableVertexAttributes = [];\n        var styleableShaderAttributes = {};\n        pointCloud._styleableShaderAttributes = styleableShaderAttributes;\n\n        if (hasStyleableProperties) {\n            var attributeLocation = numberOfAttributes;\n\n            for (var name in styleableProperties) {\n                if (styleableProperties.hasOwnProperty(name)) {\n                    var property = styleableProperties[name];\n                    var typedArray = prepareVertexAttribute(property.typedArray, name);\n                    componentsPerAttribute = property.componentCount;\n                    componentDatatype = ComponentDatatype.fromTypedArray(typedArray);\n\n                    var vertexBuffer = Buffer.createVertexBuffer({\n                        context : context,\n                        typedArray : typedArray,\n                        usage : BufferUsage.STATIC_DRAW\n                    });\n\n                    pointCloud._geometryByteLength += vertexBuffer.sizeInBytes;\n\n                    var vertexAttribute = {\n                        index : attributeLocation,\n                        vertexBuffer : vertexBuffer,\n                        componentsPerAttribute : componentsPerAttribute,\n                        componentDatatype : componentDatatype,\n                        normalize : false,\n                        offsetInBytes : 0,\n                        strideInBytes : 0\n                    };\n\n                    styleableVertexAttributes.push(vertexAttribute);\n                    styleableShaderAttributes[name] = {\n                        location : attributeLocation,\n                        componentCount : componentsPerAttribute\n                    };\n                    ++attributeLocation;\n                }\n            }\n        }\n\n        var positionsVertexBuffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : positions,\n            usage : BufferUsage.STATIC_DRAW\n        });\n        pointCloud._geometryByteLength += positionsVertexBuffer.sizeInBytes;\n\n        var colorsVertexBuffer;\n        if (hasColors) {\n            colorsVertexBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : colors,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            pointCloud._geometryByteLength += colorsVertexBuffer.sizeInBytes;\n        }\n\n        var normalsVertexBuffer;\n        if (hasNormals) {\n            normalsVertexBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : normals,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            pointCloud._geometryByteLength += normalsVertexBuffer.sizeInBytes;\n        }\n\n        var batchIdsVertexBuffer;\n        if (hasBatchIds) {\n            batchIds = prepareVertexAttribute(batchIds, 'batchIds');\n            batchIdsVertexBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : batchIds,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            pointCloud._geometryByteLength += batchIdsVertexBuffer.sizeInBytes;\n        }\n\n        var attributes = [];\n\n        if (isQuantized) {\n            componentDatatype = ComponentDatatype.UNSIGNED_SHORT;\n        } else if (isQuantizedDraco) {\n            componentDatatype = (quantizedRange <= 255) ? ComponentDatatype.UNSIGNED_BYTE : ComponentDatatype.UNSIGNED_SHORT;\n        } else {\n            componentDatatype = ComponentDatatype.FLOAT;\n        }\n\n        attributes.push({\n            index : positionLocation,\n            vertexBuffer : positionsVertexBuffer,\n            componentsPerAttribute : 3,\n            componentDatatype : componentDatatype,\n            normalize : false,\n            offsetInBytes : 0,\n            strideInBytes : 0\n        });\n\n        if (pointCloud._cull) {\n            if (isQuantized || isQuantizedDraco) {\n                pointCloud._boundingSphere = BoundingSphere.fromCornerPoints(Cartesian3.ZERO, pointCloud._quantizedVolumeScale);\n            } else {\n                pointCloud._boundingSphere = computeApproximateBoundingSphereFromPositions(positions);\n            }\n        }\n\n        if (hasColors) {\n            if (isRGB565) {\n                attributes.push({\n                    index : colorLocation,\n                    vertexBuffer : colorsVertexBuffer,\n                    componentsPerAttribute : 1,\n                    componentDatatype : ComponentDatatype.UNSIGNED_SHORT,\n                    normalize : false,\n                    offsetInBytes : 0,\n                    strideInBytes : 0\n                });\n            } else {\n                var colorComponentsPerAttribute = isTranslucent ? 4 : 3;\n                attributes.push({\n                    index : colorLocation,\n                    vertexBuffer : colorsVertexBuffer,\n                    componentsPerAttribute : colorComponentsPerAttribute,\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    normalize : true,\n                    offsetInBytes : 0,\n                    strideInBytes : 0\n                });\n            }\n        }\n\n        if (hasNormals) {\n            if (isOctEncoded16P) {\n                componentsPerAttribute = 2;\n                componentDatatype = ComponentDatatype.UNSIGNED_BYTE;\n            } else if (isOctEncodedDraco) {\n                componentsPerAttribute = 2;\n                componentDatatype = (octEncodedRange <= 255) ? ComponentDatatype.UNSIGNED_BYTE : ComponentDatatype.UNSIGNED_SHORT;\n            } else {\n                componentsPerAttribute = 3;\n                componentDatatype = ComponentDatatype.FLOAT;\n            }\n            attributes.push({\n                index : normalLocation,\n                vertexBuffer : normalsVertexBuffer,\n                componentsPerAttribute : componentsPerAttribute,\n                componentDatatype : componentDatatype,\n                normalize : false,\n                offsetInBytes : 0,\n                strideInBytes : 0\n            });\n        }\n\n        if (hasBatchIds) {\n            attributes.push({\n                index : batchIdLocation,\n                vertexBuffer : batchIdsVertexBuffer,\n                componentsPerAttribute : 1,\n                componentDatatype : ComponentDatatype.fromTypedArray(batchIds),\n                normalize : false,\n                offsetInBytes : 0,\n                strideInBytes : 0\n            });\n        }\n\n        if (hasStyleableProperties) {\n            attributes = attributes.concat(styleableVertexAttributes);\n        }\n\n        var vertexArray = new VertexArray({\n            context : context,\n            attributes : attributes\n        });\n\n        var opaqueRenderState = {\n            depthTest : {\n                enabled : true\n            }\n        };\n\n        if (pointCloud._opaquePass === Pass.CESIUM_3D_TILE) {\n            opaqueRenderState.stencilTest = StencilConstants.setCesium3DTileBit();\n            opaqueRenderState.stencilMask = StencilConstants.CESIUM_3D_TILE_MASK;\n        }\n\n        pointCloud._opaqueRenderState = RenderState.fromCache(opaqueRenderState);\n\n        pointCloud._translucentRenderState = RenderState.fromCache({\n            depthTest : {\n                enabled : true\n            },\n            depthMask : false,\n            blending : BlendingState.ALPHA_BLEND\n        });\n\n        pointCloud._drawCommand = new DrawCommand({\n            boundingVolume : new BoundingSphere(),\n            cull : pointCloud._cull,\n            modelMatrix : new Matrix4(),\n            primitiveType : PrimitiveType.POINTS,\n            vertexArray : vertexArray,\n            count : pointsLength,\n            shaderProgram : undefined, // Updated in createShaders\n            uniformMap : undefined, // Updated in createShaders\n            renderState : isTranslucent ? pointCloud._translucentRenderState : pointCloud._opaqueRenderState,\n            pass : isTranslucent ? Pass.TRANSLUCENT : pointCloud._opaquePass,\n            owner : pointCloud,\n            castShadows : false,\n            receiveShadows : false,\n            pickId : pointCloud._pickIdLoaded()\n        });\n    }\n\n    function createUniformMap(pointCloud, frameState) {\n        var context = frameState.context;\n        var isQuantized = pointCloud._isQuantized;\n        var isQuantizedDraco = pointCloud._isQuantizedDraco;\n        var isOctEncodedDraco = pointCloud._isOctEncodedDraco;\n\n        var uniformMap = {\n            u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier : function() {\n                var scratch = scratchPointSizeAndTimeAndGeometricErrorAndDepthMultiplier;\n                scratch.x = pointCloud._attenuation ? pointCloud.maximumAttenuation : pointCloud._pointSize;\n                scratch.x *= frameState.pixelRatio;\n\n                scratch.y = pointCloud.time;\n\n                if (pointCloud._attenuation) {\n                    var frustum = frameState.camera.frustum;\n                    var depthMultiplier;\n                    // Attenuation is maximumAttenuation in 2D/ortho\n                    if (frameState.mode === SceneMode.SCENE2D || frustum instanceof OrthographicFrustum) {\n                        depthMultiplier = Number.POSITIVE_INFINITY;\n                    } else {\n                        depthMultiplier = context.drawingBufferHeight / frameState.camera.frustum.sseDenominator;\n                    }\n\n                    scratch.z = pointCloud.geometricError * pointCloud.geometricErrorScale;\n                    scratch.w = depthMultiplier;\n                }\n\n                return scratch;\n            },\n            u_highlightColor : function() {\n                return pointCloud._highlightColor;\n            },\n            u_constantColor : function() {\n                return pointCloud._constantColor;\n            },\n            u_clippingPlanes : function() {\n                var clippingPlanes = pointCloud.clippingPlanes;\n                var isClipped = pointCloud.isClipped;\n                return isClipped ? clippingPlanes.texture : context.defaultTexture;\n            },\n            u_clippingPlanesEdgeStyle : function() {\n                var clippingPlanes = pointCloud.clippingPlanes;\n                if (!defined(clippingPlanes)) {\n                    return Color.TRANSPARENT;\n                }\n\n                var style = Color.clone(clippingPlanes.edgeColor, scratchColor);\n                style.alpha = clippingPlanes.edgeWidth;\n                return style;\n            },\n            u_clippingPlanesMatrix : function() {\n                var clippingPlanes = pointCloud.clippingPlanes;\n                if (!defined(clippingPlanes)) {\n                    return Matrix4.IDENTITY;\n                }\n\n                var clippingPlanesOriginMatrix = defaultValue(pointCloud.clippingPlanesOriginMatrix, pointCloud._modelMatrix);\n                Matrix4.multiply(context.uniformState.view3D, clippingPlanesOriginMatrix, scratchClippingPlaneMatrix);\n                return Matrix4.multiply(scratchClippingPlaneMatrix, clippingPlanes.modelMatrix, scratchClippingPlaneMatrix);\n            }\n        };\n\n        if (isQuantized || isQuantizedDraco || isOctEncodedDraco) {\n            uniformMap = combine(uniformMap, {\n                u_quantizedVolumeScaleAndOctEncodedRange : function() {\n                    var scratch = scratchQuantizedVolumeScaleAndOctEncodedRange;\n                    if (defined(pointCloud._quantizedVolumeScale)) {\n                        var scale = Cartesian3.clone(pointCloud._quantizedVolumeScale, scratch);\n                        Cartesian3.divideByScalar(scale, pointCloud._quantizedRange, scratch);\n                    }\n                    scratch.w = pointCloud._octEncodedRange;\n                    return scratch;\n                }\n            });\n        }\n\n        if (defined(pointCloud._uniformMapLoaded)) {\n            uniformMap = pointCloud._uniformMapLoaded(uniformMap);\n        }\n\n        pointCloud._drawCommand.uniformMap = uniformMap;\n    }\n\n    var defaultProperties = ['POSITION', 'COLOR', 'NORMAL', 'POSITION_ABSOLUTE'];\n\n    function getStyleableProperties(source, properties) {\n        // Get all the properties used by this style\n        var regex = /czm_tiles3d_style_(\\w+)/g;\n        var matches = regex.exec(source);\n        while (matches !== null) {\n            var name = matches[1];\n            if (properties.indexOf(name) === -1) {\n                properties.push(name);\n            }\n            matches = regex.exec(source);\n        }\n    }\n\n    function getVertexAttribute(vertexArray, index) {\n        var numberOfAttributes = vertexArray.numberOfAttributes;\n        for (var i = 0; i < numberOfAttributes; ++i) {\n            var attribute = vertexArray.getAttribute(i);\n            if (attribute.index === index) {\n                return attribute;\n            }\n        }\n    }\n\n    function modifyStyleFunction(source) {\n        // Replace occurrences of czm_tiles3d_style_DEFAULTPROPERTY\n        var length = defaultProperties.length;\n        for (var i = 0; i < length; ++i) {\n            var property = defaultProperties[i];\n            var styleName = 'czm_tiles3d_style_' + property;\n            var replaceName = property.toLowerCase();\n            source = source.replace(new RegExp(styleName + '(\\\\W)', 'g'), replaceName + '$1');\n        }\n\n        // Edit the function header to accept the point position, color, and normal\n        return source.replace('()', '(vec3 position, vec3 position_absolute, vec4 color, vec3 normal)');\n    }\n\n    function createShaders(pointCloud, frameState, style) {\n        var i;\n        var name;\n        var attribute;\n\n        var context = frameState.context;\n        var hasStyle = defined(style);\n        var isQuantized = pointCloud._isQuantized;\n        var isQuantizedDraco = pointCloud._isQuantizedDraco;\n        var isOctEncoded16P = pointCloud._isOctEncoded16P;\n        var isOctEncodedDraco = pointCloud._isOctEncodedDraco;\n        var isRGB565 = pointCloud._isRGB565;\n        var isTranslucent = pointCloud._isTranslucent;\n        var hasColors = pointCloud._hasColors;\n        var hasNormals = pointCloud._hasNormals;\n        var hasBatchIds = pointCloud._hasBatchIds;\n        var backFaceCulling = pointCloud._backFaceCulling;\n        var normalShading = pointCloud._normalShading;\n        var vertexArray = pointCloud._drawCommand.vertexArray;\n        var clippingPlanes = pointCloud.clippingPlanes;\n        var attenuation = pointCloud._attenuation;\n\n        var colorStyleFunction;\n        var showStyleFunction;\n        var pointSizeStyleFunction;\n        var styleTranslucent = isTranslucent;\n\n        if (hasStyle) {\n            var shaderState = {\n                translucent : false\n            };\n            colorStyleFunction = style.getColorShaderFunction('getColorFromStyle', 'czm_tiles3d_style_', shaderState);\n            showStyleFunction = style.getShowShaderFunction('getShowFromStyle', 'czm_tiles3d_style_', shaderState);\n            pointSizeStyleFunction = style.getPointSizeShaderFunction('getPointSizeFromStyle', 'czm_tiles3d_style_', shaderState);\n            if (defined(colorStyleFunction) && shaderState.translucent) {\n                styleTranslucent = true;\n            }\n        }\n\n        pointCloud._styleTranslucent = styleTranslucent;\n\n        var hasColorStyle = defined(colorStyleFunction);\n        var hasShowStyle = defined(showStyleFunction);\n        var hasPointSizeStyle = defined(pointSizeStyleFunction);\n        var hasClippedContent = pointCloud.isClipped;\n\n        // Get the properties in use by the style\n        var styleableProperties = [];\n\n        if (hasColorStyle) {\n            getStyleableProperties(colorStyleFunction, styleableProperties);\n            colorStyleFunction = modifyStyleFunction(colorStyleFunction);\n        }\n        if (hasShowStyle) {\n            getStyleableProperties(showStyleFunction, styleableProperties);\n            showStyleFunction = modifyStyleFunction(showStyleFunction);\n        }\n        if (hasPointSizeStyle) {\n            getStyleableProperties(pointSizeStyleFunction, styleableProperties);\n            pointSizeStyleFunction = modifyStyleFunction(pointSizeStyleFunction);\n        }\n\n        var usesColorSemantic = (styleableProperties.indexOf('COLOR') >= 0);\n        var usesNormalSemantic = (styleableProperties.indexOf('NORMAL') >= 0);\n\n        // Split default properties from user properties\n        var userProperties = styleableProperties.filter(function(property) { return defaultProperties.indexOf(property) === -1; });\n\n        if (usesNormalSemantic && !hasNormals) {\n            throw new RuntimeError('Style references the NORMAL semantic but the point cloud does not have normals');\n        }\n\n        // Disable vertex attributes that aren't used in the style, enable attributes that are\n        var styleableShaderAttributes = pointCloud._styleableShaderAttributes;\n        for (name in styleableShaderAttributes) {\n            if (styleableShaderAttributes.hasOwnProperty(name)) {\n                attribute = styleableShaderAttributes[name];\n                var enabled = (userProperties.indexOf(name) >= 0);\n                var vertexAttribute = getVertexAttribute(vertexArray, attribute.location);\n                vertexAttribute.enabled = enabled;\n            }\n        }\n\n        var usesColors = hasColors && (!hasColorStyle || usesColorSemantic);\n        if (hasColors) {\n            // Disable the color vertex attribute if the color style does not reference the color semantic\n            var colorVertexAttribute = getVertexAttribute(vertexArray, colorLocation);\n            colorVertexAttribute.enabled = usesColors;\n        }\n\n        var usesNormals = hasNormals && (normalShading || backFaceCulling || usesNormalSemantic);\n        if (hasNormals) {\n            // Disable the normal vertex attribute if normals are not used\n            var normalVertexAttribute = getVertexAttribute(vertexArray, normalLocation);\n            normalVertexAttribute.enabled = usesNormals;\n        }\n\n        var attributeLocations = {\n            a_position : positionLocation\n        };\n        if (usesColors) {\n            attributeLocations.a_color = colorLocation;\n        }\n        if (usesNormals) {\n            attributeLocations.a_normal = normalLocation;\n        }\n        if (hasBatchIds) {\n            attributeLocations.a_batchId = batchIdLocation;\n        }\n\n        var attributeDeclarations = '';\n\n        var length = userProperties.length;\n        for (i = 0; i < length; ++i) {\n            name = userProperties[i];\n            attribute = styleableShaderAttributes[name];\n            if (!defined(attribute)) {\n                throw new RuntimeError('Style references a property \"' + name + '\" that does not exist or is not styleable.');\n            }\n\n            var componentCount = attribute.componentCount;\n            var attributeName = 'czm_tiles3d_style_' + name;\n            var attributeType;\n            if (componentCount === 1) {\n                attributeType = 'float';\n            } else {\n                attributeType = 'vec' + componentCount;\n            }\n\n            attributeDeclarations += 'attribute ' + attributeType + ' ' + attributeName + '; \\n';\n            attributeLocations[attributeName] = attribute.location;\n        }\n\n        createUniformMap(pointCloud, frameState);\n\n        var vs = 'attribute vec3 a_position; \\n' +\n                 'varying vec4 v_color; \\n' +\n                 'uniform vec4 u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier; \\n' +\n                 'uniform vec4 u_constantColor; \\n' +\n                 'uniform vec4 u_highlightColor; \\n';\n        vs += 'float u_pointSize; \\n' +\n              'float u_time; \\n';\n\n        if (attenuation) {\n            vs += 'float u_geometricError; \\n' +\n                  'float u_depthMultiplier; \\n';\n        }\n\n        vs += attributeDeclarations;\n\n        if (usesColors) {\n            if (isTranslucent) {\n                vs += 'attribute vec4 a_color; \\n';\n            } else if (isRGB565) {\n                vs += 'attribute float a_color; \\n' +\n                      'const float SHIFT_RIGHT_11 = 1.0 / 2048.0; \\n' +\n                      'const float SHIFT_RIGHT_5 = 1.0 / 32.0; \\n' +\n                      'const float SHIFT_LEFT_11 = 2048.0; \\n' +\n                      'const float SHIFT_LEFT_5 = 32.0; \\n' +\n                      'const float NORMALIZE_6 = 1.0 / 64.0; \\n' +\n                      'const float NORMALIZE_5 = 1.0 / 32.0; \\n';\n            } else {\n                vs += 'attribute vec3 a_color; \\n';\n            }\n        }\n        if (usesNormals) {\n            if (isOctEncoded16P || isOctEncodedDraco) {\n                vs += 'attribute vec2 a_normal; \\n';\n            } else {\n                vs += 'attribute vec3 a_normal; \\n';\n            }\n        }\n\n        if (hasBatchIds) {\n            vs += 'attribute float a_batchId; \\n';\n        }\n\n        if (isQuantized || isQuantizedDraco || isOctEncodedDraco) {\n            vs += 'uniform vec4 u_quantizedVolumeScaleAndOctEncodedRange; \\n';\n        }\n\n        if (hasColorStyle) {\n            vs += colorStyleFunction;\n        }\n\n        if (hasShowStyle) {\n            vs += showStyleFunction;\n        }\n\n        if (hasPointSizeStyle) {\n            vs += pointSizeStyleFunction;\n        }\n\n        vs += 'void main() \\n' +\n              '{ \\n' +\n              '    u_pointSize = u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier.x; \\n' +\n              '    u_time = u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier.y; \\n';\n\n        if (attenuation) {\n            vs += '    u_geometricError = u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier.z; \\n' +\n                  '    u_depthMultiplier = u_pointSizeAndTimeAndGeometricErrorAndDepthMultiplier.w; \\n';\n        }\n\n        if (usesColors) {\n            if (isTranslucent) {\n                vs += '    vec4 color = a_color; \\n';\n            } else if (isRGB565) {\n                vs += '    float compressed = a_color; \\n' +\n                      '    float r = floor(compressed * SHIFT_RIGHT_11); \\n' +\n                      '    compressed -= r * SHIFT_LEFT_11; \\n' +\n                      '    float g = floor(compressed * SHIFT_RIGHT_5); \\n' +\n                      '    compressed -= g * SHIFT_LEFT_5; \\n' +\n                      '    float b = compressed; \\n' +\n                      '    vec3 rgb = vec3(r * NORMALIZE_5, g * NORMALIZE_6, b * NORMALIZE_5); \\n' +\n                      '    vec4 color = vec4(rgb, 1.0); \\n';\n            } else {\n                vs += '    vec4 color = vec4(a_color, 1.0); \\n';\n            }\n        } else {\n            vs += '    vec4 color = u_constantColor; \\n';\n        }\n\n        if (isQuantized || isQuantizedDraco) {\n            vs += '    vec3 position = a_position * u_quantizedVolumeScaleAndOctEncodedRange.xyz; \\n';\n        } else {\n            vs += '    vec3 position = a_position; \\n';\n        }\n        vs += '    vec3 position_absolute = vec3(czm_model * vec4(position, 1.0)); \\n';\n\n        if (usesNormals) {\n            if (isOctEncoded16P) {\n                vs += '    vec3 normal = czm_octDecode(a_normal); \\n';\n            } else if (isOctEncodedDraco) {\n                // Draco oct-encoding decodes to zxy order\n                vs += '    vec3 normal = czm_octDecode(a_normal, u_quantizedVolumeScaleAndOctEncodedRange.w).zxy; \\n';\n            } else {\n                vs += '    vec3 normal = a_normal; \\n';\n            }\n            vs += '    vec3 normalEC = czm_normal * normal; \\n';\n        } else {\n            vs += '    vec3 normal = vec3(1.0); \\n';\n        }\n\n        if (hasColorStyle) {\n            vs += '    color = getColorFromStyle(position, position_absolute, color, normal); \\n';\n        }\n\n        if (hasShowStyle) {\n            vs += '    float show = float(getShowFromStyle(position, position_absolute, color, normal)); \\n';\n        }\n\n        if (hasPointSizeStyle) {\n            vs += '    gl_PointSize = getPointSizeFromStyle(position, position_absolute, color, normal) * czm_pixelRatio; \\n';\n        } else if (attenuation) {\n            vs += '    vec4 positionEC = czm_modelView * vec4(position, 1.0); \\n' +\n                  '    float depth = -positionEC.z; \\n' +\n                  // compute SSE for this point\n                  '    gl_PointSize = min((u_geometricError / depth) * u_depthMultiplier, u_pointSize); \\n';\n        } else {\n            vs += '    gl_PointSize = u_pointSize; \\n';\n        }\n\n        vs += '    color = color * u_highlightColor; \\n';\n\n        if (usesNormals && normalShading) {\n            vs += '    float diffuseStrength = czm_getLambertDiffuse(czm_lightDirectionEC, normalEC); \\n' +\n                  '    diffuseStrength = max(diffuseStrength, 0.4); \\n' + // Apply some ambient lighting\n                  '    color.xyz *= diffuseStrength * czm_lightColor; \\n';\n        }\n\n        vs += '    v_color = color; \\n' +\n              '    gl_Position = czm_modelViewProjection * vec4(position, 1.0); \\n';\n\n        if (usesNormals && backFaceCulling) {\n            vs += '    float visible = step(-normalEC.z, 0.0); \\n' +\n                  '    gl_Position *= visible; \\n' +\n                  '    gl_PointSize *= visible; \\n';\n        }\n\n        if (hasShowStyle) {\n            vs += '    gl_Position.w *= float(show); \\n' +\n                  '    gl_PointSize *= float(show); \\n';\n        }\n\n        vs += '} \\n';\n\n        var fs = 'varying vec4 v_color; \\n';\n\n        if (hasClippedContent) {\n            fs += 'uniform sampler2D u_clippingPlanes; \\n' +\n                  'uniform mat4 u_clippingPlanesMatrix; \\n' +\n                  'uniform vec4 u_clippingPlanesEdgeStyle; \\n';\n            fs += '\\n';\n            fs += getClippingFunction(clippingPlanes, context);\n            fs += '\\n';\n        }\n\n        fs +=  'void main() \\n' +\n               '{ \\n' +\n               '    gl_FragColor = czm_gammaCorrect(v_color); \\n';\n\n        if (hasClippedContent) {\n            fs += getClipAndStyleCode('u_clippingPlanes', 'u_clippingPlanesMatrix', 'u_clippingPlanesEdgeStyle');\n        }\n\n        fs += '} \\n';\n\n        if (defined(pointCloud._vertexShaderLoaded)) {\n            vs = pointCloud._vertexShaderLoaded(vs);\n        }\n\n        if (defined(pointCloud._fragmentShaderLoaded)) {\n            fs = pointCloud._fragmentShaderLoaded(fs);\n        }\n\n        var drawCommand = pointCloud._drawCommand;\n        if (defined(drawCommand.shaderProgram)) {\n            // Destroy the old shader\n            drawCommand.shaderProgram.destroy();\n        }\n        drawCommand.shaderProgram = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n\n        try {\n            // Check if the shader compiles correctly. If not there is likely a syntax error with the style.\n            drawCommand.shaderProgram._bind();\n        } catch (error) {\n            // Rephrase the error.\n            throw new RuntimeError('Error generating style shader: this may be caused by a type mismatch, index out-of-bounds, or other syntax error.');\n        }\n    }\n\n    function decodeDraco(pointCloud, context) {\n        if (pointCloud._decodingState === DecodingState.READY) {\n            return false;\n        }\n        if (pointCloud._decodingState === DecodingState.NEEDS_DECODE) {\n            var parsedContent = pointCloud._parsedContent;\n            var draco = parsedContent.draco;\n            var decodePromise = DracoLoader.decodePointCloud(draco, context);\n            if (defined(decodePromise)) {\n                pointCloud._decodingState = DecodingState.DECODING;\n                decodePromise.then(function(result) {\n                    pointCloud._decodingState = DecodingState.READY;\n                    var decodedPositions = defined(result.POSITION) ? result.POSITION.array : undefined;\n                    var decodedRgb = defined(result.RGB) ? result.RGB.array : undefined;\n                    var decodedRgba = defined(result.RGBA) ? result.RGBA.array : undefined;\n                    var decodedNormals = defined(result.NORMAL) ? result.NORMAL.array : undefined;\n                    var decodedBatchIds = defined(result.BATCH_ID) ? result.BATCH_ID.array : undefined;\n                    var isQuantizedDraco = defined(decodedPositions) && defined(result.POSITION.data.quantization);\n                    var isOctEncodedDraco = defined(decodedNormals) && defined(result.NORMAL.data.quantization);\n                    if (isQuantizedDraco) {\n                        // Draco quantization range == quantized volume scale - size in meters of the quantized volume\n                        // Internal quantized range is the range of values of the quantized data, e.g. 255 for 8-bit, 1023 for 10-bit, etc\n                        var quantization = result.POSITION.data.quantization;\n                        var range = quantization.range;\n                        pointCloud._quantizedVolumeScale = Cartesian3.fromElements(range, range, range);\n                        pointCloud._quantizedVolumeOffset = Cartesian3.unpack(quantization.minValues);\n                        pointCloud._quantizedRange = (1 << quantization.quantizationBits) - 1.0;\n                        pointCloud._isQuantizedDraco = true;\n                    }\n                    if (isOctEncodedDraco) {\n                        pointCloud._octEncodedRange = (1 << result.NORMAL.data.quantization.quantizationBits) - 1.0;\n                        pointCloud._isOctEncodedDraco = true;\n                    }\n                    var styleableProperties = parsedContent.styleableProperties;\n                    var batchTableProperties = draco.batchTableProperties;\n                    for (var name in batchTableProperties) {\n                        if (batchTableProperties.hasOwnProperty(name)) {\n                            var property = result[name];\n                            if (!defined(styleableProperties)) {\n                                styleableProperties = {};\n                            }\n                            styleableProperties[name] = {\n                                typedArray : property.array,\n                                componentCount : property.data.componentsPerAttribute\n                            };\n                        }\n                    }\n                    parsedContent.positions = defaultValue(decodedPositions, parsedContent.positions);\n                    parsedContent.colors = defaultValue(defaultValue(decodedRgba, decodedRgb), parsedContent.colors);\n                    parsedContent.normals = defaultValue(decodedNormals, parsedContent.normals);\n                    parsedContent.batchIds = defaultValue(decodedBatchIds, parsedContent.batchIds);\n                    parsedContent.styleableProperties = styleableProperties;\n                }).otherwise(function(error) {\n                    pointCloud._decodingState = DecodingState.FAILED;\n                    pointCloud._readyPromise.reject(error);\n                });\n            }\n        }\n        return true;\n    }\n\n    var scratchComputedTranslation = new Cartesian4();\n    var scratchScale = new Cartesian3();\n\n    PointCloud.prototype.update = function(frameState) {\n        var context = frameState.context;\n        var decoding = decodeDraco(this, context);\n        if (decoding) {\n            return;\n        }\n\n        var shadersDirty = false;\n        var modelMatrixDirty = !Matrix4.equals(this._modelMatrix, this.modelMatrix);\n\n        if (this._mode !== frameState.mode) {\n            this._mode = frameState.mode;\n            modelMatrixDirty = true;\n        }\n\n        if (!defined(this._drawCommand)) {\n            createResources(this, frameState);\n            modelMatrixDirty = true;\n            shadersDirty = true;\n            this._ready = true;\n            this._readyPromise.resolve(this);\n            this._parsedContent = undefined; // Unload\n        }\n\n        if (modelMatrixDirty) {\n            Matrix4.clone(this.modelMatrix, this._modelMatrix);\n            var modelMatrix = this._drawCommand.modelMatrix;\n            Matrix4.clone(this._modelMatrix, modelMatrix);\n\n            if (defined(this._rtcCenter)) {\n                Matrix4.multiplyByTranslation(modelMatrix, this._rtcCenter, modelMatrix);\n            }\n            if (defined(this._quantizedVolumeOffset)) {\n                Matrix4.multiplyByTranslation(modelMatrix, this._quantizedVolumeOffset, modelMatrix);\n            }\n\n            if (frameState.mode !== SceneMode.SCENE3D) {\n                var projection = frameState.mapProjection;\n                var translation = Matrix4.getColumn(modelMatrix, 3, scratchComputedTranslation);\n                if (!Cartesian4.equals(translation, Cartesian4.UNIT_W)) {\n                    Transforms.basisTo2D(projection, modelMatrix, modelMatrix);\n                }\n            }\n\n            var boundingSphere = this._drawCommand.boundingVolume;\n            BoundingSphere.clone(this._boundingSphere, boundingSphere);\n\n            if (this._cull) {\n                var center = boundingSphere.center;\n                Matrix4.multiplyByPoint(modelMatrix, center, center);\n                var scale = Matrix4.getScale(modelMatrix, scratchScale);\n                boundingSphere.radius *= Cartesian3.maximumComponent(scale);\n            }\n        }\n\n        if (this.clippingPlanesDirty) {\n            this.clippingPlanesDirty = false;\n            shadersDirty = true;\n        }\n\n        if (this._attenuation !== this.attenuation) {\n            this._attenuation = this.attenuation;\n            shadersDirty = true;\n        }\n\n        if (this.backFaceCulling !== this._backFaceCulling) {\n            this._backFaceCulling = this.backFaceCulling;\n            shadersDirty = true;\n        }\n\n        if (this.normalShading !== this._normalShading) {\n            this._normalShading = this.normalShading;\n            shadersDirty = true;\n        }\n\n        if (this._style !== this.style || this.styleDirty) {\n            this._style = this.style;\n            this.styleDirty = false;\n            shadersDirty = true;\n        }\n\n        if (shadersDirty) {\n            createShaders(this, frameState, this._style);\n        }\n\n        this._drawCommand.castShadows = ShadowMode.castShadows(this.shadows);\n        this._drawCommand.receiveShadows = ShadowMode.receiveShadows(this.shadows);\n\n        // Update the render state\n        var isTranslucent = (this._highlightColor.alpha < 1.0) || (this._constantColor.alpha < 1.0) || this._styleTranslucent;\n        this._drawCommand.renderState = isTranslucent ? this._translucentRenderState : this._opaqueRenderState;\n        this._drawCommand.pass = isTranslucent ? Pass.TRANSLUCENT : this._opaquePass;\n\n        var commandList = frameState.commandList;\n\n        var passes = frameState.passes;\n        if (passes.render || passes.pick) {\n            commandList.push(this._drawCommand);\n        }\n    };\n\n    PointCloud.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    PointCloud.prototype.destroy = function() {\n        var command = this._drawCommand;\n        if (defined(command)) {\n            command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n            command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n        }\n        return destroyObject(this);\n    };\nexport default PointCloud;\n","import Cartesian2 from '../Core/Cartesian2.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport PixelFormat from '../Core/PixelFormat.js';\nimport PrimitiveType from '../Core/PrimitiveType.js';\nimport ClearCommand from '../Renderer/ClearCommand.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Framebuffer from '../Renderer/Framebuffer.js';\nimport Pass from '../Renderer/Pass.js';\nimport PixelDatatype from '../Renderer/PixelDatatype.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport Sampler from '../Renderer/Sampler.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport Texture from '../Renderer/Texture.js';\nimport BlendingState from '../Scene/BlendingState.js';\nimport StencilConstants from '../Scene/StencilConstants.js';\nimport PointCloudEyeDomeLightingShader from '../Shaders/PostProcessStages/PointCloudEyeDomeLighting.js';\n\n    /**\n     * Eye dome lighting. Does not support points with per-point translucency, but does allow translucent styling against the globe.\n     * Requires support for EXT_frag_depth and WEBGL_draw_buffers extensions in WebGL 1.0.\n     *\n     * @private\n     */\n    function PointCloudEyeDomeLighting() {\n        this._framebuffer = undefined;\n        this._colorGBuffer = undefined; // color gbuffer\n        this._depthGBuffer = undefined; // depth gbuffer\n        this._depthTexture = undefined; // needed to write depth so camera based on depth works\n        this._drawCommand = undefined;\n        this._clearCommand = undefined;\n\n        this._strength = 1.0;\n        this._radius = 1.0;\n    }\n\n    function destroyFramebuffer(processor) {\n        var framebuffer = processor._framebuffer;\n        if (!defined(framebuffer)) {\n            return;\n        }\n\n        processor._colorGBuffer.destroy();\n        processor._depthGBuffer.destroy();\n        processor._depthTexture.destroy();\n        framebuffer.destroy();\n\n        processor._framebuffer = undefined;\n        processor._colorGBuffer = undefined;\n        processor._depthGBuffer = undefined;\n        processor._depthTexture = undefined;\n        processor._drawCommand = undefined;\n        processor._clearCommand = undefined;\n    }\n\n    function createFramebuffer(processor, context) {\n        var screenWidth = context.drawingBufferWidth;\n        var screenHeight = context.drawingBufferHeight;\n\n        var colorGBuffer = new Texture({\n            context : context,\n            width : screenWidth,\n            height : screenHeight,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : Sampler.NEAREST\n        });\n\n        var depthGBuffer = new Texture({\n            context : context,\n            width : screenWidth,\n            height : screenHeight,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : Sampler.NEAREST\n        });\n\n        var depthTexture = new Texture({\n            context : context,\n            width : screenWidth,\n            height : screenHeight,\n            pixelFormat : PixelFormat.DEPTH_COMPONENT,\n            pixelDatatype : PixelDatatype.UNSIGNED_INT,\n            sampler : Sampler.NEAREST\n        });\n\n        processor._framebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [\n                colorGBuffer,\n                depthGBuffer\n            ],\n            depthTexture : depthTexture,\n            destroyAttachments : false\n        });\n        processor._colorGBuffer = colorGBuffer;\n        processor._depthGBuffer = depthGBuffer;\n        processor._depthTexture = depthTexture;\n    }\n\n    var distanceAndEdlStrengthScratch = new Cartesian2();\n\n    function createCommands(processor, context) {\n        var blendFS = PointCloudEyeDomeLightingShader;\n\n        var blendUniformMap = {\n            u_pointCloud_colorGBuffer : function() {\n                return processor._colorGBuffer;\n            },\n            u_pointCloud_depthGBuffer : function() {\n                return processor._depthGBuffer;\n            },\n            u_distanceAndEdlStrength : function() {\n                distanceAndEdlStrengthScratch.x = processor._radius;\n                distanceAndEdlStrengthScratch.y = processor._strength;\n                return distanceAndEdlStrengthScratch;\n            }\n        };\n\n        var blendRenderState = RenderState.fromCache({\n            blending : BlendingState.ALPHA_BLEND,\n            depthMask : true,\n            depthTest : {\n                enabled : true\n            },\n            stencilTest : StencilConstants.setCesium3DTileBit(),\n            stencilMask : StencilConstants.CESIUM_3D_TILE_MASK\n        });\n\n        processor._drawCommand = context.createViewportQuadCommand(blendFS, {\n            uniformMap : blendUniformMap,\n            renderState : blendRenderState,\n            pass : Pass.CESIUM_3D_TILE,\n            owner : processor\n        });\n\n        processor._clearCommand = new ClearCommand({\n            framebuffer : processor._framebuffer,\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            depth : 1.0,\n            renderState : RenderState.fromCache(),\n            pass : Pass.CESIUM_3D_TILE,\n            owner : processor\n        });\n    }\n\n    function createResources(processor, context) {\n        var screenWidth = context.drawingBufferWidth;\n        var screenHeight = context.drawingBufferHeight;\n        var colorGBuffer = processor._colorGBuffer;\n        var nowDirty = false;\n        var resized = defined(colorGBuffer) &&\n                      ((colorGBuffer.width !== screenWidth) ||\n                       (colorGBuffer.height !== screenHeight));\n\n        if (!defined(colorGBuffer) || resized) {\n            destroyFramebuffer(processor);\n            createFramebuffer(processor, context);\n            createCommands(processor, context);\n            nowDirty = true;\n        }\n        return nowDirty;\n    }\n\n    function isSupported(context) {\n        return context.drawBuffers && context.fragmentDepth;\n    }\n\n    PointCloudEyeDomeLighting.isSupported = isSupported;\n\n    function getECShaderProgram(context, shaderProgram) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'EC');\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n\n            var fs = shaderProgram.fragmentShaderSource.clone();\n\n            fs.sources = fs.sources.map(function(source) {\n                source = ShaderSource.replaceMain(source, 'czm_point_cloud_post_process_main');\n                source = source.replace(/gl_FragColor/g, 'gl_FragData[0]');\n                return source;\n            });\n\n            fs.sources.unshift('#extension GL_EXT_draw_buffers : enable \\n');\n            fs.sources.push(\n                'void main() \\n' +\n                '{ \\n' +\n                '    czm_point_cloud_post_process_main(); \\n' +\n                '#ifdef LOG_DEPTH\\n' +\n                '    czm_writeLogDepth();\\n' +\n                '    gl_FragData[1] = czm_packDepth(gl_FragDepthEXT); \\n' +\n                '#else\\n' +\n                '    gl_FragData[1] = czm_packDepth(gl_FragCoord.z);\\n' +\n                '#endif\\n' +\n                '}');\n\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'EC', {\n                vertexShaderSource : shaderProgram.vertexShaderSource,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    PointCloudEyeDomeLighting.prototype.update = function(frameState, commandStart, pointCloudShading, boundingVolume) {\n        if (!isSupported(frameState.context)) {\n            return;\n        }\n\n        this._strength = pointCloudShading.eyeDomeLightingStrength;\n        this._radius = pointCloudShading.eyeDomeLightingRadius * frameState.pixelRatio;\n\n        var dirty = createResources(this, frameState.context);\n\n        // Hijack existing point commands to render into an offscreen FBO.\n        var i;\n        var commandList = frameState.commandList;\n        var commandEnd = commandList.length;\n\n        for (i = commandStart; i < commandEnd; ++i) {\n            var command = commandList[i];\n            if (command.primitiveType !== PrimitiveType.POINTS || command.pass === Pass.TRANSLUCENT) {\n                continue;\n            }\n            var derivedCommand = command.derivedCommands.pointCloudProcessor;\n            if (!defined(derivedCommand) || command.dirty || dirty ||\n                (derivedCommand.framebuffer !== this._framebuffer)) { // Prevent crash when tiles out-of-view come in-view during context size change\n                derivedCommand = DrawCommand.shallowClone(command);\n                command.derivedCommands.pointCloudProcessor = derivedCommand;\n\n                derivedCommand.framebuffer = this._framebuffer;\n                derivedCommand.shaderProgram = getECShaderProgram(frameState.context, command.shaderProgram);\n                derivedCommand.castShadows = false;\n                derivedCommand.receiveShadows = false;\n            }\n\n            commandList[i] = derivedCommand;\n        }\n\n        var clearCommand = this._clearCommand;\n        var blendCommand = this._drawCommand;\n\n        blendCommand.boundingVolume = boundingVolume;\n\n        // Blend EDL into the main FBO\n        commandList.push(blendCommand);\n        commandList.push(clearCommand);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PointCloudEyeDomeLighting#destroy\n     */\n    PointCloudEyeDomeLighting.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * processor = processor && processor.destroy();\n     *\n     * @see PointCloudEyeDomeLighting#isDestroyed\n     */\n    PointCloudEyeDomeLighting.prototype.destroy = function() {\n        destroyFramebuffer(this);\n        return destroyObject(this);\n    };\nexport default PointCloudEyeDomeLighting;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"#extension GL_EXT_frag_depth : enable\\n\\\n\\n\\\nuniform sampler2D u_pointCloud_colorGBuffer;\\n\\\nuniform sampler2D u_pointCloud_depthGBuffer;\\n\\\nuniform vec2 u_distanceAndEdlStrength;\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec2 neighborContribution(float log2Depth, vec2 offset)\\n\\\n{\\n\\\n    float dist = u_distanceAndEdlStrength.x;\\n\\\n    vec2 texCoordOrig = v_textureCoordinates + offset * dist;\\n\\\n    vec2 texCoord0 = v_textureCoordinates + offset * floor(dist);\\n\\\n    vec2 texCoord1 = v_textureCoordinates + offset * ceil(dist);\\n\\\n\\n\\\n    float depthOrLogDepth0 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord0));\\n\\\n    float depthOrLogDepth1 = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, texCoord1));\\n\\\n\\n\\\n    // ignore depth values that are the clear depth\\n\\\n    if (depthOrLogDepth0 == 0.0 || depthOrLogDepth1 == 0.0) {\\n\\\n        return vec2(0.0);\\n\\\n    }\\n\\\n\\n\\\n    // interpolate the two adjacent depth values\\n\\\n    float depthMix = mix(depthOrLogDepth0, depthOrLogDepth1, fract(dist));\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(texCoordOrig, depthMix);\\n\\\n    return vec2(max(0.0, log2Depth - log2(-eyeCoordinate.z / eyeCoordinate.w)), 1.0);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float depthOrLogDepth = czm_unpackDepth(texture2D(u_pointCloud_depthGBuffer, v_textureCoordinates));\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, depthOrLogDepth);\\n\\\n    eyeCoordinate /= eyeCoordinate.w;\\n\\\n\\n\\\n    float log2Depth = log2(-eyeCoordinate.z);\\n\\\n\\n\\\n    if (depthOrLogDepth == 0.0) // 0.0 is the clear value for the gbuffer\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    vec4 color = texture2D(u_pointCloud_colorGBuffer, v_textureCoordinates);\\n\\\n\\n\\\n    // sample from neighbors left, right, down, up\\n\\\n    vec2 texelSize = 1.0 / czm_viewport.zw;\\n\\\n\\n\\\n    vec2 responseAndCount = vec2(0.0);\\n\\\n\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(-texelSize.x, 0.0));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(+texelSize.x, 0.0));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, -texelSize.y));\\n\\\n    responseAndCount += neighborContribution(log2Depth, vec2(0.0, +texelSize.y));\\n\\\n\\n\\\n    float response = responseAndCount.x / responseAndCount.y;\\n\\\n    float strength = u_distanceAndEdlStrength.y;\\n\\\n    float shade = exp(-response * 300.0 * strength);\\n\\\n    color.rgb *= shade;\\n\\\n    gl_FragColor = vec4(color);\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + (czm_projection * vec4(eyeCoordinate.xyz, 1.0)).w);\\n\\\n#else\\n\\\n    gl_FragDepthEXT = czm_eyeToWindowCoordinates(vec4(eyeCoordinate.xyz, 1.0)).z;\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","import defaultValue from '../Core/defaultValue.js';\nimport PointCloudEyeDomeLighting from './PointCloudEyeDomeLighting.js';\n\n    /**\n     * Options for performing point attenuation based on geometric error when rendering\n     * point clouds using 3D Tiles.\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.attenuation=false] Perform point attenuation based on geometric error.\n     * @param {Number} [options.geometricErrorScale=1.0] Scale to be applied to each tile's geometric error.\n     * @param {Number} [options.maximumAttenuation] Maximum attenuation in pixels. Defaults to the Cesium3DTileset's maximumScreenSpaceError.\n     * @param {Number} [options.baseResolution] Average base resolution for the dataset in meters. Substitute for Geometric Error when not available.\n     * @param {Boolean} [options.eyeDomeLighting=true] When true, use eye dome lighting when drawing with point attenuation.\n     * @param {Number} [options.eyeDomeLightingStrength=1.0] Increasing this value increases contrast on slopes and edges.\n     * @param {Number} [options.eyeDomeLightingRadius=1.0] Increase the thickness of contours from eye dome lighting.\n     * @param {Boolean} [options.backFaceCulling=false] Determines whether back-facing points are hidden. This option works only if data has normals included.\n     * @param {Boolean} [options.normalShading=true] Determines whether a point cloud that contains normals is shaded by the scene's light source.\n     *\n     * @alias PointCloudShading\n     * @constructor\n     */\n    function PointCloudShading(options) {\n        var pointCloudShading = defaultValue(options, {});\n\n        /**\n         * Perform point attenuation based on geometric error.\n         * @type {Boolean}\n         * @default false\n         */\n        this.attenuation = defaultValue(pointCloudShading.attenuation, false);\n\n        /**\n         * Scale to be applied to the geometric error before computing attenuation.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.geometricErrorScale = defaultValue(pointCloudShading.geometricErrorScale, 1.0);\n\n        /**\n         * Maximum point attenuation in pixels. If undefined, the Cesium3DTileset's maximumScreenSpaceError will be used.\n         * @type {Number}\n         */\n        this.maximumAttenuation = pointCloudShading.maximumAttenuation;\n\n        /**\n         * Average base resolution for the dataset in meters.\n         * Used in place of geometric error when geometric error is 0.\n         * If undefined, an approximation will be computed for each tile that has geometric error of 0.\n         * @type {Number}\n         */\n        this.baseResolution = pointCloudShading.baseResolution;\n\n        /**\n         * Use eye dome lighting when drawing with point attenuation\n         * Requires support for EXT_frag_depth, OES_texture_float, and WEBGL_draw_buffers extensions in WebGL 1.0,\n         * otherwise eye dome lighting is ignored.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.eyeDomeLighting = defaultValue(pointCloudShading.eyeDomeLighting, true);\n\n        /**\n         * Eye dome lighting strength (apparent contrast)\n         * @type {Number}\n         * @default 1.0\n         */\n        this.eyeDomeLightingStrength = defaultValue(pointCloudShading.eyeDomeLightingStrength, 1.0);\n\n        /**\n         * Thickness of contours from eye dome lighting\n         * @type {Number}\n         * @default 1.0\n         */\n        this.eyeDomeLightingRadius = defaultValue(pointCloudShading.eyeDomeLightingRadius, 1.0);\n\n        /**\n         * Determines whether back-facing points are hidden.\n         * This option works only if data has normals included.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.backFaceCulling = defaultValue(pointCloudShading.backFaceCulling, false);\n\n        /**\n         * Determines whether a point cloud that contains normals is shaded by the scene's light source.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.normalShading = defaultValue(pointCloudShading.normalShading, true);\n    }\n\n    /**\n     * Determines if point cloud shading is supported.\n     *\n     * @param {Scene} scene The scene.\n     * @returns {Boolean} <code>true</code> if point cloud shading is supported; otherwise, returns <code>false</code>\n     */\n    PointCloudShading.isSupported = function(scene) {\n        return PointCloudEyeDomeLighting.isSupported(scene.context);\n    };\nexport default PointCloudShading;\n","import Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport CesiumMath from '../Core/Math.js';\nimport Pass from '../Renderer/Pass.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Cesium3DTileFeature from './Cesium3DTileFeature.js';\nimport Cesium3DTileRefine from './Cesium3DTileRefine.js';\nimport PointCloud from './PointCloud.js';\nimport PointCloudShading from './PointCloudShading.js';\nimport SceneMode from './SceneMode.js';\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/TileFormats/PointCloud|Point Cloud}\n     * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias PointCloud3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function PointCloud3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._pickId = undefined; // Only defined when batchTable is undefined\n        this._batchTable = undefined; // Used when feature table contains BATCH_ID semantic\n        this._styleDirty = false;\n        this._features = undefined;\n\n        /**\n         * @inheritdoc Cesium3DTileContent#featurePropertiesDirty\n         */\n        this.featurePropertiesDirty = false;\n\n        this._pointCloud = new PointCloud({\n            arrayBuffer : arrayBuffer,\n            byteOffset : byteOffset,\n            cull : false,\n            opaquePass : Pass.CESIUM_3D_TILE,\n            vertexShaderLoaded : getVertexShaderLoaded(this),\n            fragmentShaderLoaded : getFragmentShaderLoaded(this),\n            uniformMapLoaded : getUniformMapLoaded(this),\n            batchTableLoaded : getBatchTableLoaded(this),\n            pickIdLoaded : getPickIdLoaded(this)\n        });\n    }\n\n    Object.defineProperties(PointCloud3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                if (defined(this._batchTable)) {\n                    return this._batchTable.featuresLength;\n                }\n                return 0;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return this._pointCloud.pointsLength;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                return this._pointCloud.geometryByteLength;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                if (defined(this._batchTable)) {\n                    return this._batchTable.memorySizeInBytes;\n                }\n                return 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._pointCloud.readyPromise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url : {\n            get : function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return this._batchTable;\n            }\n        }\n    });\n\n    function getVertexShaderLoaded(content) {\n        return function(vs) {\n            if (defined(content._batchTable)) {\n                return content._batchTable.getVertexShaderCallback(false, 'a_batchId', undefined)(vs);\n\n            }\n            return vs;\n        };\n    }\n\n    function getFragmentShaderLoaded(content) {\n        return function(fs) {\n            if (defined(content._batchTable)) {\n                return content._batchTable.getFragmentShaderCallback(false, undefined)(fs);\n            }\n            return 'uniform vec4 czm_pickColor;\\n' + fs;\n        };\n    }\n\n    function getUniformMapLoaded(content) {\n        return function(uniformMap) {\n            if (defined(content._batchTable)) {\n                return content._batchTable.getUniformMapCallback()(uniformMap);\n            }\n            return combine(uniformMap, {\n                czm_pickColor : function() {\n                    return content._pickId.color;\n                }\n            });\n        };\n    }\n\n    function getBatchTableLoaded(content) {\n        return function(batchLength, batchTableJson, batchTableBinary) {\n            content._batchTable = new Cesium3DTileBatchTable(content, batchLength, batchTableJson, batchTableBinary);\n        };\n    }\n\n    function getPickIdLoaded(content) {\n        return function() {\n            return defined(content._batchTable) ? content._batchTable.getPickId() : 'czm_pickColor';\n        };\n    }\n\n    function getGeometricError(content) {\n        var pointCloudShading = content._tileset.pointCloudShading;\n        var sphereVolume = content._tile.contentBoundingVolume.boundingSphere.volume();\n        var baseResolutionApproximation = CesiumMath.cbrt(sphereVolume / content.pointsLength);\n\n        var geometricError = content._tile.geometricError;\n        if (geometricError === 0) {\n            if (defined(pointCloudShading) && defined(pointCloudShading.baseResolution)) {\n                geometricError = pointCloudShading.baseResolution;\n            } else {\n                geometricError = baseResolutionApproximation;\n            }\n        }\n        return geometricError;\n    }\n\n    function createFeatures(content) {\n        var featuresLength = content.featuresLength;\n        if (!defined(content._features) && (featuresLength > 0)) {\n            var features = new Array(featuresLength);\n            for (var i = 0; i < featuresLength; ++i) {\n                features[i] = new Cesium3DTileFeature(content, i);\n            }\n            content._features = features;\n        }\n    }\n\n    PointCloud3DTileContent.prototype.hasProperty = function(batchId, name) {\n        if (defined(this._batchTable)) {\n            return this._batchTable.hasProperty(batchId, name);\n        }\n        return false;\n    };\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.\n     *\n     * In this context a feature refers to a group of points that share the same BATCH_ID.\n     * For example all the points that represent a door in a house point cloud would be a feature.\n     *\n     * Features are backed by a batch table and can be colored, shown/hidden, picked, etc like features\n     * in b3dm and i3dm.\n     *\n     * When the BATCH_ID semantic is omitted and the point cloud stores per-point properties, they\n     * are not accessible by getFeature. They are only used for dynamic styling.\n     */\n    PointCloud3DTileContent.prototype.getFeature = function(batchId) {\n        if (!defined(this._batchTable)) {\n            return undefined;\n        }\n        var featuresLength = this.featuresLength;\n        \n        createFeatures(this);\n        return this._features[batchId];\n    };\n\n    PointCloud3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        this._pointCloud.color = enabled ? color : Color.WHITE;\n    };\n\n    PointCloud3DTileContent.prototype.applyStyle = function(style) {\n        if (defined(this._batchTable)) {\n            this._batchTable.applyStyle(style);\n        } else {\n            this._styleDirty = true;\n        }\n    };\n\n    var defaultShading = new PointCloudShading();\n\n    PointCloud3DTileContent.prototype.update = function(tileset, frameState) {\n        var pointCloud = this._pointCloud;\n        var pointCloudShading = defaultValue(tileset.pointCloudShading, defaultShading);\n        var tile = this._tile;\n        var batchTable = this._batchTable;\n        var mode = frameState.mode;\n        var clippingPlanes = tileset.clippingPlanes;\n\n        if (!defined(this._pickId) && !defined(batchTable)) {\n            this._pickId = frameState.context.createPickId({\n                primitive : tileset,\n                content : this\n            });\n        }\n\n        if (defined(batchTable)) {\n            batchTable.update(tileset, frameState);\n        }\n\n        var boundingSphere;\n        if (defined(tile._contentBoundingVolume)) {\n            boundingSphere = mode === SceneMode.SCENE3D ? tile._contentBoundingVolume.boundingSphere : tile._contentBoundingVolume2D.boundingSphere;\n        } else {\n            boundingSphere = mode === SceneMode.SCENE3D ? tile._boundingVolume.boundingSphere : tile._boundingVolume2D.boundingSphere;\n        }\n\n        var styleDirty = this._styleDirty;\n        this._styleDirty = false;\n\n        pointCloud.clippingPlanesOriginMatrix = tileset.clippingPlanesOriginMatrix;\n        pointCloud.style = defined(batchTable) ? undefined : tileset.style;\n        pointCloud.styleDirty = styleDirty;\n        pointCloud.modelMatrix = tile.computedTransform;\n        pointCloud.time = tileset.timeSinceLoad;\n        pointCloud.shadows = tileset.shadows;\n        pointCloud.boundingSphere = boundingSphere;\n        pointCloud.clippingPlanes = clippingPlanes;\n        pointCloud.isClipped = defined(clippingPlanes) && clippingPlanes.enabled && tile._isClipped;\n        pointCloud.clippingPlanesDirty = tile.clippingPlanesDirty;\n        pointCloud.attenuation = pointCloudShading.attenuation;\n        pointCloud.backFaceCulling = pointCloudShading.backFaceCulling;\n        pointCloud.normalShading = pointCloudShading.normalShading;\n        pointCloud.geometricError = getGeometricError(this);\n        pointCloud.geometricErrorScale = pointCloudShading.geometricErrorScale;\n        if (defined(pointCloudShading) && defined(pointCloudShading.maximumAttenuation)) {\n            pointCloud.maximumAttenuation = pointCloudShading.maximumAttenuation;\n        } else if (tile.refine === Cesium3DTileRefine.ADD) {\n            pointCloud.maximumAttenuation = 5.0;\n        } else {\n            pointCloud.maximumAttenuation = tileset.maximumScreenSpaceError;\n        }\n\n        pointCloud.update(frameState);\n    };\n\n    PointCloud3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    PointCloud3DTileContent.prototype.destroy = function() {\n        this._pickId = this._pickId && this._pickId.destroy();\n        this._pointCloud = this._pointCloud && this._pointCloud.destroy();\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n        return destroyObject(this);\n    };\nexport default PointCloud3DTileContent;\n","import defaultValue from '../Core/defaultValue.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport when from '../ThirdParty/when.js';\n\n    /**\n     * Represents content for a tile in a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset whose\n     * content points to another 3D Tiles tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Tileset3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Tileset3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n        this._readyPromise = when.defer();\n\n        this.featurePropertiesDirty = false;\n\n        initialize(this, arrayBuffer, byteOffset);\n    }\n\n    Object.defineProperties(Tileset3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url : {\n            get : function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return undefined;\n            }\n        }\n    });\n\n    function initialize(content, arrayBuffer, byteOffset) {\n        byteOffset = defaultValue(byteOffset, 0);\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var jsonString = getStringFromTypedArray(uint8Array, byteOffset);\n        var tilesetJson;\n\n        try {\n            tilesetJson = JSON.parse(jsonString);\n        } catch (error) {\n            content._readyPromise.reject(new RuntimeError('Invalid tile content.'));\n            return;\n        }\n\n        content._tileset.loadTileset(content._resource, tilesetJson, content._tile);\n        content._readyPromise.resolve(content);\n    }\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n     * always returns <code>false</code> since a tile of this type does not have any features.\n     */\n    Tileset3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return false;\n    };\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Tileset3DTileContent</code>\n     * always returns <code>undefined</code> since a tile of this type does not have any features.\n     */\n    Tileset3DTileContent.prototype.getFeature = function(batchId) {\n        return undefined;\n    };\n\n    Tileset3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n    };\n\n    Tileset3DTileContent.prototype.applyStyle = function(style) {\n    };\n\n    Tileset3DTileContent.prototype.update = function(tileset, frameState) {\n    };\n\n    Tileset3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Tileset3DTileContent.prototype.destroy = function() {\n        return destroyObject(this);\n    };\nexport default Tileset3DTileContent;\n","\n    /**\n     * Creates a {@link createBillboardPointCallback~CanvasFunction} that will create a canvas with a point.\n     *\n     * @param {Number} centerAlpha The alpha of the center of the point. The value must be in the range [0.0, 1.0].\n     * @param {String} cssColor The CSS color string.\n     * @param {String} cssOutlineColor The CSS color of the point outline.\n     * @param {Number} cssOutlineWidth The width of the outline in pixels.\n     * @param {Number} pixelSize The size of the point in pixels.\n     * @return {createBillboardPointCallback~CanvasFunction} The function that will return a canvas with the point drawn on it.\n     *\n     * @private\n     */\n    function createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, cssOutlineWidth, pixelSize) {\n        return function() {\n            var canvas = document.createElement('canvas');\n\n            var length = pixelSize + (2 * cssOutlineWidth);\n            canvas.height = canvas.width = length;\n\n            var context2D = canvas.getContext('2d');\n            context2D.clearRect(0, 0, length, length);\n\n            if (cssOutlineWidth !== 0) {\n                context2D.beginPath();\n                context2D.arc(length / 2, length / 2, length / 2, 0, 2 * Math.PI, true);\n                context2D.closePath();\n                context2D.fillStyle = cssOutlineColor;\n                context2D.fill();\n                // Punch a hole in the center if needed.\n                if (centerAlpha < 1.0) {\n                    context2D.save();\n                    context2D.globalCompositeOperation = 'destination-out';\n                    context2D.beginPath();\n                    context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n                    context2D.closePath();\n                    context2D.fillStyle = 'black';\n                    context2D.fill();\n                    context2D.restore();\n                }\n            }\n\n            context2D.beginPath();\n            context2D.arc(length / 2, length / 2, pixelSize / 2, 0, 2 * Math.PI, true);\n            context2D.closePath();\n            context2D.fillStyle = cssColor;\n            context2D.fill();\n\n            return canvas;\n        };\n    }\n\n    /**\n     * A function that returns a canvas containing an image of a point.\n     * @callback createBillboardPointCallback~CanvasFunction\n     * @returns {HTMLCanvasElement} The result of the calculation.\n     */\nexport default createBillboardPointCallback;\n","import Cartographic from '../Core/Cartographic.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport createBillboardPointCallback from './createBillboardPointCallback.js';\n\n    /**\n     * A point feature of a {@link Cesium3DTileset}.\n     * <p>\n     * Provides access to a feature's properties stored in the tile's batch table, as well\n     * as the ability to show/hide a feature and change its point properties\n     * </p>\n     * <p>\n     * Modifications to a <code>Cesium3DTilePointFeature</code> object have the lifetime of the tile's\n     * content.  If the tile's content is unloaded, e.g., due to it going out of view and needing\n     * to free space in the cache for visible tiles, listen to the {@link Cesium3DTileset#tileUnload} event to save any\n     * modifications. Also listen to the {@link Cesium3DTileset#tileVisible} event to reapply any modifications.\n     * </p>\n     * <p>\n     * Do not construct this directly.  Access it through {@link Cesium3DTileContent#getFeature}\n     * or picking using {@link Scene#pick} and {@link Scene#pickPosition}.\n     * </p>\n     *\n     * @alias Cesium3DTilePointFeature\n     * @constructor\n     *\n     * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n     *\n     * @example\n     * // On mouse over, display all the properties for a feature in the console log.\n     * handler.setInputAction(function(movement) {\n     *     var feature = scene.pick(movement.endPosition);\n     *     if (feature instanceof Cesium.Cesium3DTilePointFeature) {\n     *         var propertyNames = feature.getPropertyNames();\n     *         var length = propertyNames.length;\n     *         for (var i = 0; i < length; ++i) {\n     *             var propertyName = propertyNames[i];\n     *             console.log(propertyName + ': ' + feature.getProperty(propertyName));\n     *         }\n     *     }\n     * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n     */\n    function Cesium3DTilePointFeature(content, batchId, billboard, label, polyline) {\n        this._content = content;\n        this._billboard = billboard;\n        this._label = label;\n        this._polyline = polyline;\n\n        this._batchId = batchId;\n        this._billboardImage = undefined;\n        this._billboardColor = undefined;\n        this._billboardOutlineColor = undefined;\n        this._billboardOutlineWidth = undefined;\n        this._billboardSize = undefined;\n        this._pointSize = undefined;\n        this._color = undefined;\n        this._pointSize = undefined;\n        this._pointOutlineColor = undefined;\n        this._pointOutlineWidth = undefined;\n        this._heightOffset = undefined;\n\n        this._pickIds = new Array(3);\n\n        setBillboardImage(this);\n    }\n\n    var scratchCartographic = new Cartographic();\n\n    Object.defineProperties(Cesium3DTilePointFeature.prototype, {\n        /**\n         * Gets or sets if the feature will be shown. This is set for all features\n         * when a style's show is evaluated.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        show : {\n            get : function() {\n                return this._label.show;\n            },\n            set : function(value) {\n                this._label.show = value;\n                this._billboard.show = value;\n                this._polyline.show = value;\n            }\n        },\n\n        /**\n         * Gets or sets the color of the point of this feature.\n         * <p>\n         * Only applied when <code>image</code> is <code>undefined</code>.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        color : {\n            get : function() {\n                return this._color;\n            },\n            set : function(value) {\n                this._color = Color.clone(value, this._color);\n                setBillboardImage(this);\n            }\n        },\n\n        /**\n         * Gets or sets the point size of this feature.\n         * <p>\n         * Only applied when <code>image</code> is <code>undefined</code>.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Number}\n         */\n        pointSize : {\n            get : function() {\n                return this._pointSize;\n            },\n            set : function(value) {\n                this._pointSize = value;\n                setBillboardImage(this);\n            }\n        },\n\n        /**\n         * Gets or sets the point outline color of this feature.\n         * <p>\n         * Only applied when <code>image</code> is <code>undefined</code>.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        pointOutlineColor : {\n            get : function() {\n                return this._pointOutlineColor;\n            },\n            set : function(value) {\n                this._pointOutlineColor = Color.clone(value, this._pointOutlineColor);\n                setBillboardImage(this);\n            }\n        },\n\n        /**\n         * Gets or sets the point outline width in pixels of this feature.\n         * <p>\n         * Only applied when <code>image</code> is <code>undefined</code>.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Number}\n         */\n        pointOutlineWidth : {\n            get : function() {\n                return this._pointOutlineWidth;\n            },\n            set : function(value) {\n                this._pointOutlineWidth = value;\n                setBillboardImage(this);\n            }\n        },\n\n        /**\n         * Gets or sets the label color of this feature.\n         * <p>\n         * The color will be applied to the label if <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        labelColor : {\n            get : function() {\n                return this._label.fillColor;\n            },\n            set : function(value) {\n                this._label.fillColor = value;\n                this._polyline.show = this._label.show && value.alpha > 0.0;\n            }\n        },\n\n        /**\n         * Gets or sets the label outline color of this feature.\n         * <p>\n         * The outline color will be applied to the label if <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        labelOutlineColor : {\n            get : function() {\n                return this._label.outlineColor;\n            },\n            set : function(value) {\n                this._label.outlineColor = value;\n            }\n        },\n\n        /**\n         * Gets or sets the outline width in pixels of this feature.\n         * <p>\n         * The outline width will be applied to the point if <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Number}\n         */\n        labelOutlineWidth : {\n            get : function() {\n                return this._label.outlineWidth;\n            },\n            set : function(value) {\n                this._label.outlineWidth = value;\n            }\n        },\n\n        /**\n         * Gets or sets the font of this feature.\n         * <p>\n         * Only applied when the <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {String}\n         */\n        font : {\n            get : function() {\n                return this._label.font;\n            },\n            set : function(value) {\n                this._label.font = value;\n            }\n        },\n\n        /**\n         * Gets or sets the fill and outline style of this feature.\n         * <p>\n         * Only applied when <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {LabelStyle}\n         */\n        labelStyle : {\n            get : function() {\n                return this._label.style;\n            },\n            set : function(value) {\n                this._label.style = value;\n            }\n        },\n\n        /**\n         * Gets or sets the text for this feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {String}\n         */\n        labelText : {\n            get : function() {\n                return this._label.text;\n            },\n            set : function(value) {\n                if (!defined(value)) {\n                    value = '';\n                }\n                this._label.text = value;\n            }\n        },\n\n        /**\n         * Gets or sets the background color of the text for this feature.\n         * <p>\n         * Only applied when <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        backgroundColor : {\n            get : function() {\n                return this._label.backgroundColor;\n            },\n            set : function(value) {\n                this._label.backgroundColor = value;\n            }\n        },\n\n        /**\n         * Gets or sets the background padding of the text for this feature.\n         * <p>\n         * Only applied when <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Cartesian2}\n         */\n        backgroundPadding : {\n            get : function() {\n                return this._label.backgroundPadding;\n            },\n            set : function(value) {\n                this._label.backgroundPadding = value;\n            }\n        },\n\n        /**\n         * Gets or sets whether to display the background of the text for this feature.\n         * <p>\n         * Only applied when <code>labelText</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Boolean}\n         */\n        backgroundEnabled : {\n            get : function() {\n                return this._label.showBackground;\n            },\n            set : function(value) {\n                this._label.showBackground = value;\n            }\n        },\n\n        /**\n         * Gets or sets the near and far scaling properties for this feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {NearFarScalar}\n         */\n        scaleByDistance : {\n            get : function() {\n                return this._label.scaleByDistance;\n            },\n            set : function(value) {\n                this._label.scaleByDistance = value;\n                this._billboard.scaleByDistance = value;\n            }\n        },\n\n        /**\n         * Gets or sets the near and far translucency properties for this feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {NearFarScalar}\n         */\n        translucencyByDistance : {\n            get : function() {\n                return this._label.translucencyByDistance;\n            },\n            set : function(value) {\n                this._label.translucencyByDistance = value;\n                this._billboard.translucencyByDistance = value;\n            }\n        },\n\n        /**\n         * Gets or sets the condition specifying at what distance from the camera that this feature will be displayed.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {DistanceDisplayCondition}\n         */\n        distanceDisplayCondition : {\n            get : function() {\n                return this._label.distanceDisplayCondition;\n            },\n            set : function(value) {\n                this._label.distanceDisplayCondition = value;\n                this._polyline.distanceDisplayCondition = value;\n                this._billboard.distanceDisplayCondition = value;\n            }\n        },\n\n        /**\n         * Gets or sets the height offset in meters of this feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Number}\n         */\n        heightOffset : {\n            get : function() {\n                return this._heightOffset;\n            },\n            set : function(value) {\n                var offset = defaultValue(this._heightOffset, 0.0);\n\n                var ellipsoid = this._content.tileset.ellipsoid;\n                var cart = ellipsoid.cartesianToCartographic(this._billboard.position, scratchCartographic);\n                cart.height = cart.height - offset + value;\n                var newPosition = ellipsoid.cartographicToCartesian(cart);\n\n                this._billboard.position = newPosition;\n                this._label.position = this._billboard.position;\n                this._polyline.positions = [this._polyline.positions[0], newPosition];\n\n                this._heightOffset = value;\n            }\n        },\n\n        /**\n         * Gets or sets whether the anchor line is displayed.\n         * <p>\n         * Only applied when <code>heightOffset</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Boolean}\n         */\n        anchorLineEnabled : {\n            get : function() {\n                return this._polyline.show;\n            },\n            set : function(value) {\n                this._polyline.show = value;\n            }\n        },\n\n        /**\n         * Gets or sets the color for the anchor line.\n         * <p>\n         * Only applied when <code>heightOffset</code> is defined.\n         * </p>\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Color}\n         */\n        anchorLineColor : {\n            get : function() {\n                return this._polyline.material.uniforms.color;\n            },\n            set : function(value) {\n                this._polyline.material.uniforms.color = Color.clone(value, this._polyline.material.uniforms.color);\n            }\n        },\n\n        /**\n         * Gets or sets the image of this feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {String}\n         */\n        image : {\n            get : function() {\n                return this._billboardImage;\n            },\n            set : function(value) {\n                var imageChanged = this._billboardImage !== value;\n                this._billboardImage = value;\n                if (imageChanged) {\n                    setBillboardImage(this);\n                }\n            }\n        },\n\n        /**\n         * Gets or sets the distance where depth testing will be disabled.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Number}\n         */\n        disableDepthTestDistance : {\n            get : function() {\n                return this._label.disableDepthTestDistance;\n            },\n            set : function(value) {\n                this._label.disableDepthTestDistance = value;\n                this._billboard.disableDepthTestDistance = value;\n            }\n        },\n\n        /**\n         * Gets or sets the horizontal origin of this point, which determines if the point is\n         * to the left, center, or right of its anchor position.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {HorizontalOrigin}\n         */\n        horizontalOrigin : {\n            get : function() {\n                return this._billboard.horizontalOrigin;\n            },\n            set : function(value) {\n                this._billboard.horizontalOrigin = value;\n            }\n        },\n\n        /**\n         * Gets or sets the vertical origin of this point, which determines if the point is\n         * to the bottom, center, or top of its anchor position.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {VerticalOrigin}\n         */\n        verticalOrigin : {\n            get : function() {\n                return this._billboard.verticalOrigin;\n            },\n            set : function(value) {\n                this._billboard.verticalOrigin = value;\n            }\n        },\n\n        /**\n         * Gets or sets the horizontal origin of this point's text, which determines if the point's text is\n         * to the left, center, or right of its anchor position.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {HorizontalOrigin}\n         */\n        labelHorizontalOrigin : {\n            get : function() {\n                return this._label.horizontalOrigin;\n            },\n            set : function(value) {\n                this._label.horizontalOrigin = value;\n            }\n        },\n\n        /**\n         * Get or sets the vertical origin of this point's text, which determines if the point's text is\n         * to the bottom, center, top, or baseline of it's anchor point.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {VerticalOrigin}\n         */\n        labelVerticalOrigin : {\n            get : function() {\n                return this._label.verticalOrigin;\n            },\n            set : function(value) {\n                this._label.verticalOrigin = value;\n            }\n        },\n\n        /**\n         * Gets the content of the tile containing the feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Cesium3DTileContent}\n         *\n         * @readonly\n         * @private\n         */\n        content : {\n            get : function() {\n                return this._content;\n            }\n        },\n\n        /**\n         * Gets the tileset containing the feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Cesium3DTileset}\n         *\n         * @readonly\n         */\n        tileset : {\n            get : function() {\n                return this._content.tileset;\n            }\n        },\n\n        /**\n         * All objects returned by {@link Scene#pick} have a <code>primitive</code> property. This returns\n         * the tileset containing the feature.\n         *\n         * @memberof Cesium3DTilePointFeature.prototype\n         *\n         * @type {Cesium3DTileset}\n         *\n         * @readonly\n         */\n        primitive : {\n            get : function() {\n                return this._content.tileset;\n            }\n        },\n\n        /**\n         * @private\n         */\n        pickIds : {\n            get : function() {\n                var ids  = this._pickIds;\n                ids[0] = this._billboard.pickId;\n                ids[1] = this._label.pickId;\n                ids[2] = this._polyline.pickId;\n                return ids;\n            }\n        }\n    });\n\n    Cesium3DTilePointFeature.defaultColor = Color.WHITE;\n    Cesium3DTilePointFeature.defaultPointOutlineColor = Color.BLACK;\n    Cesium3DTilePointFeature.defaultPointOutlineWidth = 0.0;\n    Cesium3DTilePointFeature.defaultPointSize = 8.0;\n\n    function setBillboardImage(feature) {\n        var b = feature._billboard;\n        if (defined(feature._billboardImage) && feature._billboardImage !== b.image) {\n            b.image = feature._billboardImage;\n            return;\n        }\n\n        if (defined(feature._billboardImage)) {\n            return;\n        }\n\n        var newColor = defaultValue(feature._color, Cesium3DTilePointFeature.defaultColor);\n        var newOutlineColor = defaultValue(feature._pointOutlineColor, Cesium3DTilePointFeature.defaultPointOutlineColor);\n        var newOutlineWidth = defaultValue(feature._pointOutlineWidth, Cesium3DTilePointFeature.defaultPointOutlineWidth);\n        var newPointSize = defaultValue(feature._pointSize, Cesium3DTilePointFeature.defaultPointSize);\n\n        var currentColor = feature._billboardColor;\n        var currentOutlineColor = feature._billboardOutlineColor;\n        var currentOutlineWidth = feature._billboardOutlineWidth;\n        var currentPointSize = feature._billboardSize;\n\n        if (Color.equals(newColor, currentColor) && Color.equals(newOutlineColor, currentOutlineColor) &&\n            newOutlineWidth === currentOutlineWidth && newPointSize === currentPointSize) {\n            return;\n        }\n\n        feature._billboardColor = Color.clone(newColor, feature._billboardColor);\n        feature._billboardOutlineColor = Color.clone(newOutlineColor, feature._billboardOutlineColor);\n        feature._billboardOutlineWidth = newOutlineWidth;\n        feature._billboardSize = newPointSize;\n\n        var centerAlpha = newColor.alpha;\n        var cssColor = newColor.toCssColorString();\n        var cssOutlineColor = newOutlineColor.toCssColorString();\n        var textureId = JSON.stringify([cssColor, newPointSize, cssOutlineColor, newOutlineWidth]);\n\n        b.setImage(textureId, createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, newOutlineWidth, newPointSize));\n    }\n\n    /**\n     * Returns whether the feature contains this property. This includes properties from this feature's\n     * class and inherited classes when using a batch table hierarchy.\n     *\n     * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n     *\n     * @param {String} name The case-sensitive name of the property.\n     * @returns {Boolean} Whether the feature contains this property.\n     */\n    Cesium3DTilePointFeature.prototype.hasProperty = function(name) {\n        return this._content.batchTable.hasProperty(this._batchId, name);\n    };\n\n    /**\n     * Returns an array of property names for the feature. This includes properties from this feature's\n     * class and inherited classes when using a batch table hierarchy.\n     *\n     * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n     *\n     * @param {String[]} results An array into which to store the results.\n     * @returns {String[]} The names of the feature's properties.\n     */\n    Cesium3DTilePointFeature.prototype.getPropertyNames = function(results) {\n        return this._content.batchTable.getPropertyNames(this._batchId, results);\n    };\n\n    /**\n     * Returns a copy of the value of the feature's property with the given name. This includes properties from this feature's\n     * class and inherited classes when using a batch table hierarchy.\n     *\n     * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/extensions/3DTILES_batch_table_hierarchy}\n     *\n     * @param {String} name The case-sensitive name of the property.\n     * @returns {*} The value of the property or <code>undefined</code> if the property does not exist.\n     *\n     * @example\n     * // Display all the properties for a feature in the console log.\n     * var propertyNames = feature.getPropertyNames();\n     * var length = propertyNames.length;\n     * for (var i = 0; i < length; ++i) {\n     *     var propertyName = propertyNames[i];\n     *     console.log(propertyName + ': ' + feature.getProperty(propertyName));\n     * }\n     */\n    Cesium3DTilePointFeature.prototype.getProperty = function(name) {\n        return this._content.batchTable.getProperty(this._batchId, name);\n    };\n\n    /**\n     * Sets the value of the feature's property with the given name.\n     * <p>\n     * If a property with the given name doesn't exist, it is created.\n     * </p>\n     *\n     * @param {String} name The case-sensitive name of the property.\n     * @param {*} value The value of the property that will be copied.\n     *\n     * @exception {DeveloperError} Inherited batch table hierarchy property is read only.\n     *\n     * @example\n     * var height = feature.getProperty('Height'); // e.g., the height of a building\n     *\n     * @example\n     * var name = 'clicked';\n     * if (feature.getProperty(name)) {\n     *     console.log('already clicked');\n     * } else {\n     *     feature.setProperty(name, true);\n     *     console.log('first click');\n     * }\n     */\n    Cesium3DTilePointFeature.prototype.setProperty = function(name, value) {\n        this._content.batchTable.setProperty(this._batchId, name, value);\n\n        // PERFORMANCE_IDEA: Probably overkill, but maybe only mark the tile dirty if the\n        // property is in one of the style's expressions or - if it can be done quickly -\n        // if the new property value changed the result of an expression.\n        this._content.featurePropertiesDirty = true;\n    };\n\n    /**\n     * Returns whether the feature's class name equals <code>className</code>. Unlike {@link Cesium3DTileFeature#isClass}\n     * this function only checks the feature's exact class and not inherited classes.\n     * <p>\n     * This function returns <code>false</code> if no batch table hierarchy is present.\n     * </p>\n     *\n     * @param {String} className The name to check against.\n     * @returns {Boolean} Whether the feature's class name equals <code>className</code>\n     *\n     * @private\n     */\n    Cesium3DTilePointFeature.prototype.isExactClass = function(className) {\n        return this._content.batchTable.isExactClass(this._batchId, className);\n    };\n\n    /**\n     * Returns whether the feature's class or any inherited classes are named <code>className</code>.\n     * <p>\n     * This function returns <code>false</code> if no batch table hierarchy is present.\n     * </p>\n     *\n     * @param {String} className The name to check against.\n     * @returns {Boolean} Whether the feature's class or inherited classes are named <code>className</code>\n     *\n     * @private\n     */\n    Cesium3DTilePointFeature.prototype.isClass = function(className) {\n        return this._content.batchTable.isClass(this._batchId, className);\n    };\n\n    /**\n     * Returns the feature's class name.\n     * <p>\n     * This function returns <code>undefined</code> if no batch table hierarchy is present.\n     * </p>\n     *\n     * @returns {String} The feature's class name.\n     *\n     * @private\n     */\n    Cesium3DTilePointFeature.prototype.getExactClassName = function() {\n        return this._content.batchTable.getExactClassName(this._batchId);\n    };\nexport default Cesium3DTilePointFeature;\n","import arrayRemoveDuplicates from '../Core/arrayRemoveDuplicates.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport PolylinePipeline from '../Core/PolylinePipeline.js';\nimport Material from './Material.js';\n\n    /**\n     * A renderable polyline. Create this by calling {@link PolylineCollection#add}\n     *\n     * @alias Polyline\n     * @internalConstructor\n     * @class\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.show=true] <code>true</code> if this polyline will be shown; otherwise, <code>false</code>.\n     * @param {Number} [options.width=1.0] The width of the polyline in pixels.\n     * @param {Boolean} [options.loop=false] Whether a line segment will be added between the last and first line positions to make this line a loop.\n     * @param {Material} [options.material=Material.ColorType] The material.\n     * @param {Cartesian3[]} [options.positions] The positions.\n     * @param {Object} [options.id] The user-defined object to be returned when this polyline is picked.\n     * @param {DistanceDisplayCondition} [options.distanceDisplayCondition] The condition specifying at what distance from the camera that this polyline will be displayed.\n     * @param {PolylineCollection} polylineCollection The renderable polyline collection.\n     *\n     * @see PolylineCollection\n     *\n     */\n    function Polyline(options, polylineCollection) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        this._show = defaultValue(options.show, true);\n        this._width = defaultValue(options.width, 1.0);\n        this._loop = defaultValue(options.loop, false);\n        this._distanceDisplayCondition = options.distanceDisplayCondition;\n\n        this._material = options.material;\n        if (!defined(this._material)) {\n            this._material = Material.fromType(Material.ColorType, {\n                color : new Color(1.0, 1.0, 1.0, 1.0)\n            });\n        }\n\n        var positions = options.positions;\n        if (!defined(positions)) {\n            positions = [];\n        }\n\n        this._positions = positions;\n        this._actualPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if (this._loop && this._actualPositions.length > 2) {\n            if (this._actualPositions === this._positions) {\n                this._actualPositions = positions.slice();\n            }\n            this._actualPositions.push(Cartesian3.clone(this._actualPositions[0]));\n        }\n\n        this._length = this._actualPositions.length;\n        this._id = options.id;\n\n        var modelMatrix;\n        if (defined(polylineCollection)) {\n            modelMatrix = Matrix4.clone(polylineCollection.modelMatrix);\n        }\n\n        this._modelMatrix = modelMatrix;\n        this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n\n        this._actualLength = undefined;\n\n        this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES); //eslint-disable-line no-use-before-define\n        this._polylineCollection = polylineCollection;\n        this._dirty = false;\n        this._pickId = undefined;\n        this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions);\n        this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix);\n        this._boundingVolume2D = new BoundingSphere(); // modified in PolylineCollection\n    }\n\n    var POSITION_INDEX = Polyline.POSITION_INDEX = 0;\n    var SHOW_INDEX = Polyline.SHOW_INDEX = 1;\n    var WIDTH_INDEX = Polyline.WIDTH_INDEX = 2;\n    var MATERIAL_INDEX = Polyline.MATERIAL_INDEX = 3;\n    var POSITION_SIZE_INDEX = Polyline.POSITION_SIZE_INDEX = 4;\n    var DISTANCE_DISPLAY_CONDITION = Polyline.DISTANCE_DISPLAY_CONDITION = 5;\n    var NUMBER_OF_PROPERTIES = Polyline.NUMBER_OF_PROPERTIES = 6;\n\n    function makeDirty(polyline, propertyChanged) {\n        ++polyline._propertiesChanged[propertyChanged];\n        var polylineCollection = polyline._polylineCollection;\n        if (defined(polylineCollection)) {\n            polylineCollection._updatePolyline(polyline, propertyChanged);\n            polyline._dirty = true;\n        }\n    }\n\n    Object.defineProperties(Polyline.prototype, {\n\n        /**\n         * Determines if this polyline will be shown.  Use this to hide or show a polyline, instead\n         * of removing it and re-adding it to the collection.\n         * @memberof Polyline.prototype\n         * @type {Boolean}\n         */\n        show: {\n            get: function() {\n                return this._show;\n            },\n            set: function(value) {\n                \n\n                if (value !== this._show) {\n                    this._show = value;\n                    makeDirty(this, SHOW_INDEX);\n                }\n            }\n        },\n\n        /**\n         * Gets or sets the positions of the polyline.\n         * @memberof Polyline.prototype\n         * @type {Cartesian3[]}\n         * @example\n         * polyline.positions = Cesium.Cartesian3.fromDegreesArray([\n         *     0.0, 0.0,\n         *     10.0, 0.0,\n         *     0.0, 20.0\n         * ]);\n         */\n        positions : {\n            get: function() {\n                return this._positions;\n            },\n            set: function(value) {\n                \n\n                var positions = arrayRemoveDuplicates(value, Cartesian3.equalsEpsilon);\n\n                if (this._loop && positions.length > 2) {\n                    if (positions === value) {\n                        positions = value.slice();\n                    }\n                    positions.push(Cartesian3.clone(positions[0]));\n                }\n\n                if (this._actualPositions.length !== positions.length || this._actualPositions.length !== this._length) {\n                    makeDirty(this, POSITION_SIZE_INDEX);\n                }\n\n                this._positions = value;\n                this._actualPositions = positions;\n                this._length = positions.length;\n                this._boundingVolume = BoundingSphere.fromPoints(this._actualPositions, this._boundingVolume);\n                this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, this._modelMatrix, this._boundingVolumeWC);\n                makeDirty(this, POSITION_INDEX);\n\n                this.update();\n            }\n        },\n\n        /**\n         * Gets or sets the surface appearance of the polyline.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n         * {@link https://github.com/CesiumGS/cesium/wiki/Fabric|Fabric}.\n         * @memberof Polyline.prototype\n         * @type {Material}\n         */\n        material: {\n            get: function() {\n                return this._material;\n            },\n            set: function(material) {\n                \n\n                if (this._material !== material) {\n                    this._material = material;\n                    makeDirty(this, MATERIAL_INDEX);\n                }\n            }\n        },\n\n        /**\n         * Gets or sets the width of the polyline.\n         * @memberof Polyline.prototype\n         * @type {Number}\n         */\n        width: {\n            get: function() {\n                return this._width;\n            },\n            set: function(value) {\n                \n\n                var width = this._width;\n                if (value !== width) {\n                    this._width = value;\n                    makeDirty(this, WIDTH_INDEX);\n                }\n            }\n        },\n\n        /**\n         * Gets or sets whether a line segment will be added between the first and last polyline positions.\n         * @memberof Polyline.prototype\n         * @type {Boolean}\n         */\n        loop: {\n            get: function() {\n                return this._loop;\n            },\n            set: function(value) {\n                \n\n                if (value !== this._loop) {\n                    var positions = this._actualPositions;\n                    if (value) {\n                        if (positions.length > 2 && !Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n                            if (positions.length === this._positions.length) {\n                                this._actualPositions = positions = this._positions.slice();\n                            }\n                            positions.push(Cartesian3.clone(positions[0]));\n                        }\n                    } else if (positions.length > 2 && Cartesian3.equals(positions[0], positions[positions.length - 1])) {\n                        if (positions.length - 1 === this._positions.length) {\n                            this._actualPositions = this._positions;\n                        } else {\n                            positions.pop();\n                        }\n                    }\n\n                    this._loop = value;\n                    makeDirty(this, POSITION_SIZE_INDEX);\n                }\n            }\n        },\n\n        /**\n         * Gets or sets the user-defined value returned when the polyline is picked.\n         * @memberof Polyline.prototype\n         * @type {*}\n         */\n        id : {\n            get : function() {\n                return this._id;\n            },\n            set : function(value) {\n                this._id = value;\n                if (defined(this._pickId)) {\n                    this._pickId.object.id = value;\n                }\n            }\n        },\n\n        /**\n         * @private\n         */\n        pickId : {\n            get : function() {\n                return this._pickId;\n            }\n        },\n\n        /**\n         * Gets the destruction status of this polyline\n         * @memberof Polyline.prototype\n         * @type {Boolean}\n         * @default false\n         * @private\n         */\n        isDestroyed : {\n            get : function() {\n                return !defined(this._polylineCollection);\n            }\n        },\n\n        /**\n         * Gets or sets the condition specifying at what distance from the camera that this polyline will be displayed.\n         * @memberof Polyline.prototype\n         * @type {DistanceDisplayCondition}\n         * @default undefined\n         */\n        distanceDisplayCondition : {\n            get : function() {\n                return this._distanceDisplayCondition;\n            },\n            set : function(value) {\n                \n                if (!DistanceDisplayCondition.equals(value, this._distanceDisplayCondition)) {\n                    this._distanceDisplayCondition = DistanceDisplayCondition.clone(value, this._distanceDisplayCondition);\n                    makeDirty(this, DISTANCE_DISPLAY_CONDITION);\n                }\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    Polyline.prototype.update = function() {\n        var modelMatrix = Matrix4.IDENTITY;\n        if (defined(this._polylineCollection)) {\n            modelMatrix = this._polylineCollection.modelMatrix;\n        }\n\n        var segmentPositionsLength = this._segments.positions.length;\n        var segmentLengths = this._segments.lengths;\n\n        var positionsChanged = this._propertiesChanged[POSITION_INDEX] > 0 || this._propertiesChanged[POSITION_SIZE_INDEX] > 0;\n        if (!Matrix4.equals(modelMatrix, this._modelMatrix) || positionsChanged) {\n            this._segments = PolylinePipeline.wrapLongitude(this._actualPositions, modelMatrix);\n            this._boundingVolumeWC = BoundingSphere.transform(this._boundingVolume, modelMatrix, this._boundingVolumeWC);\n        }\n\n        this._modelMatrix = Matrix4.clone(modelMatrix, this._modelMatrix);\n\n        if (this._segments.positions.length !== segmentPositionsLength) {\n            // number of positions changed\n            makeDirty(this, POSITION_SIZE_INDEX);\n        } else {\n            var length = segmentLengths.length;\n            for (var i = 0; i < length; ++i) {\n                if (segmentLengths[i] !== this._segments.lengths[i]) {\n                    // indices changed\n                    makeDirty(this, POSITION_SIZE_INDEX);\n                    break;\n                }\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    Polyline.prototype.getPickId = function(context) {\n        if (!defined(this._pickId)) {\n            this._pickId = context.createPickId({\n                primitive : this,\n                collection : this._polylineCollection,\n                id : this._id\n            });\n        }\n        return this._pickId;\n    };\n\n    Polyline.prototype._clean = function() {\n        this._dirty = false;\n        var properties = this._propertiesChanged;\n        for ( var k = 0; k < NUMBER_OF_PROPERTIES - 1; ++k) {\n            properties[k] = 0;\n        }\n    };\n\n    Polyline.prototype._destroy = function() {\n        this._pickId = this._pickId && this._pickId.destroy();\n        this._material = this._material && this._material.destroy();\n        this._polylineCollection = undefined;\n    };\nexport default Polyline;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartesian4 from '../Core/Cartesian4.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Color from '../Core/Color.js';\nimport combine from '../Core/combine.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport EncodedCartesian3 from '../Core/EncodedCartesian3.js';\nimport FeatureDetection from '../Core/FeatureDetection.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport Intersect from '../Core/Intersect.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Plane from '../Core/Plane.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport ContextLimits from '../Renderer/ContextLimits.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport ShaderProgram from '../Renderer/ShaderProgram.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport Texture from '../Renderer/Texture.js';\nimport VertexArray from '../Renderer/VertexArray.js';\nimport PolylineCommon from '../Shaders/PolylineCommon.js';\nimport PolylineFS from '../Shaders/PolylineFS.js';\nimport PolylineVS from '../Shaders/PolylineVS.js';\nimport BatchTable from './BatchTable.js';\nimport BlendingState from './BlendingState.js';\nimport Material from './Material.js';\nimport Polyline from './Polyline.js';\nimport SceneMode from './SceneMode.js';\n\n    var SHOW_INDEX = Polyline.SHOW_INDEX;\n    var WIDTH_INDEX = Polyline.WIDTH_INDEX;\n    var POSITION_INDEX = Polyline.POSITION_INDEX;\n    var MATERIAL_INDEX = Polyline.MATERIAL_INDEX;\n    //POSITION_SIZE_INDEX is needed for when the polyline's position array changes size.\n    //When it does, we need to recreate the indicesBuffer.\n    var POSITION_SIZE_INDEX = Polyline.POSITION_SIZE_INDEX;\n    var DISTANCE_DISPLAY_CONDITION = Polyline.DISTANCE_DISPLAY_CONDITION;\n    var NUMBER_OF_PROPERTIES = Polyline.NUMBER_OF_PROPERTIES;\n\n    var attributeLocations = {\n        texCoordExpandAndBatchIndex : 0,\n        position3DHigh : 1,\n        position3DLow : 2,\n        position2DHigh : 3,\n        position2DLow : 4,\n        prevPosition3DHigh : 5,\n        prevPosition3DLow : 6,\n        prevPosition2DHigh : 7,\n        prevPosition2DLow : 8,\n        nextPosition3DHigh : 9,\n        nextPosition3DLow : 10,\n        nextPosition2DHigh : 11,\n        nextPosition2DLow : 12\n    };\n\n    /**\n     * A renderable collection of polylines.\n     * <br /><br />\n     * <div align=\"center\">\n     * <img src=\"Images/Polyline.png\" width=\"400\" height=\"300\" /><br />\n     * Example polylines\n     * </div>\n     * <br /><br />\n     * Polylines are added and removed from the collection using {@link PolylineCollection#add}\n     * and {@link PolylineCollection#remove}.\n     *\n     * @alias PolylineCollection\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms each polyline from model to world coordinates.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n     *\n     * @performance For best performance, prefer a few collections, each with many polylines, to\n     * many collections with only a few polylines each.  Organize collections so that polylines\n     * with the same update frequency are in the same collection, i.e., polylines that do not\n     * change should be in one collection; polylines that change every frame should be in another\n     * collection; and so on.\n     *\n     * @see PolylineCollection#add\n     * @see PolylineCollection#remove\n     * @see Polyline\n     * @see LabelCollection\n     *\n     * @example\n     * // Create a polyline collection with two polylines\n     * var polylines = new Cesium.PolylineCollection();\n     * polylines.add({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -75.10, 39.57,\n     *     -77.02, 38.53,\n     *     -80.50, 35.14,\n     *     -80.12, 25.46]),\n     *   width : 2\n     * });\n     *\n     * polylines.add({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -73.10, 37.57,\n     *     -75.02, 36.53,\n     *     -78.50, 33.14,\n     *     -78.12, 23.46]),\n     *   width : 4\n     * });\n     */\n    function PolylineCollection(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        /**\n         * The 4x4 transformation matrix that transforms each polyline in this collection from model to world coordinates.\n         * When this is the identity matrix, the polylines are drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n         * Local reference frames can be used by providing a different transformation matrix, like that returned\n         * by {@link Transforms.eastNorthUpToFixedFrame}.\n         *\n         * @type {Matrix4}\n         * @default {@link Matrix4.IDENTITY}\n         */\n        this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n        this._modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the bounding sphere for each draw command in the primitive.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n\n        this._opaqueRS = undefined;\n        this._translucentRS = undefined;\n\n        this._colorCommands = [];\n\n        this._polylinesUpdated = false;\n        this._polylinesRemoved = false;\n        this._createVertexArray = false;\n        this._propertiesChanged = new Uint32Array(NUMBER_OF_PROPERTIES);\n        this._polylines = [];\n        this._polylineBuckets = {};\n\n        // The buffer usage is determined based on the usage of the attribute over time.\n        this._positionBufferUsage = { bufferUsage : BufferUsage.STATIC_DRAW, frameCount : 0 };\n\n        this._mode = undefined;\n\n        this._polylinesToUpdate = [];\n        this._vertexArrays = [];\n        this._positionBuffer = undefined;\n        this._texCoordExpandAndBatchIndexBuffer = undefined;\n\n        this._batchTable = undefined;\n        this._createBatchTable = false;\n\n        // Only used by Vector3DTilePoints\n        this._useHighlightColor = false;\n        this._highlightColor = Color.clone(Color.WHITE);\n\n        var that = this;\n        this._uniformMap = {\n            u_highlightColor : function() {\n                return that._highlightColor;\n            }\n        };\n    }\n\n    Object.defineProperties(PolylineCollection.prototype, {\n        /**\n         * Returns the number of polylines in this collection.  This is commonly used with\n         * {@link PolylineCollection#get} to iterate over all the polylines\n         * in the collection.\n         * @memberof PolylineCollection.prototype\n         * @type {Number}\n         */\n        length : {\n            get : function() {\n                removePolylines(this);\n                return this._polylines.length;\n            }\n        }\n    });\n\n    /**\n     * Creates and adds a polyline with the specified initial properties to the collection.\n     * The added polyline is returned so it can be modified or removed from the collection later.\n     *\n     * @param {Object}[options] A template describing the polyline's properties as shown in Example 1.\n     * @returns {Polyline} The polyline that was added to the collection.\n     *\n     * @performance After calling <code>add</code>, {@link PolylineCollection#update} is called and\n     * the collection's vertex buffer is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.\n     * For best performance, add as many polylines as possible before calling <code>update</code>.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * // Example 1:  Add a polyline, specifying all the default values.\n     * var p = polylines.add({\n     *   show : true,\n     *   positions : ellipsoid.cartographicArrayToCartesianArray([\n           Cesium.Cartographic.fromDegrees(-75.10, 39.57),\n           Cesium.Cartographic.fromDegrees(-77.02, 38.53)]),\n     *   width : 1\n     * });\n     *\n     * @see PolylineCollection#remove\n     * @see PolylineCollection#removeAll\n     * @see PolylineCollection#update\n     */\n    PolylineCollection.prototype.add = function(options) {\n        var p = new Polyline(options, this);\n        p._index = this._polylines.length;\n        this._polylines.push(p);\n        this._createVertexArray = true;\n        this._createBatchTable = true;\n        return p;\n    };\n\n    /**\n     * Removes a polyline from the collection.\n     *\n     * @param {Polyline} polyline The polyline to remove.\n     * @returns {Boolean} <code>true</code> if the polyline was removed; <code>false</code> if the polyline was not found in the collection.\n     *\n     * @performance After calling <code>remove</code>, {@link PolylineCollection#update} is called and\n     * the collection's vertex buffer is rewritten - an <code>O(n)</code> operation that also incurs CPU to GPU overhead.\n     * For best performance, remove as many polylines as possible before calling <code>update</code>.\n     * If you intend to temporarily hide a polyline, it is usually more efficient to call\n     * {@link Polyline#show} instead of removing and re-adding the polyline.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * var p = polylines.add(...);\n     * polylines.remove(p);  // Returns true\n     *\n     * @see PolylineCollection#add\n     * @see PolylineCollection#removeAll\n     * @see PolylineCollection#update\n     * @see Polyline#show\n     */\n    PolylineCollection.prototype.remove = function(polyline) {\n        if (this.contains(polyline)) {\n            this._polylinesRemoved = true;\n            this._createVertexArray = true;\n            this._createBatchTable = true;\n            if (defined(polyline._bucket)) {\n                var bucket = polyline._bucket;\n                bucket.shaderProgram = bucket.shaderProgram && bucket.shaderProgram.destroy();\n            }\n            polyline._destroy();\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes all polylines from the collection.\n     *\n     * @performance <code>O(n)</code>.  It is more efficient to remove all the polylines\n     * from a collection and then add new ones than to create a new collection entirely.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * polylines.add(...);\n     * polylines.add(...);\n     * polylines.removeAll();\n     *\n     * @see PolylineCollection#add\n     * @see PolylineCollection#remove\n     * @see PolylineCollection#update\n     */\n    PolylineCollection.prototype.removeAll = function() {\n        releaseShaders(this);\n        destroyPolylines(this);\n        this._polylineBuckets = {};\n        this._polylinesRemoved = false;\n        this._polylines.length = 0;\n        this._polylinesToUpdate.length = 0;\n        this._createVertexArray = true;\n    };\n\n    /**\n     * Determines if this collection contains the specified polyline.\n     *\n     * @param {Polyline} polyline The polyline to check for.\n     * @returns {Boolean} true if this collection contains the polyline, false otherwise.\n     *\n     * @see PolylineCollection#get\n     */\n    PolylineCollection.prototype.contains = function(polyline) {\n        return defined(polyline) && polyline._polylineCollection === this;\n    };\n\n    /**\n     * Returns the polyline in the collection at the specified index.  Indices are zero-based\n     * and increase as polylines are added.  Removing a polyline shifts all polylines after\n     * it to the left, changing their indices.  This function is commonly used with\n     * {@link PolylineCollection#length} to iterate over all the polylines\n     * in the collection.\n     *\n     * @param {Number} index The zero-based index of the polyline.\n     * @returns {Polyline} The polyline at the specified index.\n     *\n     * @performance If polylines were removed from the collection and\n     * {@link PolylineCollection#update} was not called, an implicit <code>O(n)</code>\n     * operation is performed.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * // Toggle the show property of every polyline in the collection\n     * var len = polylines.length;\n     * for (var i = 0; i < len; ++i) {\n     *   var p = polylines.get(i);\n     *   p.show = !p.show;\n     * }\n     *\n     * @see PolylineCollection#length\n     */\n    PolylineCollection.prototype.get = function(index) {\n        \n\n        removePolylines(this);\n        return this._polylines[index];\n    };\n\n    function createBatchTable(collection, context) {\n        if (defined(collection._batchTable)) {\n            collection._batchTable.destroy();\n        }\n\n        var attributes = [{\n            functionName : 'batchTable_getWidthAndShow',\n            componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute : 2\n        }, {\n            functionName : 'batchTable_getPickColor',\n            componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute : 4,\n            normalize : true\n        }, {\n            functionName : 'batchTable_getCenterHigh',\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 3\n        }, {\n            functionName : 'batchTable_getCenterLowAndRadius',\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 4\n        }, {\n            functionName : 'batchTable_getDistanceDisplayCondition',\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 2\n        }];\n\n        collection._batchTable = new BatchTable(context, attributes, collection._polylines.length);\n    }\n\n    var scratchUpdatePolylineEncodedCartesian = new EncodedCartesian3();\n    var scratchUpdatePolylineCartesian4 = new Cartesian4();\n    var scratchNearFarCartesian2 = new Cartesian2();\n\n    /**\n     * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n     * get the draw commands needed to render this primitive.\n     * <p>\n     * Do not call this function directly.  This is documented just to\n     * list the exceptions that may be propagated when the scene is rendered:\n     * </p>\n     *\n     * @exception {RuntimeError} Vertex texture fetch support is required to render primitives with per-instance attributes. The maximum number of vertex texture image units must be greater than zero.\n     */\n    PolylineCollection.prototype.update = function(frameState) {\n        removePolylines(this);\n\n        if (this._polylines.length === 0) {\n            return;\n        }\n\n        updateMode(this, frameState);\n\n        var context = frameState.context;\n        var projection = frameState.mapProjection;\n        var polyline;\n        var properties = this._propertiesChanged;\n\n        if (this._createBatchTable) {\n            if (ContextLimits.maximumVertexTextureImageUnits === 0) {\n                throw new RuntimeError('Vertex texture fetch support is required to render polylines. The maximum number of vertex texture image units must be greater than zero.');\n            }\n            createBatchTable(this, context);\n            this._createBatchTable = false;\n        }\n\n        if (this._createVertexArray || computeNewBuffersUsage(this)) {\n            createVertexArrays(this, context, projection);\n        } else if (this._polylinesUpdated) {\n            // Polylines were modified, but no polylines were added or removed.\n            var polylinesToUpdate = this._polylinesToUpdate;\n            if (this._mode !== SceneMode.SCENE3D) {\n                var updateLength = polylinesToUpdate.length;\n                for ( var i = 0; i < updateLength; ++i) {\n                    polyline = polylinesToUpdate[i];\n                    polyline.update();\n                }\n            }\n\n            // if a polyline's positions size changes, we need to recreate the vertex arrays and vertex buffers because the indices will be different.\n            // if a polyline's material changes, we need to recreate the VAOs and VBOs because they will be batched differently.\n            if (properties[POSITION_SIZE_INDEX] || properties[MATERIAL_INDEX]) {\n                createVertexArrays(this, context, projection);\n            } else {\n                var length = polylinesToUpdate.length;\n                var polylineBuckets = this._polylineBuckets;\n                for ( var ii = 0; ii < length; ++ii) {\n                    polyline = polylinesToUpdate[ii];\n                    properties = polyline._propertiesChanged;\n                    var bucket = polyline._bucket;\n                    var index = 0;\n                    for (var x in polylineBuckets) {\n                        if (polylineBuckets.hasOwnProperty(x)) {\n                            if (polylineBuckets[x] === bucket) {\n                                if (properties[POSITION_INDEX]) {\n                                    bucket.writeUpdate(index, polyline, this._positionBuffer, projection);\n                                }\n                                break;\n                            }\n                            index += polylineBuckets[x].lengthOfPositions;\n                        }\n                    }\n\n                    if (properties[SHOW_INDEX] || properties[WIDTH_INDEX]) {\n                        this._batchTable.setBatchedAttribute(polyline._index, 0, new Cartesian2(polyline._width, polyline._show));\n                    }\n\n                    if (this._batchTable.attributes.length > 2) {\n                        if (properties[POSITION_INDEX] || properties[POSITION_SIZE_INDEX]) {\n                            var boundingSphere = frameState.mode === SceneMode.SCENE2D ? polyline._boundingVolume2D : polyline._boundingVolumeWC;\n                            var encodedCenter = EncodedCartesian3.fromCartesian(boundingSphere.center, scratchUpdatePolylineEncodedCartesian);\n                            var low = Cartesian4.fromElements(encodedCenter.low.x, encodedCenter.low.y, encodedCenter.low.z, boundingSphere.radius, scratchUpdatePolylineCartesian4);\n                            this._batchTable.setBatchedAttribute(polyline._index, 2, encodedCenter.high);\n                            this._batchTable.setBatchedAttribute(polyline._index, 3, low);\n                        }\n\n                        if (properties[DISTANCE_DISPLAY_CONDITION]) {\n                            var nearFarCartesian = scratchNearFarCartesian2;\n                            nearFarCartesian.x = 0.0;\n                            nearFarCartesian.y = Number.MAX_VALUE;\n\n                            var distanceDisplayCondition = polyline.distanceDisplayCondition;\n                            if (defined(distanceDisplayCondition)) {\n                                nearFarCartesian.x = distanceDisplayCondition.near;\n                                nearFarCartesian.y = distanceDisplayCondition.far;\n                            }\n\n                            this._batchTable.setBatchedAttribute(polyline._index, 4, nearFarCartesian);\n                        }\n                    }\n\n                    polyline._clean();\n                }\n            }\n            polylinesToUpdate.length = 0;\n            this._polylinesUpdated = false;\n        }\n\n        properties = this._propertiesChanged;\n        for ( var k = 0; k < NUMBER_OF_PROPERTIES; ++k) {\n            properties[k] = 0;\n        }\n\n        var modelMatrix = Matrix4.IDENTITY;\n        if (frameState.mode === SceneMode.SCENE3D) {\n            modelMatrix = this.modelMatrix;\n        }\n\n        var pass = frameState.passes;\n        var useDepthTest = (frameState.morphTime !== 0.0);\n\n        if (!defined(this._opaqueRS) || this._opaqueRS.depthTest.enabled !== useDepthTest) {\n            this._opaqueRS = RenderState.fromCache({\n                depthMask : useDepthTest,\n                depthTest : {\n                    enabled : useDepthTest\n                }\n            });\n        }\n\n        if (!defined(this._translucentRS) || this._translucentRS.depthTest.enabled !== useDepthTest) {\n            this._translucentRS = RenderState.fromCache({\n                blending : BlendingState.ALPHA_BLEND,\n                depthMask : !useDepthTest,\n                depthTest : {\n                    enabled : useDepthTest\n                }\n            });\n        }\n\n        this._batchTable.update(frameState);\n\n        if (pass.render || pass.pick) {\n            var colorList = this._colorCommands;\n            createCommandLists(this, frameState, colorList, modelMatrix);\n        }\n    };\n\n    var boundingSphereScratch = new BoundingSphere();\n    var boundingSphereScratch2 = new BoundingSphere();\n\n    function createCommandLists(polylineCollection, frameState, commands, modelMatrix) {\n        var context = frameState.context;\n        var commandList = frameState.commandList;\n\n        var commandsLength = commands.length;\n        var commandIndex = 0;\n        var cloneBoundingSphere = true;\n\n        var vertexArrays = polylineCollection._vertexArrays;\n        var debugShowBoundingVolume = polylineCollection.debugShowBoundingVolume;\n\n        var batchTable = polylineCollection._batchTable;\n        var uniformCallback = batchTable.getUniformMapCallback();\n\n        var length = vertexArrays.length;\n        for ( var m = 0; m < length; ++m) {\n            var va = vertexArrays[m];\n            var buckets = va.buckets;\n            var bucketLength = buckets.length;\n\n            for ( var n = 0; n < bucketLength; ++n) {\n                var bucketLocator = buckets[n];\n\n                var offset = bucketLocator.offset;\n                var sp = bucketLocator.bucket.shaderProgram;\n\n                var polylines = bucketLocator.bucket.polylines;\n                var polylineLength = polylines.length;\n                var currentId;\n                var currentMaterial;\n                var count = 0;\n                var command;\n                var uniformMap;\n\n                for (var s = 0; s < polylineLength; ++s) {\n                    var polyline = polylines[s];\n                    var mId = createMaterialId(polyline._material);\n                    if (mId !== currentId) {\n                        if (defined(currentId) && count > 0) {\n                            var translucent = currentMaterial.isTranslucent();\n\n                            if (commandIndex >= commandsLength) {\n                                command = new DrawCommand({\n                                    owner : polylineCollection\n                                });\n                                commands.push(command);\n                            } else {\n                                command = commands[commandIndex];\n                            }\n\n                            ++commandIndex;\n\n                            uniformMap = combine(uniformCallback(currentMaterial._uniforms), polylineCollection._uniformMap);\n\n                            command.boundingVolume = BoundingSphere.clone(boundingSphereScratch, command.boundingVolume);\n                            command.modelMatrix = modelMatrix;\n                            command.shaderProgram = sp;\n                            command.vertexArray = va.va;\n                            command.renderState = translucent ? polylineCollection._translucentRS : polylineCollection._opaqueRS;\n                            command.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n                            command.debugShowBoundingVolume = debugShowBoundingVolume;\n                            command.pickId = 'v_pickColor';\n\n                            command.uniformMap = uniformMap;\n                            command.count = count;\n                            command.offset = offset;\n\n                            offset += count;\n                            count = 0;\n                            cloneBoundingSphere = true;\n\n                            commandList.push(command);\n                        }\n\n                        currentMaterial = polyline._material;\n                        currentMaterial.update(context);\n                        currentId = mId;\n                    }\n\n                    var locators = polyline._locatorBuckets;\n                    var locatorLength = locators.length;\n                    for (var t = 0; t < locatorLength; ++t) {\n                        var locator = locators[t];\n                        if (locator.locator === bucketLocator) {\n                            count += locator.count;\n                        }\n                    }\n\n                    var boundingVolume;\n                    if (frameState.mode === SceneMode.SCENE3D) {\n                        boundingVolume = polyline._boundingVolumeWC;\n                    } else if (frameState.mode === SceneMode.COLUMBUS_VIEW) {\n                        boundingVolume = polyline._boundingVolume2D;\n                    } else if (frameState.mode === SceneMode.SCENE2D) {\n                        if (defined(polyline._boundingVolume2D)) {\n                            boundingVolume = BoundingSphere.clone(polyline._boundingVolume2D, boundingSphereScratch2);\n                            boundingVolume.center.x = 0.0;\n                        }\n                    } else if (defined(polyline._boundingVolumeWC) && defined(polyline._boundingVolume2D)) {\n                        boundingVolume = BoundingSphere.union(polyline._boundingVolumeWC, polyline._boundingVolume2D, boundingSphereScratch2);\n                    }\n\n                    if (cloneBoundingSphere) {\n                        cloneBoundingSphere = false;\n                        BoundingSphere.clone(boundingVolume, boundingSphereScratch);\n                    } else {\n                        BoundingSphere.union(boundingVolume, boundingSphereScratch, boundingSphereScratch);\n                    }\n                }\n\n                if (defined(currentId) && count > 0) {\n                    if (commandIndex >= commandsLength) {\n                        command = new DrawCommand({\n                            owner : polylineCollection\n                        });\n                        commands.push(command);\n                    } else {\n                        command = commands[commandIndex];\n                    }\n\n                    ++commandIndex;\n\n                    uniformMap = combine(uniformCallback(currentMaterial._uniforms), polylineCollection._uniformMap);\n\n                    command.boundingVolume = BoundingSphere.clone(boundingSphereScratch, command.boundingVolume);\n                    command.modelMatrix = modelMatrix;\n                    command.shaderProgram = sp;\n                    command.vertexArray = va.va;\n                    command.renderState = currentMaterial.isTranslucent() ? polylineCollection._translucentRS : polylineCollection._opaqueRS;\n                    command.pass = currentMaterial.isTranslucent() ? Pass.TRANSLUCENT : Pass.OPAQUE;\n                    command.debugShowBoundingVolume = debugShowBoundingVolume;\n                    command.pickId = 'v_pickColor';\n\n                    command.uniformMap = uniformMap;\n                    command.count = count;\n                    command.offset = offset;\n\n                    cloneBoundingSphere = true;\n\n                    commandList.push(command);\n                }\n\n                currentId = undefined;\n            }\n        }\n\n        commands.length = commandIndex;\n    }\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PolylineCollection#destroy\n     */\n    PolylineCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * polylines = polylines && polylines.destroy();\n     *\n     * @see PolylineCollection#isDestroyed\n     */\n    PolylineCollection.prototype.destroy = function() {\n        destroyVertexArrays(this);\n        releaseShaders(this);\n        destroyPolylines(this);\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n        return destroyObject(this);\n    };\n\n    function computeNewBuffersUsage(collection) {\n        var usageChanged = false;\n        var properties = collection._propertiesChanged;\n        var bufferUsage = collection._positionBufferUsage;\n        if (properties[POSITION_INDEX]) {\n            if (bufferUsage.bufferUsage !== BufferUsage.STREAM_DRAW) {\n                usageChanged = true;\n                bufferUsage.bufferUsage = BufferUsage.STREAM_DRAW;\n                bufferUsage.frameCount = 100;\n            } else {\n                bufferUsage.frameCount = 100;\n            }\n        } else if (bufferUsage.bufferUsage !== BufferUsage.STATIC_DRAW) {\n            if (bufferUsage.frameCount === 0) {\n                usageChanged = true;\n                bufferUsage.bufferUsage = BufferUsage.STATIC_DRAW;\n            } else {\n                bufferUsage.frameCount--;\n            }\n        }\n\n        return usageChanged;\n    }\n\n    var emptyVertexBuffer = [0.0, 0.0, 0.0];\n\n    function createVertexArrays(collection, context, projection) {\n        collection._createVertexArray = false;\n        releaseShaders(collection);\n        destroyVertexArrays(collection);\n        sortPolylinesIntoBuckets(collection);\n\n        //stores all of the individual indices arrays.\n        var totalIndices = [[]];\n        var indices = totalIndices[0];\n\n        var batchTable = collection._batchTable;\n        var useHighlightColor = collection._useHighlightColor;\n\n        //used to determine the vertexBuffer offset if the indicesArray goes over 64k.\n        //if it's the same polyline while it goes over 64k, the offset needs to backtrack componentsPerAttribute * componentDatatype bytes\n        //so that the polyline looks contiguous.\n        //if the polyline ends at the 64k mark, then the offset is just 64k * componentsPerAttribute * componentDatatype\n        var vertexBufferOffset = [0];\n        var offset = 0;\n        var vertexArrayBuckets = [[]];\n        var totalLength = 0;\n        var polylineBuckets = collection._polylineBuckets;\n        var x;\n        var bucket;\n        for (x in polylineBuckets) {\n            if (polylineBuckets.hasOwnProperty(x)) {\n                bucket = polylineBuckets[x];\n                bucket.updateShader(context, batchTable, useHighlightColor);\n                totalLength += bucket.lengthOfPositions;\n            }\n        }\n\n        if (totalLength > 0) {\n            var mode = collection._mode;\n\n            var positionArray = new Float32Array(6 * totalLength * 3);\n            var texCoordExpandAndBatchIndexArray = new Float32Array(totalLength * 4);\n            var position3DArray;\n\n            var positionIndex = 0;\n            var colorIndex = 0;\n            var texCoordExpandAndBatchIndexIndex = 0;\n            for (x in polylineBuckets) {\n                if (polylineBuckets.hasOwnProperty(x)) {\n                    bucket = polylineBuckets[x];\n                    bucket.write(positionArray, texCoordExpandAndBatchIndexArray, positionIndex, colorIndex, texCoordExpandAndBatchIndexIndex, batchTable, context, projection);\n\n                    if (mode === SceneMode.MORPHING) {\n                        if (!defined(position3DArray)) {\n                            position3DArray = new Float32Array(6 * totalLength * 3);\n                        }\n                        bucket.writeForMorph(position3DArray, positionIndex);\n                    }\n\n                    var bucketLength = bucket.lengthOfPositions;\n                    positionIndex += 6 * bucketLength * 3;\n                    colorIndex += bucketLength * 4;\n                    texCoordExpandAndBatchIndexIndex += bucketLength * 4;\n                    offset = bucket.updateIndices(totalIndices, vertexBufferOffset, vertexArrayBuckets, offset);\n                }\n            }\n\n            var positionBufferUsage = collection._positionBufferUsage.bufferUsage;\n            var texCoordExpandAndBatchIndexBufferUsage = BufferUsage.STATIC_DRAW;\n\n            collection._positionBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : positionArray,\n                usage : positionBufferUsage\n            });\n            var position3DBuffer;\n            if (defined(position3DArray)) {\n                position3DBuffer = Buffer.createVertexBuffer({\n                    context : context,\n                    typedArray : position3DArray,\n                    usage : positionBufferUsage\n                });\n            }\n            collection._texCoordExpandAndBatchIndexBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : texCoordExpandAndBatchIndexArray,\n                usage : texCoordExpandAndBatchIndexBufferUsage\n            });\n\n            var positionSizeInBytes = 3 * Float32Array.BYTES_PER_ELEMENT;\n            var texCoordExpandAndBatchIndexSizeInBytes = 4 * Float32Array.BYTES_PER_ELEMENT;\n\n            var vbo = 0;\n            var numberOfIndicesArrays = totalIndices.length;\n            for ( var k = 0; k < numberOfIndicesArrays; ++k) {\n                indices = totalIndices[k];\n\n                if (indices.length > 0) {\n                    var indicesArray = new Uint16Array(indices);\n                    var indexBuffer = Buffer.createIndexBuffer({\n                        context : context,\n                        typedArray : indicesArray,\n                        usage : BufferUsage.STATIC_DRAW,\n                        indexDatatype : IndexDatatype.UNSIGNED_SHORT\n                    });\n\n                    vbo += vertexBufferOffset[k];\n\n                    var positionHighOffset = 6 * (k * (positionSizeInBytes * CesiumMath.SIXTY_FOUR_KILOBYTES) - vbo * positionSizeInBytes);//componentsPerAttribute(3) * componentDatatype(4)\n                    var positionLowOffset = positionSizeInBytes + positionHighOffset;\n                    var prevPositionHighOffset =  positionSizeInBytes + positionLowOffset;\n                    var prevPositionLowOffset = positionSizeInBytes + prevPositionHighOffset;\n                    var nextPositionHighOffset = positionSizeInBytes + prevPositionLowOffset;\n                    var nextPositionLowOffset = positionSizeInBytes + nextPositionHighOffset;\n                    var vertexTexCoordExpandAndBatchIndexBufferOffset = k * (texCoordExpandAndBatchIndexSizeInBytes * CesiumMath.SIXTY_FOUR_KILOBYTES) - vbo * texCoordExpandAndBatchIndexSizeInBytes;\n\n                    var attributes = [{\n                        index : attributeLocations.position3DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : positionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.position3DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : positionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.position2DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : positionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.position2DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : positionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.prevPosition3DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : prevPositionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.prevPosition3DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : prevPositionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.prevPosition2DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : prevPositionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.prevPosition2DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : prevPositionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.nextPosition3DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : nextPositionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.nextPosition3DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : nextPositionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.nextPosition2DHigh,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : nextPositionHighOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.nextPosition2DLow,\n                        componentsPerAttribute : 3,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        offsetInBytes : nextPositionLowOffset,\n                        strideInBytes : 6 * positionSizeInBytes\n                    }, {\n                        index : attributeLocations.texCoordExpandAndBatchIndex,\n                        componentsPerAttribute : 4,\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        vertexBuffer : collection._texCoordExpandAndBatchIndexBuffer,\n                        offsetInBytes : vertexTexCoordExpandAndBatchIndexBufferOffset\n                    }];\n\n                    var buffer3D;\n                    var bufferProperty3D;\n                    var buffer2D;\n                    var bufferProperty2D;\n\n                    if (mode === SceneMode.SCENE3D) {\n                        buffer3D = collection._positionBuffer;\n                        bufferProperty3D = 'vertexBuffer';\n                        buffer2D = emptyVertexBuffer;\n                        bufferProperty2D = 'value';\n                    } else if (mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {\n                        buffer3D = emptyVertexBuffer;\n                        bufferProperty3D = 'value';\n                        buffer2D = collection._positionBuffer;\n                        bufferProperty2D = 'vertexBuffer';\n                    } else {\n                        buffer3D = position3DBuffer;\n                        bufferProperty3D = 'vertexBuffer';\n                        buffer2D = collection._positionBuffer;\n                        bufferProperty2D = 'vertexBuffer';\n                    }\n\n                    attributes[0][bufferProperty3D] = buffer3D;\n                    attributes[1][bufferProperty3D] = buffer3D;\n                    attributes[2][bufferProperty2D] = buffer2D;\n                    attributes[3][bufferProperty2D] = buffer2D;\n                    attributes[4][bufferProperty3D] = buffer3D;\n                    attributes[5][bufferProperty3D] = buffer3D;\n                    attributes[6][bufferProperty2D] = buffer2D;\n                    attributes[7][bufferProperty2D] = buffer2D;\n                    attributes[8][bufferProperty3D] = buffer3D;\n                    attributes[9][bufferProperty3D] = buffer3D;\n                    attributes[10][bufferProperty2D] = buffer2D;\n                    attributes[11][bufferProperty2D] = buffer2D;\n\n                    var va = new VertexArray({\n                        context : context,\n                        attributes : attributes,\n                        indexBuffer : indexBuffer\n                    });\n                    collection._vertexArrays.push({\n                        va : va,\n                        buckets : vertexArrayBuckets[k]\n                    });\n                }\n            }\n        }\n    }\n\n    function replacer(key, value) {\n        if (value instanceof Texture) {\n            return value.id;\n        }\n\n        return value;\n    }\n\n    var scratchUniformArray = [];\n    function createMaterialId(material) {\n        var uniforms = Material._uniformList[material.type];\n        var length = uniforms.length;\n        scratchUniformArray.length = 2.0 * length;\n\n        var index = 0;\n        for (var i = 0; i < length; ++i) {\n            var uniform = uniforms[i];\n            scratchUniformArray[index] = uniform;\n            scratchUniformArray[index + 1] = material._uniforms[uniform]();\n            index += 2;\n        }\n\n        return material.type + ':' + JSON.stringify(scratchUniformArray, replacer);\n    }\n\n    function sortPolylinesIntoBuckets(collection) {\n        var mode = collection._mode;\n        var modelMatrix = collection._modelMatrix;\n\n        var polylineBuckets = collection._polylineBuckets = {};\n        var polylines = collection._polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            var p = polylines[i];\n            if (p._actualPositions.length > 1) {\n                p.update();\n                var material = p.material;\n                var value = polylineBuckets[material.type];\n                if (!defined(value)) {\n                    value = polylineBuckets[material.type] = new PolylineBucket(material, mode, modelMatrix);\n                }\n                value.addPolyline(p);\n            }\n        }\n    }\n\n    function updateMode(collection, frameState) {\n        var mode = frameState.mode;\n\n        if (collection._mode !== mode || (!Matrix4.equals(collection._modelMatrix, collection.modelMatrix))) {\n            collection._mode = mode;\n            collection._modelMatrix = Matrix4.clone(collection.modelMatrix);\n            collection._createVertexArray = true;\n        }\n    }\n\n    function removePolylines(collection) {\n        if (collection._polylinesRemoved) {\n            collection._polylinesRemoved = false;\n            var definedPolylines = [];\n            var definedPolylinesToUpdate = [];\n            var polyIndex = 0;\n            var polyline;\n\n            var length = collection._polylines.length;\n            for (var i = 0; i < length; ++i) {\n                polyline = collection._polylines[i];\n                if (!polyline.isDestroyed) {\n                    polyline._index = polyIndex++;\n                    definedPolylinesToUpdate.push(polyline);\n                    definedPolylines.push(polyline);\n                }\n            }\n\n            collection._polylines = definedPolylines;\n            collection._polylinesToUpdate = definedPolylinesToUpdate;\n        }\n    }\n\n    function releaseShaders(collection) {\n        var polylines = collection._polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            if (!polylines[i].isDestroyed) {\n                var bucket = polylines[i]._bucket;\n                if (defined(bucket)) {\n                    bucket.shaderProgram = bucket.shaderProgram && bucket.shaderProgram.destroy();\n                }\n            }\n        }\n    }\n\n    function destroyVertexArrays(collection) {\n        var length = collection._vertexArrays.length;\n        for ( var t = 0; t < length; ++t) {\n            collection._vertexArrays[t].va.destroy();\n        }\n        collection._vertexArrays.length = 0;\n    }\n\n    PolylineCollection.prototype._updatePolyline = function(polyline, propertyChanged) {\n        this._polylinesUpdated = true;\n        if (!polyline._dirty) {\n            this._polylinesToUpdate.push(polyline);\n        }\n        ++this._propertiesChanged[propertyChanged];\n    };\n\n    function destroyPolylines(collection) {\n        var polylines = collection._polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            if (!polylines[i].isDestroyed) {\n                polylines[i]._destroy();\n            }\n        }\n    }\n\n    function VertexArrayBucketLocator(count, offset, bucket) {\n        this.count = count;\n        this.offset = offset;\n        this.bucket = bucket;\n    }\n\n    function PolylineBucket(material, mode, modelMatrix) {\n        this.polylines = [];\n        this.lengthOfPositions = 0;\n        this.material = material;\n        this.shaderProgram = undefined;\n        this.mode = mode;\n        this.modelMatrix = modelMatrix;\n    }\n\n    PolylineBucket.prototype.addPolyline = function(p) {\n        var polylines = this.polylines;\n        polylines.push(p);\n        p._actualLength = this.getPolylinePositionsLength(p);\n        this.lengthOfPositions += p._actualLength;\n        p._bucket = this;\n    };\n\n    PolylineBucket.prototype.updateShader = function(context, batchTable, useHighlightColor) {\n        if (defined(this.shaderProgram)) {\n            return;\n        }\n\n        var defines = ['DISTANCE_DISPLAY_CONDITION'];\n        if (useHighlightColor) {\n            defines.push('VECTOR_TILE');\n        }\n\n        // Check for use of v_polylineAngle in material shader\n        if (this.material.shaderSource.search(/varying\\s+float\\s+v_polylineAngle;/g) !== -1) {\n            defines.push('POLYLINE_DASH');\n        }\n\n        if (!FeatureDetection.isInternetExplorer()) {\n            defines.push('CLIP_POLYLINE');\n        }\n\n        var fs = new ShaderSource({\n            defines : defines,\n            sources : ['varying vec4 v_pickColor;\\n', this.material.shaderSource, PolylineFS]\n        });\n\n        var vsSource = batchTable.getVertexShaderCallback()(PolylineVS);\n        var vs = new ShaderSource({\n            defines : defines,\n            sources : [PolylineCommon, vsSource]\n        });\n\n        this.shaderProgram = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n    };\n\n    function intersectsIDL(polyline) {\n        return Cartesian3.dot(Cartesian3.UNIT_X, polyline._boundingVolume.center) < 0 ||\n            polyline._boundingVolume.intersectPlane(Plane.ORIGIN_ZX_PLANE) === Intersect.INTERSECTING;\n    }\n\n    PolylineBucket.prototype.getPolylinePositionsLength = function(polyline) {\n        var length;\n        if (this.mode === SceneMode.SCENE3D || !intersectsIDL(polyline)) {\n            length = polyline._actualPositions.length;\n            return length * 4.0 - 4.0;\n        }\n\n        var count = 0;\n        var segmentLengths = polyline._segments.lengths;\n        length = segmentLengths.length;\n        for (var i = 0; i < length; ++i) {\n            count += segmentLengths[i] * 4.0 - 4.0;\n        }\n\n        return count;\n    };\n\n    var scratchWritePosition = new Cartesian3();\n    var scratchWritePrevPosition = new Cartesian3();\n    var scratchWriteNextPosition = new Cartesian3();\n    var scratchWriteVector = new Cartesian3();\n    var scratchPickColorCartesian = new Cartesian4();\n    var scratchWidthShowCartesian = new Cartesian2();\n\n    PolylineBucket.prototype.write = function(positionArray, texCoordExpandAndBatchIndexArray, positionIndex, colorIndex, texCoordExpandAndBatchIndexIndex, batchTable, context, projection) {\n        var mode = this.mode;\n        var maxLon = projection.ellipsoid.maximumRadius * CesiumMath.PI;\n\n        var polylines = this.polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            var polyline = polylines[i];\n            var width = polyline.width;\n            var show = polyline.show && width > 0.0;\n            var polylineBatchIndex = polyline._index;\n            var segments = this.getSegments(polyline, projection);\n            var positions = segments.positions;\n            var lengths = segments.lengths;\n            var positionsLength = positions.length;\n\n            var pickColor = polyline.getPickId(context).color;\n\n            var segmentIndex = 0;\n            var count = 0;\n            var position;\n\n            for ( var j = 0; j < positionsLength; ++j) {\n                if (j === 0) {\n                    if (polyline._loop) {\n                        position = positions[positionsLength - 2];\n                    } else {\n                        position = scratchWriteVector;\n                        Cartesian3.subtract(positions[0], positions[1], position);\n                        Cartesian3.add(positions[0], position, position);\n                    }\n                } else {\n                    position = positions[j - 1];\n                }\n\n                Cartesian3.clone(position, scratchWritePrevPosition);\n                Cartesian3.clone(positions[j], scratchWritePosition);\n\n                if (j === positionsLength - 1) {\n                    if (polyline._loop) {\n                        position = positions[1];\n                    } else {\n                        position = scratchWriteVector;\n                        Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\n                        Cartesian3.add(positions[positionsLength - 1], position, position);\n                    }\n                } else {\n                    position = positions[j + 1];\n                }\n\n                Cartesian3.clone(position, scratchWriteNextPosition);\n\n                var segmentLength = lengths[segmentIndex];\n                if (j === count + segmentLength) {\n                    count += segmentLength;\n                    ++segmentIndex;\n                }\n\n                var segmentStart = j - count === 0;\n                var segmentEnd = j === count + lengths[segmentIndex] - 1;\n\n                if (mode === SceneMode.SCENE2D) {\n                    scratchWritePrevPosition.z = 0.0;\n                    scratchWritePosition.z = 0.0;\n                    scratchWriteNextPosition.z = 0.0;\n                }\n\n                if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n                    if ((segmentStart || segmentEnd) && maxLon - Math.abs(scratchWritePosition.x) < 1.0) {\n                        if ((scratchWritePosition.x < 0.0 && scratchWritePrevPosition.x > 0.0) ||\n                            (scratchWritePosition.x > 0.0 && scratchWritePrevPosition.x < 0.0)) {\n                            Cartesian3.clone(scratchWritePosition, scratchWritePrevPosition);\n                        }\n\n                        if ((scratchWritePosition.x < 0.0 && scratchWriteNextPosition.x > 0.0) ||\n                            (scratchWritePosition.x > 0.0 && scratchWriteNextPosition.x < 0.0)) {\n                            Cartesian3.clone(scratchWritePosition, scratchWriteNextPosition);\n                        }\n                    }\n                }\n\n                var startK = (segmentStart) ? 2 : 0;\n                var endK = (segmentEnd) ? 2 : 4;\n\n                for (var k = startK; k < endK; ++k) {\n                    EncodedCartesian3.writeElements(scratchWritePosition, positionArray, positionIndex);\n                    EncodedCartesian3.writeElements(scratchWritePrevPosition, positionArray, positionIndex + 6);\n                    EncodedCartesian3.writeElements(scratchWriteNextPosition, positionArray, positionIndex + 12);\n\n                    var direction = (k - 2 < 0) ? -1.0 : 1.0;\n                    texCoordExpandAndBatchIndexArray[texCoordExpandAndBatchIndexIndex] = j / (positionsLength - 1); // s tex coord\n                    texCoordExpandAndBatchIndexArray[texCoordExpandAndBatchIndexIndex + 1] = 2 * (k % 2) - 1;       // expand direction\n                    texCoordExpandAndBatchIndexArray[texCoordExpandAndBatchIndexIndex + 2] = direction;\n                    texCoordExpandAndBatchIndexArray[texCoordExpandAndBatchIndexIndex + 3] = polylineBatchIndex;\n\n                    positionIndex += 6 * 3;\n                    texCoordExpandAndBatchIndexIndex += 4;\n                }\n            }\n\n            var colorCartesian = scratchPickColorCartesian;\n            colorCartesian.x = Color.floatToByte(pickColor.red);\n            colorCartesian.y = Color.floatToByte(pickColor.green);\n            colorCartesian.z = Color.floatToByte(pickColor.blue);\n            colorCartesian.w = Color.floatToByte(pickColor.alpha);\n\n            var widthShowCartesian = scratchWidthShowCartesian;\n            widthShowCartesian.x = width;\n            widthShowCartesian.y = show ? 1.0 : 0.0;\n\n            var boundingSphere = mode === SceneMode.SCENE2D ? polyline._boundingVolume2D : polyline._boundingVolumeWC;\n            var encodedCenter = EncodedCartesian3.fromCartesian(boundingSphere.center, scratchUpdatePolylineEncodedCartesian);\n            var high = encodedCenter.high;\n            var low = Cartesian4.fromElements(encodedCenter.low.x, encodedCenter.low.y, encodedCenter.low.z, boundingSphere.radius, scratchUpdatePolylineCartesian4);\n\n            var nearFarCartesian = scratchNearFarCartesian2;\n            nearFarCartesian.x = 0.0;\n            nearFarCartesian.y = Number.MAX_VALUE;\n\n            var distanceDisplayCondition = polyline.distanceDisplayCondition;\n            if (defined(distanceDisplayCondition)) {\n                nearFarCartesian.x = distanceDisplayCondition.near;\n                nearFarCartesian.y = distanceDisplayCondition.far;\n            }\n\n            batchTable.setBatchedAttribute(polylineBatchIndex, 0, widthShowCartesian);\n            batchTable.setBatchedAttribute(polylineBatchIndex, 1, colorCartesian);\n\n            if (batchTable.attributes.length > 2) {\n                batchTable.setBatchedAttribute(polylineBatchIndex, 2, high);\n                batchTable.setBatchedAttribute(polylineBatchIndex, 3, low);\n                batchTable.setBatchedAttribute(polylineBatchIndex, 4, nearFarCartesian);\n            }\n        }\n    };\n\n    var morphPositionScratch = new Cartesian3();\n    var morphPrevPositionScratch = new Cartesian3();\n    var morphNextPositionScratch = new Cartesian3();\n    var morphVectorScratch = new Cartesian3();\n\n    PolylineBucket.prototype.writeForMorph = function(positionArray, positionIndex) {\n        var modelMatrix = this.modelMatrix;\n        var polylines = this.polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            var polyline = polylines[i];\n            var positions = polyline._segments.positions;\n            var lengths = polyline._segments.lengths;\n            var positionsLength = positions.length;\n\n            var segmentIndex = 0;\n            var count = 0;\n\n            for ( var j = 0; j < positionsLength; ++j) {\n                var prevPosition;\n                if (j === 0) {\n                    if (polyline._loop) {\n                        prevPosition = positions[positionsLength - 2];\n                    } else {\n                        prevPosition = morphVectorScratch;\n                        Cartesian3.subtract(positions[0], positions[1], prevPosition);\n                        Cartesian3.add(positions[0], prevPosition, prevPosition);\n                    }\n                } else {\n                    prevPosition = positions[j - 1];\n                }\n\n                prevPosition = Matrix4.multiplyByPoint(modelMatrix, prevPosition, morphPrevPositionScratch);\n\n                var position = Matrix4.multiplyByPoint(modelMatrix, positions[j], morphPositionScratch);\n\n                var nextPosition;\n                if (j === positionsLength - 1) {\n                    if (polyline._loop) {\n                        nextPosition = positions[1];\n                    } else {\n                        nextPosition = morphVectorScratch;\n                        Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], nextPosition);\n                        Cartesian3.add(positions[positionsLength - 1], nextPosition, nextPosition);\n                    }\n                } else {\n                    nextPosition = positions[j + 1];\n                }\n\n                nextPosition = Matrix4.multiplyByPoint(modelMatrix, nextPosition, morphNextPositionScratch);\n\n                var segmentLength = lengths[segmentIndex];\n                if (j === count + segmentLength) {\n                    count += segmentLength;\n                    ++segmentIndex;\n                }\n\n                var segmentStart = j - count === 0;\n                var segmentEnd = j === count + lengths[segmentIndex] - 1;\n\n                var startK = (segmentStart) ? 2 : 0;\n                var endK = (segmentEnd) ? 2 : 4;\n\n                for (var k = startK; k < endK; ++k) {\n                    EncodedCartesian3.writeElements(position, positionArray, positionIndex);\n                    EncodedCartesian3.writeElements(prevPosition, positionArray, positionIndex + 6);\n                    EncodedCartesian3.writeElements(nextPosition, positionArray, positionIndex + 12);\n\n                    positionIndex += 6 * 3;\n                }\n            }\n        }\n    };\n\n    var scratchSegmentLengths = new Array(1);\n\n    PolylineBucket.prototype.updateIndices = function(totalIndices, vertexBufferOffset, vertexArrayBuckets, offset) {\n        var vaCount = vertexArrayBuckets.length - 1;\n        var bucketLocator = new VertexArrayBucketLocator(0, offset, this);\n        vertexArrayBuckets[vaCount].push(bucketLocator);\n        var count = 0;\n        var indices = totalIndices[totalIndices.length - 1];\n        var indicesCount = 0;\n        if (indices.length > 0) {\n            indicesCount = indices[indices.length - 1] + 1;\n        }\n        var polylines = this.polylines;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n\n            var polyline = polylines[i];\n            polyline._locatorBuckets = [];\n\n            var segments;\n            if (this.mode === SceneMode.SCENE3D) {\n                segments = scratchSegmentLengths;\n                var positionsLength = polyline._actualPositions.length;\n                if (positionsLength > 0) {\n                    segments[0] = positionsLength;\n                } else {\n                    continue;\n                }\n            } else {\n                segments = polyline._segments.lengths;\n            }\n\n            var numberOfSegments = segments.length;\n            if (numberOfSegments > 0) {\n                var segmentIndexCount = 0;\n                for ( var j = 0; j < numberOfSegments; ++j) {\n                    var segmentLength = segments[j] - 1.0;\n                    for ( var k = 0; k < segmentLength; ++k) {\n                        if (indicesCount + 4 > CesiumMath.SIXTY_FOUR_KILOBYTES) {\n                            polyline._locatorBuckets.push({\n                                locator : bucketLocator,\n                                count : segmentIndexCount\n                            });\n                            segmentIndexCount = 0;\n                            vertexBufferOffset.push(4);\n                            indices = [];\n                            totalIndices.push(indices);\n                            indicesCount = 0;\n                            bucketLocator.count = count;\n                            count = 0;\n                            offset = 0;\n                            bucketLocator = new VertexArrayBucketLocator(0, 0, this);\n                            vertexArrayBuckets[++vaCount] = [bucketLocator];\n                        }\n\n                        indices.push(indicesCount, indicesCount + 2, indicesCount + 1);\n                        indices.push(indicesCount + 1, indicesCount + 2, indicesCount + 3);\n\n                        segmentIndexCount += 6;\n                        count += 6;\n                        offset += 6;\n                        indicesCount += 4;\n                    }\n                }\n\n                polyline._locatorBuckets.push({\n                    locator : bucketLocator,\n                    count : segmentIndexCount\n                });\n\n                if (indicesCount + 4 > CesiumMath.SIXTY_FOUR_KILOBYTES) {\n                    vertexBufferOffset.push(0);\n                    indices = [];\n                    totalIndices.push(indices);\n                    indicesCount = 0;\n                    bucketLocator.count = count;\n                    offset = 0;\n                    count = 0;\n                    bucketLocator = new VertexArrayBucketLocator(0, 0, this);\n                    vertexArrayBuckets[++vaCount] = [bucketLocator];\n                }\n            }\n            polyline._clean();\n        }\n        bucketLocator.count = count;\n        return offset;\n    };\n\n    PolylineBucket.prototype.getPolylineStartIndex = function(polyline) {\n        var polylines = this.polylines;\n        var positionIndex = 0;\n        var length = polylines.length;\n        for ( var i = 0; i < length; ++i) {\n            var p = polylines[i];\n            if (p === polyline) {\n                break;\n            }\n            positionIndex += p._actualLength;\n        }\n        return positionIndex;\n    };\n\n    var scratchSegments = {\n        positions : undefined,\n        lengths : undefined\n    };\n    var scratchLengths = new Array(1);\n    var pscratch = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n\n    PolylineBucket.prototype.getSegments = function(polyline, projection) {\n        var positions = polyline._actualPositions;\n\n        if (this.mode === SceneMode.SCENE3D) {\n            scratchLengths[0] = positions.length;\n            scratchSegments.positions = positions;\n            scratchSegments.lengths = scratchLengths;\n            return scratchSegments;\n        }\n\n        if (intersectsIDL(polyline)) {\n            positions = polyline._segments.positions;\n        }\n\n        var ellipsoid = projection.ellipsoid;\n        var newPositions = [];\n        var modelMatrix = this.modelMatrix;\n        var length = positions.length;\n        var position;\n        var p = pscratch;\n\n        for ( var n = 0; n < length; ++n) {\n            position = positions[n];\n            p = Matrix4.multiplyByPoint(modelMatrix, position, p);\n            newPositions.push(projection.project(ellipsoid.cartesianToCartographic(p, scratchCartographic)));\n        }\n\n        if (newPositions.length > 0) {\n            polyline._boundingVolume2D = BoundingSphere.fromPoints(newPositions, polyline._boundingVolume2D);\n            var center2D = polyline._boundingVolume2D.center;\n            polyline._boundingVolume2D.center = new Cartesian3(center2D.z, center2D.x, center2D.y);\n        }\n\n        scratchSegments.positions = newPositions;\n        scratchSegments.lengths = polyline._segments.lengths;\n        return scratchSegments;\n    };\n\n    var scratchPositionsArray;\n\n    PolylineBucket.prototype.writeUpdate = function(index, polyline, positionBuffer, projection) {\n        var mode = this.mode;\n        var maxLon = projection.ellipsoid.maximumRadius * CesiumMath.PI;\n\n        var positionsLength = polyline._actualLength;\n        if (positionsLength) {\n            index += this.getPolylineStartIndex(polyline);\n\n            var positionArray = scratchPositionsArray;\n            var positionsArrayLength = 6 * positionsLength * 3;\n\n            if (!defined(positionArray) || positionArray.length < positionsArrayLength) {\n                positionArray = scratchPositionsArray = new Float32Array(positionsArrayLength);\n            } else if (positionArray.length > positionsArrayLength) {\n                positionArray = new Float32Array(positionArray.buffer, 0, positionsArrayLength);\n            }\n\n            var segments = this.getSegments(polyline, projection);\n            var positions = segments.positions;\n            var lengths = segments.lengths;\n\n            var positionIndex = 0;\n            var segmentIndex = 0;\n            var count = 0;\n            var position;\n\n            positionsLength = positions.length;\n            for ( var i = 0; i < positionsLength; ++i) {\n                if (i === 0) {\n                    if (polyline._loop) {\n                        position = positions[positionsLength - 2];\n                    } else {\n                        position = scratchWriteVector;\n                        Cartesian3.subtract(positions[0], positions[1], position);\n                        Cartesian3.add(positions[0], position, position);\n                    }\n                } else {\n                    position = positions[i - 1];\n                }\n\n                Cartesian3.clone(position, scratchWritePrevPosition);\n                Cartesian3.clone(positions[i], scratchWritePosition);\n\n                if (i === positionsLength - 1) {\n                    if (polyline._loop) {\n                        position = positions[1];\n                    } else {\n                        position = scratchWriteVector;\n                        Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\n                        Cartesian3.add(positions[positionsLength - 1], position, position);\n                    }\n                } else {\n                    position = positions[i + 1];\n                }\n\n                Cartesian3.clone(position, scratchWriteNextPosition);\n\n                var segmentLength = lengths[segmentIndex];\n                if (i === count + segmentLength) {\n                    count += segmentLength;\n                    ++segmentIndex;\n                }\n\n                var segmentStart = i - count === 0;\n                var segmentEnd = i === count + lengths[segmentIndex] - 1;\n\n                if (mode === SceneMode.SCENE2D) {\n                    scratchWritePrevPosition.z = 0.0;\n                    scratchWritePosition.z = 0.0;\n                    scratchWriteNextPosition.z = 0.0;\n                }\n\n                if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n                    if ((segmentStart || segmentEnd) && maxLon - Math.abs(scratchWritePosition.x) < 1.0) {\n                        if ((scratchWritePosition.x < 0.0 && scratchWritePrevPosition.x > 0.0) ||\n                            (scratchWritePosition.x > 0.0 && scratchWritePrevPosition.x < 0.0)) {\n                            Cartesian3.clone(scratchWritePosition, scratchWritePrevPosition);\n                        }\n\n                        if ((scratchWritePosition.x < 0.0 && scratchWriteNextPosition.x > 0.0) ||\n                            (scratchWritePosition.x > 0.0 && scratchWriteNextPosition.x < 0.0)) {\n                            Cartesian3.clone(scratchWritePosition, scratchWriteNextPosition);\n                        }\n                    }\n                }\n\n                var startJ = (segmentStart) ? 2 : 0;\n                var endJ = (segmentEnd) ? 2 : 4;\n\n                for (var j = startJ; j < endJ; ++j) {\n                    EncodedCartesian3.writeElements(scratchWritePosition, positionArray, positionIndex);\n                    EncodedCartesian3.writeElements(scratchWritePrevPosition, positionArray, positionIndex + 6);\n                    EncodedCartesian3.writeElements(scratchWriteNextPosition, positionArray, positionIndex + 12);\n                    positionIndex += 6 * 3;\n                }\n            }\n\n            positionBuffer.copyFromArrayView(positionArray, 6 * 3 * Float32Array.BYTES_PER_ELEMENT * index);\n        }\n    };\nexport default PolylineCollection;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 position2DHigh;\\n\\\nattribute vec3 position2DLow;\\n\\\nattribute vec3 prevPosition3DHigh;\\n\\\nattribute vec3 prevPosition3DLow;\\n\\\nattribute vec3 prevPosition2DHigh;\\n\\\nattribute vec3 prevPosition2DLow;\\n\\\nattribute vec3 nextPosition3DHigh;\\n\\\nattribute vec3 nextPosition3DLow;\\n\\\nattribute vec3 nextPosition2DHigh;\\n\\\nattribute vec3 nextPosition2DLow;\\n\\\nattribute vec4 texCoordExpandAndBatchIndex;\\n\\\n\\n\\\nvarying vec2  v_st;\\n\\\nvarying float v_width;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying float v_polylineAngle;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float texCoord = texCoordExpandAndBatchIndex.x;\\n\\\n    float expandDir = texCoordExpandAndBatchIndex.y;\\n\\\n    bool usePrev = texCoordExpandAndBatchIndex.z < 0.0;\\n\\\n    float batchTableIndex = texCoordExpandAndBatchIndex.w;\\n\\\n\\n\\\n    vec2 widthAndShow = batchTable_getWidthAndShow(batchTableIndex);\\n\\\n    float width = widthAndShow.x + 0.5;\\n\\\n    float show = widthAndShow.y;\\n\\\n\\n\\\n    if (width < 1.0)\\n\\\n    {\\n\\\n        show = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    vec4 pickColor = batchTable_getPickColor(batchTableIndex);\\n\\\n\\n\\\n    vec4 p, prev, next;\\n\\\n    if (czm_morphTime == 1.0)\\n\\\n    {\\n\\\n        p = czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz);\\n\\\n        prev = czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz);\\n\\\n        next = czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz);\\n\\\n    }\\n\\\n    else if (czm_morphTime == 0.0)\\n\\\n    {\\n\\\n        p = czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy);\\n\\\n        prev = czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy);\\n\\\n        next = czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        p = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(position3DHigh.xyz, position3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n        prev = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(prevPosition2DHigh.zxy, prevPosition2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(prevPosition3DHigh.xyz, prevPosition3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n        next = czm_columbusViewMorph(\\n\\\n                czm_translateRelativeToEye(nextPosition2DHigh.zxy, nextPosition2DLow.zxy),\\n\\\n                czm_translateRelativeToEye(nextPosition3DHigh.xyz, nextPosition3DLow.xyz),\\n\\\n                czm_morphTime);\\n\\\n    }\\n\\\n\\n\\\n    #ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n        vec3 centerHigh = batchTable_getCenterHigh(batchTableIndex);\\n\\\n        vec4 centerLowAndRadius = batchTable_getCenterLowAndRadius(batchTableIndex);\\n\\\n        vec3 centerLow = centerLowAndRadius.xyz;\\n\\\n        float radius = centerLowAndRadius.w;\\n\\\n        vec2 distanceDisplayCondition = batchTable_getDistanceDisplayCondition(batchTableIndex);\\n\\\n\\n\\\n        float lengthSq;\\n\\\n        if (czm_sceneMode == czm_sceneMode2D)\\n\\\n        {\\n\\\n            lengthSq = czm_eyeHeight2D.y;\\n\\\n        }\\n\\\n        else\\n\\\n        {\\n\\\n            vec4 center = czm_translateRelativeToEye(centerHigh.xyz, centerLow.xyz);\\n\\\n            lengthSq = max(0.0, dot(center.xyz, center.xyz) - radius * radius);\\n\\\n        }\\n\\\n\\n\\\n        float nearSq = distanceDisplayCondition.x * distanceDisplayCondition.x;\\n\\\n        float farSq = distanceDisplayCondition.y * distanceDisplayCondition.y;\\n\\\n        if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n        {\\n\\\n            show = 0.0;\\n\\\n        }\\n\\\n    #endif\\n\\\n\\n\\\n    vec4 positionWC = getPolylineWindowCoordinates(p, prev, next, expandDir, width, usePrev, v_polylineAngle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC * show;\\n\\\n\\n\\\n    v_st = vec2(texCoord, clamp(expandDir, 0.0, 1.0));\\n\\\n    v_width = width;\\n\\\n    v_pickColor = pickColor;\\n\\\n}\\n\\\n\";\n","import arraySlice from '../Core/arraySlice.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport NearFarScalar from '../Core/NearFarScalar.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport TaskProcessor from '../Core/TaskProcessor.js';\nimport when from '../ThirdParty/when.js';\nimport BillboardCollection from './BillboardCollection.js';\nimport Cesium3DTilePointFeature from './Cesium3DTilePointFeature.js';\nimport HorizontalOrigin from './HorizontalOrigin.js';\nimport LabelCollection from './LabelCollection.js';\nimport LabelStyle from './LabelStyle.js';\nimport PolylineCollection from './PolylineCollection.js';\nimport VerticalOrigin from './VerticalOrigin.js';\n\n    /**\n     * Creates a batch of points or billboards and labels.\n     *\n     * @alias Vector3DTilePoints\n     * @constructor\n     *\n     * @param {Object} options An object with following properties:\n     * @param {Uint16Array} options.positions The positions of the polygons.\n     * @param {Number} options.minimumHeight The minimum height of the terrain covered by the tile.\n     * @param {Number} options.maximumHeight The maximum height of the terrain covered by the tile.\n     * @param {Rectangle} options.rectangle The rectangle containing the tile.\n     * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched polygons.\n     * @param {Uint16Array} options.batchIds The batch ids for each polygon.\n     *\n     * @private\n     */\n    function Vector3DTilePoints(options) {\n        // released after the first update\n        this._positions = options.positions;\n\n        this._batchTable = options.batchTable;\n        this._batchIds = options.batchIds;\n\n        this._rectangle = options.rectangle;\n        this._minHeight = options.minimumHeight;\n        this._maxHeight = options.maximumHeight;\n\n        this._billboardCollection = undefined;\n        this._labelCollection = undefined;\n        this._polylineCollection = undefined;\n\n        this._verticesPromise = undefined;\n        this._packedBuffer = undefined;\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n        this._resolvedPromise = false;\n    }\n\n    Object.defineProperties(Vector3DTilePoints.prototype, {\n        /**\n         * Gets the number of points.\n         *\n         * @memberof Vector3DTilePoints.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        pointsLength : {\n            get : function() {\n                return this._billboardCollection.length;\n            }\n        },\n\n        /**\n         * Gets the texture atlas memory in bytes.\n         *\n         * @memberof Vector3DTilePoints.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        texturesByteLength : {\n            get : function() {\n                var billboardSize = this._billboardCollection.textureAtlas.texture.sizeInBytes;\n                var labelSize = this._labelCollection._textureAtlas.texture.sizeInBytes;\n                return billboardSize + labelSize;\n            }\n        },\n\n        /**\n         * Gets a promise that resolves when the primitive is ready to render.\n         * @memberof Vector3DTilePoints.prototype\n         * @type {Promise}\n         * @readonly\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        }\n    });\n\n    function packBuffer(points, ellipsoid) {\n        var rectangle = points._rectangle;\n        var minimumHeight = points._minHeight;\n        var maximumHeight = points._maxHeight;\n\n        var packedLength = 2 + Rectangle.packedLength + Ellipsoid.packedLength;\n        var packedBuffer = new Float64Array(packedLength);\n\n        var offset = 0;\n        packedBuffer[offset++] = minimumHeight;\n        packedBuffer[offset++] = maximumHeight;\n\n        Rectangle.pack(rectangle, packedBuffer, offset);\n        offset += Rectangle.packedLength;\n\n        Ellipsoid.pack(ellipsoid, packedBuffer, offset);\n\n        return packedBuffer;\n    }\n\n    var createVerticesTaskProcessor = new TaskProcessor('createVectorTilePoints');\n    var scratchPosition = new Cartesian3();\n\n    function createPoints(points, ellipsoid) {\n        if (defined(points._billboardCollection)) {\n            return;\n        }\n\n        var positions;\n        if (!defined(points._verticesPromise)) {\n            positions = points._positions;\n            var packedBuffer = points._packedBuffer;\n\n            if (!defined(packedBuffer)) {\n                // Copy because they may be the views on the same buffer.\n                positions = points._positions = arraySlice(positions);\n                points._batchIds = arraySlice(points._batchIds);\n\n                packedBuffer = points._packedBuffer = packBuffer(points, ellipsoid);\n            }\n\n            var transferrableObjects = [positions.buffer, packedBuffer.buffer];\n            var parameters = {\n                positions : positions.buffer,\n                packedBuffer : packedBuffer.buffer\n            };\n\n            var verticesPromise = points._verticesPromise = createVerticesTaskProcessor.scheduleTask(parameters, transferrableObjects);\n            if (!defined(verticesPromise)) {\n                // Postponed\n                return;\n            }\n\n            verticesPromise.then(function(result) {\n                points._positions = new Float64Array(result.positions);\n                points._ready = true;\n            });\n        }\n\n        if (points._ready && !defined(points._billboardCollection)) {\n            positions = points._positions;\n            var batchTable = points._batchTable;\n            var batchIds = points._batchIds;\n\n            var billboardCollection = points._billboardCollection = new BillboardCollection({batchTable : batchTable});\n            var labelCollection = points._labelCollection = new LabelCollection({batchTable : batchTable});\n            var polylineCollection = points._polylineCollection = new PolylineCollection();\n            polylineCollection._useHighlightColor = true;\n\n            var numberOfPoints = positions.length / 3;\n            for (var i = 0; i < numberOfPoints; ++i) {\n                var id = batchIds[i];\n\n                var position = Cartesian3.unpack(positions, i * 3, scratchPosition);\n\n                var b = billboardCollection.add();\n                b.position = position;\n                b._batchIndex = id;\n\n                var l = labelCollection.add();\n                l.text = ' ';\n                l.position = position;\n                l._batchIndex = id;\n\n                var p = polylineCollection.add();\n                p.positions = [Cartesian3.clone(position), Cartesian3.clone(position)];\n            }\n\n            points._positions = undefined;\n            points._packedBuffer = undefined;\n        }\n    }\n\n    /**\n     * Creates features for each point and places it at the batch id index of features.\n     *\n     * @param {Vector3DTileContent} content The vector tile content.\n     * @param {Cesium3DTileFeature[]} features An array of features where the point features will be placed.\n     */\n    Vector3DTilePoints.prototype.createFeatures = function(content, features) {\n        var billboardCollection = this._billboardCollection;\n        var labelCollection = this._labelCollection;\n        var polylineCollection = this._polylineCollection;\n\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n\n            var billboard = billboardCollection.get(i);\n            var label = labelCollection.get(i);\n            var polyline = polylineCollection.get(i);\n\n            features[batchId] = new Cesium3DTilePointFeature(content, batchId, billboard, label, polyline);\n        }\n    };\n\n    /**\n     * Colors the entire tile when enabled is true. The resulting color will be (batch table color * color).\n     *\n     * @param {Boolean} enabled Whether to enable debug coloring.\n     * @param {Color} color The debug color.\n     */\n    Vector3DTilePoints.prototype.applyDebugSettings = function(enabled, color) {\n        if (enabled) {\n            Color.clone(color, this._billboardCollection._highlightColor);\n            Color.clone(color, this._labelCollection._highlightColor);\n            Color.clone(color, this._polylineCollection._highlightColor);\n        } else {\n            Color.clone(Color.WHITE, this._billboardCollection._highlightColor);\n            Color.clone(Color.WHITE, this._labelCollection._highlightColor);\n            Color.clone(Color.WHITE, this._polylineCollection._highlightColor);\n        }\n    };\n\n    function clearStyle(polygons, features) {\n        var batchIds = polygons._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            feature.show = true;\n            feature.pointSize = Cesium3DTilePointFeature.defaultPointSize;\n            feature.color = Cesium3DTilePointFeature.defaultColor;\n            feature.pointOutlineColor = Cesium3DTilePointFeature.defaultPointOutlineColor;\n            feature.pointOutlineWidth = Cesium3DTilePointFeature.defaultPointOutlineWidth;\n            feature.labelColor = Color.WHITE;\n            feature.labelOutlineColor = Color.WHITE;\n            feature.labelOutlineWidth = 1.0;\n            feature.font = '30px sans-serif';\n            feature.labelStyle = LabelStyle.FILL;\n            feature.labelText = undefined;\n            feature.backgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\n            feature.backgroundPadding = new Cartesian2(7, 5);\n            feature.backgroundEnabled = false;\n            feature.scaleByDistance = undefined;\n            feature.translucencyByDistance = undefined;\n            feature.distanceDisplayCondition = undefined;\n            feature.heightOffset = 0.0;\n            feature.anchorLineEnabled = false;\n            feature.anchorLineColor = Color.WHITE;\n            feature.image = undefined;\n            feature.disableDepthTestDistance = 0.0;\n            feature.horizontalOrigin = HorizontalOrigin.CENTER;\n            feature.verticalOrigin = VerticalOrigin.CENTER;\n            feature.labelHorizontalOrigin = HorizontalOrigin.RIGHT;\n            feature.labelVerticalOrigin = VerticalOrigin.BASELINE;\n        }\n    }\n\n    var scratchColor = new Color();\n    var scratchColor2 = new Color();\n    var scratchColor3 = new Color();\n    var scratchColor4 = new Color();\n    var scratchColor5 = new Color();\n    var scratchColor6 = new Color();\n    var scratchScaleByDistance = new NearFarScalar();\n    var scratchTranslucencyByDistance = new NearFarScalar();\n    var scratchDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    /**\n     * Apply a style to the content.\n     *\n     * @param {Cesium3DTileStyle} style The style.\n     * @param {Cesium3DTileFeature[]} features The array of features.\n     */\n    Vector3DTilePoints.prototype.applyStyle = function(style, features) {\n        if (!defined(style)) {\n            clearStyle(this, features);\n            return;\n        }\n\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            if (defined(style.show)) {\n                feature.show = style.show.evaluate(feature);\n            }\n\n            if (defined(style.pointSize)) {\n                feature.pointSize = style.pointSize.evaluate(feature);\n            }\n\n            if (defined(style.color)) {\n                feature.color = style.color.evaluateColor(feature, scratchColor);\n            }\n\n            if (defined(style.pointOutlineColor)) {\n                feature.pointOutlineColor = style.pointOutlineColor.evaluateColor(feature, scratchColor2);\n            }\n\n            if (defined(style.pointOutlineWidth)) {\n                feature.pointOutlineWidth = style.pointOutlineWidth.evaluate(feature);\n            }\n\n            if (defined(style.labelColor)) {\n                feature.labelColor = style.labelColor.evaluateColor(feature, scratchColor3);\n            }\n\n            if (defined(style.labelOutlineColor)) {\n                feature.labelOutlineColor = style.labelOutlineColor.evaluateColor(feature, scratchColor4);\n            }\n\n            if (defined(style.labelOutlineWidth)) {\n                feature.labelOutlineWidth = style.labelOutlineWidth.evaluate(feature);\n            }\n\n            if (defined(style.font)) {\n                feature.font = style.font.evaluate(feature);\n            }\n\n            if (defined(style.labelStyle)) {\n                feature.labelStyle = style.labelStyle.evaluate(feature);\n            }\n\n            if (defined(style.labelText)) {\n                feature.labelText = style.labelText.evaluate(feature);\n            } else {\n                feature.labelText = undefined;\n            }\n\n            if (defined(style.backgroundColor)) {\n                feature.backgroundColor = style.backgroundColor.evaluateColor(feature, scratchColor5);\n            }\n\n            if (defined(style.backgroundPadding)) {\n                feature.backgroundPadding = style.backgroundPadding.evaluate(feature);\n            }\n\n            if (defined(style.backgroundEnabled)) {\n                feature.backgroundEnabled = style.backgroundEnabled.evaluate(feature);\n            }\n\n            if (defined(style.scaleByDistance)) {\n                var scaleByDistanceCart4 = style.scaleByDistance.evaluate(feature);\n                scratchScaleByDistance.near = scaleByDistanceCart4.x;\n                scratchScaleByDistance.nearValue = scaleByDistanceCart4.y;\n                scratchScaleByDistance.far = scaleByDistanceCart4.z;\n                scratchScaleByDistance.farValue = scaleByDistanceCart4.w;\n                feature.scaleByDistance = scratchScaleByDistance;\n            } else {\n                feature.scaleByDistance = undefined;\n            }\n\n            if (defined(style.translucencyByDistance)) {\n                var translucencyByDistanceCart4 = style.translucencyByDistance.evaluate(feature);\n                scratchTranslucencyByDistance.near = translucencyByDistanceCart4.x;\n                scratchTranslucencyByDistance.nearValue = translucencyByDistanceCart4.y;\n                scratchTranslucencyByDistance.far = translucencyByDistanceCart4.z;\n                scratchTranslucencyByDistance.farValue = translucencyByDistanceCart4.w;\n                feature.translucencyByDistance = scratchTranslucencyByDistance;\n            } else {\n                feature.translucencyByDistance = undefined;\n            }\n\n            if (defined(style.distanceDisplayCondition)) {\n                var distanceDisplayConditionCart2 = style.distanceDisplayCondition.evaluate(feature);\n                scratchDistanceDisplayCondition.near = distanceDisplayConditionCart2.x;\n                scratchDistanceDisplayCondition.far = distanceDisplayConditionCart2.y;\n                feature.distanceDisplayCondition = scratchDistanceDisplayCondition;\n            } else {\n                feature.distanceDisplayCondition = undefined;\n            }\n\n            if (defined(style.heightOffset)) {\n                feature.heightOffset = style.heightOffset.evaluate(feature);\n            }\n\n            if (defined(style.anchorLineEnabled)) {\n                feature.anchorLineEnabled = style.anchorLineEnabled.evaluate(feature);\n            }\n\n            if (defined(style.anchorLineColor)) {\n                feature.anchorLineColor = style.anchorLineColor.evaluateColor(feature, scratchColor6);\n            }\n\n            if (defined(style.image)) {\n                feature.image = style.image.evaluate(feature);\n            } else {\n                feature.image = undefined;\n            }\n\n            if (defined(style.disableDepthTestDistance)) {\n                feature.disableDepthTestDistance = style.disableDepthTestDistance.evaluate(feature);\n            }\n\n            if (defined(style.horizontalOrigin)) {\n                feature.horizontalOrigin = style.horizontalOrigin.evaluate(feature);\n            }\n\n            if (defined(style.verticalOrigin)) {\n                feature.verticalOrigin = style.verticalOrigin.evaluate(feature);\n            }\n\n            if (defined(style.labelHorizontalOrigin)) {\n                feature.labelHorizontalOrigin = style.labelHorizontalOrigin.evaluate(feature);\n            }\n\n            if (defined(style.labelVerticalOrigin)) {\n                feature.labelVerticalOrigin = style.labelVerticalOrigin.evaluate(feature);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    Vector3DTilePoints.prototype.update = function(frameState) {\n        createPoints(this, frameState.mapProjection.ellipsoid);\n\n        if (!this._ready) {\n            return;\n        }\n\n        this._polylineCollection.update(frameState);\n        this._billboardCollection.update(frameState);\n        this._labelCollection.update(frameState);\n\n        if (!this._resolvedPromise) {\n            this._readyPromise.resolve();\n            this._resolvedPromise = true;\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    Vector3DTilePoints.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    Vector3DTilePoints.prototype.destroy = function() {\n        this._billboardCollection = this._billboardCollection && this._billboardCollection.destroy();\n        this._labelCollection = this._labelCollection && this._labelCollection.destroy();\n        this._polylineCollection = this._polylineCollection && this._polylineCollection.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTilePoints;\n","import arraySlice from '../Core/arraySlice.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport TaskProcessor from '../Core/TaskProcessor.js';\nimport when from '../ThirdParty/when.js';\nimport ClassificationType from './ClassificationType.js';\nimport Vector3DTileBatch from './Vector3DTileBatch.js';\nimport Vector3DTilePrimitive from './Vector3DTilePrimitive.js';\n\n    /**\n     * Creates a batch of pre-triangulated polygons draped on terrain and/or 3D Tiles.\n     *\n     * @alias Vector3DTilePolygons\n     * @constructor\n     *\n     * @param {Object} options An object with following properties:\n     * @param {Float32Array|Uint16Array} options.positions The positions of the polygons. The positions must be contiguous\n     * so that the positions for polygon n are in [c, c + counts[n]] where c = sum{counts[0], counts[n - 1]} and they are the outer ring of\n     * the polygon in counter-clockwise order.\n     * @param {Uint32Array} options.counts The number of positions in the each polygon.\n     * @param {Uint32Array} options.indices The indices of the triangulated polygons. The indices must be contiguous so that\n     * the indices for polygon n are in [i, i + indexCounts[n]] where i = sum{indexCounts[0], indexCounts[n - 1]}.\n     * @param {Uint32Array} options.indexCounts The number of indices for each polygon.\n     * @param {Number} options.minimumHeight The minimum height of the terrain covered by the tile.\n     * @param {Number} options.maximumHeight The maximum height of the terrain covered by the tile.\n     * @param {Float32Array} [options.polygonMinimumHeights] An array containing the minimum heights for each polygon.\n     * @param {Float32Array} [options.polygonMaximumHeights] An array containing the maximum heights for each polygon.\n     * @param {Rectangle} options.rectangle The rectangle containing the tile.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid.\n     * @param {Cartesian3} [options.center=Cartesian3.ZERO] The RTC center.\n     * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched polygons.\n     * @param {Uint16Array} options.batchIds The batch ids for each polygon.\n     * @param {BoundingSphere} options.boundingVolume The bounding volume for the entire batch of polygons.\n     *\n     * @private\n     */\n    function Vector3DTilePolygons(options) {\n        // All of the private properties will be released except _readyPromise\n        // and _primitive after the Vector3DTilePrimitive is created.\n        this._batchTable = options.batchTable;\n\n        this._batchIds = options.batchIds;\n        this._positions = options.positions;\n        this._counts = options.counts;\n\n        this._indices = options.indices;\n        this._indexCounts = options.indexCounts;\n        this._indexOffsets = undefined;\n\n        this._batchTableColors = undefined;\n        this._packedBuffer = undefined;\n\n        this._batchedPositions = undefined;\n        this._transferrableBatchIds = undefined;\n        this._vertexBatchIds = undefined;\n\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        this._minimumHeight = options.minimumHeight;\n        this._maximumHeight = options.maximumHeight;\n        this._polygonMinimumHeights = options.polygonMinimumHeights;\n        this._polygonMaximumHeights = options.polygonMaximumHeights;\n        this._center = defaultValue(options.center, Cartesian3.ZERO);\n        this._rectangle = options.rectangle;\n\n        this._center = undefined;\n\n        this._boundingVolume = options.boundingVolume;\n        this._boundingVolumes = undefined;\n\n        this._batchedIndices = undefined;\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n\n        this._verticesPromise = undefined;\n\n        this._primitive = undefined;\n\n        /**\n         * Draws the wireframe of the classification meshes.\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugWireframe = false;\n\n        /**\n         * Forces a re-batch instead of waiting after a number of frames have been rendered. For testing only.\n         * @type {Boolean}\n         * @default false\n         */\n        this.forceRebatch = false;\n\n        /**\n         * What this tile will classify.\n         * @type {ClassificationType}\n         * @default ClassificationType.BOTH\n         */\n        this.classificationType = ClassificationType.BOTH;\n    }\n\n    Object.defineProperties(Vector3DTilePolygons.prototype, {\n        /**\n         * Gets the number of triangles.\n         *\n         * @memberof Vector3DTilePolygons.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        trianglesLength : {\n            get : function() {\n                if (defined(this._primitive)) {\n                    return this._primitive.trianglesLength;\n                }\n                return 0;\n            }\n        },\n\n        /**\n         * Gets the geometry memory in bytes.\n         *\n         * @memberof Vector3DTilePolygons.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        geometryByteLength : {\n            get : function() {\n                if (defined(this._primitive)) {\n                    return this._primitive.geometryByteLength;\n                }\n                return 0;\n            }\n        },\n\n        /**\n         * Gets a promise that resolves when the primitive is ready to render.\n         * @memberof Vector3DTilePolygons.prototype\n         * @type {Promise}\n         * @readonly\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        }\n    });\n\n    function packBuffer(polygons) {\n        var packedBuffer = new Float64Array(3 + Cartesian3.packedLength + Ellipsoid.packedLength + Rectangle.packedLength);\n\n        var offset = 0;\n        packedBuffer[offset++] = polygons._indices.BYTES_PER_ELEMENT;\n\n        packedBuffer[offset++] = polygons._minimumHeight;\n        packedBuffer[offset++] = polygons._maximumHeight;\n\n        Cartesian3.pack(polygons._center, packedBuffer, offset);\n        offset += Cartesian3.packedLength;\n\n        Ellipsoid.pack(polygons._ellipsoid, packedBuffer, offset);\n        offset += Ellipsoid.packedLength;\n\n        Rectangle.pack(polygons._rectangle, packedBuffer, offset);\n\n        return packedBuffer;\n    }\n\n    function unpackBuffer(polygons, packedBuffer) {\n        var offset = 1;\n\n        var numBVS = packedBuffer[offset++];\n        var bvs = polygons._boundingVolumes = new Array(numBVS);\n\n        for (var i = 0; i < numBVS; ++i) {\n            bvs[i] = OrientedBoundingBox.unpack(packedBuffer, offset);\n            offset += OrientedBoundingBox.packedLength;\n        }\n\n        var numBatchedIndices = packedBuffer[offset++];\n        var bis = polygons._batchedIndices = new Array(numBatchedIndices);\n\n        for (var j = 0; j < numBatchedIndices; ++j) {\n            var color = Color.unpack(packedBuffer, offset);\n            offset += Color.packedLength;\n\n            var indexOffset = packedBuffer[offset++];\n            var count = packedBuffer[offset++];\n\n            var length = packedBuffer[offset++];\n            var batchIds = new Array(length);\n\n            for (var k = 0; k < length; ++k) {\n                batchIds[k] = packedBuffer[offset++];\n            }\n\n            bis[j] = new Vector3DTileBatch({\n                color : color,\n                offset : indexOffset,\n                count : count,\n                batchIds : batchIds\n            });\n        }\n    }\n\n    var createVerticesTaskProcessor = new TaskProcessor('createVectorTilePolygons');\n    var scratchColor = new Color();\n\n    function createPrimitive(polygons) {\n        if (defined(polygons._primitive)) {\n            return;\n        }\n\n        if (!defined(polygons._verticesPromise)) {\n            var positions = polygons._positions;\n            var counts = polygons._counts;\n            var indexCounts = polygons._indexCounts;\n            var indices = polygons._indices;\n\n            var batchIds = polygons._transferrableBatchIds;\n            var batchTableColors = polygons._batchTableColors;\n\n            var packedBuffer = polygons._packedBuffer;\n\n            if (!defined(batchTableColors)) {\n                // Copy because they may be the views on the same buffer.\n                positions = polygons._positions = arraySlice(polygons._positions);\n                counts = polygons._counts = arraySlice(polygons._counts);\n                indexCounts = polygons._indexCounts= arraySlice(polygons._indexCounts);\n                indices = polygons._indices = arraySlice(polygons._indices);\n\n                polygons._center = polygons._ellipsoid.cartographicToCartesian(Rectangle.center(polygons._rectangle));\n\n                batchIds = polygons._transferrableBatchIds = new Uint32Array(polygons._batchIds);\n                batchTableColors = polygons._batchTableColors = new Uint32Array(batchIds.length);\n                var batchTable = polygons._batchTable;\n\n                var length = batchTableColors.length;\n                for (var i = 0; i < length; ++i) {\n                    var color = batchTable.getColor(i, scratchColor);\n                    batchTableColors[i] = color.toRgba();\n                }\n\n                packedBuffer = polygons._packedBuffer = packBuffer(polygons);\n            }\n\n            var transferrableObjects = [positions.buffer, counts.buffer, indexCounts.buffer, indices.buffer, batchIds.buffer, batchTableColors.buffer, packedBuffer.buffer];\n            var parameters = {\n                packedBuffer : packedBuffer.buffer,\n                positions : positions.buffer,\n                counts : counts.buffer,\n                indexCounts : indexCounts.buffer,\n                indices : indices.buffer,\n                batchIds : batchIds.buffer,\n                batchTableColors : batchTableColors.buffer\n            };\n\n            var minimumHeights = polygons._polygonMinimumHeights;\n            var maximumHeights = polygons._polygonMaximumHeights;\n            if (defined(minimumHeights) && defined(maximumHeights)) {\n                minimumHeights = arraySlice(minimumHeights);\n                maximumHeights = arraySlice(maximumHeights);\n\n                transferrableObjects.push(minimumHeights.buffer, maximumHeights.buffer);\n                parameters.minimumHeights = minimumHeights;\n                parameters.maximumHeights = maximumHeights;\n            }\n\n            var verticesPromise = polygons._verticesPromise = createVerticesTaskProcessor.scheduleTask(parameters, transferrableObjects);\n            if (!defined(verticesPromise)) {\n                // Postponed\n                return;\n            }\n\n            when(verticesPromise, function(result) {\n                polygons._positions = undefined;\n                polygons._counts = undefined;\n                polygons._polygonMinimumHeights = undefined;\n                polygons._polygonMaximumHeights = undefined;\n\n                var packedBuffer = new Float64Array(result.packedBuffer);\n                var indexDatatype = packedBuffer[0];\n                unpackBuffer(polygons, packedBuffer);\n\n                polygons._indices = IndexDatatype.getSizeInBytes(indexDatatype) === 2 ? new Uint16Array(result.indices) : new Uint32Array(result.indices);\n                polygons._indexOffsets = new Uint32Array(result.indexOffsets);\n                polygons._indexCounts = new Uint32Array(result.indexCounts);\n\n                // will be released\n                polygons._batchedPositions = new Float32Array(result.positions);\n                polygons._vertexBatchIds = new Uint16Array(result.batchIds);\n\n                polygons._ready = true;\n            });\n        }\n\n        if (polygons._ready && !defined(polygons._primitive)) {\n            polygons._primitive = new Vector3DTilePrimitive({\n                batchTable : polygons._batchTable,\n                positions : polygons._batchedPositions,\n                batchIds : polygons._batchIds,\n                vertexBatchIds : polygons._vertexBatchIds,\n                indices : polygons._indices,\n                indexOffsets : polygons._indexOffsets,\n                indexCounts : polygons._indexCounts,\n                batchedIndices : polygons._batchedIndices,\n                boundingVolume : polygons._boundingVolume,\n                boundingVolumes : polygons._boundingVolumes,\n                center : polygons._center\n            });\n\n            polygons._batchTable = undefined;\n            polygons._batchIds = undefined;\n            polygons._positions = undefined;\n            polygons._counts = undefined;\n            polygons._indices = undefined;\n            polygons._indexCounts = undefined;\n            polygons._indexOffsets = undefined;\n            polygons._batchTableColors = undefined;\n            polygons._packedBuffer = undefined;\n            polygons._batchedPositions = undefined;\n            polygons._transferrableBatchIds = undefined;\n            polygons._vertexBatchIds = undefined;\n            polygons._ellipsoid = undefined;\n            polygons._minimumHeight = undefined;\n            polygons._maximumHeight = undefined;\n            polygons._polygonMinimumHeights = undefined;\n            polygons._polygonMaximumHeights = undefined;\n            polygons._center = undefined;\n            polygons._rectangle = undefined;\n            polygons._boundingVolume = undefined;\n            polygons._boundingVolumes = undefined;\n            polygons._batchedIndices = undefined;\n            polygons._verticesPromise = undefined;\n\n            polygons._readyPromise.resolve();\n        }\n    }\n\n    /**\n     * Creates features for each polygon and places it at the batch id index of features.\n     *\n     * @param {Vector3DTileContent} content The vector tile content.\n     * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n     */\n    Vector3DTilePolygons.prototype.createFeatures = function(content, features) {\n        this._primitive.createFeatures(content, features);\n    };\n\n    /**\n     * Colors the entire tile when enabled is true. The resulting color will be (polygon batch table color * color).\n     *\n     * @param {Boolean} enabled Whether to enable debug coloring.\n     * @param {Color} color The debug color.\n     */\n    Vector3DTilePolygons.prototype.applyDebugSettings = function(enabled, color) {\n        this._primitive.applyDebugSettings(enabled, color);\n    };\n\n    /**\n     * Apply a style to the content.\n     *\n     * @param {Cesium3DTileStyle} style The style.\n     * @param {Cesium3DTileFeature[]} features The array of features.\n     */\n    Vector3DTilePolygons.prototype.applyStyle = function(style, features) {\n        this._primitive.applyStyle(style, features);\n    };\n\n    /**\n     * Call when updating the color of a polygon with batchId changes color. The polygons will need to be re-batched\n     * on the next update.\n     *\n     * @param {Number} batchId The batch id of the polygon whose color has changed.\n     * @param {Color} color The new polygon color.\n     */\n    Vector3DTilePolygons.prototype.updateCommands = function(batchId, color) {\n        this._primitive.updateCommands(batchId, color);\n    };\n\n    /**\n     * Updates the batches and queues the commands for rendering.\n     *\n     * @param {FrameState} frameState The current frame state.\n     */\n    Vector3DTilePolygons.prototype.update = function(frameState) {\n        createPrimitive(this);\n\n        if (!this._ready) {\n            return;\n        }\n\n        this._primitive.debugWireframe = this.debugWireframe;\n        this._primitive.forceRebatch = this.forceRebatch;\n        this._primitive.classificationType = this.classificationType;\n        this._primitive.update(frameState);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    Vector3DTilePolygons.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    Vector3DTilePolygons.prototype.destroy = function() {\n        this._primitive = this._primitive && this._primitive.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTilePolygons;\n","import arraySlice from '../Core/arraySlice.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport FeatureDetection from '../Core/FeatureDetection.js';\nimport IndexDatatype from '../Core/IndexDatatype.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport TaskProcessor from '../Core/TaskProcessor.js';\nimport Buffer from '../Renderer/Buffer.js';\nimport BufferUsage from '../Renderer/BufferUsage.js';\nimport DrawCommand from '../Renderer/DrawCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport ShaderProgram from '../Renderer/ShaderProgram.js';\nimport ShaderSource from '../Renderer/ShaderSource.js';\nimport VertexArray from '../Renderer/VertexArray.js';\nimport PolylineCommon from '../Shaders/PolylineCommon.js';\nimport Vector3DTilePolylinesVS from '../Shaders/Vector3DTilePolylinesVS.js';\nimport when from '../ThirdParty/when.js';\nimport BlendingState from './BlendingState.js';\nimport Cesium3DTileFeature from './Cesium3DTileFeature.js';\n\n    /**\n     * Creates a batch of polylines that have been subdivided to be draped on terrain.\n     *\n     * @alias Vector3DTilePolylines\n     * @constructor\n     *\n     * @param {Object} options An object with following properties:\n     * @param {Uint16Array} options.positions The positions of the polylines\n     * @param {Uint32Array} options.counts The number or positions in the each polyline.\n     * @param {Uint16Array} options.widths The width of each polyline.\n     * @param {Number} options.minimumHeight The minimum height of the terrain covered by the tile.\n     * @param {Number} options.maximumHeight The maximum height of the terrain covered by the tile.\n     * @param {Rectangle} options.rectangle The rectangle containing the tile.\n     * @param {Cartesian3} [options.center=Cartesian3.ZERO] The RTC center.\n     * @param {Cesium3DTileBatchTable} options.batchTable The batch table for the tile containing the batched polylines.\n     * @param {Uint16Array} options.batchIds The batch ids for each polyline.\n     * @param {BoundingSphere} options.boundingVolume The bounding volume for the entire batch of polylines.\n     *\n     * @private\n     */\n    function Vector3DTilePolylines(options) {\n        // these arrays are all released after the first update.\n        this._positions = options.positions;\n        this._widths = options.widths;\n        this._counts = options.counts;\n        this._batchIds = options.batchIds;\n\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        this._minimumHeight = options.minimumHeight;\n        this._maximumHeight = options.maximumHeight;\n        this._center = options.center;\n        this._rectangle = options.rectangle;\n\n        this._boundingVolume = options.boundingVolume;\n        this._batchTable = options.batchTable;\n\n        this._va = undefined;\n        this._sp = undefined;\n        this._rs = undefined;\n        this._uniformMap = undefined;\n        this._command = undefined;\n\n        this._transferrableBatchIds = undefined;\n        this._packedBuffer = undefined;\n\n        this._currentPositions = undefined;\n        this._previousPositions = undefined;\n        this._nextPositions = undefined;\n        this._expandAndWidth = undefined;\n        this._vertexBatchIds = undefined;\n        this._indices = undefined;\n\n        this._constantColor = Color.clone(Color.WHITE);\n        this._highlightColor = this._constantColor;\n\n        this._trianglesLength = 0;\n        this._geometryByteLength = 0;\n\n        this._ready = false;\n        this._readyPromise = when.defer();\n\n        this._verticesPromise = undefined;\n    }\n\n    Object.defineProperties(Vector3DTilePolylines.prototype, {\n        /**\n         * Gets the number of triangles.\n         *\n         * @memberof Vector3DTilePolylines.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        trianglesLength : {\n            get : function() {\n                return this._trianglesLength;\n            }\n        },\n\n        /**\n         * Gets the geometry memory in bytes.\n         *\n         * @memberof Vector3DTilePolylines.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        geometryByteLength : {\n            get : function() {\n                return this._geometryByteLength;\n            }\n        },\n\n        /**\n         * Gets a promise that resolves when the primitive is ready to render.\n         * @memberof Vector3DTilePolylines.prototype\n         * @type {Promise}\n         * @readonly\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        }\n    });\n\n    function packBuffer(polylines) {\n        var rectangle = polylines._rectangle;\n        var minimumHeight = polylines._minimumHeight;\n        var maximumHeight = polylines._maximumHeight;\n        var ellipsoid = polylines._ellipsoid;\n        var center = polylines._center;\n\n        var packedLength = 2 + Rectangle.packedLength + Ellipsoid.packedLength + Cartesian3.packedLength;\n        var packedBuffer = new Float64Array(packedLength);\n\n        var offset = 0;\n        packedBuffer[offset++] = minimumHeight;\n        packedBuffer[offset++] = maximumHeight;\n\n        Rectangle.pack(rectangle, packedBuffer, offset);\n        offset += Rectangle.packedLength;\n\n        Ellipsoid.pack(ellipsoid, packedBuffer, offset);\n        offset += Ellipsoid.packedLength;\n\n        Cartesian3.pack(center, packedBuffer, offset);\n\n        return packedBuffer;\n    }\n\n    var createVerticesTaskProcessor = new TaskProcessor('createVectorTilePolylines');\n    var attributeLocations = {\n        previousPosition : 0,\n        currentPosition : 1,\n        nextPosition : 2,\n        expandAndWidth : 3,\n        a_batchId : 4\n    };\n\n    function createVertexArray(polylines, context) {\n        if (defined(polylines._va)) {\n            return;\n        }\n\n        if (!defined(polylines._verticesPromise)) {\n            var positions = polylines._positions;\n            var widths = polylines._widths;\n            var counts = polylines._counts;\n            var batchIds = polylines._transferrableBatchIds;\n\n            var packedBuffer = polylines._packedBuffer;\n\n            if (!defined(packedBuffer)) {\n                // Copy because they may be the views on the same buffer.\n                positions = polylines._positions = arraySlice(positions);\n                widths = polylines._widths = arraySlice(widths);\n                counts = polylines._counts = arraySlice(counts);\n\n                batchIds = polylines._transferrableBatchIds = arraySlice(polylines._batchIds);\n\n                packedBuffer = polylines._packedBuffer = packBuffer(polylines);\n            }\n\n            var transferrableObjects = [positions.buffer, widths.buffer, counts.buffer, batchIds.buffer, packedBuffer.buffer];\n            var parameters = {\n                positions : positions.buffer,\n                widths : widths.buffer,\n                counts : counts.buffer,\n                batchIds : batchIds.buffer,\n                packedBuffer : packedBuffer.buffer\n            };\n\n            var verticesPromise = polylines._verticesPromise = createVerticesTaskProcessor.scheduleTask(parameters, transferrableObjects);\n            if (!defined(verticesPromise)) {\n                // Postponed\n                return;\n            }\n\n            when(verticesPromise, function(result) {\n                polylines._currentPositions = new Float32Array(result.currentPositions);\n                polylines._previousPositions = new Float32Array(result.previousPositions);\n                polylines._nextPositions = new Float32Array(result.nextPositions);\n                polylines._expandAndWidth = new Float32Array(result.expandAndWidth);\n                polylines._vertexBatchIds = new Uint16Array(result.batchIds);\n\n                var indexDatatype = result.indexDatatype;\n                polylines._indices = indexDatatype === IndexDatatype.UNSIGNED_SHORT ? new Uint16Array(result.indices) : new Uint32Array(result.indices);\n\n                polylines._ready = true;\n            });\n        }\n\n        if (polylines._ready && !defined(polylines._va)) {\n            var curPositions = polylines._currentPositions;\n            var prevPositions = polylines._previousPositions;\n            var nextPositions = polylines._nextPositions;\n            var expandAndWidth = polylines._expandAndWidth;\n            var vertexBatchIds = polylines._vertexBatchIds;\n            var indices = polylines._indices;\n\n            var byteLength = prevPositions.byteLength + curPositions.byteLength + nextPositions.byteLength;\n            byteLength += expandAndWidth.byteLength + vertexBatchIds.byteLength + indices.byteLength;\n            polylines._trianglesLength = indices.length / 3;\n            polylines._geometryByteLength = byteLength;\n\n            var prevPositionBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : prevPositions,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            var curPositionBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : curPositions,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            var nextPositionBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : nextPositions,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            var expandAndWidthBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : expandAndWidth,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            var idBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : vertexBatchIds,\n                usage : BufferUsage.STATIC_DRAW\n            });\n\n            var indexBuffer = Buffer.createIndexBuffer({\n                context : context,\n                typedArray : indices,\n                usage : BufferUsage.STATIC_DRAW,\n                indexDatatype : (indices.BYTES_PER_ELEMENT === 2) ? IndexDatatype.UNSIGNED_SHORT : IndexDatatype.UNSIGNED_INT\n            });\n\n            var vertexAttributes = [{\n                index : attributeLocations.previousPosition,\n                vertexBuffer : prevPositionBuffer,\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3\n            }, {\n                index : attributeLocations.currentPosition,\n                vertexBuffer : curPositionBuffer,\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3\n            }, {\n                index : attributeLocations.nextPosition,\n                vertexBuffer : nextPositionBuffer,\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3\n            }, {\n                index : attributeLocations.expandAndWidth,\n                vertexBuffer : expandAndWidthBuffer,\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2\n            }, {\n                index : attributeLocations.a_batchId,\n                vertexBuffer : idBuffer,\n                componentDatatype : ComponentDatatype.UNSIGNED_SHORT,\n                componentsPerAttribute : 1\n            }];\n\n            polylines._va = new VertexArray({\n                context : context,\n                attributes : vertexAttributes,\n                indexBuffer : indexBuffer\n            });\n\n            polylines._positions = undefined;\n            polylines._widths = undefined;\n            polylines._counts = undefined;\n\n            polylines._ellipsoid = undefined;\n            polylines._minimumHeight = undefined;\n            polylines._maximumHeight = undefined;\n            polylines._rectangle = undefined;\n\n            polylines._transferrableBatchIds = undefined;\n            polylines._packedBuffer = undefined;\n\n            polylines._currentPositions = undefined;\n            polylines._previousPositions = undefined;\n            polylines._nextPositions = undefined;\n            polylines._expandAndWidth = undefined;\n            polylines._vertexBatchIds = undefined;\n            polylines._indices = undefined;\n\n            polylines._readyPromise.resolve();\n        }\n    }\n\n    var modifiedModelViewScratch = new Matrix4();\n    var rtcScratch = new Cartesian3();\n\n    function createUniformMap(primitive, context) {\n        if (defined(primitive._uniformMap)) {\n            return;\n        }\n\n        primitive._uniformMap = {\n            u_modifiedModelView : function() {\n                var viewMatrix = context.uniformState.view;\n                Matrix4.clone(viewMatrix, modifiedModelViewScratch);\n                Matrix4.multiplyByPoint(modifiedModelViewScratch, primitive._center, rtcScratch);\n                Matrix4.setTranslation(modifiedModelViewScratch, rtcScratch, modifiedModelViewScratch);\n                return modifiedModelViewScratch;\n            },\n            u_highlightColor : function() {\n                return primitive._highlightColor;\n            }\n        };\n    }\n\n    function createRenderStates(primitive) {\n        if (defined(primitive._rs)) {\n            return;\n        }\n\n        var polygonOffset = {\n            enabled : true,\n            factor : -5.0,\n            units : -5.0\n        };\n\n        primitive._rs = RenderState.fromCache({\n            blending : BlendingState.ALPHA_BLEND,\n            depthMask : false,\n            depthTest : {\n                enabled : true\n            },\n            polygonOffset : polygonOffset\n        });\n    }\n\n    var PolylineFS =\n        'uniform vec4 u_highlightColor; \\n' +\n        'void main()\\n' +\n        '{\\n' +\n        '    gl_FragColor = u_highlightColor;\\n' +\n        '}\\n';\n\n    function createShaders(primitive, context) {\n        if (defined(primitive._sp)) {\n            return;\n        }\n\n        var batchTable = primitive._batchTable;\n\n        var vsSource = batchTable.getVertexShaderCallback(false, 'a_batchId', undefined)(Vector3DTilePolylinesVS);\n        var fsSource = batchTable.getFragmentShaderCallback()(PolylineFS, false, undefined);\n\n        var vs = new ShaderSource({\n            defines : ['VECTOR_TILE', !FeatureDetection.isInternetExplorer() ? 'CLIP_POLYLINE' : ''],\n            sources : [PolylineCommon, vsSource]\n        });\n        var fs = new ShaderSource({\n            defines : ['VECTOR_TILE'],\n            sources : [fsSource]\n        });\n\n        primitive._sp = ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : vs,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n    }\n\n    function queueCommands(primitive, frameState) {\n        if (!defined(primitive._command)) {\n            var uniformMap = primitive._batchTable.getUniformMapCallback()(primitive._uniformMap);\n            primitive._command = new DrawCommand({\n                owner : primitive,\n                vertexArray : primitive._va,\n                renderState : primitive._rs,\n                shaderProgram : primitive._sp,\n                uniformMap : uniformMap,\n                boundingVolume : primitive._boundingVolume,\n                pass : Pass.TRANSLUCENT,\n                pickId : primitive._batchTable.getPickId()\n            });\n        }\n\n        frameState.commandList.push(primitive._command);\n    }\n\n    /**\n     * Creates features for each polyline and places it at the batch id index of features.\n     *\n     * @param {Vector3DTileContent} content The vector tile content.\n     * @param {Cesium3DTileFeature[]} features An array of features where the polygon features will be placed.\n     */\n    Vector3DTilePolylines.prototype.createFeatures = function(content, features) {\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            features[batchId] = new Cesium3DTileFeature(content, batchId);\n        }\n    };\n\n    /**\n     * Colors the entire tile when enabled is true. The resulting color will be (polyline batch table color * color).\n     *\n     * @param {Boolean} enabled Whether to enable debug coloring.\n     * @param {Color} color The debug color.\n     */\n    Vector3DTilePolylines.prototype.applyDebugSettings = function(enabled, color) {\n        this._highlightColor = enabled ? color : this._constantColor;\n    };\n\n    function clearStyle(polygons, features) {\n        var batchIds = polygons._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            feature.show = true;\n            feature.color = Color.WHITE;\n        }\n    }\n\n    var scratchColor = new Color();\n\n    var DEFAULT_COLOR_VALUE = Color.WHITE;\n    var DEFAULT_SHOW_VALUE = true;\n\n    /**\n     * Apply a style to the content.\n     *\n     * @param {Cesium3DTileStyle} style The style.\n     * @param {Cesium3DTileFeature[]} features The array of features.\n     */\n    Vector3DTilePolylines.prototype.applyStyle = function(style, features) {\n        if (!defined(style)) {\n            clearStyle(this, features);\n            return;\n        }\n\n        var batchIds = this._batchIds;\n        var length = batchIds.length;\n        for (var i = 0; i < length; ++i) {\n            var batchId = batchIds[i];\n            var feature = features[batchId];\n\n            feature.color = defined(style.color) ? style.color.evaluateColor(feature, scratchColor) : DEFAULT_COLOR_VALUE;\n            feature.show = defined(style.show) ? style.show.evaluate(feature) : DEFAULT_SHOW_VALUE;\n        }\n    };\n\n    /**\n     * Updates the batches and queues the commands for rendering.\n     *\n     * @param {FrameState} frameState The current frame state.\n     */\n    Vector3DTilePolylines.prototype.update = function(frameState) {\n        var context = frameState.context;\n\n        createVertexArray(this, context);\n        createUniformMap(this, context);\n        createShaders(this, context);\n        createRenderStates(this);\n\n        if (!this._ready) {\n            return;\n        }\n\n        var passes = frameState.passes;\n        if (passes.render || passes.pick) {\n            queueCommands(this, frameState);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    Vector3DTilePolylines.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    Vector3DTilePolylines.prototype.destroy = function() {\n        this._va = this._va && this._va.destroy();\n        this._sp = this._sp && this._sp.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTilePolylines;\n","//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec4 currentPosition;\\n\\\nattribute vec4 previousPosition;\\n\\\nattribute vec4 nextPosition;\\n\\\nattribute vec2 expandAndWidth;\\n\\\nattribute float a_batchId;\\n\\\n\\n\\\nuniform mat4 u_modifiedModelView;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float expandDir = expandAndWidth.x;\\n\\\n    float width = abs(expandAndWidth.y) + 0.5;\\n\\\n    bool usePrev = expandAndWidth.y < 0.0;\\n\\\n\\n\\\n    vec4 p = u_modifiedModelView * currentPosition;\\n\\\n    vec4 prev = u_modifiedModelView * previousPosition;\\n\\\n    vec4 next = u_modifiedModelView * nextPosition;\\n\\\n\\n\\\n    float angle;\\n\\\n    vec4 positionWC = getPolylineWindowCoordinatesEC(p, prev, next, expandDir, width, usePrev, angle);\\n\\\n    gl_Position = czm_viewportOrthographic * positionWC;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_vertexLogDepth(czm_projection * p);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport getStringFromTypedArray from '../Core/getStringFromTypedArray.js';\nimport ComponentDatatype from '../Core/ComponentDatatype.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport when from '../ThirdParty/when.js';\nimport Cesium3DTileBatchTable from './Cesium3DTileBatchTable.js';\nimport Cesium3DTileFeatureTable from './Cesium3DTileFeatureTable.js';\nimport Vector3DTilePoints from './Vector3DTilePoints.js';\nimport Vector3DTilePolygons from './Vector3DTilePolygons.js';\nimport Vector3DTilePolylines from './Vector3DTilePolylines.js';\n\n    /**\n     * Represents the contents of a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/3d-tiles-next/TileFormats/VectorData|Vector}\n     * tile in a {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Vector3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Vector3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset) {\n        this._tileset = tileset;\n        this._tile = tile;\n        this._resource = resource;\n\n        this._polygons = undefined;\n        this._polylines = undefined;\n        this._points = undefined;\n\n        this._contentReadyPromise = undefined;\n        this._readyPromise = when.defer();\n\n        this._batchTable = undefined;\n        this._features = undefined;\n\n        /**\n         * Part of the {@link Cesium3DTileContent} interface.\n         */\n        this.featurePropertiesDirty = false;\n\n        initialize(this, arrayBuffer, byteOffset);\n    }\n\n    Object.defineProperties(Vector3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return defined(this._batchTable) ? this._batchTable.featuresLength : 0;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                if (defined(this._points)) {\n                    return this._points.pointsLength;\n                }\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                var trianglesLength = 0;\n                if (defined(this._polygons)) {\n                    trianglesLength += this._polygons.trianglesLength;\n                }\n                if (defined(this._polylines)) {\n                    trianglesLength += this._polylines.trianglesLength;\n                }\n                return trianglesLength;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                var geometryByteLength = 0;\n                if (defined(this._polygons)) {\n                    geometryByteLength += this._polygons.geometryByteLength;\n                }\n                if (defined(this._polylines)) {\n                    geometryByteLength += this._polylines.geometryByteLength;\n                }\n                return geometryByteLength;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                if (defined(this._points)) {\n                    return this._points.texturesByteLength;\n                }\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return defined(this._batchTable) ? this._batchTable.memorySizeInBytes : 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url : {\n            get : function() {\n                return this._resource.getUrlComponent(true);\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return this._batchTable;\n            }\n        }\n    });\n\n    function createColorChangedCallback(content) {\n        return function(batchId, color) {\n            if (defined(content._polygons)) {\n                content._polygons.updateCommands(batchId, color);\n            }\n        };\n    }\n\n    function getBatchIds(featureTableJson, featureTableBinary) {\n        var polygonBatchIds;\n        var polylineBatchIds;\n        var pointBatchIds;\n        var i;\n\n        var numberOfPolygons = defaultValue(featureTableJson.POLYGONS_LENGTH, 0);\n        var numberOfPolylines = defaultValue(featureTableJson.POLYLINES_LENGTH, 0);\n        var numberOfPoints = defaultValue(featureTableJson.POINTS_LENGTH, 0);\n\n        if (numberOfPolygons > 0 && defined(featureTableJson.POLYGON_BATCH_IDS)) {\n            var polygonBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.POLYGON_BATCH_IDS.byteOffset;\n            polygonBatchIds = new Uint16Array(featureTableBinary.buffer, polygonBatchIdsByteOffset, numberOfPolygons);\n        }\n\n        if (numberOfPolylines > 0 && defined(featureTableJson.POLYLINE_BATCH_IDS)) {\n            var polylineBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.POLYLINE_BATCH_IDS.byteOffset;\n            polylineBatchIds = new Uint16Array(featureTableBinary.buffer, polylineBatchIdsByteOffset, numberOfPolylines);\n        }\n\n        if (numberOfPoints > 0 && defined(featureTableJson.POINT_BATCH_IDS)) {\n            var pointBatchIdsByteOffset = featureTableBinary.byteOffset + featureTableJson.POINT_BATCH_IDS.byteOffset;\n            pointBatchIds = new Uint16Array(featureTableBinary.buffer, pointBatchIdsByteOffset, numberOfPoints);\n        }\n\n        var atLeastOneDefined = defined(polygonBatchIds) || defined(polylineBatchIds) || defined(pointBatchIds);\n        var atLeastOneUndefined = (numberOfPolygons > 0 && !defined(polygonBatchIds)) ||\n                                  (numberOfPolylines > 0 && !defined(polylineBatchIds)) ||\n                                  (numberOfPoints > 0 && !defined(pointBatchIds));\n\n        if (atLeastOneDefined && atLeastOneUndefined) {\n            throw new RuntimeError('If one group of batch ids is defined, then all batch ids must be defined.');\n        }\n\n        var allUndefinedBatchIds = !defined(polygonBatchIds) && !defined(polylineBatchIds) && !defined(pointBatchIds);\n        if (allUndefinedBatchIds) {\n            var id = 0;\n            if (!defined(polygonBatchIds) && numberOfPolygons > 0) {\n                polygonBatchIds = new Uint16Array(numberOfPolygons);\n                for (i = 0; i < numberOfPolygons; ++i) {\n                    polygonBatchIds[i] = id++;\n                }\n            }\n            if (!defined(polylineBatchIds) && numberOfPolylines > 0) {\n                polylineBatchIds = new Uint16Array(numberOfPolylines);\n                for (i = 0; i < numberOfPolylines; ++i) {\n                    polylineBatchIds[i] = id++;\n                }\n            }\n            if (!defined(pointBatchIds) && numberOfPoints > 0) {\n                pointBatchIds = new Uint16Array(numberOfPoints);\n                for (i = 0; i < numberOfPoints; ++i) {\n                    pointBatchIds[i] = id++;\n                }\n            }\n        }\n\n        return {\n            polygons : polygonBatchIds,\n            polylines : polylineBatchIds,\n            points : pointBatchIds\n        };\n    }\n\n    var sizeOfUint32 = Uint32Array.BYTES_PER_ELEMENT;\n\n    function initialize(content, arrayBuffer, byteOffset) {\n        byteOffset = defaultValue(byteOffset, 0);\n\n        var uint8Array = new Uint8Array(arrayBuffer);\n        var view = new DataView(arrayBuffer);\n        byteOffset += sizeOfUint32;  // Skip magic number\n\n        var version = view.getUint32(byteOffset, true);\n        if (version !== 1) {\n            throw new RuntimeError('Only Vector tile version 1 is supported.  Version ' + version + ' is not.');\n        }\n        byteOffset += sizeOfUint32;\n\n        var byteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        if (byteLength === 0) {\n            content._readyPromise.resolve(content);\n            return;\n        }\n\n        var featureTableJSONByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        if (featureTableJSONByteLength === 0) {\n            throw new RuntimeError('Feature table must have a byte length greater than zero');\n        }\n\n        var featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var batchTableJSONByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var indicesByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var positionByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var polylinePositionByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n        var pointsPositionByteLength = view.getUint32(byteOffset, true);\n        byteOffset += sizeOfUint32;\n\n        var featureTableString = getStringFromTypedArray(uint8Array, byteOffset, featureTableJSONByteLength);\n        var featureTableJson = JSON.parse(featureTableString);\n        byteOffset += featureTableJSONByteLength;\n\n        var featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n        byteOffset += featureTableBinaryByteLength;\n\n        var batchTableJson;\n        var batchTableBinary;\n        if (batchTableJSONByteLength > 0) {\n            // PERFORMANCE_IDEA: is it possible to allocate this on-demand?  Perhaps keep the\n            // arraybuffer/string compressed in memory and then decompress it when it is first accessed.\n            //\n            // We could also make another request for it, but that would make the property set/get\n            // API async, and would double the number of numbers in some cases.\n            var batchTableString = getStringFromTypedArray(uint8Array, byteOffset, batchTableJSONByteLength);\n            batchTableJson = JSON.parse(batchTableString);\n            byteOffset += batchTableJSONByteLength;\n\n            if (batchTableBinaryByteLength > 0) {\n                // Has a batch table binary\n                batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n                // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n                batchTableBinary = new Uint8Array(batchTableBinary);\n                byteOffset += batchTableBinaryByteLength;\n            }\n        }\n\n        var numberOfPolygons = defaultValue(featureTableJson.POLYGONS_LENGTH, 0);\n        var numberOfPolylines = defaultValue(featureTableJson.POLYLINES_LENGTH, 0);\n        var numberOfPoints = defaultValue(featureTableJson.POINTS_LENGTH, 0);\n        var totalPrimitives = numberOfPolygons + numberOfPolylines + numberOfPoints;\n\n        var batchTable = new Cesium3DTileBatchTable(content, totalPrimitives, batchTableJson, batchTableBinary, createColorChangedCallback(content));\n        content._batchTable = batchTable;\n\n        if (totalPrimitives === 0) {\n            return;\n        }\n\n        var featureTable = new Cesium3DTileFeatureTable(featureTableJson, featureTableBinary);\n        var region = featureTable.getGlobalProperty('REGION');\n        if (!defined(region)) {\n            throw new RuntimeError('Feature table global property: REGION must be defined');\n        }\n        var rectangle = Rectangle.unpack(region);\n        var minHeight = region[4];\n        var maxHeight = region[5];\n\n        var modelMatrix = content._tile.computedTransform;\n\n        var center = featureTable.getGlobalProperty('RTC_CENTER', ComponentDatatype.FLOAT, 3);\n        if (defined(center)) {\n            center = Cartesian3.unpack(center);\n            Matrix4.multiplyByPoint(modelMatrix, center, center);\n        } else {\n            center = Rectangle.center(rectangle);\n            center.height = CesiumMath.lerp(minHeight, maxHeight, 0.5);\n            center = Ellipsoid.WGS84.cartographicToCartesian(center);\n        }\n\n        var batchIds = getBatchIds(featureTableJson, featureTableBinary);\n        byteOffset += byteOffset % 4;\n\n        if (numberOfPolygons > 0) {\n            featureTable.featuresLength = numberOfPolygons;\n\n            var polygonCounts = defaultValue(\n                featureTable.getPropertyArray('POLYGON_COUNTS', ComponentDatatype.UNSIGNED_INT, 1),\n                featureTable.getPropertyArray('POLYGON_COUNT', ComponentDatatype.UNSIGNED_INT, 1) // Workaround for old vector tilesets using the non-plural name\n            );\n\n            if (!defined(polygonCounts)) {\n                throw new RuntimeError('Feature table property: POLYGON_COUNTS must be defined when POLYGONS_LENGTH is greater than 0');\n            }\n\n            var polygonIndexCounts = defaultValue(\n                featureTable.getPropertyArray('POLYGON_INDEX_COUNTS', ComponentDatatype.UNSIGNED_INT, 1),\n                featureTable.getPropertyArray('POLYGON_INDEX_COUNT', ComponentDatatype.UNSIGNED_INT, 1) // Workaround for old vector tilesets using the non-plural name\n            );\n\n            if (!defined(polygonIndexCounts)) {\n                throw new RuntimeError('Feature table property: POLYGON_INDEX_COUNTS must be defined when POLYGONS_LENGTH is greater than 0');\n            }\n\n            // Use the counts array to determine how many position values we want. If we used the byte length then\n            // zero padding values would be included and cause the delta zig-zag decoding to fail\n            var numPolygonPositions = polygonCounts.reduce(function(total, count) {\n                return total + count * 2;\n            }, 0);\n\n            var numPolygonIndices = polygonIndexCounts.reduce(function(total, count) {\n                return total + count;\n            }, 0);\n\n            var indices = new Uint32Array(arrayBuffer, byteOffset, numPolygonIndices);\n            byteOffset += indicesByteLength;\n\n            var polygonPositions = new Uint16Array(arrayBuffer, byteOffset, numPolygonPositions);\n            byteOffset += positionByteLength;\n\n            var polygonMinimumHeights;\n            var polygonMaximumHeights;\n            if (defined(featureTableJson.POLYGON_MINIMUM_HEIGHTS) && defined(featureTableJson.POLYGON_MAXIMUM_HEIGHTS)) {\n                polygonMinimumHeights = featureTable.getPropertyArray('POLYGON_MINIMUM_HEIGHTS', ComponentDatatype.FLOAT, 1);\n                polygonMaximumHeights = featureTable.getPropertyArray('POLYGON_MAXIMUM_HEIGHTS', ComponentDatatype.FLOAT, 1);\n            }\n\n            content._polygons = new Vector3DTilePolygons({\n                positions : polygonPositions,\n                counts : polygonCounts,\n                indexCounts : polygonIndexCounts,\n                indices : indices,\n                minimumHeight : minHeight,\n                maximumHeight : maxHeight,\n                polygonMinimumHeights : polygonMinimumHeights,\n                polygonMaximumHeights : polygonMaximumHeights,\n                center : center,\n                rectangle : rectangle,\n                boundingVolume : content.tile.boundingVolume.boundingVolume,\n                batchTable : batchTable,\n                batchIds : batchIds.polygons,\n                modelMatrix : modelMatrix\n            });\n        }\n\n        if (numberOfPolylines > 0) {\n            featureTable.featuresLength = numberOfPolylines;\n\n            var polylineCounts = defaultValue(\n                featureTable.getPropertyArray('POLYLINE_COUNTS', ComponentDatatype.UNSIGNED_INT, 1),\n                featureTable.getPropertyArray('POLYLINE_COUNT', ComponentDatatype.UNSIGNED_INT, 1) // Workaround for old vector tilesets using the non-plural name\n            );\n\n            if (!defined(polylineCounts)) {\n                throw new RuntimeError('Feature table property: POLYLINE_COUNTS must be defined when POLYLINES_LENGTH is greater than 0');\n            }\n\n            var widths = featureTable.getPropertyArray('POLYLINE_WIDTHS', ComponentDatatype.UNSIGNED_SHORT, 1);\n            if (!defined(widths)) {\n                widths = new Uint16Array(numberOfPolylines);\n                for (var i = 0; i < numberOfPolylines; ++i) {\n                    widths[i] = 2.0;\n                }\n            }\n\n            // Use the counts array to determine how many position values we want. If we used the byte length then\n            // zero padding values would be included and cause the delta zig-zag decoding to fail\n            var numPolylinePositions = polylineCounts.reduce(function(total, count) {\n                return total + count * 3;\n            }, 0);\n            var polylinePositions = new Uint16Array(arrayBuffer, byteOffset, numPolylinePositions);\n            byteOffset += polylinePositionByteLength;\n\n            content._polylines = new Vector3DTilePolylines({\n                positions : polylinePositions,\n                widths : widths,\n                counts : polylineCounts,\n                batchIds : batchIds.polylines,\n                minimumHeight : minHeight,\n                maximumHeight : maxHeight,\n                center : center,\n                rectangle : rectangle,\n                boundingVolume : content.tile.boundingVolume.boundingVolume,\n                batchTable : batchTable\n            });\n        }\n\n        if (numberOfPoints > 0) {\n            var pointPositions = new Uint16Array(arrayBuffer, byteOffset, numberOfPoints * 3);\n            byteOffset += pointsPositionByteLength;\n            content._points = new Vector3DTilePoints({\n                positions : pointPositions,\n                batchIds : batchIds.points,\n                minimumHeight : minHeight,\n                maximumHeight : maxHeight,\n                rectangle : rectangle,\n                batchTable : batchTable\n            });\n        }\n    }\n\n    function createFeatures(content) {\n        var featuresLength = content.featuresLength;\n        if (!defined(content._features) && (featuresLength > 0)) {\n            var features = new Array(featuresLength);\n\n            if (defined(content._polygons)) {\n                content._polygons.createFeatures(content, features);\n            }\n            if (defined(content._polylines)) {\n                content._polylines.createFeatures(content, features);\n            }\n            if (defined(content._points)) {\n                content._points.createFeatures(content, features);\n            }\n            content._features = features;\n        }\n    }\n\n    Vector3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return this._batchTable.hasProperty(batchId, name);\n    };\n\n    Vector3DTileContent.prototype.getFeature = function(batchId) {\n        \n\n        createFeatures(this);\n        return this._features[batchId];\n    };\n\n    Vector3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n        if (defined(this._polygons)) {\n            this._polygons.applyDebugSettings(enabled, color);\n        }\n        if (defined(this._polylines)) {\n            this._polylines.applyDebugSettings(enabled, color);\n        }\n        if (defined(this._points)) {\n            this._points.applyDebugSettings(enabled, color);\n        }\n    };\n\n    Vector3DTileContent.prototype.applyStyle = function(style) {\n        createFeatures(this);\n        if (defined(this._polygons)) {\n            this._polygons.applyStyle(style, this._features);\n        }\n        if (defined(this._polylines)) {\n            this._polylines.applyStyle(style, this._features);\n        }\n        if (defined(this._points)) {\n            this._points.applyStyle(style, this._features);\n        }\n    };\n\n    Vector3DTileContent.prototype.update = function(tileset, frameState) {\n        var ready = true;\n        if (defined(this._polygons)) {\n            this._polygons.classificationType = this._tileset.classificationType;\n            this._polygons.debugWireframe = this._tileset.debugWireframe;\n            this._polygons.update(frameState);\n            ready = ready && this._polygons._ready;\n        }\n        if (defined(this._polylines)) {\n            this._polylines.update(frameState);\n            ready = ready && this._polylines._ready;\n        }\n        if (defined(this._points)) {\n            this._points.update(frameState);\n            ready = ready && this._points._ready;\n        }\n        if (defined(this._batchTable) && ready) {\n            this._batchTable.update(tileset, frameState);\n        }\n\n        if (!defined(this._contentReadyPromise)) {\n            var pointsPromise = defined(this._points) ? this._points.readyPromise : undefined;\n            var polygonPromise = defined(this._polygons) ? this._polygons.readyPromise : undefined;\n            var polylinePromise = defined(this._polylines) ? this._polylines.readyPromise : undefined;\n\n            var that = this;\n            this._contentReadyPromise = when.all([pointsPromise, polygonPromise, polylinePromise]).then(function() {\n                that._readyPromise.resolve(that);\n            });\n        }\n    };\n\n    Vector3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Vector3DTileContent.prototype.destroy = function() {\n        this._polygons = this._polygons && this._polygons.destroy();\n        this._polylines = this._polylines && this._polylines.destroy();\n        this._points = this._points && this._points.destroy();\n        this._batchTable = this._batchTable && this._batchTable.destroy();\n        return destroyObject(this);\n    };\nexport default Vector3DTileContent;\n","import Batched3DModel3DTileContent from './Batched3DModel3DTileContent.js';\nimport Composite3DTileContent from './Composite3DTileContent.js';\nimport Geometry3DTileContent from './Geometry3DTileContent.js';\nimport Instanced3DModel3DTileContent from './Instanced3DModel3DTileContent.js';\nimport PointCloud3DTileContent from './PointCloud3DTileContent.js';\nimport Tileset3DTileContent from './Tileset3DTileContent.js';\nimport Vector3DTileContent from './Vector3DTileContent.js';\n\n    /**\n     * Maps a tile's magic field in its header to a new content object for the tile's payload.\n     *\n     * @private\n     */\n    var Cesium3DTileContentFactory = {\n        b3dm : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new Batched3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        },\n        pnts : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new PointCloud3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        },\n        i3dm : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new Instanced3DModel3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        },\n        cmpt : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            // Send in the factory in order to avoid a cyclical dependency\n            return new Composite3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset, Cesium3DTileContentFactory);\n        },\n        json : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new Tileset3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        },\n        geom : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new Geometry3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        },\n        vctr : function(tileset, tile, resource, arrayBuffer, byteOffset) {\n            return new Vector3DTileContent(tileset, tile, resource, arrayBuffer, byteOffset);\n        }\n    };\nexport default Cesium3DTileContentFactory;\n","\n    /**\n     * @private\n     */\n    var Cesium3DTileContentState = {\n        UNLOADED : 0,   // Has never been requested\n        LOADING : 1,    // Is waiting on a pending request\n        PROCESSING : 2, // Request received.  Contents are being processed for rendering.  Depending on the content, it might make its own requests for external data.\n        READY : 3,      // Ready to render.\n        EXPIRED : 4,    // Is expired and will be unloaded once new content is loaded.\n        FAILED : 5      // Request failed.\n    };\nexport default Object.freeze(Cesium3DTileContentState);\n","import destroyObject from '../Core/destroyObject.js';\n\n    /**\n     * Represents empty content for tiles in a\n     * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles} tileset that\n     * do not have content, e.g., because they are used to optimize hierarchical culling.\n     * <p>\n     * Implements the {@link Cesium3DTileContent} interface.\n     * </p>\n     *\n     * @alias Empty3DTileContent\n     * @constructor\n     *\n     * @private\n     */\n    function Empty3DTileContent(tileset, tile) {\n        this._tileset = tileset;\n        this._tile = tile;\n\n        this.featurePropertiesDirty = false;\n    }\n\n    Object.defineProperties(Empty3DTileContent.prototype, {\n        featuresLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        pointsLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        trianglesLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        geometryByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        texturesByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        batchTableByteLength : {\n            get : function() {\n                return 0;\n            }\n        },\n\n        innerContents : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        readyPromise : {\n            get : function() {\n                return undefined;\n            }\n        },\n\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        tile : {\n            get : function() {\n                return this._tile;\n            }\n        },\n\n        url: {\n            get: function() {\n                return undefined;\n            }\n        },\n\n        batchTable : {\n            get : function() {\n                return undefined;\n            }\n        }\n    });\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Empty3DTileContent</code>\n     * always returns <code>false</code> since a tile of this type does not have any features.\n     */\n    Empty3DTileContent.prototype.hasProperty = function(batchId, name) {\n        return false;\n    };\n\n    /**\n     * Part of the {@link Cesium3DTileContent} interface.  <code>Empty3DTileContent</code>\n     * always returns <code>undefined</code> since a tile of this type does not have any features.\n     */\n    Empty3DTileContent.prototype.getFeature = function(batchId) {\n        return undefined;\n    };\n\n    Empty3DTileContent.prototype.applyDebugSettings = function(enabled, color) {\n    };\n\n    Empty3DTileContent.prototype.applyStyle = function(style) {\n    };\n\n    Empty3DTileContent.prototype.update = function(tileset, frameState) {\n    };\n\n    Empty3DTileContent.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Empty3DTileContent.prototype.destroy = function() {\n        return destroyObject(this);\n    };\nexport default Empty3DTileContent;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport SphereOutlineGeometry from '../Core/SphereOutlineGeometry.js';\nimport PerInstanceColorAppearance from './PerInstanceColorAppearance.js';\nimport Primitive from './Primitive.js';\n\n    /**\n     * A tile bounding volume specified as a sphere.\n     * @alias TileBoundingSphere\n     * @constructor\n     *\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the bounding sphere.\n     * @param {Number} [radius=0.0] The radius of the bounding sphere.\n     *\n     * @private\n     */\n    function TileBoundingSphere(center, radius) {\n        if (radius === 0) {\n            radius = CesiumMath.EPSILON7;\n        }\n        this._boundingSphere = new BoundingSphere(center, radius);\n    }\n\n    Object.defineProperties(TileBoundingSphere.prototype, {\n        /**\n         * The center of the bounding sphere\n         *\n         * @memberof TileBoundingSphere.prototype\n         *\n         * @type {Cartesian3}\n         * @readonly\n         */\n        center : {\n            get : function() {\n                return this._boundingSphere.center;\n            }\n        },\n\n        /**\n         * The radius of the bounding sphere\n         *\n         * @memberof TileBoundingSphere.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        radius : {\n            get : function() {\n                return this._boundingSphere.radius;\n            }\n        },\n\n        /**\n         * The underlying bounding volume\n         *\n         * @memberof TileBoundingSphere.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        boundingVolume : {\n            get : function() {\n                return this._boundingSphere;\n            }\n        },\n        /**\n         * The underlying bounding sphere\n         *\n         * @memberof TileBoundingSphere.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         */\n        boundingSphere : {\n            get : function() {\n                return this._boundingSphere;\n            }\n        }\n    });\n\n    /**\n     * Computes the distance between this bounding sphere and the camera attached to frameState.\n     *\n     * @param {FrameState} frameState The frameState to which the camera is attached.\n     * @returns {Number} The distance between the camera and the bounding sphere in meters. Returns 0 if the camera is inside the bounding volume.\n     *\n     */\n    TileBoundingSphere.prototype.distanceToCamera = function(frameState) {\n        \n        var boundingSphere = this._boundingSphere;\n        return Math.max(0.0, Cartesian3.distance(boundingSphere.center, frameState.camera.positionWC) - boundingSphere.radius);\n    };\n\n    /**\n     * Determines which side of a plane this sphere is located.\n     *\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire sphere is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire sphere is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the sphere\n     *                      intersects the plane.\n     */\n    TileBoundingSphere.prototype.intersectPlane = function(plane) {\n        \n        return BoundingSphere.intersectPlane(this._boundingSphere, plane);\n    };\n\n    /**\n     * Update the bounding sphere after the tile is transformed.\n     *\n     * @param {Cartesian3} center The center of the bounding sphere.\n     * @param {Number} radius The radius of the bounding sphere.\n     */\n    TileBoundingSphere.prototype.update = function(center, radius) {\n        Cartesian3.clone(center, this._boundingSphere.center);\n        this._boundingSphere.radius = radius;\n    };\n\n    /**\n     * Creates a debug primitive that shows the outline of the sphere.\n     *\n     * @param {Color} color The desired color of the primitive's mesh\n     * @return {Primitive}\n     */\n    TileBoundingSphere.prototype.createDebugVolume = function(color) {\n        \n        var geometry = new SphereOutlineGeometry({\n            radius: this.radius\n        });\n        var modelMatrix = Matrix4.fromTranslation(this.center, new Matrix4.clone(Matrix4.IDENTITY));\n        var instance = new GeometryInstance({\n            geometry : geometry,\n            id : 'outline',\n            modelMatrix : modelMatrix,\n            attributes : {\n                color : ColorGeometryInstanceAttribute.fromColor(color)\n            }\n        });\n\n        return new Primitive({\n            geometryInstances : instance,\n            appearance : new PerInstanceColorAppearance({\n                translucent : false,\n                flat : true\n            }),\n            asynchronous : false\n        });\n    };\nexport default TileBoundingSphere;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport BoxOutlineGeometry from '../Core/BoxOutlineGeometry.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport CesiumMath from '../Core/Math.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport PerInstanceColorAppearance from './PerInstanceColorAppearance.js';\nimport Primitive from './Primitive.js';\n\n    var scratchU = new Cartesian3();\n    var scratchV = new Cartesian3();\n    var scratchW = new Cartesian3();\n    var scratchCartesian = new Cartesian3();\n\n    function computeMissingVector(a, b, result) {\n        result = Cartesian3.cross(a, b, result);\n        var magnitude = Cartesian3.magnitude(result);\n        return Cartesian3.multiplyByScalar(result, CesiumMath.EPSILON7 / magnitude, result);\n    }\n\n    function findOrthogonalVector(a, result) {\n        var temp = Cartesian3.normalize(a, scratchCartesian);\n        var b = Cartesian3.equalsEpsilon(temp, Cartesian3.UNIT_X, CesiumMath.EPSILON6) ? Cartesian3.UNIT_Y : Cartesian3.UNIT_X;\n        return computeMissingVector(a, b, result);\n    }\n\n    function checkHalfAxes(halfAxes) {\n        var u = Matrix3.getColumn(halfAxes, 0, scratchU);\n        var v = Matrix3.getColumn(halfAxes, 1, scratchV);\n        var w = Matrix3.getColumn(halfAxes, 2, scratchW);\n\n        var uZero = Cartesian3.equals(u, Cartesian3.ZERO);\n        var vZero = Cartesian3.equals(v, Cartesian3.ZERO);\n        var wZero = Cartesian3.equals(w, Cartesian3.ZERO);\n\n        if (!uZero && !vZero && !wZero) {\n            return halfAxes;\n        }\n        if (uZero && vZero && wZero) {\n            halfAxes[0] = CesiumMath.EPSILON7;\n            halfAxes[4] = CesiumMath.EPSILON7;\n            halfAxes[8] = CesiumMath.EPSILON7;\n            return halfAxes;\n        }\n        if (uZero && !vZero && !wZero) {\n            u = computeMissingVector(v, w, u);\n        } else if (!uZero && vZero && !wZero) {\n            v = computeMissingVector(u, w, v);\n        } else if (!uZero && !vZero && wZero) {\n            w = computeMissingVector(v, u, w);\n        } else if (!uZero) {\n            v = findOrthogonalVector(u, v);\n            w = computeMissingVector(v, u, w);\n        } else if (!vZero) {\n            u = findOrthogonalVector(v, u);\n            w = computeMissingVector(v, u, w);\n        } else if (!wZero) {\n            u = findOrthogonalVector(w, u);\n            v = computeMissingVector(w, u, v);\n        }\n\n        Matrix3.setColumn(halfAxes, 0, u, halfAxes);\n        Matrix3.setColumn(halfAxes, 1, v, halfAxes);\n        Matrix3.setColumn(halfAxes, 2, w, halfAxes);\n\n        return halfAxes;\n    }\n\n    /**\n     * A tile bounding volume specified as an oriented bounding box.\n     * @alias TileOrientedBoundingBox\n     * @constructor\n     *\n     * @param {Cartesian3} [center=Cartesian3.ZERO] The center of the box.\n     * @param {Matrix3} [halfAxes=Matrix3.ZERO] The three orthogonal half-axes of the bounding box.\n     *                                          Equivalently, the transformation matrix, to rotate and scale a 2x2x2\n     *                                          cube centered at the origin.\n     *\n     * @private\n     */\n    function TileOrientedBoundingBox(center, halfAxes) {\n        halfAxes = checkHalfAxes(halfAxes);\n        this._orientedBoundingBox = new OrientedBoundingBox(center, halfAxes);\n        this._boundingSphere = BoundingSphere.fromOrientedBoundingBox(this._orientedBoundingBox);\n    }\n\n    Object.defineProperties(TileOrientedBoundingBox.prototype, {\n        /**\n         * The underlying bounding volume.\n         *\n         * @memberof TileOrientedBoundingBox.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        boundingVolume : {\n            get : function() {\n                return this._orientedBoundingBox;\n            }\n        },\n        /**\n         * The underlying bounding sphere.\n         *\n         * @memberof TileOrientedBoundingBox.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         */\n        boundingSphere : {\n            get : function() {\n                return this._boundingSphere;\n            }\n        }\n    });\n\n    /**\n     * Computes the distance between this bounding box and the camera attached to frameState.\n     *\n     * @param {FrameState} frameState The frameState to which the camera is attached.\n     * @returns {Number} The distance between the camera and the bounding box in meters. Returns 0 if the camera is inside the bounding volume.\n     */\n    TileOrientedBoundingBox.prototype.distanceToCamera = function(frameState) {\n        \n        return Math.sqrt(this._orientedBoundingBox.distanceSquaredTo(frameState.camera.positionWC));\n    };\n\n    /**\n     * Determines which side of a plane this box is located.\n     *\n     * @param {Plane} plane The plane to test against.\n     * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n     *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n     *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n     *                      intersects the plane.\n     */\n    TileOrientedBoundingBox.prototype.intersectPlane = function(plane) {\n        \n        return this._orientedBoundingBox.intersectPlane(plane);\n    };\n\n    /**\n     * Update the bounding box after the tile is transformed.\n     *\n     * @param {Cartesian3} center The center of the box.\n     * @param {Matrix3} halfAxes The three orthogonal half-axes of the bounding box.\n     *                           Equivalently, the transformation matrix, to rotate and scale a 2x2x2\n     *                           cube centered at the origin.\n     */\n    TileOrientedBoundingBox.prototype.update = function(center, halfAxes) {\n        Cartesian3.clone(center, this._orientedBoundingBox.center);\n        halfAxes = checkHalfAxes(halfAxes);\n        Matrix3.clone(halfAxes, this._orientedBoundingBox.halfAxes);\n        BoundingSphere.fromOrientedBoundingBox(this._orientedBoundingBox, this._boundingSphere);\n    };\n\n    /**\n     * Creates a debug primitive that shows the outline of the box.\n     *\n     * @param {Color} color The desired color of the primitive's mesh\n     * @return {Primitive}\n     */\n    TileOrientedBoundingBox.prototype.createDebugVolume = function(color) {\n        \n\n        var geometry = new BoxOutlineGeometry({\n            // Make a 2x2x2 cube\n            minimum : new Cartesian3(-1.0, -1.0, -1.0),\n            maximum : new Cartesian3(1.0, 1.0, 1.0)\n        });\n        var modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n        var instance = new GeometryInstance({\n            geometry : geometry,\n            id : 'outline',\n            modelMatrix : modelMatrix,\n            attributes : {\n                color : ColorGeometryInstanceAttribute.fromColor(color)\n            }\n        });\n\n        return new Primitive({\n            geometryInstances : instance,\n            appearance : new PerInstanceColorAppearance({\n                translucent : false,\n                flat : true\n            }),\n            asynchronous : false\n        });\n    };\nexport default TileOrientedBoundingBox;\n","import BoundingSphere from '../Core/BoundingSphere.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport CullingVolume from '../Core/CullingVolume.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport deprecationWarning from '../Core/deprecationWarning.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport getMagic from '../Core/getMagic.js';\nimport Intersect from '../Core/Intersect.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport OrientedBoundingBox from '../Core/OrientedBoundingBox.js';\nimport OrthographicFrustum from '../Core/OrthographicFrustum.js';\nimport Rectangle from '../Core/Rectangle.js';\nimport Request from '../Core/Request.js';\nimport RequestScheduler from '../Core/RequestScheduler.js';\nimport RequestState from '../Core/RequestState.js';\nimport RequestType from '../Core/RequestType.js';\nimport Resource from '../Core/Resource.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport when from '../ThirdParty/when.js';\nimport Cesium3DTileContentFactory from './Cesium3DTileContentFactory.js';\nimport Cesium3DTileContentState from './Cesium3DTileContentState.js';\nimport Cesium3DTileOptimizationHint from './Cesium3DTileOptimizationHint.js';\nimport Cesium3DTilePass from './Cesium3DTilePass.js';\nimport Cesium3DTileRefine from './Cesium3DTileRefine.js';\nimport Empty3DTileContent from './Empty3DTileContent.js';\nimport SceneMode from './SceneMode.js';\nimport TileBoundingRegion from './TileBoundingRegion.js';\nimport TileBoundingSphere from './TileBoundingSphere.js';\nimport TileOrientedBoundingBox from './TileOrientedBoundingBox.js';\n\n    /**\n     * A tile in a {@link Cesium3DTileset}.  When a tile is first created, its content is not loaded;\n     * the content is loaded on-demand when needed based on the view.\n     * <p>\n     * Do not construct this directly, instead access tiles through {@link Cesium3DTileset#tileVisible}.\n     * </p>\n     *\n     * @alias Cesium3DTile\n     * @constructor\n     */\n    function Cesium3DTile(tileset, baseResource, header, parent) {\n        this._tileset = tileset;\n        this._header = header;\n        var contentHeader = header.content;\n\n        /**\n         * The local transform of this tile.\n         * @type {Matrix4}\n         */\n        this.transform = defined(header.transform) ? Matrix4.unpack(header.transform) : Matrix4.clone(Matrix4.IDENTITY);\n\n        var parentTransform = defined(parent) ? parent.computedTransform : tileset.modelMatrix;\n        var computedTransform = Matrix4.multiply(parentTransform, this.transform, new Matrix4());\n\n        var parentInitialTransform = defined(parent) ? parent._initialTransform : Matrix4.IDENTITY;\n        this._initialTransform = Matrix4.multiply(parentInitialTransform, this.transform, new Matrix4());\n\n        /**\n         * The final computed transform of this tile.\n         * @type {Matrix4}\n         * @readonly\n         */\n        this.computedTransform = computedTransform;\n\n        this._boundingVolume = this.createBoundingVolume(header.boundingVolume, computedTransform);\n        this._boundingVolume2D = undefined;\n\n        var contentBoundingVolume;\n\n        if (defined(contentHeader) && defined(contentHeader.boundingVolume)) {\n            // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n            // around only the features in the tile.  This box is useful for culling for rendering,\n            // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n            // since it only bounds features in the tile, not the entire tile, children may be\n            // outside of this box.\n            contentBoundingVolume = this.createBoundingVolume(contentHeader.boundingVolume, computedTransform);\n        }\n        this._contentBoundingVolume = contentBoundingVolume;\n        this._contentBoundingVolume2D = undefined;\n\n        var viewerRequestVolume;\n        if (defined(header.viewerRequestVolume)) {\n            viewerRequestVolume = this.createBoundingVolume(header.viewerRequestVolume, computedTransform);\n        }\n        this._viewerRequestVolume = viewerRequestVolume;\n\n        /**\n         * The error, in meters, introduced if this tile is rendered and its children are not.\n         * This is used to compute screen space error, i.e., the error measured in pixels.\n         *\n         * @type {Number}\n         * @readonly\n         */\n        this.geometricError = header.geometricError;\n        this._geometricError = header.geometricError;\n\n        if (!defined(this._geometricError)) {\n            this._geometricError = defined(parent) ? parent.geometricError : tileset._geometricError;\n            Cesium3DTile._deprecationWarning('geometricErrorUndefined', 'Required property geometricError is undefined for this tile. Using parent\\'s geometric error instead.');\n        }\n\n        this.updateGeometricErrorScale();\n\n        var refine;\n        if (defined(header.refine)) {\n            if (header.refine === 'replace' || header.refine === 'add') {\n                Cesium3DTile._deprecationWarning('lowercase-refine', 'This tile uses a lowercase refine \"' + header.refine + '\". Instead use \"' + header.refine.toUpperCase() + '\".');\n            }\n            refine = (header.refine.toUpperCase() === 'REPLACE') ? Cesium3DTileRefine.REPLACE : Cesium3DTileRefine.ADD;\n        } else if (defined(parent)) {\n            // Inherit from parent tile if omitted.\n            refine = parent.refine;\n        } else {\n            refine = Cesium3DTileRefine.REPLACE;\n        }\n\n        /**\n         * Specifies the type of refinement that is used when traversing this tile for rendering.\n         *\n         * @type {Cesium3DTileRefine}\n         * @readonly\n         * @private\n         */\n        this.refine = refine;\n\n        /**\n         * Gets the tile's children.\n         *\n         * @type {Cesium3DTile[]}\n         * @readonly\n         */\n        this.children = [];\n\n        /**\n         * This tile's parent or <code>undefined</code> if this tile is the root.\n         * <p>\n         * When a tile's content points to an external tileset JSON file, the external tileset's\n         * root tile's parent is not <code>undefined</code>; instead, the parent references\n         * the tile (with its content pointing to an external tileset JSON file) as if the two tilesets were merged.\n         * </p>\n         *\n         * @type {Cesium3DTile}\n         * @readonly\n         */\n        this.parent = parent;\n\n        var content;\n        var hasEmptyContent;\n        var contentState;\n        var contentResource;\n        var serverKey;\n\n        baseResource = Resource.createIfNeeded(baseResource);\n\n        if (defined(contentHeader)) {\n            var contentHeaderUri = contentHeader.uri;\n            if (defined(contentHeader.url)) {\n                Cesium3DTile._deprecationWarning('contentUrl', 'This tileset JSON uses the \"content.url\" property which has been deprecated. Use \"content.uri\" instead.');\n                contentHeaderUri = contentHeader.url;\n            }\n            hasEmptyContent = false;\n            contentState = Cesium3DTileContentState.UNLOADED;\n            contentResource = baseResource.getDerivedResource({\n                url : contentHeaderUri\n            });\n            serverKey = RequestScheduler.getServerKey(contentResource.getUrlComponent());\n        } else {\n            content = new Empty3DTileContent(tileset, this);\n            hasEmptyContent = true;\n            contentState = Cesium3DTileContentState.READY;\n        }\n\n        this._content = content;\n        this._contentResource = contentResource;\n        this._contentState = contentState;\n        this._contentReadyToProcessPromise = undefined;\n        this._contentReadyPromise = undefined;\n        this._expiredContent = undefined;\n\n        this._serverKey = serverKey;\n\n        /**\n         * When <code>true</code>, the tile has no content.\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        this.hasEmptyContent = hasEmptyContent;\n\n        /**\n         * When <code>true</code>, the tile's content points to an external tileset.\n         * <p>\n         * This is <code>false</code> until the tile's content is loaded.\n         * </p>\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        this.hasTilesetContent = false;\n\n        /**\n         * The node in the tileset's LRU cache, used to determine when to unload a tile's content.\n         *\n         * See {@link Cesium3DTilesetCache}\n         *\n         * @type {DoublyLinkedListNode}\n         * @readonly\n         *\n         * @private\n         */\n        this.cacheNode = undefined;\n\n        var expire = header.expire;\n        var expireDuration;\n        var expireDate;\n        if (defined(expire)) {\n            expireDuration = expire.duration;\n            if (defined(expire.date)) {\n                expireDate = JulianDate.fromIso8601(expire.date);\n            }\n        }\n\n        /**\n         * The time in seconds after the tile's content is ready when the content expires and new content is requested.\n         *\n         * @type {Number}\n         */\n        this.expireDuration = expireDuration;\n\n        /**\n         * The date when the content expires and new content is requested.\n         *\n         * @type {JulianDate}\n         */\n        this.expireDate = expireDate;\n\n        /**\n         * The time when a style was last applied to this tile.\n         *\n         * @type {Number}\n         *\n         * @private\n         */\n        this.lastStyleTime = 0.0;\n\n        /**\n         * Marks whether the tile's children bounds are fully contained within the tile's bounds\n         *\n         * @type {Cesium3DTileOptimizationHint}\n         *\n         * @private\n         */\n        this._optimChildrenWithinParent = Cesium3DTileOptimizationHint.NOT_COMPUTED;\n\n        /**\n         * Tracks if the tile's relationship with a ClippingPlaneCollection has changed with regards\n         * to the ClippingPlaneCollection's state.\n         *\n         * @type {Boolean}\n         *\n         * @private\n         */\n        this.clippingPlanesDirty = false;\n\n        /**\n         * Tracks if the tile's request should be deferred until all non-deferred\n         * tiles load.\n         *\n         * @type {Boolean}\n         *\n         * @private\n         */\n        this.priorityDeferred = false;\n\n        // Members that are updated every frame for tree traversal and rendering optimizations:\n        this._distanceToCamera = 0.0;\n        this._centerZDepth = 0.0;\n        this._screenSpaceError = 0.0;\n        this._screenSpaceErrorProgressiveResolution = 0.0; // The screen space error at a given screen height of tileset.progressiveResolutionHeightFraction * screenHeight\n        this._visibilityPlaneMask = 0;\n        this._visible = false;\n        this._inRequestVolume = false;\n\n        this._finalResolution = true;\n        this._depth = 0;\n        this._stackLength = 0;\n        this._selectionDepth = 0;\n\n        this._updatedVisibilityFrame = 0;\n        this._touchedFrame = 0;\n        this._visitedFrame = 0;\n        this._selectedFrame = 0;\n        this._requestedFrame = 0;\n        this._ancestorWithContent = undefined;\n        this._ancestorWithContentAvailable = undefined;\n        this._refines = false;\n        this._shouldSelect = false;\n        this._isClipped = true;\n        this._clippingPlanesState = 0; // encapsulates (_isClipped, clippingPlanes.enabled) and number/function\n        this._debugBoundingVolume = undefined;\n        this._debugContentBoundingVolume = undefined;\n        this._debugViewerRequestVolume = undefined;\n        this._debugColor = Color.fromRandom({ alpha : 1.0 });\n        this._debugColorizeTiles = false;\n\n        this._priority = 0.0; // The priority used for request sorting\n        this._priorityHolder = this; // Reference to the ancestor up the tree that holds the _foveatedFactor and _distanceToCamera for all tiles in the refinement chain.\n        this._priorityProgressiveResolution = false;\n        this._priorityProgressiveResolutionScreenSpaceErrorLeaf = false;\n        this._priorityReverseScreenSpaceError = 0.0;\n        this._foveatedFactor = 0.0;\n        this._wasMinPriorityChild = false; // Needed for knowing when to continue a refinement chain. Gets reset in updateTile in traversal and gets set in updateAndPushChildren in traversal.\n\n        this._loadTimestamp = new JulianDate();\n\n        this._commandsLength = 0;\n\n        this._color = undefined;\n        this._colorDirty = false;\n\n        this._request = undefined;\n    }\n\n    // This can be overridden for testing purposes\n    Cesium3DTile._deprecationWarning = deprecationWarning;\n\n    Object.defineProperties(Cesium3DTile.prototype, {\n        /**\n         * The tileset containing this tile.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Cesium3DTileset}\n         * @readonly\n         */\n        tileset : {\n            get : function() {\n                return this._tileset;\n            }\n        },\n\n        /**\n         * The tile's content.  This represents the actual tile's payload,\n         * not the content's metadata in the tileset JSON file.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Cesium3DTileContent}\n         * @readonly\n         */\n        content : {\n            get : function() {\n                return this._content;\n            }\n        },\n\n        /**\n         * Get the tile's bounding volume.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {TileBoundingVolume}\n         * @readonly\n         * @private\n         */\n        boundingVolume : {\n            get : function() {\n                return this._boundingVolume;\n            }\n        },\n\n        /**\n         * Get the bounding volume of the tile's contents.  This defaults to the\n         * tile's bounding volume when the content's bounding volume is\n         * <code>undefined</code>.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {TileBoundingVolume}\n         * @readonly\n         * @private\n         */\n        contentBoundingVolume : {\n            get : function() {\n                return defaultValue(this._contentBoundingVolume, this._boundingVolume);\n            }\n        },\n\n        /**\n         * Get the bounding sphere derived from the tile's bounding volume.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         */\n        boundingSphere : {\n            get : function() {\n                return this._boundingVolume.boundingSphere;\n            }\n        },\n\n        /**\n         * Returns the <code>extras</code> property in the tileset JSON for this tile, which contains application specific metadata.\n         * Returns <code>undefined</code> if <code>extras</code> does not exist.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {*}\n         * @readonly\n         * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification#specifying-extensions-and-application-specific-extras|Extras in the 3D Tiles specification.}\n         */\n        extras : {\n            get : function() {\n                return this._header.extras;\n            }\n        },\n\n        /**\n         * Gets or sets the tile's highlight color.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Color}\n         *\n         * @default {@link Color.WHITE}\n         *\n         * @private\n         */\n        color : {\n            get : function() {\n                if (!defined(this._color)) {\n                    this._color = new Color();\n                }\n                return Color.clone(this._color);\n            },\n            set : function(value) {\n                this._color = Color.clone(value, this._color);\n                this._colorDirty = true;\n            }\n        },\n\n        /**\n         * Determines if the tile has available content to render.  <code>true</code> if the tile's\n         * content is ready or if it has expired content that renders while new content loads; otherwise,\n         * <code>false</code>.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        contentAvailable : {\n            get : function() {\n                return (this.contentReady && !this.hasEmptyContent && !this.hasTilesetContent) || (defined(this._expiredContent) && !this.contentFailed);\n            }\n        },\n\n        /**\n         * Determines if the tile's content is ready. This is automatically <code>true</code> for\n         * tile's with empty content.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        contentReady : {\n            get : function() {\n                return this._contentState === Cesium3DTileContentState.READY;\n            }\n        },\n\n        /**\n         * Determines if the tile's content has not be requested. <code>true</code> if tile's\n         * content has not be requested; otherwise, <code>false</code>.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        contentUnloaded : {\n            get : function() {\n                return this._contentState === Cesium3DTileContentState.UNLOADED;\n            }\n        },\n\n        /**\n         * Determines if the tile's content is expired. <code>true</code> if tile's\n         * content is expired; otherwise, <code>false</code>.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        contentExpired : {\n            get : function() {\n                return this._contentState === Cesium3DTileContentState.EXPIRED;\n            }\n        },\n\n        /**\n         * Determines if the tile's content failed to load.  <code>true</code> if the tile's\n         * content failed to load; otherwise, <code>false</code>.\n         *\n         * @memberof Cesium3DTile.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @private\n         */\n        contentFailed : {\n            get : function() {\n                return this._contentState === Cesium3DTileContentState.FAILED;\n            }\n        },\n\n        /**\n         * Gets the promise that will be resolved when the tile's content is ready to process.\n         * This happens after the content is downloaded but before the content is ready\n         * to render.\n         * <p>\n         * The promise remains <code>undefined</code> until the tile's content is requested.\n         * </p>\n         *\n         * @type {Promise.<Cesium3DTileContent>}\n         * @readonly\n         *\n         * @private\n         */\n        contentReadyToProcessPromise : {\n            get : function() {\n                if (defined(this._contentReadyToProcessPromise)) {\n                    return this._contentReadyToProcessPromise.promise;\n                }\n                return undefined;\n            }\n        },\n\n        /**\n         * Gets the promise that will be resolved when the tile's content is ready to render.\n         * <p>\n         * The promise remains <code>undefined</code> until the tile's content is requested.\n         * </p>\n         *\n         * @type {Promise.<Cesium3DTileContent>}\n         * @readonly\n         *\n         * @private\n         */\n        contentReadyPromise : {\n            get : function() {\n                if (defined(this._contentReadyPromise)) {\n                    return this._contentReadyPromise.promise;\n                }\n                return undefined;\n            }\n        },\n\n        /**\n         * Returns the number of draw commands used by this tile.\n         *\n         * @readonly\n         *\n         * @private\n         */\n        commandsLength : {\n            get : function() {\n                return this._commandsLength;\n            }\n        }\n    });\n\n    var scratchCartesian = new Cartesian3();\n    function isPriorityDeferred(tile, frameState) {\n        var tileset = tile._tileset;\n\n        // If closest point on line is inside the sphere then set foveatedFactor to 0. Otherwise, the dot product is with the line from camera to the point on the sphere that is closest to the line.\n        var camera = frameState.camera;\n        var boundingSphere = tile.boundingSphere;\n        var radius = boundingSphere.radius;\n        var scaledCameraDirection = Cartesian3.multiplyByScalar(camera.directionWC, tile._centerZDepth, scratchCartesian);\n        var closestPointOnLine = Cartesian3.add(camera.positionWC, scaledCameraDirection, scratchCartesian);\n        // The distance from the camera's view direction to the tile.\n        var toLine = Cartesian3.subtract(closestPointOnLine, boundingSphere.center, scratchCartesian);\n        var distanceToCenterLine = Cartesian3.magnitude(toLine);\n        var notTouchingSphere = distanceToCenterLine > radius;\n\n        // If camera's direction vector is inside the bounding sphere then consider\n        // this tile right along the line of sight and set _foveatedFactor to 0.\n        // Otherwise,_foveatedFactor is one minus the dot product of the camera's direction\n        // and the vector between the camera and the point on the bounding sphere closest to the view line.\n        if (notTouchingSphere) {\n            var toLineNormalized = Cartesian3.normalize(toLine, scratchCartesian);\n            var scaledToLine = Cartesian3.multiplyByScalar(toLineNormalized, radius, scratchCartesian);\n            var closestOnSphere = Cartesian3.add(boundingSphere.center, scaledToLine, scratchCartesian);\n            var toClosestOnSphere = Cartesian3.subtract(closestOnSphere, camera.positionWC, scratchCartesian);\n            var toClosestOnSphereNormalize = Cartesian3.normalize(toClosestOnSphere, scratchCartesian);\n            tile._foveatedFactor = 1.0 - Math.abs(Cartesian3.dot(camera.directionWC, toClosestOnSphereNormalize));\n        } else {\n            tile._foveatedFactor = 0.0;\n        }\n\n        // Skip this feature if: non-skipLevelOfDetail and replace refine, if the foveated settings are turned off, if tile is progressive resolution and replace refine and skipLevelOfDetail (will help get rid of ancestor artifacts faster)\n        // Or if the tile is a preload of any kind\n        var replace = tile.refine === Cesium3DTileRefine.REPLACE;\n        var skipLevelOfDetail = tileset._skipLevelOfDetail;\n        if ((replace && !skipLevelOfDetail) ||\n            !tileset.foveatedScreenSpaceError ||\n            tileset.foveatedConeSize === 1.0 ||\n            (tile._priorityProgressiveResolution && replace && skipLevelOfDetail) ||\n            tileset._pass === Cesium3DTilePass.PRELOAD_FLIGHT ||\n            tileset._pass === Cesium3DTilePass.PRELOAD) {\n            return false;\n        }\n\n        var maximumFovatedFactor = 1.0 - Math.cos(camera.frustum.fov * 0.5); // 0.14 for fov = 60. NOTE very hard to defer vertically foveated tiles since max is based on fovy (which is fov). Lowering the 0.5 to a smaller fraction of the screen height will start to defer vertically foveated tiles.\n        var foveatedConeFactor = tileset.foveatedConeSize * maximumFovatedFactor;\n\n        // If it's inside the user-defined view cone, then it should not be deferred.\n        if (tile._foveatedFactor <= foveatedConeFactor) {\n            return false;\n        }\n\n        // Relax SSE based on how big the angle is between the tile and the edge of the foveated cone.\n        var range = maximumFovatedFactor - foveatedConeFactor;\n        var normalizedFoveatedFactor = CesiumMath.clamp((tile._foveatedFactor - foveatedConeFactor) / range, 0.0, 1.0);\n        var sseRelaxation = tileset.foveatedInterpolationCallback(tileset.foveatedMinimumScreenSpaceErrorRelaxation, tileset.maximumScreenSpaceError, normalizedFoveatedFactor);\n        var sse = tile._screenSpaceError === 0.0 && defined(tile.parent) ? tile.parent._screenSpaceError * 0.5 : tile._screenSpaceError;\n\n        return (tileset.maximumScreenSpaceError - sseRelaxation) <= sse;\n    }\n\n    var scratchJulianDate = new JulianDate();\n\n    /**\n     * Get the tile's screen space error.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.getScreenSpaceError = function(frameState, useParentGeometricError, progressiveResolutionHeightFraction) {\n        var tileset = this._tileset;\n        var heightFraction = defaultValue(progressiveResolutionHeightFraction, 1.0);\n        var parentGeometricError = defined(this.parent) ? this.parent.geometricError : tileset._geometricError;\n        var geometricError = useParentGeometricError ? parentGeometricError : this.geometricError;\n        if (geometricError === 0.0) {\n            // Leaf tiles do not have any error so save the computation\n            return 0.0;\n        }\n        var camera = frameState.camera;\n        var frustum = camera.frustum;\n        var context = frameState.context;\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight * heightFraction;\n        var error;\n        if (frameState.mode === SceneMode.SCENE2D || frustum instanceof OrthographicFrustum) {\n            if (defined(frustum._offCenterFrustum)) {\n                frustum = frustum._offCenterFrustum;\n            }\n            var pixelSize = Math.max(frustum.top - frustum.bottom, frustum.right - frustum.left) / Math.max(width, height);\n            error = geometricError / pixelSize;\n        } else {\n            // Avoid divide by zero when viewer is inside the tile\n            var distance = Math.max(this._distanceToCamera, CesiumMath.EPSILON7);\n            var sseDenominator = camera.frustum.sseDenominator;\n            error = (geometricError * height) / (distance * sseDenominator);\n            if (tileset.dynamicScreenSpaceError) {\n                var density = tileset._dynamicScreenSpaceErrorComputedDensity;\n                var factor = tileset.dynamicScreenSpaceErrorFactor;\n                var dynamicError = CesiumMath.fog(distance, density) * factor;\n                error -= dynamicError;\n            }\n        }\n\n        error /= frameState.pixelRatio;\n\n        return error;\n    };\n\n    function isPriorityProgressiveResolution(tileset, tile) {\n        if (tileset.progressiveResolutionHeightFraction <= 0.0 || tileset.progressiveResolutionHeightFraction > 0.5) {\n            return false;\n        }\n\n        var isProgressiveResolutionTile = tile._screenSpaceErrorProgressiveResolution > tileset._maximumScreenSpaceError; // Mark non-SSE leaves\n        tile._priorityProgressiveResolutionScreenSpaceErrorLeaf = false; // Needed for skipLOD\n        var parent = tile.parent;\n        var maximumScreenSpaceError = tileset._maximumScreenSpaceError;\n        var tilePasses = tile._screenSpaceErrorProgressiveResolution <= maximumScreenSpaceError;\n        var parentFails = defined(parent) && parent._screenSpaceErrorProgressiveResolution > maximumScreenSpaceError;\n        if (tilePasses && parentFails) { // A progressive resolution SSE leaf, promote its priority as well\n            tile._priorityProgressiveResolutionScreenSpaceErrorLeaf = true;\n            isProgressiveResolutionTile = true;\n        }\n        return isProgressiveResolutionTile;\n    }\n\n    function getPriorityReverseScreenSpaceError(tileset, tile) {\n        var parent = tile.parent;\n        var useParentScreenSpaceError = defined(parent) && (!tileset._skipLevelOfDetail || (tile._screenSpaceError === 0.0) || parent.hasTilesetContent);\n        var screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : tile._screenSpaceError;\n        return tileset.root._screenSpaceError - screenSpaceError;\n    }\n\n    /**\n     * Update the tile's visibility.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.updateVisibility = function(frameState) {\n        var parent = this.parent;\n        var tileset = this._tileset;\n        var parentTransform = defined(parent) ? parent.computedTransform : tileset.modelMatrix;\n        var parentVisibilityPlaneMask = defined(parent) ? parent._visibilityPlaneMask : CullingVolume.MASK_INDETERMINATE;\n        this.updateTransform(parentTransform);\n        this._distanceToCamera = this.distanceToTile(frameState);\n        this._centerZDepth = this.distanceToTileCenter(frameState);\n        this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n        this._screenSpaceErrorProgressiveResolution = this.getScreenSpaceError(frameState, false, tileset.progressiveResolutionHeightFraction);\n        this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n        this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n        this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n        this._priorityReverseScreenSpaceError = getPriorityReverseScreenSpaceError(tileset, this);\n        this._priorityProgressiveResolution = isPriorityProgressiveResolution(tileset, this);\n        this.priorityDeferred = isPriorityDeferred(this, frameState);\n    };\n\n    /**\n     * Update whether the tile has expired.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.updateExpiration = function() {\n        if (defined(this.expireDate) && this.contentReady && !this.hasEmptyContent) {\n            var now = JulianDate.now(scratchJulianDate);\n            if (JulianDate.lessThan(this.expireDate, now)) {\n                this._contentState = Cesium3DTileContentState.EXPIRED;\n                this._expiredContent = this._content;\n            }\n        }\n    };\n\n    function updateExpireDate(tile) {\n        if (defined(tile.expireDuration)) {\n            var expireDurationDate = JulianDate.now(scratchJulianDate);\n            JulianDate.addSeconds(expireDurationDate, tile.expireDuration, expireDurationDate);\n\n            if (defined(tile.expireDate)) {\n                if (JulianDate.lessThan(tile.expireDate, expireDurationDate)) {\n                    JulianDate.clone(expireDurationDate, tile.expireDate);\n                }\n            } else {\n                tile.expireDate = JulianDate.clone(expireDurationDate);\n            }\n        }\n    }\n\n    function getContentFailedFunction(tile, tileset) {\n        return function(error) {\n            if (tile._contentState === Cesium3DTileContentState.PROCESSING) {\n                --tileset.statistics.numberOfTilesProcessing;\n            } else {\n                --tileset.statistics.numberOfPendingRequests;\n            }\n            tile._contentState = Cesium3DTileContentState.FAILED;\n            tile._contentReadyPromise.reject(error);\n            tile._contentReadyToProcessPromise.reject(error);\n        };\n    }\n\n    function createPriorityFunction(tile) {\n        return function() {\n            return tile._priority;\n        };\n    }\n\n    /**\n     * Requests the tile's content.\n     * <p>\n     * The request may not be made if the Cesium Request Scheduler can't prioritize it.\n     * </p>\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.requestContent = function() {\n        var that = this;\n        var tileset = this._tileset;\n\n        if (this.hasEmptyContent) {\n            return false;\n        }\n\n        var resource = this._contentResource.clone();\n        var expired = this.contentExpired;\n        if (expired) {\n            // Append a query parameter of the tile expiration date to prevent caching\n            resource.setQueryParameters({\n                expired: this.expireDate.toString()\n            });\n        }\n\n        var request = new Request({\n            throttle : true,\n            throttleByServer : true,\n            type : RequestType.TILES3D,\n            priorityFunction : createPriorityFunction(this),\n            serverKey : this._serverKey\n        });\n\n        this._request = request;\n        resource.request = request;\n\n        var promise = resource.fetchArrayBuffer();\n\n        if (!defined(promise)) {\n            return false;\n        }\n\n        var contentState = this._contentState;\n        this._contentState = Cesium3DTileContentState.LOADING;\n        this._contentReadyToProcessPromise = when.defer();\n        this._contentReadyPromise = when.defer();\n\n        var contentFailedFunction = getContentFailedFunction(this, tileset);\n        promise.then(function(arrayBuffer) {\n            if (that.isDestroyed()) {\n                // Tile is unloaded before the content finishes loading\n                contentFailedFunction();\n                return;\n            }\n            var uint8Array = new Uint8Array(arrayBuffer);\n            var magic = getMagic(uint8Array);\n            var contentFactory = Cesium3DTileContentFactory[magic];\n            var content;\n\n            // Vector and Geometry tile rendering do not support the skip LOD optimization.\n            tileset._disableSkipLevelOfDetail = tileset._disableSkipLevelOfDetail || magic === 'vctr' || magic === 'geom';\n\n            if (defined(contentFactory)) {\n                content = contentFactory(tileset, that, that._contentResource, arrayBuffer, 0);\n            } else {\n                // The content may be json instead\n                content = Cesium3DTileContentFactory.json(tileset, that, that._contentResource, arrayBuffer, 0);\n                that.hasTilesetContent = true;\n            }\n\n            if (expired) {\n                that.expireDate = undefined;\n            }\n\n            that._content = content;\n            that._contentState = Cesium3DTileContentState.PROCESSING;\n            that._contentReadyToProcessPromise.resolve(content);\n\n            return content.readyPromise.then(function(content) {\n                if (that.isDestroyed()) {\n                    // Tile is unloaded before the content finishes processing\n                    contentFailedFunction();\n                    return;\n                }\n                updateExpireDate(that);\n\n                // Refresh style for expired content\n                that._selectedFrame = 0;\n                that.lastStyleTime = 0.0;\n\n                JulianDate.now(that._loadTimestamp);\n                that._contentState = Cesium3DTileContentState.READY;\n                that._contentReadyPromise.resolve(content);\n            });\n        }).otherwise(function(error) {\n            if (request.state === RequestState.CANCELLED) {\n                // Cancelled due to low priority - try again later.\n                that._contentState = contentState;\n                --tileset.statistics.numberOfPendingRequests;\n                ++tileset.statistics.numberOfAttemptedRequests;\n                return;\n            }\n            contentFailedFunction(error);\n        });\n\n        return true;\n    };\n\n    /**\n     * Unloads the tile's content.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.unloadContent = function() {\n        if (this.hasEmptyContent || this.hasTilesetContent) {\n            return;\n        }\n\n        this._content = this._content && this._content.destroy();\n        this._contentState = Cesium3DTileContentState.UNLOADED;\n        this._contentReadyToProcessPromise = undefined;\n        this._contentReadyPromise = undefined;\n\n        this.lastStyleTime = 0.0;\n        this.clippingPlanesDirty = (this._clippingPlanesState === 0);\n        this._clippingPlanesState = 0;\n\n        this._debugColorizeTiles = false;\n\n        this._debugBoundingVolume = this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n        this._debugContentBoundingVolume = this._debugContentBoundingVolume && this._debugContentBoundingVolume.destroy();\n        this._debugViewerRequestVolume = this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n    };\n\n    var scratchProjectedBoundingSphere = new BoundingSphere();\n\n    function getBoundingVolume(tile, frameState) {\n        if (frameState.mode !== SceneMode.SCENE3D && !defined(tile._boundingVolume2D)) {\n            var boundingSphere = tile._boundingVolume.boundingSphere;\n            var sphere = BoundingSphere.projectTo2D(boundingSphere, frameState.mapProjection, scratchProjectedBoundingSphere);\n            tile._boundingVolume2D = new TileBoundingSphere(sphere.center, sphere.radius);\n        }\n\n        return frameState.mode !== SceneMode.SCENE3D ? tile._boundingVolume2D : tile._boundingVolume;\n    }\n\n    function getContentBoundingVolume(tile, frameState) {\n        if (frameState.mode !== SceneMode.SCENE3D && !defined(tile._contentBoundingVolume2D)) {\n            var boundingSphere = tile._contentBoundingVolume.boundingSphere;\n            var sphere = BoundingSphere.projectTo2D(boundingSphere, frameState.mapProjection, scratchProjectedBoundingSphere);\n            tile._contentBoundingVolume2D = new TileBoundingSphere(sphere.center, sphere.radius);\n        }\n        return frameState.mode !== SceneMode.SCENE3D ? tile._contentBoundingVolume2D : tile._contentBoundingVolume;\n    }\n\n    /**\n     * Determines whether the tile's bounding volume intersects the culling volume.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n     * @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.visibility = function(frameState, parentVisibilityPlaneMask) {\n        var cullingVolume = frameState.cullingVolume;\n        var boundingVolume = getBoundingVolume(this, frameState);\n\n        var tileset = this._tileset;\n        var clippingPlanes = tileset.clippingPlanes;\n        if (defined(clippingPlanes) && clippingPlanes.enabled) {\n            var intersection = clippingPlanes.computeIntersectionWithBoundingVolume(boundingVolume, tileset.clippingPlanesOriginMatrix);\n            this._isClipped = intersection !== Intersect.INSIDE;\n            if (intersection === Intersect.OUTSIDE) {\n                return CullingVolume.MASK_OUTSIDE;\n            }\n        }\n\n        return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    };\n\n    /**\n     * Assuming the tile's bounding volume intersects the culling volume, determines\n     * whether the tile's content's bounding volume intersects the culling volume.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.contentVisibility = function(frameState) {\n        // Assumes the tile's bounding volume intersects the culling volume already, so\n        // just return Intersect.INSIDE if there is no content bounding volume.\n        if (!defined(this._contentBoundingVolume)) {\n            return Intersect.INSIDE;\n        }\n\n        if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n            // The tile's bounding volume is completely inside the culling volume so\n            // the content bounding volume must also be inside.\n            return Intersect.INSIDE;\n        }\n\n        // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n        // tile's (not the content's) bounding volume intersects the culling volume?\n        var cullingVolume = frameState.cullingVolume;\n        var boundingVolume = getContentBoundingVolume(this, frameState);\n\n        var tileset = this._tileset;\n        var clippingPlanes = tileset.clippingPlanes;\n        if (defined(clippingPlanes) && clippingPlanes.enabled) {\n            var intersection = clippingPlanes.computeIntersectionWithBoundingVolume(boundingVolume, tileset.clippingPlanesOriginMatrix);\n            this._isClipped = intersection !== Intersect.INSIDE;\n            if (intersection === Intersect.OUTSIDE) {\n                return Intersect.OUTSIDE;\n            }\n        }\n\n        return cullingVolume.computeVisibility(boundingVolume);\n    };\n\n    /**\n     * Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.distanceToTile = function(frameState) {\n        var boundingVolume = getBoundingVolume(this, frameState);\n        return boundingVolume.distanceToCamera(frameState);\n    };\n\n    var scratchToTileCenter = new Cartesian3();\n\n    /**\n     * Computes the distance from the center of the tile's bounding volume to the camera's plane defined by its position and view direction.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @returns {Number} The distance, in meters.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.distanceToTileCenter = function(frameState) {\n        var tileBoundingVolume = getBoundingVolume(this, frameState);\n        var boundingVolume = tileBoundingVolume.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n        var toCenter = Cartesian3.subtract(boundingVolume.center, frameState.camera.positionWC, scratchToTileCenter);\n        return Cartesian3.dot(frameState.camera.directionWC, toCenter);\n    };\n\n    /**\n     * Checks if the camera is inside the viewer request volume.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @returns {Boolean} Whether the camera is inside the volume.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.insideViewerRequestVolume = function(frameState) {\n        var viewerRequestVolume = this._viewerRequestVolume;\n        return !defined(viewerRequestVolume) || (viewerRequestVolume.distanceToCamera(frameState) === 0.0);\n    };\n\n    var scratchMatrix = new Matrix3();\n    var scratchScale = new Cartesian3();\n    var scratchHalfAxes = new Matrix3();\n    var scratchCenter = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n    var scratchOrientedBoundingBox = new OrientedBoundingBox();\n    var scratchTransform = new Matrix4();\n\n    function createBox(box, transform, result) {\n        var center = Cartesian3.fromElements(box[0], box[1], box[2], scratchCenter);\n        var halfAxes = Matrix3.fromArray(box, 3, scratchHalfAxes);\n\n        // Find the transformed center and halfAxes\n        center = Matrix4.multiplyByPoint(transform, center, center);\n        var rotationScale = Matrix4.getMatrix3(transform, scratchMatrix);\n        halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n        if (defined(result)) {\n            result.update(center, halfAxes);\n            return result;\n        }\n        return new TileOrientedBoundingBox(center, halfAxes);\n    }\n\n    function createBoxFromTransformedRegion(region, transform, initialTransform, result) {\n        var rectangle = Rectangle.unpack(region, 0, scratchRectangle);\n        var minimumHeight = region[4];\n        var maximumHeight = region[5];\n\n        var orientedBoundingBox = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, Ellipsoid.WGS84, scratchOrientedBoundingBox);\n        var center = orientedBoundingBox.center;\n        var halfAxes = orientedBoundingBox.halfAxes;\n\n        // A region bounding volume is not transformed by the transform in the tileset JSON,\n        // but may be transformed by additional transforms applied in Cesium.\n        // This is why the transform is calculated as the difference between the initial transform and the current transform.\n        transform = Matrix4.multiplyTransformation(transform, Matrix4.inverseTransformation(initialTransform, scratchTransform), scratchTransform);\n        center = Matrix4.multiplyByPoint(transform, center, center);\n        var rotationScale = Matrix4.getMatrix3(transform, scratchMatrix);\n        halfAxes = Matrix3.multiply(rotationScale, halfAxes, halfAxes);\n\n        if (defined(result) && (result instanceof TileOrientedBoundingBox)) {\n            result.update(center, halfAxes);\n            return result;\n        }\n\n        return new TileOrientedBoundingBox(center, halfAxes);\n    }\n\n    function createRegion(region, transform, initialTransform, result) {\n        if (!Matrix4.equalsEpsilon(transform, initialTransform, CesiumMath.EPSILON8)) {\n            return createBoxFromTransformedRegion(region, transform, initialTransform, result);\n        }\n\n        if (defined(result)) {\n            return result;\n        }\n\n        var rectangleRegion = Rectangle.unpack(region, 0, scratchRectangle);\n\n        return new TileBoundingRegion({\n            rectangle : rectangleRegion,\n            minimumHeight : region[4],\n            maximumHeight : region[5]\n        });\n    }\n\n    function createSphere(sphere, transform, result) {\n        var center = Cartesian3.fromElements(sphere[0], sphere[1], sphere[2], scratchCenter);\n        var radius = sphere[3];\n\n        // Find the transformed center and radius\n        center = Matrix4.multiplyByPoint(transform, center, center);\n        var scale = Matrix4.getScale(transform, scratchScale);\n        var uniformScale = Cartesian3.maximumComponent(scale);\n        radius *= uniformScale;\n\n        if (defined(result)) {\n            result.update(center, radius);\n            return result;\n        }\n        return new TileBoundingSphere(center, radius);\n    }\n\n    /**\n     * Create a bounding volume from the tile's bounding volume header.\n     *\n     * @param {Object} boundingVolumeHeader The tile's bounding volume header.\n     * @param {Matrix4} transform The transform to apply to the bounding volume.\n     * @param {TileBoundingVolume} [result] The object onto which to store the result.\n     *\n     * @returns {TileBoundingVolume} The modified result parameter or a new TileBoundingVolume instance if none was provided.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.createBoundingVolume = function(boundingVolumeHeader, transform, result) {\n        if (!defined(boundingVolumeHeader)) {\n            throw new RuntimeError('boundingVolume must be defined');\n        }\n        if (defined(boundingVolumeHeader.box)) {\n            return createBox(boundingVolumeHeader.box, transform, result);\n        }\n        if (defined(boundingVolumeHeader.region)) {\n            return createRegion(boundingVolumeHeader.region, transform, this._initialTransform, result);\n        }\n        if (defined(boundingVolumeHeader.sphere)) {\n            return createSphere(boundingVolumeHeader.sphere, transform, result);\n        }\n        throw new RuntimeError('boundingVolume must contain a sphere, region, or box');\n    };\n\n    /**\n     * Update the tile's transform. The transform is applied to the tile's bounding volumes.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.updateTransform = function(parentTransform) {\n        parentTransform = defaultValue(parentTransform, Matrix4.IDENTITY);\n        var computedTransform = Matrix4.multiply(parentTransform, this.transform, scratchTransform);\n        var transformChanged = !Matrix4.equals(computedTransform, this.computedTransform);\n\n        if (!transformChanged) {\n            return;\n        }\n\n        Matrix4.clone(computedTransform, this.computedTransform);\n\n        // Update the bounding volumes\n        var header = this._header;\n        var content = this._header.content;\n        this._boundingVolume = this.createBoundingVolume(header.boundingVolume, this.computedTransform, this._boundingVolume);\n        if (defined(this._contentBoundingVolume)) {\n            this._contentBoundingVolume = this.createBoundingVolume(content.boundingVolume, this.computedTransform, this._contentBoundingVolume);\n        }\n        if (defined(this._viewerRequestVolume)) {\n            this._viewerRequestVolume = this.createBoundingVolume(header.viewerRequestVolume, this.computedTransform, this._viewerRequestVolume);\n        }\n\n        this.updateGeometricErrorScale();\n\n        // Destroy the debug bounding volumes. They will be generated fresh.\n        this._debugBoundingVolume = this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n        this._debugContentBoundingVolume = this._debugContentBoundingVolume && this._debugContentBoundingVolume.destroy();\n        this._debugViewerRequestVolume = this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n    };\n\n    Cesium3DTile.prototype.updateGeometricErrorScale = function() {\n        var scale = Matrix4.getScale(this.computedTransform, scratchScale);\n        var uniformScale = Cartesian3.maximumComponent(scale);\n        this.geometricError = this._geometricError * uniformScale;\n    };\n\n    function applyDebugSettings(tile, tileset, frameState, passOptions) {\n        if (!passOptions.isRender) {\n            return;\n        }\n\n        var hasContentBoundingVolume = defined(tile._header.content) && defined(tile._header.content.boundingVolume);\n        var empty = tile.hasEmptyContent || tile.hasTilesetContent;\n\n        var showVolume = tileset.debugShowBoundingVolume || (tileset.debugShowContentBoundingVolume && !hasContentBoundingVolume);\n        if (showVolume) {\n            var color;\n            if (!tile._finalResolution) {\n                color = Color.YELLOW;\n            } else if (empty) {\n                color = Color.DARKGRAY;\n            } else {\n                color = Color.WHITE;\n            }\n            if (!defined(tile._debugBoundingVolume)) {\n                tile._debugBoundingVolume = tile._boundingVolume.createDebugVolume(color);\n            }\n            tile._debugBoundingVolume.update(frameState);\n            var attributes = tile._debugBoundingVolume.getGeometryInstanceAttributes('outline');\n            attributes.color = ColorGeometryInstanceAttribute.toValue(color, attributes.color);\n        } else if (!showVolume && defined(tile._debugBoundingVolume)) {\n            tile._debugBoundingVolume = tile._debugBoundingVolume.destroy();\n        }\n\n        if (tileset.debugShowContentBoundingVolume && hasContentBoundingVolume) {\n            if (!defined(tile._debugContentBoundingVolume)) {\n                tile._debugContentBoundingVolume = tile._contentBoundingVolume.createDebugVolume(Color.BLUE);\n            }\n            tile._debugContentBoundingVolume.update(frameState);\n        } else if (!tileset.debugShowContentBoundingVolume && defined(tile._debugContentBoundingVolume)) {\n            tile._debugContentBoundingVolume = tile._debugContentBoundingVolume.destroy();\n        }\n\n        if (tileset.debugShowViewerRequestVolume && defined(tile._viewerRequestVolume)) {\n            if (!defined(tile._debugViewerRequestVolume)) {\n                tile._debugViewerRequestVolume = tile._viewerRequestVolume.createDebugVolume(Color.YELLOW);\n            }\n            tile._debugViewerRequestVolume.update(frameState);\n        } else if (!tileset.debugShowViewerRequestVolume && defined(tile._debugViewerRequestVolume)) {\n            tile._debugViewerRequestVolume = tile._debugViewerRequestVolume.destroy();\n        }\n\n        var debugColorizeTilesOn = (tileset.debugColorizeTiles && !tile._debugColorizeTiles) || defined(tileset._heatmap.tilePropertyName);\n        var debugColorizeTilesOff = !tileset.debugColorizeTiles && tile._debugColorizeTiles;\n\n        if (debugColorizeTilesOn) {\n            tileset._heatmap.colorize(tile, frameState); // Skipped if tileset._heatmap.tilePropertyName is undefined\n            tile._debugColorizeTiles = true;\n            tile.color = tile._debugColor;\n        } else if (debugColorizeTilesOff) {\n            tile._debugColorizeTiles = false;\n            tile.color = Color.WHITE;\n        }\n\n        if (tile._colorDirty) {\n            tile._colorDirty = false;\n            tile._content.applyDebugSettings(true, tile._color);\n        }\n\n        if (debugColorizeTilesOff) {\n            tileset.makeStyleDirty(); // Re-apply style now that colorize is switched off\n        }\n    }\n\n    function updateContent(tile, tileset, frameState) {\n        var content = tile._content;\n        var expiredContent = tile._expiredContent;\n\n        if (defined(expiredContent)) {\n            if (!tile.contentReady) {\n                // Render the expired content while the content loads\n                expiredContent.update(tileset, frameState);\n                return;\n            }\n\n            // New content is ready, destroy expired content\n            tile._expiredContent.destroy();\n            tile._expiredContent = undefined;\n        }\n\n        content.update(tileset, frameState);\n    }\n\n    function updateClippingPlanes(tile, tileset) {\n        // Compute and compare ClippingPlanes state:\n        // - enabled-ness - are clipping planes enabled? is this tile clipped?\n        // - clipping plane count\n        // - clipping function (union v. intersection)\n        var clippingPlanes = tileset.clippingPlanes;\n        var currentClippingPlanesState = 0;\n        if (defined(clippingPlanes) && tile._isClipped && clippingPlanes.enabled) {\n            currentClippingPlanesState = clippingPlanes.clippingPlanesState;\n        }\n        // If clippingPlaneState for tile changed, mark clippingPlanesDirty so content can update\n        if (currentClippingPlanesState !== tile._clippingPlanesState) {\n            tile._clippingPlanesState = currentClippingPlanesState;\n            tile.clippingPlanesDirty = true;\n        }\n    }\n\n    /**\n     * Get the draw commands needed to render this tile.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.update = function(tileset, frameState, passOptions) {\n        var initCommandLength = frameState.commandList.length;\n        updateClippingPlanes(this, tileset);\n        applyDebugSettings(this, tileset, frameState, passOptions);\n        updateContent(this, tileset, frameState);\n        this._commandsLength = frameState.commandList.length - initCommandLength;\n\n        this.clippingPlanesDirty = false; // reset after content update\n    };\n\n    var scratchCommandList = [];\n\n    /**\n     * Processes the tile's content, e.g., create WebGL resources, to move from the PROCESSING to READY state.\n     *\n     * @param {Cesium3DTileset} tileset The tileset containing this tile.\n     * @param {FrameState} frameState The frame state.\n     *\n     * @private\n     */\n    Cesium3DTile.prototype.process = function(tileset, frameState) {\n        var savedCommandList = frameState.commandList;\n        frameState.commandList = scratchCommandList;\n\n        this._content.update(tileset, frameState);\n\n        scratchCommandList.length = 0;\n        frameState.commandList = savedCommandList;\n    };\n\n    function isolateDigits(normalizedValue, numberOfDigits, leftShift) {\n        var scaled = normalizedValue * Math.pow(10, numberOfDigits);\n        var integer = parseInt(scaled);\n        return integer * Math.pow(10, leftShift);\n    }\n\n    function priorityNormalizeAndClamp(value, minimum, maximum) {\n        return Math.max(CesiumMath.normalize(value, minimum, maximum) - CesiumMath.EPSILON7, 0.0); // Subtract epsilon since we only want decimal digits present in the output.\n    }\n\n    /**\n     * Sets the priority of the tile based on distance and depth\n     * @private\n     */\n    Cesium3DTile.prototype.updatePriority = function() {\n        var tileset = this.tileset;\n        var preferLeaves = tileset.preferLeaves;\n        var minimumPriority = tileset._minimumPriority;\n        var maximumPriority = tileset._maximumPriority;\n\n        // Combine priority systems together by mapping them into a base 10 number where each priority controls a specific set of digits in the number.\n        // For number priorities, map them to a 0.xxxxx number then left shift it up into a set number of digits before the decimal point. Chop of the fractional part then left shift again into the position it needs to go.\n        // For blending number priorities, normalize them to 0-1 and interpolate to get a combined 0-1 number, then proceed as normal.\n        // Booleans can just be 0 or 10^leftshift.\n        // Think of digits as penalties since smaller numbers are higher priority. If a tile has some large quantity or has a flag raised it's (usually) penalized for it, expressed as a higher number for the digit.\n        // Priority number format: preloadFlightDigits(1) | foveatedDeferDigits(1) | foveatedDigits(4) | preloadProgressiveResolutionDigits(1) | preferredSortingDigits(4) . depthDigits(the decimal digits)\n        // Certain flags like preferLeaves will flip / turn off certain digits to get desired load order.\n\n        // Setup leftShifts, digit counts, and scales (for booleans)\n        var digitsForANumber = 4;\n        var digitsForABoolean = 1;\n\n        var preferredSortingLeftShift = 0;\n        var preferredSortingDigitsCount = digitsForANumber;\n\n        var foveatedLeftShift = preferredSortingLeftShift + preferredSortingDigitsCount;\n        var foveatedDigitsCount = digitsForANumber;\n\n        var preloadProgressiveResolutionLeftShift = foveatedLeftShift + foveatedDigitsCount;\n        var preloadProgressiveResolutionDigitsCount = digitsForABoolean;\n        var preloadProgressiveResolutionScale = Math.pow(10, preloadProgressiveResolutionLeftShift);\n\n        var foveatedDeferLeftShift = preloadProgressiveResolutionLeftShift + preloadProgressiveResolutionDigitsCount;\n        var foveatedDeferDigitsCount = digitsForABoolean;\n        var foveatedDeferScale = Math.pow(10, foveatedDeferLeftShift);\n\n        var preloadFlightLeftShift = foveatedDeferLeftShift + foveatedDeferDigitsCount;\n        var preloadFlightScale = Math.pow(10, preloadFlightLeftShift);\n\n        // Compute the digits for each priority\n        var depthDigits = priorityNormalizeAndClamp(this._depth, minimumPriority.depth, maximumPriority.depth);\n        depthDigits = preferLeaves ? 1.0 - depthDigits : depthDigits;\n\n        // Map 0-1 then convert to digit. Include a distance sort when doing non-skipLOD and replacement refinement, helps things like non-skipLOD photogrammetry\n        var useDistance = !tileset._skipLevelOfDetail && this.refine === Cesium3DTileRefine.REPLACE;\n        var normalizedPreferredSorting = useDistance ? priorityNormalizeAndClamp(this._priorityHolder._distanceToCamera, minimumPriority.distance, maximumPriority.distance) :\n                                                       priorityNormalizeAndClamp(this._priorityReverseScreenSpaceError, minimumPriority.reverseScreenSpaceError, maximumPriority.reverseScreenSpaceError);\n        var preferredSortingDigits = isolateDigits(normalizedPreferredSorting, preferredSortingDigitsCount, preferredSortingLeftShift);\n\n        var preloadProgressiveResolutionDigits = this._priorityProgressiveResolution ? 0 : preloadProgressiveResolutionScale;\n\n        var normalizedFoveatedFactor = priorityNormalizeAndClamp(this._priorityHolder._foveatedFactor, minimumPriority.foveatedFactor, maximumPriority.foveatedFactor);\n        var foveatedDigits = isolateDigits(normalizedFoveatedFactor, foveatedDigitsCount, foveatedLeftShift);\n\n        var foveatedDeferDigits = this.priorityDeferred ? foveatedDeferScale : 0;\n\n        var preloadFlightDigits = tileset._pass === Cesium3DTilePass.PRELOAD_FLIGHT ? 0 : preloadFlightScale;\n\n        // Get the final base 10 number\n        this._priority = depthDigits + preferredSortingDigits + preloadProgressiveResolutionDigits + foveatedDigits + foveatedDeferDigits + preloadFlightDigits;\n    };\n\n    /**\n     * @private\n     */\n    Cesium3DTile.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * @private\n     */\n    Cesium3DTile.prototype.destroy = function() {\n        // For the interval between new content being requested and downloaded, expiredContent === content, so don't destroy twice\n        this._content = this._content && this._content.destroy();\n        this._expiredContent = this._expiredContent && !this._expiredContent.isDestroyed() && this._expiredContent.destroy();\n        this._debugBoundingVolume = this._debugBoundingVolume && this._debugBoundingVolume.destroy();\n        this._debugContentBoundingVolume = this._debugContentBoundingVolume && this._debugContentBoundingVolume.destroy();\n        this._debugViewerRequestVolume = this._debugViewerRequestVolume && this._debugViewerRequestVolume.destroy();\n        return destroyObject(this);\n    };\nexport default Cesium3DTile;\n","import Cartesian3 from '../Core/Cartesian3.js';\nimport Check from '../Core/Check.js';\nimport Cesium3DTileOptimizationHint from './Cesium3DTileOptimizationHint.js';\nimport TileBoundingRegion from './TileBoundingRegion.js';\nimport TileOrientedBoundingBox from './TileOrientedBoundingBox.js';\n\n    /**\n     * Utility functions for computing optimization hints for a {@link Cesium3DTileset}.\n     *\n     * @exports Cesium3DTileOptimizations\n     *\n     * @private\n     */\n    var Cesium3DTileOptimizations = {};\n\n    var scratchAxis = new Cartesian3();\n\n    /**\n     * Evaluates support for the childrenWithinParent optimization. This is used to more tightly cull tilesets if\n     * children bounds are fully contained within the parent. Currently, support for the optimization only works for\n     * oriented bounding boxes, so both the child and parent tile must be either a {@link TileOrientedBoundingBox} or\n     * {@link TileBoundingRegion}. The purpose of this check is to prevent use of a culling optimization when the child\n     * bounds exceed those of the parent. If the child bounds are greater, it is more likely that the optimization will\n     * waste CPU cycles. Bounding spheres are not supported for the reason that the child bounds can very often be\n     * partially outside of the parent bounds.\n     *\n     * @param {Cesium3DTile} tile The tile to check.\n     * @returns {Boolean} Whether the childrenWithinParent optimization is supported.\n     */\n    Cesium3DTileOptimizations.checkChildrenWithinParent = function(tile) {\n        \n\n        var children = tile.children;\n        var length = children.length;\n\n        // Check if the parent has an oriented bounding box.\n        var boundingVolume = tile.boundingVolume;\n        if (boundingVolume instanceof TileOrientedBoundingBox || boundingVolume instanceof TileBoundingRegion) {\n            var orientedBoundingBox = boundingVolume._orientedBoundingBox;\n            tile._optimChildrenWithinParent = Cesium3DTileOptimizationHint.USE_OPTIMIZATION;\n            for (var i = 0; i < length; ++i) {\n                var child = children[i];\n\n                // Check if the child has an oriented bounding box.\n                var childBoundingVolume = child.boundingVolume;\n                if (!(childBoundingVolume instanceof TileOrientedBoundingBox || childBoundingVolume instanceof TileBoundingRegion)) {\n                    // Do not support if the parent and child both do not have oriented bounding boxes.\n                    tile._optimChildrenWithinParent = Cesium3DTileOptimizationHint.SKIP_OPTIMIZATION;\n                    break;\n                }\n\n                var childOrientedBoundingBox = childBoundingVolume._orientedBoundingBox;\n\n                // Compute the axis from the parent to the child.\n                var axis = Cartesian3.subtract(childOrientedBoundingBox.center, orientedBoundingBox.center, scratchAxis);\n                var axisLength = Cartesian3.magnitude(axis);\n                Cartesian3.divideByScalar(axis, axisLength, axis);\n\n                // Project the bounding box of the parent onto the axis. Because the axis is a ray from the parent\n                // to the child, the projection parameterized along the ray will be (+/- proj1).\n                var proj1 = Math.abs(orientedBoundingBox.halfAxes[0] * axis.x) +\n                            Math.abs(orientedBoundingBox.halfAxes[1] * axis.y) +\n                            Math.abs(orientedBoundingBox.halfAxes[2] * axis.z) +\n                            Math.abs(orientedBoundingBox.halfAxes[3] * axis.x) +\n                            Math.abs(orientedBoundingBox.halfAxes[4] * axis.y) +\n                            Math.abs(orientedBoundingBox.halfAxes[5] * axis.z) +\n                            Math.abs(orientedBoundingBox.halfAxes[6] * axis.x) +\n                            Math.abs(orientedBoundingBox.halfAxes[7] * axis.y) +\n                            Math.abs(orientedBoundingBox.halfAxes[8] * axis.z);\n\n                // Project the bounding box of the child onto the axis. Because the axis is a ray from the parent\n                // to the child, the projection parameterized along the ray will be (+/- proj2) + axis.length.\n                var proj2 = Math.abs(childOrientedBoundingBox.halfAxes[0] * axis.x) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[1] * axis.y) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[2] * axis.z) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[3] * axis.x) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[4] * axis.y) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[5] * axis.z) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[6] * axis.x) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[7] * axis.y) +\n                            Math.abs(childOrientedBoundingBox.halfAxes[8] * axis.z);\n\n                // If the child extends the parent's bounds, the optimization is not valid and we skip it.\n                if (proj1 <= proj2 + axisLength) {\n                    tile._optimChildrenWithinParent = Cesium3DTileOptimizationHint.SKIP_OPTIMIZATION;\n                    break;\n                }\n            }\n        }\n\n        return tile._optimChildrenWithinParent === Cesium3DTileOptimizationHint.USE_OPTIMIZATION;\n    };\nexport default Cesium3DTileOptimizations;\n","import defined from './defined.js';\n\n    /**\n     * @private\n     */\n    function DoublyLinkedList() {\n        this.head = undefined;\n        this.tail = undefined;\n        this._length = 0;\n    }\n\n    Object.defineProperties(DoublyLinkedList.prototype, {\n        length : {\n            get : function() {\n                return this._length;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    function DoublyLinkedListNode(item, previous, next) {\n        this.item = item;\n        this.previous  = previous;\n        this.next = next;\n    }\n\n    /**\n     * Adds the item to the end of the list\n     * @param {*} [item]\n     * @return {DoublyLinkedListNode}\n     */\n    DoublyLinkedList.prototype.add = function(item) {\n        var node = new DoublyLinkedListNode(item, this.tail, undefined);\n\n        if (defined(this.tail)) {\n            this.tail.next = node;\n            this.tail = node;\n        } else {\n            this.head = node;\n            this.tail = node;\n        }\n\n        ++this._length;\n\n        return node;\n    };\n\n    function remove(list, node) {\n        if (defined(node.previous) && defined(node.next)) {\n            node.previous.next = node.next;\n            node.next.previous = node.previous;\n        } else if (defined(node.previous)) {\n            // Remove last node\n            node.previous.next = undefined;\n            list.tail = node.previous;\n        } else if (defined(node.next)) {\n            // Remove first node\n            node.next.previous = undefined;\n            list.head = node.next;\n        } else {\n            // Remove last node in the linked list\n            list.head = undefined;\n            list.tail = undefined;\n        }\n\n        node.next = undefined;\n        node.previous = undefined;\n    }\n\n    /**\n     * Removes the given node from the list\n     * @param {DoublyLinkedListNode} node\n     */\n    DoublyLinkedList.prototype.remove = function(node) {\n        if (!defined(node)) {\n            return;\n        }\n\n        remove(this, node);\n\n        --this._length;\n    };\n\n    /**\n     * Moves nextNode after node\n     * @param {DoublyLinkedListNode} node\n     * @param {DoublyLinkedListNode} nextNode\n     */\n    DoublyLinkedList.prototype.splice = function(node, nextNode) {\n        if (node === nextNode) {\n            return;\n        }\n\n        // Remove nextNode, then insert after node\n        remove(this, nextNode);\n\n        var oldNodeNext = node.next;\n        node.next = nextNode;\n\n        // nextNode is the new tail\n        if (this.tail === node) {\n            this.tail = nextNode;\n        } else {\n            oldNodeNext.previous = nextNode;\n        }\n\n        nextNode.next = oldNodeNext;\n        nextNode.previous = node;\n    };\nexport default DoublyLinkedList;\n","import defined from '../Core/defined.js';\nimport DoublyLinkedList from '../Core/DoublyLinkedList.js';\n\n    /**\n     * Stores tiles with content loaded.\n     *\n     * @private\n     */\n    function Cesium3DTilesetCache() {\n        // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n        // (sentinel, tail] -> tiles that were selected this frame\n        this._list = new DoublyLinkedList();\n        this._sentinel = this._list.add();\n        this._trimTiles = false;\n    }\n\n    Cesium3DTilesetCache.prototype.reset = function() {\n        // Move sentinel node to the tail so, at the start of the frame, all tiles\n        // may be potentially replaced.  Tiles are moved to the right of the sentinel\n        // when they are selected so they will not be replaced.\n        this._list.splice(this._list.tail, this._sentinel);\n    };\n\n    Cesium3DTilesetCache.prototype.touch = function(tile) {\n        var node = tile.cacheNode;\n        if (defined(node)) {\n            this._list.splice(this._sentinel, node);\n        }\n    };\n\n    Cesium3DTilesetCache.prototype.add = function(tile) {\n        if (!defined(tile.cacheNode)) {\n            tile.cacheNode = this._list.add(tile);\n        }\n    };\n\n    Cesium3DTilesetCache.prototype.unloadTile = function(tileset, tile, unloadCallback) {\n        var node = tile.cacheNode;\n        if (!defined(node)) {\n            return;\n        }\n\n        this._list.remove(node);\n        tile.cacheNode = undefined;\n        unloadCallback(tileset, tile);\n    };\n\n    Cesium3DTilesetCache.prototype.unloadTiles = function(tileset, unloadCallback) {\n        var trimTiles = this._trimTiles;\n        this._trimTiles = false;\n\n        var list = this._list;\n\n        var maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n        // Traverse the list only to the sentinel since tiles/nodes to the\n        // right of the sentinel were used this frame.\n        //\n        // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n        var sentinel = this._sentinel;\n        var node = list.head;\n        while ((node !== sentinel) && ((tileset.totalMemoryUsageInBytes > maximumMemoryUsageInBytes) || trimTiles)) {\n            var tile = node.item;\n            node = node.next;\n            this.unloadTile(tileset, tile, unloadCallback);\n        }\n    };\n\n    Cesium3DTilesetCache.prototype.trim = function() {\n        this._trimTiles = true;\n    };\nexport default Cesium3DTilesetCache;\n","import Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport CesiumMath from '../Core/Math.js';\n\n    /**\n     * A heatmap colorizer in a {@link Cesium3DTileset}. A tileset can colorize its visible tiles in a heatmap style.\n     *\n     * @alias Cesium3DTilesetHeatmap\n     * @constructor\n     * @private\n     */\n    function Cesium3DTilesetHeatmap(tilePropertyName) {\n        /**\n         * The tile variable to track for heatmap colorization.\n         * Tile's will be colorized relative to the other visible tile's values for this variable.\n         *\n         * @type {String}\n         */\n        this.tilePropertyName = tilePropertyName;\n\n        // Members that are updated every time a tile is colorized\n        this._minimum = Number.MAX_VALUE;\n        this._maximum = -Number.MAX_VALUE;\n\n        // Members that are updated once every frame\n        this._previousMinimum = Number.MAX_VALUE;\n        this._previousMaximum = -Number.MAX_VALUE;\n\n        // If defined uses a reference minimum maximum to colorize by instead of using last frames minimum maximum of rendered tiles.\n        // For example, the _loadTimestamp can get a better colorization using setReferenceMinimumMaximum in order to take accurate colored timing diffs of various scenes.\n        this._referenceMinimum = {};\n        this._referenceMaximum = {};\n    }\n\n    /**\n     * Convert to a usable heatmap value (i.e. a number). Ensures that tile values that aren't stored as numbers can be used for colorization.\n     */\n     function getHeatmapValue(tileValue, tilePropertyName) {\n        var value;\n        if (tilePropertyName === '_loadTimestamp') {\n            value = JulianDate.toDate(tileValue).getTime();\n        } else {\n            value = tileValue;\n        }\n        return value;\n    }\n\n    /**\n     * Sets the reference minimum and maximum for the variable name. Converted to numbers before they are stored.\n     *\n     * @param {Object} minimum The minimum reference value.\n     * @param {Object} maximum The maximum reference value.\n     * @param {String} tilePropertyName The tile variable that will use these reference values when it is colorized.\n     */\n    Cesium3DTilesetHeatmap.prototype.setReferenceMinimumMaximum = function(minimum, maximum, tilePropertyName) {\n        this._referenceMinimum[tilePropertyName] = getHeatmapValue(minimum, tilePropertyName);\n        this._referenceMaximum[tilePropertyName] = getHeatmapValue(maximum, tilePropertyName);\n    };\n\n    function getHeatmapValueAndUpdateMinimumMaximum(heatmap, tile) {\n        var tilePropertyName = heatmap.tilePropertyName;\n        if (defined(tilePropertyName)) {\n            var heatmapValue = getHeatmapValue(tile[tilePropertyName], tilePropertyName);\n            if (!defined(heatmapValue)) {\n                heatmap.tilePropertyName = undefined;\n                return heatmapValue;\n            }\n            heatmap._maximum = Math.max(heatmapValue, heatmap._maximum);\n            heatmap._minimum = Math.min(heatmapValue, heatmap._minimum);\n            return heatmapValue;\n        }\n    }\n\n    var heatmapColors = [new Color(0.100, 0.100, 0.100, 1),  // Dark Gray\n                         new Color(0.153, 0.278, 0.878, 1),  // Blue\n                         new Color(0.827, 0.231, 0.490, 1),  // Pink\n                         new Color(0.827, 0.188, 0.220, 1),  // Red\n                         new Color(1.000, 0.592, 0.259, 1),  // Orange\n                         new Color(1.000, 0.843, 0.000, 1)]; // Yellow\n    /**\n     * Colorize the tile in heat map style based on where it lies within the minimum maximum window.\n     * Heatmap colors are black, blue, pink, red, orange, yellow. 'Cold' or low numbers will be black and blue, 'Hot' or high numbers will be orange and yellow,\n     * @param {Cesium3DTile} tile The tile to colorize relative to last frame's minimum and maximum values of all visible tiles.\n     * @param {FrameState} frameState The frame state.\n     */\n    Cesium3DTilesetHeatmap.prototype.colorize = function (tile, frameState) {\n        var tilePropertyName = this.tilePropertyName;\n        if (!defined(tilePropertyName) || !tile.contentAvailable || tile._selectedFrame !== frameState.frameNumber) {\n            return;\n        }\n\n        var heatmapValue = getHeatmapValueAndUpdateMinimumMaximum(this, tile);\n        var minimum = this._previousMinimum;\n        var maximum = this._previousMaximum;\n\n        if (minimum === Number.MAX_VALUE || maximum === -Number.MAX_VALUE) {\n            return;\n        }\n\n        // Shift the minimum maximum window down to 0\n        var shiftedMax = (maximum - minimum) + CesiumMath.EPSILON7; // Prevent divide by 0\n        var shiftedValue = CesiumMath.clamp(heatmapValue - minimum, 0.0, shiftedMax);\n\n        // Get position between minimum and maximum and convert that to a position in the color array\n        var zeroToOne = shiftedValue / shiftedMax;\n        var lastIndex = heatmapColors.length - 1.0;\n        var colorPosition = zeroToOne * lastIndex;\n\n        // Take floor and ceil of the value to get the two colors to lerp between, lerp using the fractional portion\n        var colorPositionFloor = Math.floor(colorPosition);\n        var colorPositionCeil = Math.ceil(colorPosition);\n        var t = colorPosition - colorPositionFloor;\n        var colorZero = heatmapColors[colorPositionFloor];\n        var colorOne = heatmapColors[colorPositionCeil];\n\n        // Perform the lerp\n        var finalColor = Color.clone(Color.WHITE);\n        finalColor.red = CesiumMath.lerp(colorZero.red, colorOne.red, t);\n        finalColor.green = CesiumMath.lerp(colorZero.green, colorOne.green, t);\n        finalColor.blue = CesiumMath.lerp(colorZero.blue, colorOne.blue, t);\n        tile._debugColor = finalColor;\n    };\n\n    /**\n     * Resets the tracked minimum maximum values for heatmap colorization. Happens right before tileset traversal.\n     */\n    Cesium3DTilesetHeatmap.prototype.resetMinimumMaximum = function() {\n        // For heat map colorization\n        var tilePropertyName = this.tilePropertyName;\n        if (defined(tilePropertyName)) {\n            var referenceMinimum = this._referenceMinimum[tilePropertyName];\n            var referenceMaximum = this._referenceMaximum[tilePropertyName];\n            var useReference = defined(referenceMinimum) && defined(referenceMaximum);\n            this._previousMinimum = useReference ? referenceMinimum : this._minimum;\n            this._previousMaximum = useReference ? referenceMaximum : this._maximum;\n            this._minimum = Number.MAX_VALUE;\n            this._maximum = -Number.MAX_VALUE;\n        }\n    };\nexport default Cesium3DTilesetHeatmap;\n","import defined from '../Core/defined.js';\n\n    /**\n     * @private\n     */\n    function Cesium3DTilesetStatistics() {\n        // Rendering statistics\n        this.selected = 0;\n        this.visited = 0;\n        // Loading statistics\n        this.numberOfCommands = 0;\n        this.numberOfAttemptedRequests = 0;\n        this.numberOfPendingRequests = 0;\n        this.numberOfTilesProcessing = 0;\n        this.numberOfTilesWithContentReady = 0; // Number of tiles with content loaded, does not include empty tiles\n        this.numberOfTilesTotal = 0; // Number of tiles in tileset JSON (and other tileset JSON files as they are loaded)\n        this.numberOfLoadedTilesTotal = 0; // Running total of loaded tiles for the lifetime of the session\n        // Features statistics\n        this.numberOfFeaturesSelected = 0; // Number of features rendered\n        this.numberOfFeaturesLoaded = 0; // Number of features in memory\n        this.numberOfPointsSelected = 0;\n        this.numberOfPointsLoaded = 0;\n        this.numberOfTrianglesSelected = 0;\n        // Styling statistics\n        this.numberOfTilesStyled = 0;\n        this.numberOfFeaturesStyled = 0;\n        // Optimization statistics\n        this.numberOfTilesCulledWithChildrenUnion = 0;\n        // Memory statistics\n        this.geometryByteLength = 0;\n        this.texturesByteLength = 0;\n        this.batchTableByteLength = 0;\n    }\n\n    Cesium3DTilesetStatistics.prototype.clear = function() {\n        this.selected = 0;\n        this.visited = 0;\n        this.numberOfCommands = 0;\n        this.numberOfAttemptedRequests = 0;\n        this.numberOfFeaturesSelected = 0;\n        this.numberOfPointsSelected = 0;\n        this.numberOfTrianglesSelected = 0;\n        this.numberOfTilesStyled = 0;\n        this.numberOfFeaturesStyled = 0;\n        this.numberOfTilesCulledWithChildrenUnion = 0;\n    };\n\n    function updatePointAndFeatureCounts(statistics, content, decrement, load) {\n        var contents = content.innerContents;\n        var pointsLength = content.pointsLength;\n        var trianglesLength = content.trianglesLength;\n        var featuresLength = content.featuresLength;\n        var geometryByteLength = content.geometryByteLength;\n        var texturesByteLength = content.texturesByteLength;\n        var batchTableByteLength = content.batchTableByteLength;\n\n        if (load) {\n            statistics.numberOfFeaturesLoaded += decrement ? -featuresLength : featuresLength;\n            statistics.numberOfPointsLoaded += decrement ? -pointsLength : pointsLength;\n            statistics.geometryByteLength += decrement ? -geometryByteLength : geometryByteLength;\n            statistics.texturesByteLength += decrement ? -texturesByteLength : texturesByteLength;\n            statistics.batchTableByteLength += decrement ? -batchTableByteLength : batchTableByteLength;\n        } else {\n            statistics.numberOfFeaturesSelected += decrement ? -featuresLength : featuresLength;\n            statistics.numberOfPointsSelected += decrement ? -pointsLength : pointsLength;\n            statistics.numberOfTrianglesSelected += decrement ? -trianglesLength : trianglesLength;\n        }\n\n        if (defined(contents)) {\n            var length = contents.length;\n            for (var i = 0; i < length; ++i) {\n                updatePointAndFeatureCounts(statistics, contents[i], decrement, load);\n            }\n        }\n    }\n\n    Cesium3DTilesetStatistics.prototype.incrementSelectionCounts = function(content) {\n        updatePointAndFeatureCounts(this, content, false, false);\n    };\n\n    Cesium3DTilesetStatistics.prototype.incrementLoadCounts = function(content) {\n        updatePointAndFeatureCounts(this, content, false, true);\n    };\n\n    Cesium3DTilesetStatistics.prototype.decrementLoadCounts = function(content) {\n        updatePointAndFeatureCounts(this, content, true, true);\n    };\n\n    Cesium3DTilesetStatistics.clone = function(statistics, result) {\n        result.selected = statistics.selected;\n        result.visited = statistics.visited;\n        result.numberOfCommands = statistics.numberOfCommands;\n        result.selected = statistics.selected;\n        result.numberOfAttemptedRequests = statistics.numberOfAttemptedRequests;\n        result.numberOfPendingRequests = statistics.numberOfPendingRequests;\n        result.numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n        result.numberOfTilesWithContentReady = statistics.numberOfTilesWithContentReady;\n        result.numberOfTilesTotal = statistics.numberOfTilesTotal;\n        result.numberOfFeaturesSelected = statistics.numberOfFeaturesSelected;\n        result.numberOfFeaturesLoaded = statistics.numberOfFeaturesLoaded;\n        result.numberOfPointsSelected = statistics.numberOfPointsSelected;\n        result.numberOfPointsLoaded = statistics.numberOfPointsLoaded;\n        result.numberOfTrianglesSelected = statistics.numberOfTrianglesSelected;\n        result.numberOfTilesStyled = statistics.numberOfTilesStyled;\n        result.numberOfFeaturesStyled = statistics.numberOfFeaturesStyled;\n        result.numberOfTilesCulledWithChildrenUnion = statistics.numberOfTilesCulledWithChildrenUnion;\n        result.geometryByteLength = statistics.geometryByteLength;\n        result.texturesByteLength = statistics.texturesByteLength;\n        result.batchTableByteLength = statistics.batchTableByteLength;\n    };\nexport default Cesium3DTilesetStatistics;\n","import defined from '../Core/defined.js';\n\n    /**\n     * @private\n     */\n    function Cesium3DTileStyleEngine() {\n        this._style = undefined;      // The style provided by the user\n        this._styleDirty = false;     // true when the style is reassigned\n        this._lastStyleTime = 0;      // The \"time\" when the last style was assigned\n    }\n\n    Object.defineProperties(Cesium3DTileStyleEngine.prototype, {\n        style : {\n            get : function() {\n                return this._style;\n            },\n            set : function(value) {\n                this._style = value;\n                this._styleDirty = true;\n            }\n        }\n    });\n\n    Cesium3DTileStyleEngine.prototype.makeDirty = function() {\n        this._styleDirty = true;\n    };\n\n    Cesium3DTileStyleEngine.prototype.applyStyle = function(tileset, passOptions) {\n        if (!tileset.ready) {\n            return;\n        }\n\n        if (defined(this._style) && !this._style.ready) {\n            return;\n        }\n\n        var styleDirty = this._styleDirty;\n\n        if (passOptions.isRender) {\n            // Don't reset until the render pass\n            this._styleDirty = false;\n        }\n\n        if (styleDirty) {\n            // Increase \"time\", so the style is applied to all visible tiles\n            ++this._lastStyleTime;\n        }\n\n        var lastStyleTime = this._lastStyleTime;\n        var statistics = tileset._statistics;\n\n        // If a new style was assigned, loop through all the visible tiles; otherwise, loop through\n        // only the tiles that are newly visible, i.e., they are visible this frame, but were not\n        // visible last frame.  In many cases, the newly selected tiles list will be short or empty.\n        var tiles = styleDirty ? tileset._selectedTiles : tileset._selectedTilesToStyle;\n        // PERFORMANCE_IDEA: does mouse-over picking basically trash this?  We need to style on\n        // pick, for example, because a feature's show may be false.\n\n        var length = tiles.length;\n        for (var i = 0; i < length; ++i) {\n            var tile = tiles[i];\n            if (tile.lastStyleTime !== lastStyleTime) {\n                // Apply the style to this tile if it wasn't already applied because:\n                //   1) the user assigned a new style to the tileset\n                //   2) this tile is now visible, but it wasn't visible when the style was first assigned\n                var content = tile.content;\n                tile.lastStyleTime = lastStyleTime;\n                content.applyStyle(this._style);\n                statistics.numberOfFeaturesStyled += content.featuresLength;\n                ++statistics.numberOfTilesStyled;\n            }\n        }\n    };\nexport default Cesium3DTileStyleEngine;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport Cartesian2 from '../Core/Cartesian2.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Cartographic from '../Core/Cartographic.js';\nimport Check from '../Core/Check.js';\nimport Credit from '../Core/Credit.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport deprecationWarning from '../Core/deprecationWarning.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Ellipsoid from '../Core/Ellipsoid.js';\nimport Event from '../Core/Event.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport ManagedArray from '../Core/ManagedArray.js';\nimport CesiumMath from '../Core/Math.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Resource from '../Core/Resource.js';\nimport RuntimeError from '../Core/RuntimeError.js';\nimport Transforms from '../Core/Transforms.js';\nimport ClearCommand from '../Renderer/ClearCommand.js';\nimport Pass from '../Renderer/Pass.js';\nimport RenderState from '../Renderer/RenderState.js';\nimport when from '../ThirdParty/when.js';\nimport Axis from './Axis.js';\nimport Cesium3DTile from './Cesium3DTile.js';\nimport Cesium3DTileColorBlendMode from './Cesium3DTileColorBlendMode.js';\nimport Cesium3DTileContentState from './Cesium3DTileContentState.js';\nimport Cesium3DTileOptimizations from './Cesium3DTileOptimizations.js';\nimport Cesium3DTilePass from './Cesium3DTilePass.js';\nimport Cesium3DTileRefine from './Cesium3DTileRefine.js';\nimport Cesium3DTilesetCache from './Cesium3DTilesetCache.js';\nimport Cesium3DTilesetHeatmap from './Cesium3DTilesetHeatmap.js';\nimport Cesium3DTilesetStatistics from './Cesium3DTilesetStatistics.js';\nimport Cesium3DTileStyleEngine from './Cesium3DTileStyleEngine.js';\nimport ClippingPlaneCollection from './ClippingPlaneCollection.js';\nimport LabelCollection from './LabelCollection.js';\nimport PointCloudEyeDomeLighting from './PointCloudEyeDomeLighting.js';\nimport PointCloudShading from './PointCloudShading.js';\nimport SceneMode from './SceneMode.js';\nimport ShadowMode from './ShadowMode.js';\nimport StencilConstants from './StencilConstants.js';\nimport TileBoundingRegion from './TileBoundingRegion.js';\nimport TileBoundingSphere from './TileBoundingSphere.js';\nimport TileOrientedBoundingBox from './TileOrientedBoundingBox.js';\n\n    /**\n     * A {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles tileset},\n     * used for streaming massive heterogeneous 3D geospatial datasets.\n     *\n     * @alias Cesium3DTileset\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Resource|String|Promise<Resource>|Promise<String>} options.url The url to a tileset JSON file.\n     * @param {Boolean} [options.show=true] Determines if the tileset will be shown.\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] A 4x4 transformation matrix that transforms the tileset's root tile.\n     * @param {ShadowMode} [options.shadows=ShadowMode.ENABLED] Determines whether the tileset casts or receives shadows from light sources.\n     * @param {Number} [options.maximumScreenSpaceError=16] The maximum screen space error used to drive level of detail refinement.\n     * @param {Number} [options.maximumMemoryUsage=512] The maximum amount of memory in MB that can be used by the tileset.\n     * @param {Boolean} [options.cullWithChildrenBounds=true] Optimization option. Whether to cull tiles using the union of their children bounding volumes.\n     * @param {Boolean} [options.cullRequestsWhileMoving=true] Optimization option. Don't request tiles that will likely be unused when they come back because of the camera's movement. This optimization only applies to stationary tilesets.\n     * @param {Number} [options.cullRequestsWhileMovingMultiplier=60.0] Optimization option. Multiplier used in culling requests while moving. Larger is more aggressive culling, smaller less aggressive culling.\n     * @param {Boolean} [options.preloadWhenHidden=false] Preload tiles when <code>tileset.show</code> is <code>false</code>. Loads tiles as if the tileset is visible but does not render them.\n     * @param {Boolean} [options.preloadFlightDestinations=true] Optimization option. Preload tiles at the camera's flight destination while the camera is in flight.\n     * @param {Boolean} [options.preferLeaves=false] Optimization option. Prefer loading of leaves first.\n     * @param {Boolean} [options.dynamicScreenSpaceError=false] Optimization option. Reduce the screen space error for tiles that are further away from the camera.\n     * @param {Number} [options.dynamicScreenSpaceErrorDensity=0.00278] Density used to adjust the dynamic screen space error, similar to fog density.\n     * @param {Number} [options.dynamicScreenSpaceErrorFactor=4.0] A factor used to increase the computed dynamic screen space error.\n     * @param {Number} [options.dynamicScreenSpaceErrorHeightFalloff=0.25] A ratio of the tileset's height at which the density starts to falloff.\n     * @param {Number} [options.progressiveResolutionHeightFraction=0.3] Optimization option. If between (0.0, 0.5], tiles at or above the screen space error for the reduced screen resolution of <code>progressiveResolutionHeightFraction*screenHeight</code> will be prioritized first. This can help get a quick layer of tiles down while full resolution tiles continue to load.\n     * @param {Boolean} [options.foveatedScreenSpaceError=true] Optimization option. Prioritize loading tiles in the center of the screen by temporarily raising the screen space error for tiles around the edge of the screen. Screen space error returns to normal once all the tiles in the center of the screen as determined by the {@link Cesium3DTileset#foveatedConeSize} are loaded.\n     * @param {Number} [options.foveatedConeSize=0.1] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the cone size that determines which tiles are deferred. Tiles that are inside this cone are loaded immediately. Tiles outside the cone are potentially deferred based on how far outside the cone they are and their screen space error. This is controlled by {@link Cesium3DTileset#foveatedInterpolationCallback} and {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation}. Setting this to 0.0 means the cone will be the line formed by the camera position and its view direction. Setting this to 1.0 means the cone encompasses the entire field of view of the camera, disabling the effect.\n     * @param {Number} [options.foveatedMinimumScreenSpaceErrorRelaxation=0.0] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the starting screen space error relaxation for tiles outside the foveated cone. The screen space error will be raised starting with tileset value up to {@link Cesium3DTileset#maximumScreenSpaceError} based on the provided {@link Cesium3DTileset#foveatedInterpolationCallback}.\n     * @param {Cesium3DTileset~foveatedInterpolationCallback} [options.foveatedInterpolationCallback=Math.lerp] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how much to raise the screen space error for tiles outside the foveated cone, interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}\n     * @param {Number} [options.foveatedTimeDelay=0.2] Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how long in seconds to wait after the camera stops moving before deferred tiles start loading in. This time delay prevents requesting tiles around the edges of the screen when the camera is moving. Setting this to 0.0 will immediately request all tiles in any given view.\n     * @param {Boolean} [options.skipLevelOfDetail=false] Optimization option. Determines if level of detail skipping should be applied during the traversal.\n     * @param {Number} [options.baseScreenSpaceError=1024] When <code>skipLevelOfDetail</code> is <code>true</code>, the screen space error that must be reached before skipping levels of detail.\n     * @param {Number} [options.skipScreenSpaceErrorFactor=16] When <code>skipLevelOfDetail</code> is <code>true</code>, a multiplier defining the minimum screen space error to skip. Used in conjunction with <code>skipLevels</code> to determine which tiles to load.\n     * @param {Number} [options.skipLevels=1] When <code>skipLevelOfDetail</code> is <code>true</code>, a constant defining the minimum number of levels to skip when loading tiles. When it is 0, no levels are skipped. Used in conjunction with <code>skipScreenSpaceErrorFactor</code> to determine which tiles to load.\n     * @param {Boolean} [options.immediatelyLoadDesiredLevelOfDetail=false] When <code>skipLevelOfDetail</code> is <code>true</code>, only tiles that meet the maximum screen space error will ever be downloaded. Skipping factors are ignored and just the desired tiles are loaded.\n     * @param {Boolean} [options.loadSiblings=false] When <code>skipLevelOfDetail</code> is <code>true</code>, determines whether siblings of visible tiles are always downloaded during traversal.\n     * @param {ClippingPlaneCollection} [options.clippingPlanes] The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n     * @param {ClassificationType} [options.classificationType] Determines whether terrain, 3D Tiles or both will be classified by this tileset. See {@link Cesium3DTileset#classificationType} for details about restrictions and limitations.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid determining the size and shape of the globe.\n     * @param {Object} [options.pointCloudShading] Options for constructing a {@link PointCloudShading} object to control point attenuation based on geometric error and lighting.\n     * @param {Cartesian2} [options.imageBasedLightingFactor=new Cartesian2(1.0, 1.0)] Scales the diffuse and specular image-based lighting from the earth, sky, atmosphere and star skybox.\n     * @param {Cartesian3} [options.lightColor] The light color when shading models. When <code>undefined</code> the scene's light color is used instead.\n     * @param {Number} [options.luminanceAtZenith=0.2] The sun's luminance at the zenith in kilo candela per meter squared to use for this model's procedural environment map.\n     * @param {Cartesian3[]} [options.sphericalHarmonicCoefficients] The third order spherical harmonic coefficients used for the diffuse color of image-based lighting.\n     * @param {String} [options.specularEnvironmentMaps] A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n     * @param {String} [options.debugHeatmapTilePropertyName] The tile variable to colorize as a heatmap. All rendered tiles will be colorized relative to each other's specified variable value.\n     * @param {Boolean} [options.debugFreezeFrame=false] For debugging only. Determines if only the tiles from last frame should be used for rendering.\n     * @param {Boolean} [options.debugColorizeTiles=false] For debugging only. When true, assigns a random color to each tile.\n     * @param {Boolean} [options.debugWireframe=false] For debugging only. When true, render's each tile's content as a wireframe.\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. When true, renders the bounding volume for each tile.\n     * @param {Boolean} [options.debugShowContentBoundingVolume=false] For debugging only. When true, renders the bounding volume for each tile's content.\n     * @param {Boolean} [options.debugShowViewerRequestVolume=false] For debugging only. When true, renders the viewer request volume for each tile.\n     * @param {Boolean} [options.debugShowGeometricError=false] For debugging only. When true, draws labels to indicate the geometric error of each tile.\n     * @param {Boolean} [options.debugShowRenderingStatistics=false] For debugging only. When true, draws labels to indicate the number of commands, points, triangles and features for each tile.\n     * @param {Boolean} [options.debugShowMemoryUsage=false] For debugging only. When true, draws labels to indicate the texture and geometry memory in megabytes used by each tile.\n     * @param {Boolean} [options.debugShowUrl=false] For debugging only. When true, draws labels to indicate the url of each tile.\n     *\n     * @exception {DeveloperError} The tileset must be 3D Tiles version 0.0 or 1.0.\n     *\n     * @example\n     * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n     *      url : 'http://localhost:8002/tilesets/Seattle/tileset.json'\n     * }));\n     *\n     * @example\n     * // Common setting for the skipLevelOfDetail optimization\n     * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n     *      url : 'http://localhost:8002/tilesets/Seattle/tileset.json',\n     *      skipLevelOfDetail : true,\n     *      baseScreenSpaceError : 1024,\n     *      skipScreenSpaceErrorFactor : 16,\n     *      skipLevels : 1,\n     *      immediatelyLoadDesiredLevelOfDetail : false,\n     *      loadSiblings : false,\n     *      cullWithChildrenBounds : true\n     * }));\n     *\n     * @example\n     * // Common settings for the dynamicScreenSpaceError optimization\n     * var tileset = scene.primitives.add(new Cesium.Cesium3DTileset({\n     *      url : 'http://localhost:8002/tilesets/Seattle/tileset.json',\n     *      dynamicScreenSpaceError : true,\n     *      dynamicScreenSpaceErrorDensity : 0.00278,\n     *      dynamicScreenSpaceErrorFactor : 4.0,\n     *      dynamicScreenSpaceErrorHeightFalloff : 0.25\n     * }));\n     *\n     * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification|3D Tiles specification}\n     */\n    function Cesium3DTileset(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        this._url = undefined;\n        this._basePath = undefined;\n        this._root = undefined;\n        this._asset = undefined; // Metadata for the entire tileset\n        this._properties = undefined; // Metadata for per-model/point/etc properties\n        this._geometricError = undefined; // Geometric error when the tree is not rendered at all\n        this._extensionsUsed = undefined;\n        this._gltfUpAxis = undefined;\n        this._cache = new Cesium3DTilesetCache();\n        this._processingQueue = [];\n        this._selectedTiles = [];\n        this._emptyTiles = [];\n        this._requestedTiles = [];\n        this._selectedTilesToStyle = [];\n        this._loadTimestamp = undefined;\n        this._timeSinceLoad = 0.0;\n        this._updatedVisibilityFrame = 0;\n        this._updatedModelMatrixFrame = 0;\n        this._modelMatrixChanged = false;\n        this._previousModelMatrix = undefined;\n        this._extras = undefined;\n        this._credits = undefined;\n\n        this._cullWithChildrenBounds = defaultValue(options.cullWithChildrenBounds, true);\n        this._allTilesAdditive = true;\n\n        this._hasMixedContent = false;\n\n        this._stencilClearCommand = undefined;\n        this._backfaceCommands = new ManagedArray();\n\n        this._maximumScreenSpaceError = defaultValue(options.maximumScreenSpaceError, 16);\n        this._maximumMemoryUsage = defaultValue(options.maximumMemoryUsage, 512);\n\n        this._styleEngine = new Cesium3DTileStyleEngine();\n\n        this._modelMatrix = defined(options.modelMatrix) ? Matrix4.clone(options.modelMatrix) : Matrix4.clone(Matrix4.IDENTITY);\n\n        this._statistics = new Cesium3DTilesetStatistics();\n        this._statisticsLast = new Cesium3DTilesetStatistics();\n        this._statisticsPerPass = new Array(Cesium3DTilePass.NUMBER_OF_PASSES);\n\n        for (var i = 0; i < Cesium3DTilePass.NUMBER_OF_PASSES; ++i) {\n            this._statisticsPerPass[i] = new Cesium3DTilesetStatistics();\n        }\n\n        this._requestedTilesInFlight = [];\n\n        this._maximumPriority = { foveatedFactor: -Number.MAX_VALUE, depth: -Number.MAX_VALUE, distance: -Number.MAX_VALUE, reverseScreenSpaceError: -Number.MAX_VALUE };\n        this._minimumPriority = { foveatedFactor: Number.MAX_VALUE, depth: Number.MAX_VALUE, distance: Number.MAX_VALUE, reverseScreenSpaceError: Number.MAX_VALUE };\n        this._heatmap = new Cesium3DTilesetHeatmap(options.debugHeatmapTilePropertyName);\n\n        /**\n         * Optimization option. Don't request tiles that will likely be unused when they come back because of the camera's movement. This optimization only applies to stationary tilesets.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.cullRequestsWhileMoving = defaultValue(options.cullRequestsWhileMoving, true);\n        this._cullRequestsWhileMoving = false;\n\n        /**\n         * Optimization option. Multiplier used in culling requests while moving. Larger is more aggressive culling, smaller less aggressive culling.\n         *\n         * @type {Number}\n         * @default 60.0\n         */\n        this.cullRequestsWhileMovingMultiplier = defaultValue(options.cullRequestsWhileMovingMultiplier, 60.0);\n\n        /**\n         * Optimization option. If between (0.0, 0.5], tiles at or above the screen space error for the reduced screen resolution of <code>progressiveResolutionHeightFraction*screenHeight</code> will be prioritized first. This can help get a quick layer of tiles down while full resolution tiles continue to load.\n         *\n         * @type {Number}\n         * @default 0.3\n         */\n        this.progressiveResolutionHeightFraction = CesiumMath.clamp(defaultValue(options.progressiveResolutionHeightFraction, 0.3), 0.0, 0.5);\n\n        /**\n         * Optimization option. Prefer loading of leaves first.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.preferLeaves = defaultValue(options.preferLeaves, false);\n\n        this._tilesLoaded = false;\n        this._initialTilesLoaded = false;\n\n        this._tileDebugLabels = undefined;\n\n        this._readyPromise = when.defer();\n\n        this._classificationType = options.classificationType;\n\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._initialClippingPlanesOriginMatrix = Matrix4.IDENTITY; // Computed from the tileset JSON.\n        this._clippingPlanesOriginMatrix = undefined; // Combines the above with any run-time transforms.\n        this._clippingPlanesOriginMatrixDirty = true;\n\n        /**\n         * Preload tiles when <code>tileset.show</code> is <code>false</code>. Loads tiles as if the tileset is visible but does not render them.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.preloadWhenHidden = defaultValue(options.preloadWhenHidden, false);\n\n        /**\n         * Optimization option. Fetch tiles at the camera's flight destination while the camera is in flight.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.preloadFlightDestinations = defaultValue(options.preloadFlightDestinations, true);\n        this._pass = undefined; // Cesium3DTilePass\n\n        /**\n         * Optimization option. Whether the tileset should refine based on a dynamic screen space error. Tiles that are further\n         * away will be rendered with lower detail than closer tiles. This improves performance by rendering fewer\n         * tiles and making less requests, but may result in a slight drop in visual quality for tiles in the distance.\n         * The algorithm is biased towards \"street views\" where the camera is close to the ground plane of the tileset and looking\n         * at the horizon. In addition results are more accurate for tightly fitting bounding volumes like box and region.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.dynamicScreenSpaceError = defaultValue(options.dynamicScreenSpaceError, false);\n\n        /**\n         * Optimization option. Prioritize loading tiles in the center of the screen by temporarily raising the\n         * screen space error for tiles around the edge of the screen. Screen space error returns to normal once all\n         * the tiles in the center of the screen as determined by the {@link Cesium3DTileset#foveatedConeSize} are loaded.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.foveatedScreenSpaceError = defaultValue(options.foveatedScreenSpaceError, true);\n        this._foveatedConeSize = defaultValue(options.foveatedConeSize, 0.1);\n        this._foveatedMinimumScreenSpaceErrorRelaxation = defaultValue(options.foveatedMinimumScreenSpaceErrorRelaxation, 0.0);\n\n        /**\n         * Gets a function that will update the foveated screen space error for a tile.\n         *\n         * @type {Cesium3DTileset~foveatedInterpolationCallback} A callback to control how much to raise the screen space error for tiles outside the foveated cone, interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}.\n         */\n        this.foveatedInterpolationCallback = defaultValue(options.foveatedInterpolationCallback, CesiumMath.lerp);\n\n        /**\n         * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control\n         * how long in seconds to wait after the camera stops moving before deferred tiles start loading in.\n         * This time delay prevents requesting tiles around the edges of the screen when the camera is moving.\n         * Setting this to 0.0 will immediately request all tiles in any given view.\n         *\n         * @type {Number}\n         * @default 0.2\n         */\n        this.foveatedTimeDelay = defaultValue(options.foveatedTimeDelay, 0.2);\n\n        /**\n         * A scalar that determines the density used to adjust the dynamic screen space error, similar to {@link Fog}. Increasing this\n         * value has the effect of increasing the maximum screen space error for all tiles, but in a non-linear fashion.\n         * The error starts at 0.0 and increases exponentially until a midpoint is reached, and then approaches 1.0 asymptotically.\n         * This has the effect of keeping high detail in the closer tiles and lower detail in the further tiles, with all tiles\n         * beyond a certain distance all roughly having an error of 1.0.\n         * <p>\n         * The dynamic error is in the range [0.0, 1.0) and is multiplied by <code>dynamicScreenSpaceErrorFactor</code> to produce the\n         * final dynamic error. This dynamic error is then subtracted from the tile's actual screen space error.\n         * </p>\n         * <p>\n         * Increasing <code>dynamicScreenSpaceErrorDensity</code> has the effect of moving the error midpoint closer to the camera.\n         * It is analogous to moving fog closer to the camera.\n         * </p>\n         *\n         * @type {Number}\n         * @default 0.00278\n         */\n        this.dynamicScreenSpaceErrorDensity = 0.00278;\n\n        /**\n         * A factor used to increase the screen space error of tiles for dynamic screen space error. As this value increases less tiles\n         * are requested for rendering and tiles in the distance will have lower detail. If set to zero, the feature will be disabled.\n         *\n         * @type {Number}\n         * @default 4.0\n         */\n        this.dynamicScreenSpaceErrorFactor = 4.0;\n\n        /**\n         * A ratio of the tileset's height at which the density starts to falloff. If the camera is below this height the\n         * full computed density is applied, otherwise the density falls off. This has the effect of higher density at\n         * street level views.\n         * <p>\n         * Valid values are between 0.0 and 1.0.\n         * </p>\n         *\n         * @type {Number}\n         * @default 0.25\n         */\n        this.dynamicScreenSpaceErrorHeightFalloff = 0.25;\n\n        this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n\n        /**\n         * Determines whether the tileset casts or receives shadows from light sources.\n         * <p>\n         * Enabling shadows has a performance impact. A tileset that casts shadows must be rendered twice, once from the camera and again from the light's point of view.\n         * </p>\n         * <p>\n         * Shadows are rendered only when {@link Viewer#shadows} is <code>true</code>.\n         * </p>\n         *\n         * @type {ShadowMode}\n         * @default ShadowMode.ENABLED\n         */\n        this.shadows = defaultValue(options.shadows, ShadowMode.ENABLED);\n\n        /**\n         * Determines if the tileset will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * Defines how per-feature colors set from the Cesium API or declarative styling blend with the source colors from\n         * the original feature, e.g. glTF material or per-point color in the tile.\n         *\n         * @type {Cesium3DTileColorBlendMode}\n         * @default Cesium3DTileColorBlendMode.HIGHLIGHT\n         */\n        this.colorBlendMode = Cesium3DTileColorBlendMode.HIGHLIGHT;\n\n        /**\n         * Defines the value used to linearly interpolate between the source color and feature color when the {@link Cesium3DTileset#colorBlendMode} is <code>MIX</code>.\n         * A value of 0.0 results in the source color while a value of 1.0 results in the feature color, with any value in-between\n         * resulting in a mix of the source color and feature color.\n         *\n         * @type {Number}\n         * @default 0.5\n         */\n        this.colorBlendAmount = 0.5;\n\n        /**\n         * Options for controlling point size based on geometric error and eye dome lighting.\n         * @type {PointCloudShading}\n         */\n        this.pointCloudShading = new PointCloudShading(options.pointCloudShading);\n\n        this._pointCloudEyeDomeLighting = new PointCloudEyeDomeLighting();\n\n        /**\n         * The event fired to indicate progress of loading new tiles.  This event is fired when a new tile\n         * is requested, when a requested tile is finished downloading, and when a downloaded tile has been\n         * processed and is ready to render.\n         * <p>\n         * The number of pending tile requests, <code>numberOfPendingRequests</code>, and number of tiles\n         * processing, <code>numberOfTilesProcessing</code> are passed to the event listener.\n         * </p>\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.loadProgress.addEventListener(function(numberOfPendingRequests, numberOfTilesProcessing) {\n         *     if ((numberOfPendingRequests === 0) && (numberOfTilesProcessing === 0)) {\n         *         console.log('Stopped loading');\n         *         return;\n         *     }\n         *\n         *     console.log('Loading: requests: ' + numberOfPendingRequests + ', processing: ' + numberOfTilesProcessing);\n         * });\n         */\n        this.loadProgress = new Event();\n\n        /**\n         * The event fired to indicate that all tiles that meet the screen space error this frame are loaded. The tileset\n         * is completely loaded for this view.\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.allTilesLoaded.addEventListener(function() {\n         *     console.log('All tiles are loaded');\n         * });\n         *\n         * @see Cesium3DTileset#tilesLoaded\n         */\n        this.allTilesLoaded = new Event();\n\n        /**\n         * The event fired to indicate that all tiles that meet the screen space error this frame are loaded. This event\n         * is fired once when all tiles in the initial view are loaded.\n         * <p>\n         * This event is fired at the end of the frame after the scene is rendered.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.initialTilesLoaded.addEventListener(function() {\n         *     console.log('Initial tiles are loaded');\n         * });\n         *\n         * @see Cesium3DTileset#allTilesLoaded\n         */\n        this.initialTilesLoaded = new Event();\n\n        /**\n         * The event fired to indicate that a tile's content was loaded.\n         * <p>\n         * The loaded {@link Cesium3DTile} is passed to the event listener.\n         * </p>\n         * <p>\n         * This event is fired during the tileset traversal while the frame is being rendered\n         * so that updates to the tile take effect in the same frame.  Do not create or modify\n         * Cesium entities or primitives during the event listener.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.tileLoad.addEventListener(function(tile) {\n         *     console.log('A tile was loaded.');\n         * });\n         */\n        this.tileLoad = new Event();\n\n        /**\n         * The event fired to indicate that a tile's content was unloaded.\n         * <p>\n         * The unloaded {@link Cesium3DTile} is passed to the event listener.\n         * </p>\n         * <p>\n         * This event is fired immediately before the tile's content is unloaded while the frame is being\n         * rendered so that the event listener has access to the tile's content.  Do not create\n         * or modify Cesium entities or primitives during the event listener.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.tileUnload.addEventListener(function(tile) {\n         *     console.log('A tile was unloaded from the cache.');\n         * });\n         *\n         * @see Cesium3DTileset#maximumMemoryUsage\n         * @see Cesium3DTileset#trimLoadedTiles\n         */\n        this.tileUnload = new Event();\n\n        /**\n         * The event fired to indicate that a tile's content failed to load.\n         * <p>\n         * If there are no event listeners, error messages will be logged to the console.\n         * </p>\n         * <p>\n         * The error object passed to the listener contains two properties:\n         * <ul>\n         * <li><code>url</code>: the url of the failed tile.</li>\n         * <li><code>message</code>: the error message.</li>\n         * </ul>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.tileFailed.addEventListener(function(error) {\n         *     console.log('An error occurred loading tile: ' + error.url);\n         *     console.log('Error: ' + error.message);\n         * });\n         */\n        this.tileFailed = new Event();\n\n        /**\n         * This event fires once for each visible tile in a frame.  This can be used to manually\n         * style a tileset.\n         * <p>\n         * The visible {@link Cesium3DTile} is passed to the event listener.\n         * </p>\n         * <p>\n         * This event is fired during the tileset traversal while the frame is being rendered\n         * so that updates to the tile take effect in the same frame.  Do not create or modify\n         * Cesium entities or primitives during the event listener.\n         * </p>\n         *\n         * @type {Event}\n         * @default new Event()\n         *\n         * @example\n         * tileset.tileVisible.addEventListener(function(tile) {\n         *     if (tile.content instanceof Cesium.Batched3DModel3DTileContent) {\n         *         console.log('A Batched 3D Model tile is visible.');\n         *     }\n         * });\n         *\n         * @example\n         * // Apply a red style and then manually set random colors for every other feature when the tile becomes visible.\n         * tileset.style = new Cesium.Cesium3DTileStyle({\n         *     color : 'color(\"red\")'\n         * });\n         * tileset.tileVisible.addEventListener(function(tile) {\n         *     var content = tile.content;\n         *     var featuresLength = content.featuresLength;\n         *     for (var i = 0; i < featuresLength; i+=2) {\n         *         content.getFeature(i).color = Cesium.Color.fromRandom();\n         *     }\n         * });\n         */\n        this.tileVisible = new Event();\n\n        /**\n         * Optimization option. Determines if level of detail skipping should be applied during the traversal.\n         * <p>\n         * The common strategy for replacement-refinement traversal is to store all levels of the tree in memory and require\n         * all children to be loaded before the parent can refine. With this optimization levels of the tree can be skipped\n         * entirely and children can be rendered alongside their parents. The tileset requires significantly less memory when\n         * using this optimization.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.skipLevelOfDetail = defaultValue(options.skipLevelOfDetail, false);\n        this._skipLevelOfDetail = this.skipLevelOfDetail;\n        this._disableSkipLevelOfDetail = false;\n\n        /**\n         * The screen space error that must be reached before skipping levels of detail.\n         * <p>\n         * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n         * </p>\n         *\n         * @type {Number}\n         * @default 1024\n         */\n        this.baseScreenSpaceError = defaultValue(options.baseScreenSpaceError, 1024);\n\n        /**\n         * Multiplier defining the minimum screen space error to skip.\n         * For example, if a tile has screen space error of 100, no tiles will be loaded unless they\n         * are leaves or have a screen space error <code><= 100 / skipScreenSpaceErrorFactor</code>.\n         * <p>\n         * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n         * </p>\n         *\n         * @type {Number}\n         * @default 16\n         */\n        this.skipScreenSpaceErrorFactor = defaultValue(options.skipScreenSpaceErrorFactor, 16);\n\n        /**\n         * Constant defining the minimum number of levels to skip when loading tiles. When it is 0, no levels are skipped.\n         * For example, if a tile is level 1, no tiles will be loaded unless they are at level greater than 2.\n         * <p>\n         * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n         * </p>\n         *\n         * @type {Number}\n         * @default 1\n         */\n        this.skipLevels = defaultValue(options.skipLevels, 1);\n\n        /**\n         * When true, only tiles that meet the maximum screen space error will ever be downloaded.\n         * Skipping factors are ignored and just the desired tiles are loaded.\n         * <p>\n         * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.immediatelyLoadDesiredLevelOfDetail = defaultValue(options.immediatelyLoadDesiredLevelOfDetail, false);\n\n        /**\n         * Determines whether siblings of visible tiles are always downloaded during traversal.\n         * This may be useful for ensuring that tiles are already available when the viewer turns left/right.\n         * <p>\n         * Only used when {@link Cesium3DTileset#skipLevelOfDetail} is <code>true</code>.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.loadSiblings = defaultValue(options.loadSiblings, false);\n\n        this._clippingPlanes = undefined;\n        this.clippingPlanes = options.clippingPlanes;\n\n        this._imageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n        Cartesian2.clone(options.imageBasedLightingFactor, this._imageBasedLightingFactor);\n\n        /**\n         * The light color when shading models. When <code>undefined</code> the scene's light color is used instead.\n         * <p>\n         * For example, disabling additional light sources by setting <code>model.imageBasedLightingFactor = new Cartesian2(0.0, 0.0)</code> will make the\n         * model much darker. Here, increasing the intensity of the light source will make the model brighter.\n         * </p>\n         *\n         * @type {Cartesian3}\n         * @default undefined\n         */\n        this.lightColor = options.lightColor;\n\n        /**\n         * The sun's luminance at the zenith in kilo candela per meter squared to use for this model's procedural environment map.\n         * This is used when {@link Cesium3DTileset#specularEnvironmentMaps} and {@link Cesium3DTileset#sphericalHarmonicCoefficients} are not defined.\n         *\n         * @type Number\n         *\n         * @default 0.2\n         *\n         */\n        this.luminanceAtZenith = defaultValue(options.luminanceAtZenith, 0.2);\n\n        /**\n         * The third order spherical harmonic coefficients used for the diffuse color of image-based lighting. When <code>undefined</code>, a diffuse irradiance\n         * computed from the atmosphere color is used.\n         * <p>\n         * There are nine <code>Cartesian3</code> coefficients.\n         * The order of the coefficients is: L<sub>00</sub>, L<sub>1-1</sub>, L<sub>10</sub>, L<sub>11</sub>, L<sub>2-2</sub>, L<sub>2-1</sub>, L<sub>20</sub>, L<sub>21</sub>, L<sub>22</sub>\n         * </p>\n         *\n         * These values can be obtained by preprocessing the environment map using the <code>cmgen</code> tool of\n         * {@link https://github.com/google/filament/releases|Google's Filament project}. This will also generate a KTX file that can be\n         * supplied to {@link Cesium3DTileset#specularEnvironmentMaps}.\n         *\n         * @type {Cartesian3[]}\n         * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n         * @see {@link https://graphics.stanford.edu/papers/envmap/envmap.pdf|An Efficient Representation for Irradiance Environment Maps}\n         */\n        this.sphericalHarmonicCoefficients = options.sphericalHarmonicCoefficients;\n\n        /**\n         * A URL to a KTX file that contains a cube map of the specular lighting and the convoluted specular mipmaps.\n         *\n         * @demo {@link https://sandcastle.cesium.com/index.html?src=Image-Based Lighting.html|Sandcastle Image Based Lighting Demo}\n         * @type {String}\n         * @see Cesium3DTileset#sphericalHarmonicCoefficients\n         */\n        this.specularEnvironmentMaps = options.specularEnvironmentMaps;\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * Determines if only the tiles from last frame should be used for rendering.  This\n         * effectively \"freezes\" the tileset to the previous frame so it is possible to zoom\n         * out and see what was rendered.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugFreezeFrame = defaultValue(options.debugFreezeFrame, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, assigns a random color to each tile.  This is useful for visualizing\n         * what features belong to what tiles, especially with additive refinement where features\n         * from parent tiles may be interleaved with features from child tiles.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugColorizeTiles = defaultValue(options.debugColorizeTiles, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, renders each tile's content as a wireframe.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugWireframe = defaultValue(options.debugWireframe, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, renders the bounding volume for each visible tile.  The bounding volume is\n         * white if the tile has a content bounding volume or is empty; otherwise, it is red.  Tiles that don't meet the\n         * screen space error and are still refining to their descendants are yellow.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, renders the bounding volume for each visible tile's content. The bounding volume is\n         * blue if the tile has a content bounding volume; otherwise it is red.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowContentBoundingVolume = defaultValue(options.debugShowContentBoundingVolume, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, renders the viewer request volume for each tile.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowViewerRequestVolume = defaultValue(options.debugShowViewerRequestVolume, false);\n\n        this._tileDebugLabels = undefined;\n        this.debugPickedTileLabelOnly = false;\n        this.debugPickedTile = undefined;\n        this.debugPickPosition = undefined;\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, draws labels to indicate the geometric error of each tile.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowGeometricError = defaultValue(options.debugShowGeometricError, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, draws labels to indicate the number of commands, points, triangles and features of each tile.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowRenderingStatistics = defaultValue(options.debugShowRenderingStatistics, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, draws labels to indicate the geometry and texture memory usage of each tile.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowMemoryUsage = defaultValue(options.debugShowMemoryUsage, false);\n\n        /**\n         * This property is for debugging only; it is not optimized for production use.\n         * <p>\n         * When true, draws labels to indicate the url of each tile.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.debugShowUrl = defaultValue(options.debugShowUrl, false);\n\n        var that = this;\n        var resource;\n        when(options.url)\n            .then(function(url) {\n                var basePath;\n                resource = Resource.createIfNeeded(url);\n\n                // ion resources have a credits property we can use for additional attribution.\n                that._credits = resource.credits;\n\n                if (resource.extension === 'json') {\n                    basePath = resource.getBaseUri(true);\n                } else if (resource.isDataUri) {\n                    basePath = '';\n                }\n\n                that._url = resource.url;\n                that._basePath = basePath;\n\n                return Cesium3DTileset.loadJson(resource);\n            })\n            .then(function(tilesetJson) {\n                that._root = that.loadTileset(resource, tilesetJson);\n                var gltfUpAxis = defined(tilesetJson.asset.gltfUpAxis) ? Axis.fromName(tilesetJson.asset.gltfUpAxis) : Axis.Y;\n                var asset = tilesetJson.asset;\n                that._asset = asset;\n                that._properties = tilesetJson.properties;\n                that._geometricError = tilesetJson.geometricError;\n                that._extensionsUsed = tilesetJson.extensionsUsed;\n                that._gltfUpAxis = gltfUpAxis;\n                that._extras = tilesetJson.extras;\n\n                var extras = asset.extras;\n                if (defined(extras) && defined(extras.cesium) && defined(extras.cesium.credits)) {\n                    var extraCredits = extras.cesium.credits;\n                    var credits = that._credits;\n                    if (!defined(credits)) {\n                        credits = [];\n                        that._credits = credits;\n                    }\n                    for (var i = 0; i < extraCredits.length; ++i) {\n                        var credit = extraCredits[i];\n                        credits.push(new Credit(credit.html, credit.showOnScreen));\n                    }\n                }\n\n                // Save the original, untransformed bounding volume position so we can apply\n                // the tile transform and model matrix at run time\n                var boundingVolume = that._root.createBoundingVolume(tilesetJson.root.boundingVolume, Matrix4.IDENTITY);\n                var clippingPlanesOrigin = boundingVolume.boundingSphere.center;\n                // If this origin is above the surface of the earth\n                // we want to apply an ENU orientation as our best guess of orientation.\n                // Otherwise, we assume it gets its position/orientation completely from the\n                // root tile transform and the tileset's model matrix\n                var originCartographic = that._ellipsoid.cartesianToCartographic(clippingPlanesOrigin);\n                if (defined(originCartographic) && (originCartographic.height > ApproximateTerrainHeights._defaultMinTerrainHeight)) {\n                    that._initialClippingPlanesOriginMatrix = Transforms.eastNorthUpToFixedFrame(clippingPlanesOrigin);\n                }\n                that._clippingPlanesOriginMatrix = Matrix4.clone(that._initialClippingPlanesOriginMatrix);\n                that._readyPromise.resolve(that);\n            }).otherwise(function(error) {\n                that._readyPromise.reject(error);\n            });\n    }\n\n    Object.defineProperties(Cesium3DTileset.prototype, {\n        /**\n         * NOTE: This getter exists so that `Picking.js` can differentiate between\n         *       PrimitiveCollection and Cesium3DTileset objects without inflating\n         *       the size of the module via `instanceof Cesium3DTileset`\n         * @private\n         */\n        isCesium3DTileset : {\n            get : function() {\n                return true;\n            }\n        },\n\n        /**\n         * Gets the tileset's asset object property, which contains metadata about the tileset.\n         * <p>\n         * See the {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification#reference-asset|asset schema reference}\n         * in the 3D Tiles spec for the full set of properties.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Object}\n         * @readonly\n         *\n         * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n         */\n        asset : {\n            get : function() {\n                \n\n                return this._asset;\n            }\n        },\n        /**\n         * The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {ClippingPlaneCollection}\n         */\n        clippingPlanes : {\n            get : function() {\n                return this._clippingPlanes;\n            },\n            set : function(value) {\n                ClippingPlaneCollection.setOwner(value, this, '_clippingPlanes');\n            }\n        },\n\n        /**\n         * Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n         * <p>\n         * See the {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification#reference-properties|properties schema reference}\n         * in the 3D Tiles spec for the full set of properties.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Object}\n         * @readonly\n         *\n         * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n         *\n         * @example\n         * console.log('Maximum building height: ' + tileset.properties.height.maximum);\n         * console.log('Minimum building height: ' + tileset.properties.height.minimum);\n         *\n         * @see Cesium3DTileFeature#getProperty\n         * @see Cesium3DTileFeature#setProperty\n         */\n        properties : {\n            get : function() {\n                \n\n                return this._properties;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the tileset's root tile is loaded and the tileset is ready to render.\n         * This is set to <code>true</code> right before {@link Cesium3DTileset#readyPromise} is resolved.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        ready : {\n            get : function() {\n                return defined(this._root);\n            }\n        },\n\n        /**\n         * Gets the promise that will be resolved when the tileset's root tile is loaded and the tileset is ready to render.\n         * <p>\n         * This promise is resolved at the end of the frame before the first frame the tileset is rendered in.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Promise.<Cesium3DTileset>}\n         * @readonly\n         *\n         * @example\n         * tileset.readyPromise.then(function(tileset) {\n         *     // tile.properties is not defined until readyPromise resolves.\n         *     var properties = tileset.properties;\n         *     if (Cesium.defined(properties)) {\n         *         for (var name in properties) {\n         *             console.log(properties[name]);\n         *         }\n         *     }\n         * });\n         */\n        readyPromise : {\n            get : function() {\n                return this._readyPromise.promise;\n            }\n        },\n\n        /**\n         * When <code>true</code>, all tiles that meet the screen space error this frame are loaded. The tileset is\n         * completely loaded for this view.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         *\n         * @see Cesium3DTileset#allTilesLoaded\n         */\n        tilesLoaded : {\n            get : function() {\n                return this._tilesLoaded;\n            }\n        },\n\n        /**\n         * The url to a tileset JSON file.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        url : {\n            get : function() {\n                return this._url;\n            }\n        },\n\n        /**\n         * The base path that non-absolute paths in tileset JSON file are relative to.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {String}\n         * @readonly\n         * @deprecated\n         */\n        basePath : {\n            get : function() {\n                deprecationWarning('Cesium3DTileset.basePath', 'Cesium3DTileset.basePath has been deprecated. All tiles are relative to the url of the tileset JSON file that contains them. Use the url property instead.');\n                return this._basePath;\n            }\n        },\n\n        /**\n         * The style, defined using the\n         * {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language},\n         * applied to each feature in the tileset.\n         * <p>\n         * Assign <code>undefined</code> to remove the style, which will restore the visual\n         * appearance of the tileset to its default when no style was applied.\n         * </p>\n         * <p>\n         * The style is applied to a tile before the {@link Cesium3DTileset#tileVisible}\n         * event is raised, so code in <code>tileVisible</code> can manually set a feature's\n         * properties (e.g. color and show) after the style is applied. When\n         * a new style is assigned any manually set properties are overwritten.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Cesium3DTileStyle}\n         *\n         * @default undefined\n         *\n         * @example\n         * tileset.style = new Cesium.Cesium3DTileStyle({\n         *    color : {\n         *        conditions : [\n         *            ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n         *            ['${Height} >= 50', 'color(\"red\")'],\n         *            ['true', 'color(\"blue\")']\n         *        ]\n         *    },\n         *    show : '${Height} > 0',\n         *    meta : {\n         *        description : '\"Building id ${id} has height ${Height}.\"'\n         *    }\n         * });\n         *\n         * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification/Styling|3D Tiles Styling language}\n         */\n        style : {\n            get : function() {\n                return this._styleEngine.style;\n            },\n            set : function(value) {\n                this._styleEngine.style = value;\n            }\n        },\n\n        /**\n         * The maximum screen space error used to drive level of detail refinement.  This value helps determine when a tile\n         * refines to its descendants, and therefore plays a major role in balancing performance with visual quality.\n         * <p>\n         * A tile's screen space error is roughly equivalent to the number of pixels wide that would be drawn if a sphere with a\n         * radius equal to the tile's <b>geometric error</b> were rendered at the tile's position. If this value exceeds\n         * <code>maximumScreenSpaceError</code> the tile refines to its descendants.\n         * </p>\n         * <p>\n         * Depending on the tileset, <code>maximumScreenSpaceError</code> may need to be tweaked to achieve the right balance.\n         * Higher values provide better performance but lower visual quality.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @default 16\n         *\n         * @exception {DeveloperError} <code>maximumScreenSpaceError</code> must be greater than or equal to zero.\n         */\n        maximumScreenSpaceError : {\n            get : function() {\n                return this._maximumScreenSpaceError;\n            },\n            set : function(value) {\n                \n\n                this._maximumScreenSpaceError = value;\n            }\n        },\n\n        /**\n         * The maximum amount of GPU memory (in MB) that may be used to cache tiles. This value is estimated from\n         * geometry, textures, and batch table textures of loaded tiles. For point clouds, this value also\n         * includes per-point metadata.\n         * <p>\n         * Tiles not in view are unloaded to enforce this.\n         * </p>\n         * <p>\n         * If decreasing this value results in unloading tiles, the tiles are unloaded the next frame.\n         * </p>\n         * <p>\n         * If tiles sized more than <code>maximumMemoryUsage</code> are needed\n         * to meet the desired screen space error, determined by {@link Cesium3DTileset#maximumScreenSpaceError},\n         * for the current view, then the memory usage of the tiles loaded will exceed\n         * <code>maximumMemoryUsage</code>.  For example, if the maximum is 256 MB, but\n         * 300 MB of tiles are needed to meet the screen space error, then 300 MB of tiles may be loaded.  When\n         * these tiles go out of view, they will be unloaded.\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @default 512\n         *\n         * @exception {DeveloperError} <code>maximumMemoryUsage</code> must be greater than or equal to zero.\n         * @see Cesium3DTileset#totalMemoryUsageInBytes\n         */\n        maximumMemoryUsage : {\n            get : function() {\n                return this._maximumMemoryUsage;\n            },\n            set : function(value) {\n                \n\n                this._maximumMemoryUsage = value;\n            }\n        },\n\n        /**\n         * The root tile.\n         *\n         * @memberOf Cesium3DTileset.prototype\n         *\n         * @type {Cesium3DTile}\n         * @readonly\n         *\n         * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n         */\n        root : {\n            get : function() {\n                \n\n                return this._root;\n            }\n        },\n\n        /**\n         * The tileset's bounding sphere.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {BoundingSphere}\n         * @readonly\n         *\n         * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n         *\n         * @example\n         * var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({\n         *     url : 'http://localhost:8002/tilesets/Seattle/tileset.json'\n         * }));\n         *\n         * tileset.readyPromise.then(function(tileset) {\n         *     // Set the camera to view the newly added tileset\n         *     viewer.camera.viewBoundingSphere(tileset.boundingSphere, new Cesium.HeadingPitchRange(0, -0.5, 0));\n         * });\n         */\n        boundingSphere : {\n            get : function() {\n                \n\n                this._root.updateTransform(this._modelMatrix);\n                return this._root.boundingSphere;\n            }\n        },\n\n        /**\n         * A 4x4 transformation matrix that transforms the entire tileset.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Matrix4}\n         * @default Matrix4.IDENTITY\n         *\n         * @example\n         * // Adjust a tileset's height from the globe's surface.\n         * var heightOffset = 20.0;\n         * var boundingSphere = tileset.boundingSphere;\n         * var cartographic = Cesium.Cartographic.fromCartesian(boundingSphere.center);\n         * var surface = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0.0);\n         * var offset = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, heightOffset);\n         * var translation = Cesium.Cartesian3.subtract(offset, surface, new Cesium.Cartesian3());\n         * tileset.modelMatrix = Cesium.Matrix4.fromTranslation(translation);\n         */\n        modelMatrix : {\n            get : function() {\n                return this._modelMatrix;\n            },\n            set : function(value) {\n                this._modelMatrix = Matrix4.clone(value, this._modelMatrix);\n            }\n        },\n\n        /**\n         * Returns the time, in milliseconds, since the tileset was loaded and first updated.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        timeSinceLoad : {\n            get : function() {\n                return this._timeSinceLoad;\n            }\n        },\n\n        /**\n         * The total amount of GPU memory in bytes used by the tileset. This value is estimated from\n         * geometry, texture, and batch table textures of loaded tiles. For point clouds, this value also\n         * includes per-point metadata.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @see Cesium3DTileset#maximumMemoryUsage\n         */\n        totalMemoryUsageInBytes : {\n            get : function() {\n                var statistics = this._statistics;\n                return statistics.texturesByteLength + statistics.geometryByteLength + statistics.batchTableByteLength;\n            }\n        },\n\n        /**\n         * @private\n         */\n        clippingPlanesOriginMatrix : {\n            get : function() {\n                if (!defined(this._clippingPlanesOriginMatrix)) {\n                    return Matrix4.IDENTITY;\n                }\n\n                if (this._clippingPlanesOriginMatrixDirty) {\n                    Matrix4.multiply(this.root.computedTransform, this._initialClippingPlanesOriginMatrix, this._clippingPlanesOriginMatrix);\n                    this._clippingPlanesOriginMatrixDirty = false;\n                }\n\n                return this._clippingPlanesOriginMatrix;\n            }\n        },\n\n        /**\n         * @private\n         */\n        styleEngine : {\n            get : function() {\n                return this._styleEngine;\n            }\n        },\n\n        /**\n         * @private\n         */\n        statistics : {\n            get : function() {\n                return this._statistics;\n            }\n        },\n\n        /**\n         * Determines whether terrain, 3D Tiles or both will be classified by this tileset.\n         * <p>\n         * This option is only applied to tilesets containing batched 3D models, geometry data, or vector data. Even when undefined, vector data and geometry data\n         * must render as classifications and will default to rendering on both terrain and other 3D Tiles tilesets.\n         * </p>\n         * <p>\n         * When enabled for batched 3D model tilesets, there are a few requirements/limitations on the glTF:\n         * <ul>\n         *     <li>POSITION and _BATCHID semantics are required.</li>\n         *     <li>All indices with the same batch id must occupy contiguous sections of the index buffer.</li>\n         *     <li>All shaders and techniques are ignored. The generated shader simply multiplies the position by the model-view-projection matrix.</li>\n         *     <li>The only supported extensions are CESIUM_RTC and WEB3D_quantized_attributes.</li>\n         *     <li>Only one node is supported.</li>\n         *     <li>Only one mesh per node is supported.</li>\n         *     <li>Only one primitive per mesh is supported.</li>\n         * </ul>\n         * </p>\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {ClassificationType}\n         * @default undefined\n         *\n         * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n         * @readonly\n         */\n        classificationType : {\n            get : function() {\n                return this._classificationType;\n            }\n        },\n\n        /**\n         * Gets an ellipsoid describing the shape of the globe.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Ellipsoid}\n         * @readonly\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        },\n\n        /**\n         * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the cone size that determines which tiles are deferred.\n         * Tiles that are inside this cone are loaded immediately. Tiles outside the cone are potentially deferred based on how far outside the cone they are and {@link Cesium3DTileset#foveatedInterpolationCallback} and {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation}.\n         * Setting this to 0.0 means the cone will be the line formed by the camera position and its view direction. Setting this to 1.0 means the cone encompasses the entire field of view of the camera, essentially disabling the effect.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @default 0.3\n         */\n        foveatedConeSize : {\n            get : function() {\n                return this._foveatedConeSize;\n            },\n            set : function(value) {\n                \n\n                this._foveatedConeSize = value;\n            }\n        },\n\n        /**\n         * Optimization option. Used when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control the starting screen space error relaxation for tiles outside the foveated cone.\n         * The screen space error will be raised starting with this value up to {@link Cesium3DTileset#maximumScreenSpaceError} based on the provided {@link Cesium3DTileset#foveatedInterpolationCallback}.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Number}\n         * @default 0.0\n         */\n        foveatedMinimumScreenSpaceErrorRelaxation : {\n            get : function() {\n                return this._foveatedMinimumScreenSpaceErrorRelaxation;\n            },\n            set : function(value) {\n                \n\n                this._foveatedMinimumScreenSpaceErrorRelaxation = value;\n            }\n        },\n\n        /**\n         * Returns the <code>extras</code> property at the top-level of the tileset JSON, which contains application specific metadata.\n         * Returns <code>undefined</code> if <code>extras</code> does not exist.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @exception {DeveloperError} The tileset is not loaded.  Use Cesium3DTileset.readyPromise or wait for Cesium3DTileset.ready to be true.\n         *\n         * @type {*}\n         * @readonly\n         *\n         * @see {@link https://github.com/CesiumGS/3d-tiles/tree/master/specification#specifying-extensions-and-application-specific-extras|Extras in the 3D Tiles specification.}\n         */\n        extras : {\n            get : function() {\n                \n\n                return this._extras;\n            }\n        },\n\n        /**\n         * Cesium adds lighting from the earth, sky, atmosphere, and star skybox. This cartesian is used to scale the final\n         * diffuse and specular lighting contribution from those sources to the final color. A value of 0.0 will disable those light sources.\n         *\n         * @memberof Cesium3DTileset.prototype\n         *\n         * @type {Cartesian2}\n         * @default Cartesian2(1.0, 1.0)\n         */\n        imageBasedLightingFactor : {\n            get : function() {\n                return this._imageBasedLightingFactor;\n            },\n            set : function(value) {\n                \n                Cartesian2.clone(value, this._imageBasedLightingFactor);\n            }\n        }\n    });\n\n    /**\n     * Provides a hook to override the method used to request the tileset json\n     * useful when fetching tilesets from remote servers\n     * @param {Resource|String} tilesetUrl The url of the json file to be fetched\n     * @returns {Promise.<Object>} A promise that resolves with the fetched json data\n     */\n    Cesium3DTileset.loadJson = function(tilesetUrl) {\n        var resource = Resource.createIfNeeded(tilesetUrl);\n        return resource.fetchJson();\n    };\n\n    /**\n     * Marks the tileset's {@link Cesium3DTileset#style} as dirty, which forces all\n     * features to re-evaluate the style in the next frame each is visible.\n     */\n    Cesium3DTileset.prototype.makeStyleDirty = function() {\n        this._styleEngine.makeDirty();\n    };\n\n    /**\n     * Loads the main tileset JSON file or a tileset JSON file referenced from a tile.\n     *\n     * @private\n     */\n    Cesium3DTileset.prototype.loadTileset = function(resource, tilesetJson, parentTile) {\n        var asset = tilesetJson.asset;\n        if (!defined(asset)) {\n            throw new RuntimeError('Tileset must have an asset property.');\n        }\n        if (asset.version !== '0.0' && asset.version !== '1.0') {\n            throw new RuntimeError('The tileset must be 3D Tiles version 0.0 or 1.0.');\n        }\n\n        var statistics = this._statistics;\n\n        var tilesetVersion = asset.tilesetVersion;\n        if (defined(tilesetVersion)) {\n            // Append the tileset version to the resource\n            this._basePath += '?v=' + tilesetVersion;\n            resource.setQueryParameters({ v: tilesetVersion });\n        }\n\n        // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n        // Get the basePath relative to the external tileset.\n        var rootTile = new Cesium3DTile(this, resource, tilesetJson.root, parentTile);\n\n        // If there is a parentTile, add the root of the currently loading tileset\n        // to parentTile's children, and update its _depth.\n        if (defined(parentTile)) {\n            parentTile.children.push(rootTile);\n            rootTile._depth = parentTile._depth + 1;\n        }\n\n        var stack = [];\n        stack.push(rootTile);\n\n        while (stack.length > 0) {\n            var tile = stack.pop();\n            ++statistics.numberOfTilesTotal;\n            this._allTilesAdditive = this._allTilesAdditive && (tile.refine === Cesium3DTileRefine.ADD);\n            var children = tile._header.children;\n            if (defined(children)) {\n                var length = children.length;\n                for (var i = 0; i < length; ++i) {\n                    var childHeader = children[i];\n                    var childTile = new Cesium3DTile(this, resource, childHeader, tile);\n                    tile.children.push(childTile);\n                    childTile._depth = tile._depth + 1;\n                    stack.push(childTile);\n                }\n            }\n\n            if (this._cullWithChildrenBounds) {\n                Cesium3DTileOptimizations.checkChildrenWithinParent(tile);\n            }\n        }\n\n        return rootTile;\n    };\n\n    var scratchPositionNormal = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n    var scratchMatrix = new Matrix4();\n    var scratchCenter = new Cartesian3();\n    var scratchPosition = new Cartesian3();\n    var scratchDirection = new Cartesian3();\n\n    function updateDynamicScreenSpaceError(tileset, frameState) {\n        var up;\n        var direction;\n        var height;\n        var minimumHeight;\n        var maximumHeight;\n\n        var camera = frameState.camera;\n        var root = tileset._root;\n        var tileBoundingVolume = root.contentBoundingVolume;\n\n        if (tileBoundingVolume instanceof TileBoundingRegion) {\n            up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n            direction = camera.directionWC;\n            height = camera.positionCartographic.height;\n            minimumHeight = tileBoundingVolume.minimumHeight;\n            maximumHeight = tileBoundingVolume.maximumHeight;\n        } else {\n            // Transform camera position and direction into the local coordinate system of the tileset\n            var transformLocal = Matrix4.inverseTransformation(root.computedTransform, scratchMatrix);\n            var ellipsoid = frameState.mapProjection.ellipsoid;\n            var boundingVolume = tileBoundingVolume.boundingVolume;\n            var centerLocal = Matrix4.multiplyByPoint(transformLocal, boundingVolume.center, scratchCenter);\n            if (Cartesian3.magnitude(centerLocal) > ellipsoid.minimumRadius) {\n                // The tileset is defined in WGS84. Approximate the minimum and maximum height.\n                var centerCartographic = Cartographic.fromCartesian(centerLocal, ellipsoid, scratchCartographic);\n                up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n                direction = camera.directionWC;\n                height = camera.positionCartographic.height;\n                minimumHeight = 0.0;\n                maximumHeight = centerCartographic.height * 2.0;\n            } else {\n                // The tileset is defined in local coordinates (z-up)\n                var positionLocal = Matrix4.multiplyByPoint(transformLocal, camera.positionWC, scratchPosition);\n                up = Cartesian3.UNIT_Z;\n                direction = Matrix4.multiplyByPointAsVector(transformLocal, camera.directionWC, scratchDirection);\n                direction = Cartesian3.normalize(direction, direction);\n                height = positionLocal.z;\n                if (tileBoundingVolume instanceof TileOrientedBoundingBox) {\n                    // Assuming z-up, the last component stores the half-height of the box\n                    var boxHeight = root._header.boundingVolume.box[11];\n                    minimumHeight = centerLocal.z - boxHeight;\n                    maximumHeight = centerLocal.z + boxHeight;\n                } else if (tileBoundingVolume instanceof TileBoundingSphere) {\n                    var radius = boundingVolume.radius;\n                    minimumHeight = centerLocal.z - radius;\n                    maximumHeight = centerLocal.z + radius;\n                }\n            }\n        }\n\n        // The range where the density starts to lessen. Start at the quarter height of the tileset.\n        var heightFalloff = tileset.dynamicScreenSpaceErrorHeightFalloff;\n        var heightClose = minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;\n        var heightFar = maximumHeight;\n\n        var t = CesiumMath.clamp((height - heightClose) / (heightFar - heightClose), 0.0, 1.0);\n\n        // Increase density as the camera tilts towards the horizon\n        var dot = Math.abs(Cartesian3.dot(direction, up));\n        var horizonFactor = 1.0 - dot;\n\n        // Weaken the horizon factor as the camera height increases, implying the camera is further away from the tileset.\n        // The goal is to increase density for the \"street view\", not when viewing the tileset from a distance.\n        horizonFactor = horizonFactor * (1.0 - t);\n\n        var density = tileset.dynamicScreenSpaceErrorDensity;\n        density *= horizonFactor;\n\n        tileset._dynamicScreenSpaceErrorComputedDensity = density;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function requestContent(tileset, tile) {\n        if (tile.hasEmptyContent) {\n            return;\n        }\n\n        var statistics = tileset._statistics;\n        var expired = tile.contentExpired;\n        var requested = tile.requestContent();\n\n        if (!requested) {\n            ++statistics.numberOfAttemptedRequests;\n            return;\n        }\n\n        if (expired) {\n            if (tile.hasTilesetContent) {\n                destroySubtree(tileset, tile);\n            } else {\n                statistics.decrementLoadCounts(tile.content);\n                --statistics.numberOfTilesWithContentReady;\n            }\n        }\n\n        ++statistics.numberOfPendingRequests;\n        tileset._requestedTilesInFlight.push(tile);\n\n        tile.contentReadyToProcessPromise.then(addToProcessingQueue(tileset, tile));\n        tile.contentReadyPromise.then(handleTileSuccess(tileset, tile)).otherwise(handleTileFailure(tileset, tile));\n    }\n\n    function sortRequestByPriority(a, b) {\n        return a._priority - b._priority;\n    }\n\n    /**\n     * Perform any pass invariant tasks here. Called after the render pass.\n     * @private\n     */\n    Cesium3DTileset.prototype.postPassesUpdate = function(frameState) {\n        if (!this.ready) {\n            return;\n        }\n\n        cancelOutOfViewRequests(this, frameState);\n        raiseLoadProgressEvent(this, frameState);\n        this._cache.unloadTiles(this, unloadTile);\n    };\n\n    /**\n     * Perform any pass invariant tasks here. Called before any passes are executed.\n     * @private\n     */\n    Cesium3DTileset.prototype.prePassesUpdate = function(frameState) {\n        if (!this.ready) {\n            return;\n        }\n\n        processTiles(this, frameState);\n\n        // Update clipping planes\n        var clippingPlanes = this._clippingPlanes;\n        this._clippingPlanesOriginMatrixDirty = true;\n        if (defined(clippingPlanes) && clippingPlanes.enabled) {\n            clippingPlanes.update(frameState);\n        }\n\n        if (!defined(this._loadTimestamp)) {\n            this._loadTimestamp = JulianDate.clone(frameState.time);\n        }\n        this._timeSinceLoad = Math.max(JulianDate.secondsDifference(frameState.time, this._loadTimestamp) * 1000, 0.0);\n\n        this._skipLevelOfDetail = this.skipLevelOfDetail && !defined(this._classificationType) && !this._disableSkipLevelOfDetail && !this._allTilesAdditive;\n\n        if (this.dynamicScreenSpaceError) {\n            updateDynamicScreenSpaceError(this, frameState);\n        }\n\n        if (frameState.newFrame) {\n            this._cache.reset();\n        }\n    };\n\n    function cancelOutOfViewRequests(tileset, frameState) {\n        var requestedTilesInFlight = tileset._requestedTilesInFlight;\n        var removeCount = 0;\n        var length = requestedTilesInFlight.length;\n        for (var i = 0; i < length; ++i) {\n            var tile = requestedTilesInFlight[i];\n\n            // NOTE: This is framerate dependant so make sure the threshold check is small\n            var outOfView = (frameState.frameNumber - tile._touchedFrame) >= 1;\n            if (tile._contentState !== Cesium3DTileContentState.LOADING) {\n                // No longer fetching from host, don't need to track it anymore. Gets marked as LOADING in Cesium3DTile::requestContent().\n                ++removeCount;\n                continue;\n            } else if (outOfView) {\n                // RequestScheduler will take care of cancelling it\n                tile._request.cancel();\n                ++removeCount;\n                continue;\n            }\n\n            if (removeCount > 0) {\n                requestedTilesInFlight[i - removeCount] = tile;\n            }\n        }\n\n        requestedTilesInFlight.length -= removeCount;\n    }\n\n    function requestTiles(tileset, isAsync) {\n        // Sort requests by priority before making any requests.\n        // This makes it less likely that requests will be cancelled after being issued.\n        var requestedTiles = tileset._requestedTiles;\n        var length = requestedTiles.length;\n        requestedTiles.sort(sortRequestByPriority);\n        for (var i = 0; i < length; ++i) {\n            requestContent(tileset, requestedTiles[i]);\n        }\n    }\n\n    function addToProcessingQueue(tileset, tile) {\n        return function() {\n            tileset._processingQueue.push(tile);\n\n            --tileset._statistics.numberOfPendingRequests;\n            ++tileset._statistics.numberOfTilesProcessing;\n        };\n    }\n\n    function handleTileFailure(tileset, tile) {\n        return function(error) {\n            var url = tile._contentResource.url;\n            var message = defined(error.message) ? error.message : error.toString();\n            if (tileset.tileFailed.numberOfListeners > 0) {\n                tileset.tileFailed.raiseEvent({\n                    url : url,\n                    message : message\n                });\n            } else {\n                console.log('A 3D tile failed to load: ' + url);\n                console.log('Error: ' + message);\n            }\n        };\n    }\n\n    function handleTileSuccess(tileset, tile) {\n        return function() {\n            --tileset._statistics.numberOfTilesProcessing;\n\n            if (!tile.hasTilesetContent) {\n                // RESEARCH_IDEA: ability to unload tiles (without content) for an\n                // external tileset when all the tiles are unloaded.\n                tileset._statistics.incrementLoadCounts(tile.content);\n                ++tileset._statistics.numberOfTilesWithContentReady;\n                ++tileset._statistics.numberOfLoadedTilesTotal;\n\n                // Add to the tile cache. Previously expired tiles are already in the cache and won't get re-added.\n                tileset._cache.add(tile);\n            }\n\n            tileset.tileLoad.raiseEvent(tile);\n        };\n    }\n\n    function filterProcessingQueue(tileset) {\n        var tiles = tileset._processingQueue;\n        var length = tiles.length;\n\n        var removeCount = 0;\n        for (var i = 0; i < length; ++i) {\n            var tile = tiles[i];\n            if (tile._contentState !== Cesium3DTileContentState.PROCESSING) {\n                ++removeCount;\n                continue;\n            }\n            if (removeCount > 0) {\n                tiles[i - removeCount] = tile;\n            }\n        }\n        tiles.length -= removeCount;\n    }\n\n    function processTiles(tileset, frameState) {\n        filterProcessingQueue(tileset);\n        var tiles = tileset._processingQueue;\n        var length = tiles.length;\n        // Process tiles in the PROCESSING state so they will eventually move to the READY state.\n        for (var i = 0; i < length; ++i) {\n            tiles[i].process(tileset, frameState);\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    var scratchCartesian = new Cartesian3();\n\n    var stringOptions = {\n        maximumFractionDigits : 3\n    };\n\n    function formatMemoryString(memorySizeInBytes) {\n        var memoryInMegabytes = memorySizeInBytes / 1048576;\n        if (memoryInMegabytes < 1.0) {\n            return memoryInMegabytes.toLocaleString(undefined, stringOptions);\n        }\n        return Math.round(memoryInMegabytes).toLocaleString();\n    }\n\n    function computeTileLabelPosition(tile) {\n        var boundingVolume = tile.boundingVolume.boundingVolume;\n        var halfAxes = boundingVolume.halfAxes;\n        var radius = boundingVolume.radius;\n\n        var position = Cartesian3.clone(boundingVolume.center, scratchCartesian);\n        if (defined(halfAxes)) {\n            position.x += 0.75 * (halfAxes[0] + halfAxes[3] + halfAxes[6]);\n            position.y += 0.75 * (halfAxes[1] + halfAxes[4] + halfAxes[7]);\n            position.z += 0.75 * (halfAxes[2] + halfAxes[5] + halfAxes[8]);\n        } else if (defined(radius)) {\n            var normal = Cartesian3.normalize(boundingVolume.center, scratchCartesian);\n            normal = Cartesian3.multiplyByScalar(normal, 0.75 * radius, scratchCartesian);\n            position = Cartesian3.add(normal, boundingVolume.center, scratchCartesian);\n        }\n        return position;\n    }\n\n    function addTileDebugLabel(tile, tileset, position) {\n        var labelString = '';\n        var attributes = 0;\n\n        if (tileset.debugShowGeometricError) {\n            labelString += '\\nGeometric error: ' + tile.geometricError;\n            attributes++;\n        }\n\n        if (tileset.debugShowRenderingStatistics) {\n            labelString += '\\nCommands: ' + tile.commandsLength;\n            attributes++;\n\n            // Don't display number of points or triangles if 0.\n            var numberOfPoints = tile.content.pointsLength;\n            if (numberOfPoints > 0) {\n                labelString += '\\nPoints: ' + tile.content.pointsLength;\n                attributes++;\n            }\n\n            var numberOfTriangles = tile.content.trianglesLength;\n            if (numberOfTriangles > 0) {\n                labelString += '\\nTriangles: ' + tile.content.trianglesLength;\n                attributes++;\n            }\n\n            labelString += '\\nFeatures: ' + tile.content.featuresLength;\n            attributes ++;\n        }\n\n        if (tileset.debugShowMemoryUsage) {\n            labelString += '\\nTexture Memory: ' + formatMemoryString(tile.content.texturesByteLength);\n            labelString += '\\nGeometry Memory: ' + formatMemoryString(tile.content.geometryByteLength);\n            attributes += 2;\n        }\n\n        if (tileset.debugShowUrl) {\n            labelString += '\\nUrl: ' + tile._header.content.uri;\n            attributes++;\n        }\n\n        var newLabel = {\n            text : labelString.substring(1),\n            position : position,\n            font : (19-attributes) + 'px sans-serif',\n            showBackground : true,\n            disableDepthTestDistance : Number.POSITIVE_INFINITY\n        };\n\n        return tileset._tileDebugLabels.add(newLabel);\n    }\n\n    function updateTileDebugLabels(tileset, frameState) {\n        var i;\n        var tile;\n        var selectedTiles = tileset._selectedTiles;\n        var selectedLength = selectedTiles.length;\n        var emptyTiles = tileset._emptyTiles;\n        var emptyLength = emptyTiles.length;\n        tileset._tileDebugLabels.removeAll();\n\n        if (tileset.debugPickedTileLabelOnly) {\n            if (defined(tileset.debugPickedTile)) {\n                var position = (defined(tileset.debugPickPosition)) ? tileset.debugPickPosition : computeTileLabelPosition(tileset.debugPickedTile);\n                var label = addTileDebugLabel(tileset.debugPickedTile, tileset, position);\n                label.pixelOffset = new Cartesian2(15, -15); // Offset to avoid picking the label.\n            }\n        } else {\n            for (i = 0; i < selectedLength; ++i) {\n                tile = selectedTiles[i];\n                addTileDebugLabel(tile, tileset, computeTileLabelPosition(tile));\n            }\n            for (i = 0; i < emptyLength; ++i) {\n                tile = emptyTiles[i];\n                if (tile.hasTilesetContent) {\n                    addTileDebugLabel(tile, tileset, computeTileLabelPosition(tile));\n                }\n            }\n        }\n        tileset._tileDebugLabels.update(frameState);\n    }\n\n    function updateTiles(tileset, frameState, passOptions) {\n        tileset._styleEngine.applyStyle(tileset, passOptions);\n\n        var isRender = passOptions.isRender;\n        var statistics = tileset._statistics;\n        var commandList = frameState.commandList;\n        var numberOfInitialCommands = commandList.length;\n        var selectedTiles = tileset._selectedTiles;\n        var selectedLength = selectedTiles.length;\n        var emptyTiles = tileset._emptyTiles;\n        var emptyLength = emptyTiles.length;\n        var tileVisible = tileset.tileVisible;\n        var i;\n        var tile;\n\n        var bivariateVisibilityTest = tileset._skipLevelOfDetail && tileset._hasMixedContent && frameState.context.stencilBuffer && selectedLength > 0;\n\n        tileset._backfaceCommands.length = 0;\n\n        if (bivariateVisibilityTest) {\n            if (!defined(tileset._stencilClearCommand)) {\n                tileset._stencilClearCommand = new ClearCommand({\n                    stencil : 0,\n                    pass : Pass.CESIUM_3D_TILE,\n                    renderState : RenderState.fromCache({\n                        stencilMask : StencilConstants.SKIP_LOD_MASK\n                    })\n                });\n            }\n            commandList.push(tileset._stencilClearCommand);\n        }\n\n        var lengthBeforeUpdate = commandList.length;\n        for (i = 0; i < selectedLength; ++i) {\n            tile = selectedTiles[i];\n            // Raise the tileVisible event before update in case the tileVisible event\n            // handler makes changes that update needs to apply to WebGL resources\n            if (isRender) {\n                tileVisible.raiseEvent(tile);\n            }\n            tile.update(tileset, frameState, passOptions);\n            statistics.incrementSelectionCounts(tile.content);\n            ++statistics.selected;\n        }\n        for (i = 0; i < emptyLength; ++i) {\n            tile = emptyTiles[i];\n            tile.update(tileset, frameState, passOptions);\n        }\n\n        var addedCommandsLength = commandList.length - lengthBeforeUpdate;\n\n        tileset._backfaceCommands.trim();\n\n        if (bivariateVisibilityTest) {\n            /**\n             * Consider 'effective leaf' tiles as selected tiles that have no selected descendants. They may have children,\n             * but they are currently our effective leaves because they do not have selected descendants. These tiles\n             * are those where with tile._finalResolution === true.\n             * Let 'unresolved' tiles be those with tile._finalResolution === false.\n             *\n             * 1. Render just the backfaces of unresolved tiles in order to lay down z\n             * 2. Render all frontfaces wherever tile._selectionDepth > stencilBuffer.\n             *    Replace stencilBuffer with tile._selectionDepth, when passing the z test.\n             *    Because children are always drawn before ancestors {@link Cesium3DTilesetTraversal#traverseAndSelect},\n             *    this effectively draws children first and does not draw ancestors if a descendant has already\n             *    been drawn at that pixel.\n             *    Step 1 prevents child tiles from appearing on top when they are truly behind ancestor content.\n             *    If they are behind the backfaces of the ancestor, then they will not be drawn.\n             *\n             * NOTE: Step 2 sometimes causes visual artifacts when backfacing child content has some faces that\n             * partially face the camera and are inside of the ancestor content. Because they are inside, they will\n             * not be culled by the depth writes in Step 1, and because they partially face the camera, the stencil tests\n             * will draw them on top of the ancestor content.\n             *\n             * NOTE: Because we always render backfaces of unresolved tiles, if the camera is looking at the backfaces\n             * of an object, they will always be drawn while loading, even if backface culling is enabled.\n             */\n\n            var backfaceCommands = tileset._backfaceCommands.values;\n            var backfaceCommandsLength = backfaceCommands.length;\n\n            commandList.length += backfaceCommandsLength;\n\n            // copy commands to the back of the commandList\n            for (i = addedCommandsLength - 1; i >= 0; --i) {\n                commandList[lengthBeforeUpdate + backfaceCommandsLength + i] = commandList[lengthBeforeUpdate + i];\n            }\n\n            // move backface commands to the front of the commandList\n            for (i = 0; i < backfaceCommandsLength; ++i) {\n                commandList[lengthBeforeUpdate + i] = backfaceCommands[i];\n            }\n        }\n\n        // Number of commands added by each update above\n        addedCommandsLength = commandList.length - numberOfInitialCommands;\n        statistics.numberOfCommands = addedCommandsLength;\n\n        // Only run EDL if simple attenuation is on\n        if (isRender &&\n            tileset.pointCloudShading.attenuation &&\n            tileset.pointCloudShading.eyeDomeLighting &&\n            (addedCommandsLength > 0)) {\n            tileset._pointCloudEyeDomeLighting.update(frameState, numberOfInitialCommands, tileset.pointCloudShading, tileset.boundingSphere);\n        }\n\n        if (isRender) {\n            if (tileset.debugShowGeometricError || tileset.debugShowRenderingStatistics || tileset.debugShowMemoryUsage || tileset.debugShowUrl) {\n                if (!defined(tileset._tileDebugLabels)) {\n                    tileset._tileDebugLabels = new LabelCollection();\n                }\n                updateTileDebugLabels(tileset, frameState);\n            } else {\n                tileset._tileDebugLabels = tileset._tileDebugLabels && tileset._tileDebugLabels.destroy();\n            }\n        }\n    }\n\n    var scratchStack = [];\n\n    function destroySubtree(tileset, tile) {\n        var root = tile;\n        var stack = scratchStack;\n        stack.push(tile);\n        while (stack.length > 0) {\n            tile = stack.pop();\n            var children = tile.children;\n            var length = children.length;\n            for (var i = 0; i < length; ++i) {\n                stack.push(children[i]);\n            }\n            if (tile !== root) {\n                destroyTile(tileset, tile);\n                --tileset._statistics.numberOfTilesTotal;\n            }\n        }\n        root.children = [];\n    }\n\n    function unloadTile(tileset, tile) {\n        tileset.tileUnload.raiseEvent(tile);\n        tileset._statistics.decrementLoadCounts(tile.content);\n        --tileset._statistics.numberOfTilesWithContentReady;\n        tile.unloadContent();\n    }\n\n    function destroyTile(tileset, tile) {\n        tileset._cache.unloadTile(tileset, tile, unloadTile);\n        tile.destroy();\n    }\n\n    /**\n     * Unloads all tiles that weren't selected the previous frame.  This can be used to\n     * explicitly manage the tile cache and reduce the total number of tiles loaded below\n     * {@link Cesium3DTileset#maximumMemoryUsage}.\n     * <p>\n     * Tile unloads occur at the next frame to keep all the WebGL delete calls\n     * within the render loop.\n     * </p>\n     */\n    Cesium3DTileset.prototype.trimLoadedTiles = function() {\n        this._cache.trim();\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function raiseLoadProgressEvent(tileset, frameState) {\n        var statistics = tileset._statistics;\n        var statisticsLast = tileset._statisticsLast;\n\n        var numberOfPendingRequests = statistics.numberOfPendingRequests;\n        var numberOfTilesProcessing = statistics.numberOfTilesProcessing;\n        var lastNumberOfPendingRequest = statisticsLast.numberOfPendingRequests;\n        var lastNumberOfTilesProcessing = statisticsLast.numberOfTilesProcessing;\n\n        Cesium3DTilesetStatistics.clone(statistics, statisticsLast);\n\n        var progressChanged = (numberOfPendingRequests !== lastNumberOfPendingRequest) || (numberOfTilesProcessing !== lastNumberOfTilesProcessing);\n\n        if (progressChanged) {\n            frameState.afterRender.push(function() {\n                tileset.loadProgress.raiseEvent(numberOfPendingRequests, numberOfTilesProcessing);\n            });\n        }\n\n        tileset._tilesLoaded = (statistics.numberOfPendingRequests === 0) && (statistics.numberOfTilesProcessing === 0) && (statistics.numberOfAttemptedRequests === 0);\n\n        // Events are raised (added to the afterRender queue) here since promises\n        // may resolve outside of the update loop that then raise events, e.g.,\n        // model's readyPromise.\n        if (progressChanged && tileset._tilesLoaded) {\n            frameState.afterRender.push(function() {\n                tileset.allTilesLoaded.raiseEvent();\n            });\n            if (!tileset._initialTilesLoaded) {\n                tileset._initialTilesLoaded = true;\n                frameState.afterRender.push(function() {\n                    tileset.initialTilesLoaded.raiseEvent();\n                });\n            }\n        }\n    }\n\n    function resetMinimumMaximum(tileset) {\n        tileset._heatmap.resetMinimumMaximum();\n        tileset._minimumPriority.depth = Number.MAX_VALUE;\n        tileset._maximumPriority.depth = -Number.MAX_VALUE;\n        tileset._minimumPriority.foveatedFactor = Number.MAX_VALUE;\n        tileset._maximumPriority.foveatedFactor = -Number.MAX_VALUE;\n        tileset._minimumPriority.distance = Number.MAX_VALUE;\n        tileset._maximumPriority.distance = -Number.MAX_VALUE;\n        tileset._minimumPriority.reverseScreenSpaceError = Number.MAX_VALUE;\n        tileset._maximumPriority.reverseScreenSpaceError = -Number.MAX_VALUE;\n    }\n\n    function detectModelMatrixChanged(tileset, frameState) {\n        if (frameState.frameNumber !== tileset._updatedModelMatrixFrame || !defined(tileset._previousModelMatrix)) {\n            tileset._updatedModelMatrixFrame = frameState.frameNumber;\n            tileset._modelMatrixChanged = !Matrix4.equals(tileset.modelMatrix, tileset._previousModelMatrix);\n            tileset._previousModelMatrix = Matrix4.clone(tileset.modelMatrix, tileset._previousModelMatrix);\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    function update(tileset, frameState, passStatistics, passOptions) {\n        if (frameState.mode === SceneMode.MORPHING) {\n            return false;\n        }\n\n        if (!tileset.ready) {\n            return false;\n        }\n\n        var statistics = tileset._statistics;\n        statistics.clear();\n\n        var isRender = passOptions.isRender;\n\n        // Resets the visibility check for each pass\n        ++tileset._updatedVisibilityFrame;\n\n        // Update any tracked min max values\n        resetMinimumMaximum(tileset);\n\n        detectModelMatrixChanged(tileset, frameState);\n        tileset._cullRequestsWhileMoving = tileset.cullRequestsWhileMoving && !tileset._modelMatrixChanged;\n\n        var ready = passOptions.traversal.selectTiles(tileset, frameState);\n\n        if (passOptions.requestTiles) {\n            requestTiles(tileset);\n        }\n\n        updateTiles(tileset, frameState, passOptions);\n\n        // Update pass statistics\n        Cesium3DTilesetStatistics.clone(statistics, passStatistics);\n\n        if (isRender) {\n            var credits = tileset._credits;\n            if (defined(credits) && statistics.selected !== 0) {\n                var length = credits.length;\n                for (var i = 0; i < length; ++i) {\n                    frameState.creditDisplay.addCredit(credits[i]);\n                }\n            }\n        }\n\n        return ready;\n    }\n\n    /**\n     * @private\n     */\n    Cesium3DTileset.prototype.update = function(frameState) {\n        this.updateForPass(frameState, frameState.tilesetPassState);\n    };\n\n    /**\n     * @private\n     */\n    Cesium3DTileset.prototype.updateForPass = function(frameState, tilesetPassState) {\n        \n\n        var pass = tilesetPassState.pass;\n        if ((pass === Cesium3DTilePass.PRELOAD && (!this.preloadWhenHidden || this.show)) ||\n            (pass === Cesium3DTilePass.PRELOAD_FLIGHT && (!this.preloadFlightDestinations || (!this.show && !this.preloadWhenHidden))) ||\n            (pass === Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK && ((!this._cullRequestsWhileMoving && this.foveatedTimeDelay <= 0) || !this.show))) {\n            return;\n        }\n\n        var originalCommandList = frameState.commandList;\n        var originalCamera = frameState.camera;\n        var originalCullingVolume = frameState.cullingVolume;\n\n        tilesetPassState.ready = false;\n\n        var passOptions = Cesium3DTilePass.getPassOptions(pass);\n        var ignoreCommands = passOptions.ignoreCommands;\n\n        var commandList = defaultValue(tilesetPassState.commandList, originalCommandList);\n        var commandStart = commandList.length;\n\n        frameState.commandList = commandList;\n        frameState.camera = defaultValue(tilesetPassState.camera, originalCamera);\n        frameState.cullingVolume = defaultValue(tilesetPassState.cullingVolume, originalCullingVolume);\n\n        var passStatistics = this._statisticsPerPass[pass];\n\n        if (this.show || ignoreCommands) {\n            this._pass = pass;\n            tilesetPassState.ready = update(this, frameState, passStatistics, passOptions);\n        }\n\n        if (ignoreCommands) {\n            commandList.length = commandStart;\n        }\n\n        frameState.commandList = originalCommandList;\n        frameState.camera = originalCamera;\n        frameState.cullingVolume = originalCullingVolume;\n    };\n\n    /**\n     * <code>true</code> if the tileset JSON file lists the extension in extensionsUsed; otherwise, <code>false</code>.\n     * @param {String} extensionName The name of the extension to check.\n     *\n     * @returns {Boolean} <code>true</code> if the tileset JSON file lists the extension in extensionsUsed; otherwise, <code>false</code>.\n     */\n    Cesium3DTileset.prototype.hasExtension = function(extensionName) {\n        if (!defined(this._extensionsUsed)) {\n            return false;\n        }\n\n        return (this._extensionsUsed.indexOf(extensionName) > -1);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see Cesium3DTileset#destroy\n     */\n    Cesium3DTileset.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * tileset = tileset && tileset.destroy();\n     *\n     * @see Cesium3DTileset#isDestroyed\n     */\n    Cesium3DTileset.prototype.destroy = function() {\n        this._tileDebugLabels = this._tileDebugLabels && this._tileDebugLabels.destroy();\n        this._clippingPlanes = this._clippingPlanes && this._clippingPlanes.destroy();\n\n        // Traverse the tree and destroy all tiles\n        if (defined(this._root)) {\n            var stack = scratchStack;\n            stack.push(this._root);\n\n            while (stack.length > 0) {\n                var tile = stack.pop();\n                tile.destroy();\n\n                var children = tile.children;\n                var length = children.length;\n                for (var i = 0; i < length; ++i) {\n                    stack.push(children[i]);\n                }\n            }\n        }\n\n        this._root = undefined;\n        return destroyObject(this);\n    };\n\n    /**\n     * Optimization option. Used as a callback when {@link Cesium3DTileset#foveatedScreenSpaceError} is true to control how much to raise the screen space error for tiles outside the foveated cone,\n     * interpolating between {@link Cesium3DTileset#foveatedMinimumScreenSpaceErrorRelaxation} and {@link Cesium3DTileset#maximumScreenSpaceError}.\n     *\n     * @callback Cesium3DTileset~foveatedInterpolationCallback\n     * @default Math.lerp\n     *\n     * @param {Number} p The start value to interpolate.\n     * @param {Number} q The end value to interpolate.\n     * @param {Number} time The time of interpolation generally in the range <code>[0.0, 1.0]</code>.\n     * @returns {Number} The interpolated value.\n     */\nexport default Cesium3DTileset;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport Resource from '../Core/Resource.js';\nimport Cesium3DTileset from '../Scene/Cesium3DTileset.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\nvar modelMatrixScratch = new Matrix4();\n\n/**\n * A {@link Visualizer} which maps {@link Entity#tileset} to a {@link Cesium3DTileset}.\n * @alias Cesium3DTilesetVisualizer\n * @constructor\n *\n * @param {Scene} scene The scene the primitives will be rendered in.\n * @param {EntityCollection} entityCollection The entityCollection to visualize.\n */\nfunction Cesium3DTilesetVisualizer(scene, entityCollection) {\n    \n\n    entityCollection.collectionChanged.addEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n\n    this._scene = scene;\n    this._primitives = scene.primitives;\n    this._entityCollection = entityCollection;\n    this._tilesetHash = {};\n    this._entitiesToVisualize = new AssociativeArray();\n    this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n}\n\n/**\n * Updates models created this visualizer to match their\n * Entity counterpart at the given time.\n *\n * @param {JulianDate} time The time to update to.\n * @returns {Boolean} This function always returns true.\n */\nCesium3DTilesetVisualizer.prototype.update = function(time) {\n    \n\n    var entities = this._entitiesToVisualize.values;\n    var tilesetHash = this._tilesetHash;\n    var primitives = this._primitives;\n\n    for (var i = 0, len = entities.length; i < len; i++) {\n        var entity = entities[i];\n        var tilesetGraphics = entity._tileset;\n\n        var resource;\n        var tilesetData = tilesetHash[entity.id];\n        var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(tilesetGraphics._show, time, true);\n\n        var modelMatrix;\n        if (show) {\n            modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n            resource = Resource.createIfNeeded(Property.getValueOrUndefined(tilesetGraphics._uri, time));\n        }\n\n        if (!show) {\n            if (defined(tilesetData)) {\n                tilesetData.tilesetPrimitive.show = false;\n            }\n            continue;\n        }\n\n        var tileset = defined(tilesetData) ? tilesetData.tilesetPrimitive : undefined;\n        if (!defined(tileset) || resource.url !== tilesetData.url) {\n            if (defined(tileset)) {\n                primitives.removeAndDestroy(tileset);\n                delete tilesetHash[entity.id];\n            }\n            tileset = new Cesium3DTileset({\n                url: resource\n            });\n            tileset.id = entity;\n            primitives.add(tileset);\n\n            tilesetData = {\n                tilesetPrimitive: tileset,\n                url: resource.url,\n                loadFail: false\n            };\n            tilesetHash[entity.id] = tilesetData;\n\n            checkLoad(tileset, entity, tilesetHash);\n        }\n\n        tileset.show = true;\n        if (defined(modelMatrix)) {\n            tileset.modelMatrix = modelMatrix;\n        }\n        tileset.maximumScreenSpaceError = Property.getValueOrDefault(tilesetGraphics.maximumScreenSpaceError, time, tileset.maximumScreenSpaceError);\n    }\n\n    return true;\n};\n\n/**\n * Returns true if this object was destroyed; otherwise, false.\n *\n * @returns {Boolean} True if this object was destroyed; otherwise, false.\n */\nCesium3DTilesetVisualizer.prototype.isDestroyed = function() {\n    return false;\n};\n\n/**\n * Removes and destroys all primitives created by this instance.\n */\nCesium3DTilesetVisualizer.prototype.destroy = function() {\n    this._entityCollection.collectionChanged.removeEventListener(Cesium3DTilesetVisualizer.prototype._onCollectionChanged, this);\n    var entities = this._entitiesToVisualize.values;\n    var tilesetHash = this._tilesetHash;\n    var primitives = this._primitives;\n    for (var i = entities.length - 1; i > -1; i--) {\n        removeTileset(this, entities[i], tilesetHash, primitives);\n    }\n    return destroyObject(this);\n};\n\n/**\n * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n * The bounding sphere is in the fixed frame of the scene's globe.\n *\n * @param {Entity} entity The entity whose bounding sphere to compute.\n * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n *                       BoundingSphereState.PENDING if the result is still being computed, or\n *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n * @private\n */\nCesium3DTilesetVisualizer.prototype.getBoundingSphere = function(entity, result) {\n    \n\n    var tilesetData = this._tilesetHash[entity.id];\n    if (!defined(tilesetData) || tilesetData.loadFail) {\n        return BoundingSphereState.FAILED;\n    }\n\n    var primitive = tilesetData.tilesetPrimitive;\n    if (!defined(primitive) || !primitive.show) {\n        return BoundingSphereState.FAILED;\n    }\n\n    if (!primitive.ready) {\n        return BoundingSphereState.PENDING;\n    }\n\n    BoundingSphere.clone(primitive.boundingSphere, result);\n\n    return BoundingSphereState.DONE;\n};\n\n/**\n * @private\n */\nCesium3DTilesetVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n    var i;\n    var entity;\n    var entities = this._entitiesToVisualize;\n    var tilesetHash = this._tilesetHash;\n    var primitives = this._primitives;\n\n    for (i = added.length - 1; i > -1; i--) {\n        entity = added[i];\n        if (defined(entity._tileset)) {\n            entities.set(entity.id, entity);\n        }\n    }\n\n    for (i = changed.length - 1; i > -1; i--) {\n        entity = changed[i];\n        if (defined(entity._tileset)) {\n            entities.set(entity.id, entity);\n        } else {\n            removeTileset(this, entity, tilesetHash, primitives);\n            entities.remove(entity.id);\n        }\n    }\n\n    for (i = removed.length - 1; i > -1; i--) {\n        entity = removed[i];\n        removeTileset(this, entity, tilesetHash, primitives);\n        entities.remove(entity.id);\n    }\n};\n\nfunction removeTileset(visualizer, entity, tilesetHash, primitives) {\n    var tilesetData = tilesetHash[entity.id];\n    if (defined(tilesetData)) {\n        primitives.removeAndDestroy(tilesetData.tilesetPrimitive);\n        delete tilesetHash[entity.id];\n    }\n}\n\nfunction checkLoad(primitive, entity, tilesetHash) {\n    primitive.readyPromise.otherwise(function(error) {\n        console.error(error);\n        tilesetHash[entity.id].loadFail = true;\n    });\n}\nexport default Cesium3DTilesetVisualizer;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport JulianDate from '../Core/JulianDate.js';\nimport Matrix3 from '../Core/Matrix3.js';\nimport Matrix4 from '../Core/Matrix4.js';\nimport ReferenceFrame from '../Core/ReferenceFrame.js';\nimport TimeInterval from '../Core/TimeInterval.js';\nimport Transforms from '../Core/Transforms.js';\nimport PolylineCollection from '../Scene/PolylineCollection.js';\nimport SceneMode from '../Scene/SceneMode.js';\nimport CompositePositionProperty from './CompositePositionProperty.js';\nimport ConstantPositionProperty from './ConstantPositionProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\nimport ReferenceProperty from './ReferenceProperty.js';\nimport SampledPositionProperty from './SampledPositionProperty.js';\nimport ScaledPositionProperty from './ScaledPositionProperty.js';\nimport TimeIntervalCollectionPositionProperty from './TimeIntervalCollectionPositionProperty.js';\n\n    var defaultResolution = 60.0;\n    var defaultWidth = 1.0;\n\n    var scratchTimeInterval = new TimeInterval();\n    var subSampleCompositePropertyScratch = new TimeInterval();\n    var subSampleIntervalPropertyScratch = new TimeInterval();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.polyline = undefined;\n        this.index = undefined;\n        this.updater = undefined;\n    }\n\n    function subSampleSampledProperty(property, start, stop, times, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var r = startingIndex;\n        //Always step exactly on start (but only use it if it exists.)\n        var tmp;\n        tmp = property.getValueInReferenceFrame(start, referenceFrame, result[r]);\n        if (defined(tmp)) {\n            result[r++] = tmp;\n        }\n\n        var steppedOnNow = !defined(updateTime) || JulianDate.lessThanOrEquals(updateTime, start) || JulianDate.greaterThanOrEquals(updateTime, stop);\n\n        //Iterate over all interval times and add the ones that fall in our\n        //time range.  Note that times can contain data outside of\n        //the intervals range.  This is by design for use with interpolation.\n        var t = 0;\n        var len = times.length;\n        var current = times[t];\n        var loopStop = stop;\n        var sampling = false;\n        var sampleStepsToTake;\n        var sampleStepsTaken;\n        var sampleStepSize;\n\n        while (t < len) {\n            if (!steppedOnNow && JulianDate.greaterThanOrEquals(current, updateTime)) {\n                tmp = property.getValueInReferenceFrame(updateTime, referenceFrame, result[r]);\n                if (defined(tmp)) {\n                    result[r++] = tmp;\n                }\n                steppedOnNow = true;\n            }\n            if (JulianDate.greaterThan(current, start) && JulianDate.lessThan(current, loopStop) && !current.equals(updateTime)) {\n                tmp = property.getValueInReferenceFrame(current, referenceFrame, result[r]);\n                if (defined(tmp)) {\n                    result[r++] = tmp;\n                }\n            }\n\n            if (t < (len - 1)) {\n                if (maximumStep > 0 && !sampling) {\n                    var next = times[t + 1];\n                    var secondsUntilNext = JulianDate.secondsDifference(next, current);\n                    sampling = secondsUntilNext > maximumStep;\n\n                    if (sampling) {\n                        sampleStepsToTake = Math.ceil(secondsUntilNext / maximumStep);\n                        sampleStepsTaken = 0;\n                        sampleStepSize = secondsUntilNext / Math.max(sampleStepsToTake, 2);\n                        sampleStepsToTake = Math.max(sampleStepsToTake - 1, 1);\n                    }\n                }\n\n                if (sampling && sampleStepsTaken < sampleStepsToTake) {\n                    current = JulianDate.addSeconds(current, sampleStepSize, new JulianDate());\n                    sampleStepsTaken++;\n                    continue;\n                }\n            }\n            sampling = false;\n            t++;\n            current = times[t];\n        }\n\n        //Always step exactly on stop (but only use it if it exists.)\n        tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[r]);\n        if (defined(tmp)) {\n            result[r++] = tmp;\n        }\n\n        return r;\n    }\n\n    function subSampleGenericProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var tmp;\n        var i = 0;\n        var index = startingIndex;\n        var time = start;\n        var stepSize = Math.max(maximumStep, 60);\n        var steppedOnNow = !defined(updateTime) || JulianDate.lessThanOrEquals(updateTime, start) || JulianDate.greaterThanOrEquals(updateTime, stop);\n        while (JulianDate.lessThan(time, stop)) {\n            if (!steppedOnNow && JulianDate.greaterThanOrEquals(time, updateTime)) {\n                steppedOnNow = true;\n                tmp = property.getValueInReferenceFrame(updateTime, referenceFrame, result[index]);\n                if (defined(tmp)) {\n                    result[index] = tmp;\n                    index++;\n                }\n            }\n            tmp = property.getValueInReferenceFrame(time, referenceFrame, result[index]);\n            if (defined(tmp)) {\n                result[index] = tmp;\n                index++;\n            }\n            i++;\n            time = JulianDate.addSeconds(start, stepSize * i, new JulianDate());\n        }\n        //Always sample stop.\n        tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[index]);\n        if (defined(tmp)) {\n            result[index] = tmp;\n            index++;\n        }\n        return index;\n    }\n\n    function subSampleIntervalProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        subSampleIntervalPropertyScratch.start = start;\n        subSampleIntervalPropertyScratch.stop = stop;\n\n        var index = startingIndex;\n        var intervals = property.intervals;\n        for (var i = 0; i < intervals.length; i++) {\n            var interval = intervals.get(i);\n            if (!TimeInterval.intersect(interval, subSampleIntervalPropertyScratch, scratchTimeInterval).isEmpty) {\n                var time = interval.start;\n                if (!interval.isStartIncluded) {\n                    if (interval.isStopIncluded) {\n                        time = interval.stop;\n                    } else {\n                        time = JulianDate.addSeconds(interval.start, JulianDate.secondsDifference(interval.stop, interval.start) / 2, new JulianDate());\n                    }\n                }\n                var tmp = property.getValueInReferenceFrame(time, referenceFrame, result[index]);\n                if (defined(tmp)) {\n                    result[index] = tmp;\n                    index++;\n                }\n            }\n        }\n        return index;\n    }\n\n    function subSampleConstantProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var tmp = property.getValueInReferenceFrame(start, referenceFrame, result[startingIndex]);\n        if (defined(tmp)) {\n            result[startingIndex++] = tmp;\n        }\n        return startingIndex;\n    }\n\n    function subSampleCompositeProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        subSampleCompositePropertyScratch.start = start;\n        subSampleCompositePropertyScratch.stop = stop;\n\n        var index = startingIndex;\n        var intervals = property.intervals;\n        for (var i = 0; i < intervals.length; i++) {\n            var interval = intervals.get(i);\n            if (!TimeInterval.intersect(interval, subSampleCompositePropertyScratch, scratchTimeInterval).isEmpty) {\n                var intervalStart = interval.start;\n                var intervalStop = interval.stop;\n\n                var sampleStart = start;\n                if (JulianDate.greaterThan(intervalStart, sampleStart)) {\n                    sampleStart = intervalStart;\n                }\n\n                var sampleStop = stop;\n                if (JulianDate.lessThan(intervalStop, sampleStop)) {\n                    sampleStop = intervalStop;\n                }\n\n                index = reallySubSample(interval.data, sampleStart, sampleStop, updateTime, referenceFrame, maximumStep, index, result);\n            }\n        }\n        return index;\n    }\n\n    function reallySubSample(property, start, stop, updateTime, referenceFrame, maximumStep, index, result) {\n        //Unwrap any references until we have the actual property.\n        while (property instanceof ReferenceProperty) {\n            property = property.resolvedProperty;\n        }\n\n        if (property instanceof SampledPositionProperty) {\n            var times = property._property._times;\n            index = subSampleSampledProperty(property, start, stop, times, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof CompositePositionProperty) {\n            index = subSampleCompositeProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof TimeIntervalCollectionPositionProperty) {\n            index = subSampleIntervalProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof ConstantPositionProperty ||\n                   (property instanceof ScaledPositionProperty && Property.isConstant(property))) {\n            index = subSampleConstantProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else {\n            //Fallback to generic sampling.\n            index = subSampleGenericProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        }\n        return index;\n    }\n\n    function subSample(property, start, stop, updateTime, referenceFrame, maximumStep, result) {\n        if (!defined(result)) {\n            result = [];\n        }\n\n        var length = reallySubSample(property, start, stop, updateTime, referenceFrame, maximumStep, 0, result);\n        result.length = length;\n        return result;\n    }\n\n    var toFixedScratch = new Matrix3();\n    function PolylineUpdater(scene, referenceFrame) {\n        this._unusedIndexes = [];\n        this._polylineCollection = new PolylineCollection();\n        this._scene = scene;\n        this._referenceFrame = referenceFrame;\n        scene.primitives.add(this._polylineCollection);\n    }\n\n    PolylineUpdater.prototype.update = function(time) {\n        if (this._referenceFrame === ReferenceFrame.INERTIAL) {\n            var toFixed = Transforms.computeIcrfToFixedMatrix(time, toFixedScratch);\n            if (!defined(toFixed)) {\n                toFixed = Transforms.computeTemeToPseudoFixedMatrix(time, toFixedScratch);\n            }\n            Matrix4.fromRotationTranslation(toFixed, Cartesian3.ZERO, this._polylineCollection.modelMatrix);\n        }\n    };\n\n    PolylineUpdater.prototype.updateObject = function(time, item) {\n        var entity = item.entity;\n        var pathGraphics = entity._path;\n        var positionProperty = entity._position;\n\n        var sampleStart;\n        var sampleStop;\n        var showProperty = pathGraphics._show;\n        var polyline = item.polyline;\n        var show = entity.isShowing && (!defined(showProperty) || showProperty.getValue(time));\n\n        //While we want to show the path, there may not actually be anything to show\n        //depending on lead/trail settings.  Compute the interval of the path to\n        //show and check against actual availability.\n        if (show) {\n            var leadTime = Property.getValueOrUndefined(pathGraphics._leadTime, time);\n            var trailTime = Property.getValueOrUndefined(pathGraphics._trailTime, time);\n            var availability = entity._availability;\n            var hasAvailability = defined(availability);\n            var hasLeadTime = defined(leadTime);\n            var hasTrailTime = defined(trailTime);\n\n            //Objects need to have either defined availability or both a lead and trail time in order to\n            //draw a path (since we can't draw \"infinite\" paths.\n            show = hasAvailability || (hasLeadTime && hasTrailTime);\n\n            //The final step is to compute the actual start/stop times of the path to show.\n            //If current time is outside of the availability interval, there's a chance that\n            //we won't have to draw anything anyway.\n            if (show) {\n                if (hasTrailTime) {\n                    sampleStart = JulianDate.addSeconds(time, -trailTime, new JulianDate());\n                }\n                if (hasLeadTime) {\n                    sampleStop = JulianDate.addSeconds(time, leadTime, new JulianDate());\n                }\n\n                if (hasAvailability) {\n                    var start = availability.start;\n                    var stop = availability.stop;\n\n                    if (!hasTrailTime || JulianDate.greaterThan(start, sampleStart)) {\n                        sampleStart = start;\n                    }\n\n                    if (!hasLeadTime || JulianDate.lessThan(stop, sampleStop)) {\n                        sampleStop = stop;\n                    }\n                }\n                show = JulianDate.lessThan(sampleStart, sampleStop);\n            }\n        }\n\n        if (!show) {\n            //don't bother creating or updating anything else\n            if (defined(polyline)) {\n                this._unusedIndexes.push(item.index);\n                item.polyline = undefined;\n                polyline.show = false;\n                item.index = undefined;\n            }\n            return;\n        }\n\n        if (!defined(polyline)) {\n            var unusedIndexes = this._unusedIndexes;\n            var length = unusedIndexes.length;\n            if (length > 0) {\n                var index = unusedIndexes.pop();\n                polyline = this._polylineCollection.get(index);\n                item.index = index;\n            } else {\n                item.index = this._polylineCollection.length;\n                polyline = this._polylineCollection.add();\n            }\n            polyline.id = entity;\n            item.polyline = polyline;\n        }\n\n        var resolution = Property.getValueOrDefault(pathGraphics._resolution, time, defaultResolution);\n\n        polyline.show = true;\n        polyline.positions = subSample(positionProperty, sampleStart, sampleStop, time, this._referenceFrame, resolution, polyline.positions.slice());\n        polyline.material = MaterialProperty.getValue(time, pathGraphics._material, polyline.material);\n        polyline.width = Property.getValueOrDefault(pathGraphics._width, time, defaultWidth);\n        polyline.distanceDisplayCondition = Property.getValueOrUndefined(pathGraphics._distanceDisplayCondition, time, polyline.distanceDisplayCondition);\n    };\n\n    PolylineUpdater.prototype.removeObject = function(item) {\n        var polyline = item.polyline;\n        if (defined(polyline)) {\n            this._unusedIndexes.push(item.index);\n            item.polyline = undefined;\n            polyline.show = false;\n            polyline.id = undefined;\n            item.index = undefined;\n        }\n    };\n\n    PolylineUpdater.prototype.destroy = function() {\n        this._scene.primitives.remove(this._polylineCollection);\n        return destroyObject(this);\n    };\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#path} to a {@link Polyline}.\n     * @alias PathVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function PathVisualizer(scene, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(PathVisualizer.prototype._onCollectionChanged, this);\n\n        this._scene = scene;\n        this._updaters = {};\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    PathVisualizer.prototype.update = function(time) {\n        \n\n        var updaters = this._updaters;\n        for (var key in updaters) {\n            if (updaters.hasOwnProperty(key)) {\n                updaters[key].update(time);\n            }\n        }\n\n        var items = this._items.values;\n        if (items.length === 0 && defined(this._updaters) && Object.keys(this._updaters).length > 0) {\n            for (var u in updaters) {\n                if (updaters.hasOwnProperty(u)) {\n                    updaters[u].destroy();\n                }\n            }\n            this._updaters = {};\n        }\n\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var positionProperty = entity._position;\n\n            var lastUpdater = item.updater;\n\n            var frameToVisualize = ReferenceFrame.FIXED;\n            if (this._scene.mode === SceneMode.SCENE3D) {\n                frameToVisualize = positionProperty.referenceFrame;\n            }\n\n            var currentUpdater = this._updaters[frameToVisualize];\n\n            if ((lastUpdater === currentUpdater) && (defined(currentUpdater))) {\n                currentUpdater.updateObject(time, item);\n                continue;\n            }\n\n            if (defined(lastUpdater)) {\n                lastUpdater.removeObject(item);\n            }\n\n            if (!defined(currentUpdater)) {\n                currentUpdater = new PolylineUpdater(this._scene, frameToVisualize);\n                currentUpdater.update(time);\n                this._updaters[frameToVisualize] = currentUpdater;\n            }\n\n            item.updater = currentUpdater;\n            if (defined(currentUpdater)) {\n                currentUpdater.updateObject(time, item);\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PathVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PathVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PathVisualizer.prototype._onCollectionChanged, this);\n\n        var updaters = this._updaters;\n        for ( var key in updaters) {\n            if (updaters.hasOwnProperty(key)) {\n                updaters[key].destroy();\n            }\n        }\n\n        return destroyObject(this);\n    };\n\n    PathVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var item;\n        var items = this._items;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._path) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._path) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                item = items.get(entity.id);\n                if (defined(item)) {\n                    if (defined(item.updater)) {\n                        item.updater.removeObject(item);\n                    }\n                    items.remove(entity.id);\n                }\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            item = items.get(entity.id);\n            if (defined(item)) {\n                if (defined(item.updater)) {\n                    item.updater.removeObject(item);\n                }\n                items.remove(entity.id);\n            }\n        }\n    };\n\n    //for testing\n    PathVisualizer._subSample = subSample;\nexport default PathVisualizer;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Cartesian3 from '../Core/Cartesian3.js';\nimport Color from '../Core/Color.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport NearFarScalar from '../Core/NearFarScalar.js';\nimport createBillboardPointCallback from '../Scene/createBillboardPointCallback.js';\nimport HeightReference from '../Scene/HeightReference.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport Property from './Property.js';\n\n    var defaultColor = Color.WHITE;\n    var defaultOutlineColor = Color.BLACK;\n    var defaultOutlineWidth = 0.0;\n    var defaultPixelSize = 1.0;\n    var defaultDisableDepthTestDistance = 0.0;\n\n    var colorScratch = new Color();\n    var positionScratch = new Cartesian3();\n    var outlineColorScratch = new Color();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.pointPrimitive = undefined;\n        this.billboard = undefined;\n        this.color = undefined;\n        this.outlineColor = undefined;\n        this.pixelSize = undefined;\n        this.outlineWidth = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#point} to a {@link PointPrimitive}.\n     * @alias PointVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function PointVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(PointVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    PointVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var pointGraphics = entity._point;\n            var pointPrimitive = item.pointPrimitive;\n            var billboard = item.billboard;\n            var heightReference = Property.getValueOrDefault(pointGraphics._heightReference, time, HeightReference.NONE);\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(pointGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                show = defined(position);\n            }\n            if (!show) {\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            var needsRedraw = false;\n            var updateClamping = false;\n            if ((heightReference !== HeightReference.NONE) && !defined(billboard)) {\n                if (defined(pointPrimitive)) {\n                    returnPrimitive(item, entity, cluster);\n                    pointPrimitive = undefined;\n                }\n\n                billboard = cluster.getBillboard(entity);\n                billboard.id = entity;\n                billboard.image = undefined;\n                item.billboard = billboard;\n                needsRedraw = true;\n\n                // If this new billboard happens to have a position and height reference that match our new values,\n                // billboard._updateClamping will not be called automatically. That's a problem because the clamped\n                // height may be based on different terrain than is now loaded. So we'll manually call\n                // _updateClamping below.\n                updateClamping = Cartesian3.equals(billboard.position, position) && billboard.heightReference === heightReference;\n            } else if ((heightReference === HeightReference.NONE) && !defined(pointPrimitive)) {\n                if (defined(billboard)) {\n                    returnPrimitive(item, entity, cluster);\n                    billboard = undefined;\n                }\n\n                pointPrimitive = cluster.getPoint(entity);\n                pointPrimitive.id = entity;\n                item.pointPrimitive = pointPrimitive;\n            }\n\n            if (defined(pointPrimitive)) {\n                pointPrimitive.show = true;\n                pointPrimitive.position = position;\n                pointPrimitive.scaleByDistance = Property.getValueOrUndefined(pointGraphics._scaleByDistance, time, scaleByDistanceScratch);\n                pointPrimitive.translucencyByDistance = Property.getValueOrUndefined(pointGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n                pointPrimitive.color = Property.getValueOrDefault(pointGraphics._color, time, defaultColor, colorScratch);\n                pointPrimitive.outlineColor = Property.getValueOrDefault(pointGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n                pointPrimitive.outlineWidth = Property.getValueOrDefault(pointGraphics._outlineWidth, time, defaultOutlineWidth);\n                pointPrimitive.pixelSize = Property.getValueOrDefault(pointGraphics._pixelSize, time, defaultPixelSize);\n                pointPrimitive.distanceDisplayCondition = Property.getValueOrUndefined(pointGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n                pointPrimitive.disableDepthTestDistance = Property.getValueOrDefault(pointGraphics._disableDepthTestDistance, time, defaultDisableDepthTestDistance);\n            } else if (defined(billboard)) {\n                billboard.show = true;\n                billboard.position = position;\n                billboard.scaleByDistance = Property.getValueOrUndefined(pointGraphics._scaleByDistance, time, scaleByDistanceScratch);\n                billboard.translucencyByDistance = Property.getValueOrUndefined(pointGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n                billboard.distanceDisplayCondition = Property.getValueOrUndefined(pointGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n                billboard.disableDepthTestDistance = Property.getValueOrDefault(pointGraphics._disableDepthTestDistance, time, defaultDisableDepthTestDistance);\n                billboard.heightReference = heightReference;\n\n                var newColor = Property.getValueOrDefault(pointGraphics._color, time, defaultColor, colorScratch);\n                var newOutlineColor = Property.getValueOrDefault(pointGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n                var newOutlineWidth = Math.round(Property.getValueOrDefault(pointGraphics._outlineWidth, time, defaultOutlineWidth));\n                var newPixelSize = Math.max(1, Math.round(Property.getValueOrDefault(pointGraphics._pixelSize, time, defaultPixelSize)));\n\n                if (newOutlineWidth > 0) {\n                    billboard.scale = 1.0;\n                    needsRedraw = needsRedraw || //\n                                 newOutlineWidth !== item.outlineWidth || //\n                                 newPixelSize !== item.pixelSize || //\n                                 !Color.equals(newColor, item.color) || //\n                                 !Color.equals(newOutlineColor, item.outlineColor);\n                } else {\n                    billboard.scale = newPixelSize / 50.0;\n                    newPixelSize = 50.0;\n                    needsRedraw = needsRedraw || //\n                                 newOutlineWidth !== item.outlineWidth || //\n                                 !Color.equals(newColor, item.color) || //\n                                 !Color.equals(newOutlineColor, item.outlineColor);\n                }\n\n                if (needsRedraw) {\n                    item.color = Color.clone(newColor, item.color);\n                    item.outlineColor = Color.clone(newOutlineColor, item.outlineColor);\n                    item.pixelSize = newPixelSize;\n                    item.outlineWidth = newOutlineWidth;\n\n                    var centerAlpha = newColor.alpha;\n                    var cssColor = newColor.toCssColorString();\n                    var cssOutlineColor = newOutlineColor.toCssColorString();\n                    var textureId = JSON.stringify([cssColor, newPixelSize, cssOutlineColor, newOutlineWidth]);\n\n                    billboard.setImage(textureId, createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, newOutlineWidth, newPixelSize));\n                }\n\n                if (updateClamping) {\n                    billboard._updateClamping();\n                }\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    PointVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !(defined(item.pointPrimitive) || defined(item.billboard))) {\n            return BoundingSphereState.FAILED;\n        }\n\n        if (defined(item.pointPrimitive)) {\n            result.center = Cartesian3.clone(item.pointPrimitive.position, result.center);\n        } else {\n            var billboard = item.billboard;\n            if (!defined(billboard._clampedPosition)) {\n                return BoundingSphereState.PENDING;\n            }\n            result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n        }\n\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PointVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PointVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PointVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removePoint(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    PointVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._point) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._point) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            var pointPrimitive = item.pointPrimitive;\n            if (defined(pointPrimitive)) {\n                item.pointPrimitive = undefined;\n                cluster.removePoint(entity);\n                return;\n            }\n            var billboard = item.billboard;\n            if (defined(billboard)) {\n                item.billboard = undefined;\n                cluster.removeBillboard(entity);\n            }\n        }\n    }\nexport default PointVisualizer;\n","import ArcType from './ArcType.js';\nimport arrayRemoveDuplicates from './arrayRemoveDuplicates.js';\nimport BoundingSphere from './BoundingSphere.js';\nimport Cartesian3 from './Cartesian3.js';\nimport Color from './Color.js';\nimport ComponentDatatype from './ComponentDatatype.js';\nimport defaultValue from './defaultValue.js';\nimport defined from './defined.js';\nimport DeveloperError from './DeveloperError.js';\nimport Ellipsoid from './Ellipsoid.js';\nimport Geometry from './Geometry.js';\nimport GeometryAttribute from './GeometryAttribute.js';\nimport GeometryAttributes from './GeometryAttributes.js';\nimport GeometryType from './GeometryType.js';\nimport IndexDatatype from './IndexDatatype.js';\nimport CesiumMath from './Math.js';\nimport PolylinePipeline from './PolylinePipeline.js';\nimport PrimitiveType from './PrimitiveType.js';\nimport VertexFormat from './VertexFormat.js';\n\n    var scratchInterpolateColorsArray = [];\n\n    function interpolateColors(p0, p1, color0, color1, numPoints) {\n        var colors = scratchInterpolateColorsArray;\n        colors.length = numPoints;\n        var i;\n\n        var r0 = color0.red;\n        var g0 = color0.green;\n        var b0 = color0.blue;\n        var a0 = color0.alpha;\n\n        var r1 = color1.red;\n        var g1 = color1.green;\n        var b1 = color1.blue;\n        var a1 = color1.alpha;\n\n        if (Color.equals(color0, color1)) {\n            for (i = 0; i < numPoints; i++) {\n                colors[i] = Color.clone(color0);\n            }\n            return colors;\n        }\n\n        var redPerVertex = (r1 - r0) / numPoints;\n        var greenPerVertex = (g1 - g0) / numPoints;\n        var bluePerVertex = (b1 - b0) / numPoints;\n        var alphaPerVertex = (a1 - a0) / numPoints;\n\n        for (i = 0; i < numPoints; i++) {\n            colors[i] = new Color(r0 + i * redPerVertex, g0 + i * greenPerVertex, b0 + i * bluePerVertex, a0 + i * alphaPerVertex);\n        }\n\n        return colors;\n    }\n\n    /**\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n     * and each additional position defines a line segment from the previous position. The polyline is capable of\n     * displaying with a material.\n     *\n     * @alias PolylineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n     * @param {Number} [options.width=1.0] The width in pixels.\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @exception {DeveloperError} At least two positions are required.\n     * @exception {DeveloperError} width must be greater than or equal to one.\n     * @exception {DeveloperError} colors has an invalid length.\n     *\n     * @see PolylineGeometry#createGeometry\n     *\n     * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n     *\n     * @example\n     * // A polyline with two connected line segments\n     * var polyline = new Cesium.PolylineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     0.0, 0.0,\n     *     5.0, 0.0,\n     *     5.0, 5.0\n     *   ]),\n     *   width : 10.0\n     * });\n     * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\n     */\n    function PolylineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var colors = options.colors;\n        var width = defaultValue(options.width, 1.0);\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n        \n\n        this._positions = positions;\n        this._colors = colors;\n        this._width = width;\n        this._colorsPerVertex = colorsPerVertex;\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._workerName = 'createPolylineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var colors = value._colors;\n        length = defined(colors) ? colors.length : 0.0;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            Color.pack(colors[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        colors : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        width : undefined,\n        colorsPerVertex : undefined,\n        arcType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineGeometry} [result] The object into which to store the result.\n     * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\n     */\n    PolylineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var colors = length > 0 ? new Array(length) : undefined;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            colors[i] = Color.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var width = array[startingIndex++];\n        var colorsPerVertex = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.colors = colors;\n            scratchOptions.width = width;\n            scratchOptions.colorsPerVertex = colorsPerVertex;\n            scratchOptions.arcType = arcType;\n            scratchOptions.granularity = granularity;\n            return new PolylineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._colors = colors;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._width = width;\n        result._colorsPerVertex = colorsPerVertex;\n        result._arcType = arcType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var scratchCartesian3 = new Cartesian3();\n    var scratchPosition = new Cartesian3();\n    var scratchPrevPosition = new Cartesian3();\n    var scratchNextPosition = new Cartesian3();\n\n    /**\n     * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineGeometry} polylineGeometry A description of the polyline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineGeometry.createGeometry = function(polylineGeometry) {\n        var width = polylineGeometry._width;\n        var vertexFormat = polylineGeometry._vertexFormat;\n        var colors = polylineGeometry._colors;\n        var colorsPerVertex = polylineGeometry._colorsPerVertex;\n        var arcType = polylineGeometry._arcType;\n        var granularity = polylineGeometry._granularity;\n        var ellipsoid = polylineGeometry._ellipsoid;\n\n        var i;\n        var j;\n        var k;\n\n        var positions = arrayRemoveDuplicates(polylineGeometry._positions, Cartesian3.equalsEpsilon);\n        var positionsLength = positions.length;\n\n        // A width of a pixel or less is not a valid geometry, but in order to support external data\n        // that may have errors we treat this as an empty geometry.\n        if (positionsLength < 2 || width <= 0.0) {\n            return undefined;\n        }\n\n        if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n            var subdivisionSize;\n            var numberOfPointsFunction;\n            if (arcType === ArcType.GEODESIC) {\n                subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n                numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n            } else {\n                subdivisionSize = granularity;\n                numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n            }\n\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n            if (defined(colors)) {\n                var colorLength = 1;\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    colorLength += numberOfPointsFunction(positions[i], positions[i + 1], subdivisionSize);\n                }\n\n                var newColors = new Array(colorLength);\n                var newColorIndex = 0;\n\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    var p0 = positions[i];\n                    var p1 = positions[i + 1];\n                    var c0 = colors[i];\n\n                    var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\n                    if (colorsPerVertex && i < colorLength) {\n                        var c1 = colors[i + 1];\n                        var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\n                        var interpolatedColorsLength = interpolatedColors.length;\n                        for (j = 0; j < interpolatedColorsLength; ++j) {\n                            newColors[newColorIndex++] = interpolatedColors[j];\n                        }\n                    } else {\n                        for (j = 0; j < numColors; ++j) {\n                            newColors[newColorIndex++] = Color.clone(c0);\n                        }\n                    }\n                }\n\n                newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\n                colors = newColors;\n\n                scratchInterpolateColorsArray.length = 0;\n            }\n\n            if (arcType === ArcType.GEODESIC) {\n                positions = PolylinePipeline.generateCartesianArc({\n                    positions: positions,\n                    minDistance: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            } else {\n                positions = PolylinePipeline.generateCartesianRhumbArc({\n                    positions: positions,\n                    granularity: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            }\n        }\n\n        positionsLength = positions.length;\n        var size = positionsLength * 4.0 - 4.0;\n\n        var finalPositions = new Float64Array(size * 3);\n        var prevPositions = new Float64Array(size * 3);\n        var nextPositions = new Float64Array(size * 3);\n        var expandAndWidth = new Float32Array(size * 2);\n        var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\n        var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\n\n        var positionIndex = 0;\n        var expandAndWidthIndex = 0;\n        var stIndex = 0;\n        var colorIndex = 0;\n        var position;\n\n        for (j = 0; j < positionsLength; ++j) {\n            if (j === 0) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[0], positions[1], position);\n                Cartesian3.add(positions[0], position, position);\n            } else {\n                position = positions[j - 1];\n            }\n\n            Cartesian3.clone(position, scratchPrevPosition);\n            Cartesian3.clone(positions[j], scratchPosition);\n\n            if (j === positionsLength - 1) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\n                Cartesian3.add(positions[positionsLength - 1], position, position);\n            } else {\n                position = positions[j + 1];\n            }\n\n            Cartesian3.clone(position, scratchNextPosition);\n\n            var color0, color1;\n            if (defined(finalColors)) {\n                if (j !== 0 && !colorsPerVertex) {\n                    color0 = colors[j - 1];\n                } else {\n                    color0 = colors[j];\n                }\n\n                if (j !== positionsLength - 1) {\n                    color1 = colors[j];\n                }\n            }\n\n            var startK = j === 0 ? 2 : 0;\n            var endK = j === positionsLength - 1 ? 2 : 4;\n\n            for (k = startK; k < endK; ++k) {\n                Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\n                Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\n                Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\n                positionIndex += 3;\n\n                var direction = (k - 2 < 0) ? -1.0 : 1.0;\n                expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;       // expand direction\n                expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n                if (vertexFormat.st) {\n                    st[stIndex++] = j / (positionsLength - 1);\n                    st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\n                }\n\n                if (defined(finalColors)) {\n                    var color = (k < 2) ? color0 : color1;\n\n                    finalColors[colorIndex++] = Color.floatToByte(color.red);\n                    finalColors[colorIndex++] = Color.floatToByte(color.green);\n                    finalColors[colorIndex++] = Color.floatToByte(color.blue);\n                    finalColors[colorIndex++] = Color.floatToByte(color.alpha);\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        attributes.prevPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : prevPositions\n        });\n\n        attributes.nextPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : nextPositions\n        });\n\n        attributes.expandAndWidth = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 2,\n            values : expandAndWidth\n        });\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        if (defined(finalColors)) {\n            attributes.color = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 4,\n                values : finalColors,\n                normalize : true\n            });\n        }\n\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n        var index = 0;\n        var indicesIndex = 0;\n        var length = positionsLength - 1.0;\n        for (j = 0; j < length; ++j) {\n            indices[indicesIndex++] = index;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 1;\n\n            indices[indicesIndex++] = index + 1;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 3;\n\n            index += 4;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromPoints(positions),\n            geometryType : GeometryType.POLYLINES\n        });\n    };\nexport default PolylineGeometry;\n","import ArcType from '../Core/ArcType.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Check from '../Core/Check.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport DeveloperError from '../Core/DeveloperError.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport Event from '../Core/Event.js';\nimport GeometryInstance from '../Core/GeometryInstance.js';\nimport GroundPolylineGeometry from '../Core/GroundPolylineGeometry.js';\nimport Iso8601 from '../Core/Iso8601.js';\nimport oneTimeWarning from '../Core/oneTimeWarning.js';\nimport PolylineGeometry from '../Core/PolylineGeometry.js';\nimport PolylinePipeline from '../Core/PolylinePipeline.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport Entity from '../DataSources/Entity.js';\nimport ClassificationType from '../Scene/ClassificationType.js';\nimport GroundPolylinePrimitive from '../Scene/GroundPolylinePrimitive.js';\nimport PolylineCollection from '../Scene/PolylineCollection.js';\nimport PolylineColorAppearance from '../Scene/PolylineColorAppearance.js';\nimport PolylineMaterialAppearance from '../Scene/PolylineMaterialAppearance.js';\nimport ShadowMode from '../Scene/ShadowMode.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport ConstantProperty from './ConstantProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var defaultZIndex = new ConstantProperty(0);\n\n    //We use this object to create one polyline collection per-scene.\n    var polylineCollections = {};\n\n    var scratchColor = new Color();\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultShow = new ConstantProperty(true);\n    var defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\n    var defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\n    var defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n    function GeometryOptions() {\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.width = undefined;\n        this.arcType = undefined;\n        this.granularity = undefined;\n    }\n\n    function GroundGeometryOptions() {\n        this.positions = undefined;\n        this.width = undefined;\n        this.arcType = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polylines.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolylineGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolylineGeometryUpdater(entity, scene) {\n        \n\n        this._entity = entity;\n        this._scene = scene;\n        this._entitySubscription = entity.definitionChanged.addEventListener(PolylineGeometryUpdater.prototype._onEntityPropertyChanged, this);\n        this._fillEnabled = false;\n        this._dynamic = false;\n        this._geometryChanged = new Event();\n        this._showProperty = undefined;\n        this._materialProperty = undefined;\n        this._shadowsProperty = undefined;\n        this._distanceDisplayConditionProperty = undefined;\n        this._classificationTypeProperty = undefined;\n        this._depthFailMaterialProperty = undefined;\n        this._geometryOptions = new GeometryOptions();\n        this._groundGeometryOptions = new GroundGeometryOptions();\n        this._id = 'polyline-' + entity.id;\n        this._clampToGround = false;\n        this._supportsPolylinesOnTerrain = Entity.supportsPolylinesOnTerrain(scene);\n\n        this._zIndex = 0;\n\n        this._onEntityPropertyChanged(entity, 'polyline', entity.polyline, undefined);\n    }\n\n    Object.defineProperties(PolylineGeometryUpdater.prototype, {\n        /**\n         * Gets the unique ID associated with this updater\n         * @memberof PolylineGeometryUpdater.prototype\n         * @type {String}\n         * @readonly\n         */\n        id: {\n            get: function() {\n                return this._id;\n            }\n        },\n        /**\n         * Gets the entity associated with this geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Entity}\n         * @readonly\n         */\n        entity : {\n            get : function() {\n                return this._entity;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has a fill component.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        fillEnabled : {\n            get : function() {\n                return this._fillEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if fill visibility varies with simulation time.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantFill : {\n            get : function() {\n                return !this._fillEnabled || (!defined(this._entity.availability) && Property.isConstant(this._showProperty));\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        fillMaterialProperty : {\n            get : function() {\n                return this._materialProperty;\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry when it fails the depth test.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        depthFailMaterialProperty : {\n            get : function() {\n                return this._depthFailMaterialProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        outlineEnabled : {\n            value : false\n        },\n        /**\n         * Gets a value indicating if outline visibility varies with simulation time.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantOutline : {\n            value : true\n        },\n        /**\n         * Gets the {@link Color} property for the geometry outline.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        outlineColorProperty : {\n            value : undefined\n        },\n        /**\n         * Gets the property specifying whether the geometry\n         * casts or receives shadows from light sources.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        shadowsProperty : {\n            get : function() {\n                return this._shadowsProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        distanceDisplayConditionProperty : {\n            get : function() {\n                return this._distanceDisplayConditionProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        classificationTypeProperty : {\n            get : function() {\n                return this._classificationTypeProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is time-varying.\n         * If true, all visualization is delegated to the {@link DynamicGeometryUpdater}\n         * returned by GeometryUpdater#createDynamicUpdater.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isDynamic : {\n            get : function() {\n                return this._dynamic;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is closed.\n         * This property is only valid for static geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isClosed : {\n            value : false\n        },\n        /**\n         * Gets an event that is raised whenever the public properties\n         * of this updater change.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        geometryChanged : {\n            get : function() {\n                return this._geometryChanged;\n            }\n        },\n\n        /**\n         * Gets a value indicating if the path of the line.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {ArcType}\n         * @readonly\n         */\n        arcType : {\n            get : function() {\n                return this._arcType;\n            }\n        },\n\n        /**\n         * Gets a value indicating if the geometry is clamped to the ground.\n         * Returns false if polylines on terrain is not supported.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        clampToGround : {\n            get : function() {\n                return this._clampToGround && this._supportsPolylinesOnTerrain;\n            }\n        },\n\n        /**\n         * Gets the zindex\n         * @type {Number}\n         * @memberof PolylineGeometryUpdater.prototype\n         * @readonly\n         */\n        zIndex: {\n            get: function() {\n                return this._zIndex;\n            }\n        }\n    });\n\n    /**\n     * Checks if the geometry is outlined at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n     */\n    PolylineGeometryUpdater.prototype.isOutlineVisible = function(time) {\n        return false;\n    };\n\n    /**\n     * Checks if the geometry is filled at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n     */\n    PolylineGeometryUpdater.prototype.isFilled = function(time) {\n        var entity = this._entity;\n        var visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolylineGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute\n        };\n\n        var currentColor;\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (this.clampToGround) {\n            return new GeometryInstance({\n                id : entity,\n                geometry : new GroundPolylineGeometry(this._groundGeometryOptions),\n                attributes : attributes\n            });\n        }\n\n        if (defined(this._depthFailMaterialProperty) && this._depthFailMaterialProperty instanceof ColorMaterialProperty) {\n            if (defined(this._depthFailMaterialProperty.color) && (this._depthFailMaterialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._depthFailMaterialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.depthFailColor = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineGeometry(this._geometryOptions),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolylineGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PolylineGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    PolylineGeometryUpdater.prototype.destroy = function() {\n        this._entitySubscription();\n        destroyObject(this);\n    };\n\n    PolylineGeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        if (!(propertyName === 'availability' || propertyName === 'polyline')) {\n            return;\n        }\n\n        var polyline = this._entity.polyline;\n\n        if (!defined(polyline)) {\n            if (this._fillEnabled) {\n                this._fillEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var positionsProperty = polyline.positions;\n\n        var show = polyline.show;\n        if ((defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE)) || //\n            (!defined(positionsProperty))) {\n            if (this._fillEnabled) {\n                this._fillEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var zIndex = polyline.zIndex;\n        var material = defaultValue(polyline.material, defaultMaterial);\n        var isColorMaterial = material instanceof ColorMaterialProperty;\n        this._materialProperty = material;\n        this._depthFailMaterialProperty = polyline.depthFailMaterial;\n        this._showProperty = defaultValue(show, defaultShow);\n        this._shadowsProperty = defaultValue(polyline.shadows, defaultShadows);\n        this._distanceDisplayConditionProperty = defaultValue(polyline.distanceDisplayCondition, defaultDistanceDisplayCondition);\n        this._classificationTypeProperty = defaultValue(polyline.classificationType, defaultClassificationType);\n        this._fillEnabled = true;\n        this._zIndex = defaultValue(zIndex, defaultZIndex);\n\n        var width = polyline.width;\n        var arcType = polyline.arcType;\n        var clampToGround = polyline.clampToGround;\n        var granularity = polyline.granularity;\n\n        if (!positionsProperty.isConstant || !Property.isConstant(width) ||\n            !Property.isConstant(arcType) || !Property.isConstant(granularity) ||\n            !Property.isConstant(clampToGround) || !Property.isConstant(zIndex)) {\n            if (!this._dynamic) {\n                this._dynamic = true;\n                this._geometryChanged.raiseEvent(this);\n            }\n        } else {\n            var geometryOptions = this._geometryOptions;\n            var positions = positionsProperty.getValue(Iso8601.MINIMUM_VALUE, geometryOptions.positions);\n\n            //Because of the way we currently handle reference properties,\n            //we can't automatically assume the positions are always valid.\n            if (!defined(positions) || positions.length < 2) {\n                if (this._fillEnabled) {\n                    this._fillEnabled = false;\n                    this._geometryChanged.raiseEvent(this);\n                }\n                return;\n            }\n\n            var vertexFormat;\n            if (isColorMaterial && (!defined(this._depthFailMaterialProperty) || this._depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n            } else {\n                vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n            }\n\n            geometryOptions.vertexFormat = vertexFormat;\n            geometryOptions.positions = positions;\n            geometryOptions.width = defined(width) ? width.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n            geometryOptions.arcType = defined(arcType) ? arcType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n            geometryOptions.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n\n            var groundGeometryOptions = this._groundGeometryOptions;\n            groundGeometryOptions.positions = positions;\n            groundGeometryOptions.width = geometryOptions.width;\n            groundGeometryOptions.arcType = geometryOptions.arcType;\n            groundGeometryOptions.granularity = geometryOptions.granularity;\n\n            this._clampToGround = defined(clampToGround) ? clampToGround.getValue(Iso8601.MINIMUM_VALUE) : false;\n\n            if (!this._clampToGround && defined(zIndex)) {\n                oneTimeWarning('Entity polylines must have clampToGround: true when using zIndex.  zIndex will be ignored.');\n            }\n\n            this._dynamic = false;\n            this._geometryChanged.raiseEvent(this);\n        }\n    };\n\n    /**\n     * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n     *\n     * @param {PrimitiveCollection} primitives The primitive collection to use.\n     * @param {PrimitiveCollection|OrderedGroundPrimitiveCollection} groundPrimitives The primitive collection to use for ordered ground primitives.\n     * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n     *\n     * @exception {DeveloperError} This instance does not represent dynamic geometry.\n     */\n    PolylineGeometryUpdater.prototype.createDynamicUpdater = function(primitives, groundPrimitives) {\n        \n\n        return new DynamicGeometryUpdater(primitives, groundPrimitives, this);\n    };\n\n    /**\n     * @private\n     */\n    var generateCartesianArcOptions = {\n        positions : undefined,\n        granularity : undefined,\n        height : undefined,\n        ellipsoid : undefined\n    };\n\n    function DynamicGeometryUpdater(primitives, groundPrimitives, geometryUpdater) {\n        this._line = undefined;\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n        this._groundPolylinePrimitive = undefined;\n        this._material = undefined;\n        this._geometryUpdater = geometryUpdater;\n        this._positions = [];\n    }\n\n    function getLine(dynamicGeometryUpdater) {\n        if (defined(dynamicGeometryUpdater._line)) {\n            return dynamicGeometryUpdater._line;\n        }\n\n        var sceneId = dynamicGeometryUpdater._geometryUpdater._scene.id;\n        var polylineCollection = polylineCollections[sceneId];\n        var primitives = dynamicGeometryUpdater._primitives;\n        if (!defined(polylineCollection) || polylineCollection.isDestroyed()) {\n            polylineCollection = new PolylineCollection();\n            polylineCollections[sceneId] = polylineCollection;\n            primitives.add(polylineCollection);\n        } else if (!primitives.contains(polylineCollection)) {\n            primitives.add(polylineCollection);\n        }\n\n        var line = polylineCollection.add();\n        line.id = dynamicGeometryUpdater._geometryUpdater._entity;\n        dynamicGeometryUpdater._line = line;\n        return line;\n    }\n\n    DynamicGeometryUpdater.prototype.update = function(time) {\n        var geometryUpdater = this._geometryUpdater;\n        var entity = geometryUpdater._entity;\n        var polyline = entity.polyline;\n\n        var positionsProperty = polyline.positions;\n        var positions = Property.getValueOrUndefined(positionsProperty, time, this._positions);\n\n        // Synchronize with geometryUpdater for GroundPolylinePrimitive\n        geometryUpdater._clampToGround = Property.getValueOrDefault(polyline._clampToGround, time, false);\n        geometryUpdater._groundGeometryOptions.positions = positions;\n        geometryUpdater._groundGeometryOptions.width = Property.getValueOrDefault(polyline._width, time, 1);\n        geometryUpdater._groundGeometryOptions.arcType = Property.getValueOrDefault(polyline._arcType, time, ArcType.GEODESIC);\n        geometryUpdater._groundGeometryOptions.granularity = Property.getValueOrDefault(polyline._granularity, time, 9999);\n\n        var groundPrimitives = this._groundPrimitives;\n\n        if (defined(this._groundPolylinePrimitive)) {\n            groundPrimitives.remove(this._groundPolylinePrimitive); // destroys by default\n            this._groundPolylinePrimitive = undefined;\n        }\n\n        if (geometryUpdater.clampToGround) {\n            if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(polyline._show, time, true)) {\n                return;\n            }\n\n            if (!defined(positions) || positions.length < 2) {\n                return;\n            }\n\n            var fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n            var appearance;\n            if (fillMaterialProperty instanceof ColorMaterialProperty) {\n                appearance = new PolylineColorAppearance();\n            } else {\n                var material = MaterialProperty.getValue(time, fillMaterialProperty, this._material);\n                appearance = new PolylineMaterialAppearance({\n                    material : material,\n                    translucent : material.isTranslucent()\n                });\n                this._material = material;\n            }\n\n            this._groundPolylinePrimitive = groundPrimitives.add(new GroundPolylinePrimitive({\n                geometryInstances : geometryUpdater.createFillGeometryInstance(time),\n                appearance : appearance,\n                classificationType : geometryUpdater.classificationTypeProperty.getValue(time),\n                asynchronous : false\n            }), Property.getValueOrUndefined(geometryUpdater.zIndex, time));\n\n            // Hide the polyline in the collection, if any\n            if (defined(this._line)) {\n                this._line.show = false;\n            }\n            return;\n        }\n\n        var line = getLine(this);\n\n        if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(polyline._show, time, true)) {\n            line.show = false;\n            return;\n        }\n\n        if (!defined(positions) || positions.length < 2) {\n            line.show = false;\n            return;\n        }\n\n        var arcType = ArcType.GEODESIC;\n        arcType = Property.getValueOrDefault(polyline._arcType, time, arcType);\n\n        var globe = geometryUpdater._scene.globe;\n        if (arcType !== ArcType.NONE && defined(globe)) {\n            generateCartesianArcOptions.ellipsoid = globe.ellipsoid;\n            generateCartesianArcOptions.positions = positions;\n            generateCartesianArcOptions.granularity = Property.getValueOrUndefined(polyline._granularity, time);\n            generateCartesianArcOptions.height = PolylinePipeline.extractHeights(positions, globe.ellipsoid);\n            if (arcType === ArcType.GEODESIC) {\n                positions = PolylinePipeline.generateCartesianArc(generateCartesianArcOptions);\n            } else {\n                positions = PolylinePipeline.generateCartesianRhumbArc(generateCartesianArcOptions);\n            }\n        }\n\n        line.show = true;\n        line.positions = positions.slice();\n        line.material = MaterialProperty.getValue(time, geometryUpdater.fillMaterialProperty, line.material);\n        line.width = Property.getValueOrDefault(polyline._width, time, 1);\n        line.distanceDisplayCondition = Property.getValueOrUndefined(polyline._distanceDisplayCondition, time, line.distanceDisplayCondition);\n    };\n\n    DynamicGeometryUpdater.prototype.getBoundingSphere = function(result) {\n        \n\n        if (!this._geometryUpdater.clampToGround) {\n            var line = getLine(this);\n            if (line.show && line.positions.length > 0) {\n                BoundingSphere.fromPoints(line.positions, result);\n                return BoundingSphereState.DONE;\n            }\n        } else {\n            var groundPolylinePrimitive = this._groundPolylinePrimitive;\n            if (defined(groundPolylinePrimitive) && groundPolylinePrimitive.show && groundPolylinePrimitive.ready) {\n                var attributes = groundPolylinePrimitive.getGeometryInstanceAttributes(this._geometryUpdater._entity);\n                if (defined(attributes) && defined(attributes.boundingSphere)) {\n                    BoundingSphere.clone(attributes.boundingSphere, result);\n                    return BoundingSphereState.DONE;\n                }\n            }\n\n            if ((defined(groundPolylinePrimitive) && !groundPolylinePrimitive.ready)) {\n                return BoundingSphereState.PENDING;\n            }\n\n            return BoundingSphereState.DONE;\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    DynamicGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    DynamicGeometryUpdater.prototype.destroy = function() {\n        var geometryUpdater = this._geometryUpdater;\n        var sceneId = geometryUpdater._scene.id;\n        var polylineCollection = polylineCollections[sceneId];\n        if (defined(polylineCollection)) {\n            polylineCollection.remove(this._line);\n            if (polylineCollection.length === 0) {\n                this._primitives.removeAndDestroy(polylineCollection);\n                delete polylineCollections[sceneId];\n            }\n        }\n        if (defined(this._groundPolylinePrimitive)) {\n            this._groundPrimitives.remove(this._groundPolylinePrimitive);\n        }\n        destroyObject(this);\n    };\nexport default PolylineGeometryUpdater;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport Color from '../Core/Color.js';\nimport ColorGeometryInstanceAttribute from '../Core/ColorGeometryInstanceAttribute.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport DistanceDisplayCondition from '../Core/DistanceDisplayCondition.js';\nimport DistanceDisplayConditionGeometryInstanceAttribute from '../Core/DistanceDisplayConditionGeometryInstanceAttribute.js';\nimport ShowGeometryInstanceAttribute from '../Core/ShowGeometryInstanceAttribute.js';\nimport GroundPolylinePrimitive from '../Scene/GroundPolylinePrimitive.js';\nimport PolylineColorAppearance from '../Scene/PolylineColorAppearance.js';\nimport PolylineMaterialAppearance from '../Scene/PolylineMaterialAppearance.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport MaterialProperty from './MaterialProperty.js';\nimport Property from './Property.js';\n\n    var scratchColor = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    // Encapsulates a Primitive and all the entities that it represents.\n    function Batch(orderedGroundPrimitives, classificationType, materialProperty, zIndex, asynchronous) {\n        var appearanceType;\n        if (materialProperty instanceof ColorMaterialProperty) {\n            appearanceType = PolylineColorAppearance;\n        } else {\n            appearanceType = PolylineMaterialAppearance;\n        }\n\n        this.orderedGroundPrimitives = orderedGroundPrimitives; // scene level primitive collection\n        this.classificationType = classificationType;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined; // a GroundPolylinePrimitive encapsulating all the entities\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.zIndex = zIndex;\n\n        this._asynchronous = asynchronous;\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    // Check if the given updater's material is compatible with this batch\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n\n        if (updaterMaterial === material ||\n            (updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty)) {\n            return true;\n        }\n        return defined(material) && material.equals(updaterMaterial);\n    };\n\n    Batch.prototype.add = function(time, updater, geometryInstance) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, geometryInstance);\n        // Updaters with dynamic attributes must be tracked separately, may exit the batch\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            // Listen for show changes. These will be synchronized in updateShows.\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var orderedGroundPrimitives = this.orderedGroundPrimitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        // For if the new primitive changes again before it is ready.\n                        orderedGroundPrimitives.remove(primitive);\n                    }\n                }\n\n                primitive = new GroundPolylinePrimitive({\n                    show : false,\n                    asynchronous : this._asynchronous,\n                    geometryInstances : geometries.slice(),\n                    appearance : new this.appearanceType(),\n                    classificationType : this.classificationType\n                });\n\n                if (this.appearanceType === PolylineMaterialAppearance) {\n                    this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n                    primitive.appearance.material = this.material;\n                }\n\n                orderedGroundPrimitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    orderedGroundPrimitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    orderedGroundPrimitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                orderedGroundPrimitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            if (this.appearanceType === PolylineMaterialAppearance) {\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n                this.primitive.appearance.material = this.material;\n            }\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, scratchColor);\n                    if (!Color.equals(attributes._lastColor, resultColor)) {\n                        attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n                    }\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var orderedGroundPrimitives = this.orderedGroundPrimitives;\n        if (defined(primitive)) {\n            orderedGroundPrimitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            orderedGroundPrimitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundPolylinePerMaterialBatch(orderedGroundPrimitives, classificationType, asynchronous) {\n        this._items = [];\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._classificationType = classificationType;\n        this._asynchronous = defaultValue(asynchronous, true);\n    }\n\n    StaticGroundPolylinePerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        var geometryInstance = updater.createFillGeometryInstance(time);\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        // Check if the Entity represented by the updater has the same material or a material representable with per-instance color.\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            if (item.isMaterial(updater) &&\n                item.zIndex === zIndex) {\n                item.add(time, updater, geometryInstance);\n                return;\n            }\n        }\n        // If a compatible batch wasn't found, create a new batch.\n        var batch = new Batch(this._orderedGroundPrimitives, this._classificationType, updater.fillMaterialProperty, zIndex, this._asynchronous);\n        batch.add(time, updater, geometryInstance);\n        items.push(batch);\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\nexport default StaticGroundPolylinePerMaterialBatch;\n","import AssociativeArray from '../Core/AssociativeArray.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Check from '../Core/Check.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport ClassificationType from '../Scene/ClassificationType.js';\nimport PolylineColorAppearance from '../Scene/PolylineColorAppearance.js';\nimport PolylineMaterialAppearance from '../Scene/PolylineMaterialAppearance.js';\nimport ShadowMode from '../Scene/ShadowMode.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport ColorMaterialProperty from './ColorMaterialProperty.js';\nimport DynamicGeometryBatch from './DynamicGeometryBatch.js';\nimport PolylineGeometryUpdater from './PolylineGeometryUpdater.js';\nimport StaticGeometryColorBatch from './StaticGeometryColorBatch.js';\nimport StaticGeometryPerMaterialBatch from './StaticGeometryPerMaterialBatch.js';\nimport StaticGroundPolylinePerMaterialBatch from './StaticGroundPolylinePerMaterialBatch.js';\n\n    var emptyArray = [];\n\n    function removeUpdater(that, updater) {\n        //We don't keep track of which batch an updater is in, so just remove it from all of them.\n        var batches = that._batches;\n        var length = batches.length;\n        for (var i = 0; i < length; i++) {\n            batches[i].remove(updater);\n        }\n    }\n\n    function insertUpdaterIntoBatch(that, time, updater) {\n        if (updater.isDynamic) {\n            that._dynamicBatch.add(time, updater);\n            return;\n        }\n\n        if (updater.clampToGround && updater.fillEnabled) { // Also checks for support\n            var classificationType = updater.classificationTypeProperty.getValue(time);\n            that._groundBatches[classificationType].add(time, updater);\n            return;\n        }\n\n        var shadows;\n        if (updater.fillEnabled) {\n            shadows = updater.shadowsProperty.getValue(time);\n        }\n\n        var multiplier = 0;\n        if (defined(updater.depthFailMaterialProperty)) {\n            multiplier = updater.depthFailMaterialProperty instanceof ColorMaterialProperty ? 1 : 2;\n        }\n\n        var index;\n        if (defined(shadows)) {\n            index = shadows + multiplier * ShadowMode.NUMBER_OF_SHADOW_MODES;\n        }\n\n        if (updater.fillEnabled) {\n            if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                that._colorBatches[index].add(time, updater);\n            } else {\n                that._materialBatches[index].add(time, updater);\n            }\n        }\n    }\n\n    /**\n     * A visualizer for polylines represented by {@link Primitive} instances.\n     * @alias PolylineVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n     * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n     */\n    function PolylineVisualizer(scene, entityCollection, primitives, groundPrimitives) {\n        \n\n        groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n        primitives = defaultValue(primitives, scene.primitives);\n\n        this._scene = scene;\n        this._primitives = primitives;\n        this._entityCollection = undefined;\n        this._addedObjects = new AssociativeArray();\n        this._removedObjects = new AssociativeArray();\n        this._changedObjects = new AssociativeArray();\n\n        var i;\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        this._colorBatches = new Array(numberOfShadowModes * 3);\n        this._materialBatches = new Array(numberOfShadowModes * 3);\n\n        for (i = 0; i < numberOfShadowModes; ++i) {\n            this._colorBatches[i] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, undefined, false, i); // no depth fail appearance\n            this._materialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, undefined, false, i);\n\n            this._colorBatches[i + numberOfShadowModes] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, PolylineColorAppearance, false, i); //depth fail appearance variations\n            this._materialBatches[i + numberOfShadowModes] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, PolylineColorAppearance, false, i);\n\n            this._colorBatches[i + numberOfShadowModes * 2] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, PolylineMaterialAppearance, false, i);\n            this._materialBatches[i + numberOfShadowModes * 2] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, PolylineMaterialAppearance, false, i);\n        }\n\n        this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n        var numberOfClassificationTypes = ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n        this._groundBatches = new Array(numberOfClassificationTypes);\n\n        for (i = 0; i < numberOfClassificationTypes; ++i) {\n            this._groundBatches[i] = new StaticGroundPolylinePerMaterialBatch(groundPrimitives, i);\n        }\n\n        this._batches = this._colorBatches.concat(this._materialBatches, this._dynamicBatch, this._groundBatches);\n\n        this._subscriptions = new AssociativeArray();\n        this._updaters = new AssociativeArray();\n\n        this._entityCollection = entityCollection;\n        entityCollection.collectionChanged.addEventListener(PolylineVisualizer.prototype._onCollectionChanged, this);\n        this._onCollectionChanged(entityCollection, entityCollection.values, emptyArray);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n     * false if the visualizer is waiting for asynchronous primitives to be created.\n     */\n    PolylineVisualizer.prototype.update = function(time) {\n        \n\n        var addedObjects = this._addedObjects;\n        var added = addedObjects.values;\n        var removedObjects = this._removedObjects;\n        var removed = removedObjects.values;\n        var changedObjects = this._changedObjects;\n        var changed = changedObjects.values;\n\n        var i;\n        var entity;\n        var id;\n        var updater;\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            id = entity.id;\n            updater = this._updaters.get(id);\n\n            //If in a single update, an entity gets removed and a new instance\n            //re-added with the same id, the updater no longer tracks the\n            //correct entity, we need to both remove the old one and\n            //add the new one, which is done by pushing the entity\n            //onto the removed/added lists.\n            if (updater.entity === entity) {\n                removeUpdater(this, updater);\n                insertUpdaterIntoBatch(this, time, updater);\n            } else {\n                removed.push(entity);\n                added.push(entity);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            updater = this._updaters.get(id);\n            removeUpdater(this, updater);\n            updater.destroy();\n            this._updaters.remove(id);\n            this._subscriptions.get(id)();\n            this._subscriptions.remove(id);\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            updater = new PolylineGeometryUpdater(entity, this._scene);\n            this._updaters.set(id, updater);\n            insertUpdaterIntoBatch(this, time, updater);\n            this._subscriptions.set(id, updater.geometryChanged.addEventListener(PolylineVisualizer._onGeometryChanged, this));\n        }\n\n        addedObjects.removeAll();\n        removedObjects.removeAll();\n        changedObjects.removeAll();\n\n        var isUpdated = true;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            isUpdated = batches[i].update(time) && isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    PolylineVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var batches = this._batches;\n        var batchesLength = batches.length;\n        var updater = this._updaters.get(entity.id);\n        for (var i = 0; i < batchesLength; i++) {\n            state = batches[i].getBoundingSphere(updater, tmp);\n            if (state === BoundingSphereState.PENDING) {\n                return BoundingSphereState.PENDING;\n            } else if (state === BoundingSphereState.DONE) {\n                boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                count++;\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PolylineVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PolylineVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PolylineVisualizer.prototype._onCollectionChanged, this);\n        this._addedObjects.removeAll();\n        this._removedObjects.removeAll();\n\n        var i;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            batches[i].removeAllPrimitives();\n        }\n\n        var subscriptions = this._subscriptions.values;\n        length = subscriptions.length;\n        for (i = 0; i < length; i++) {\n            subscriptions[i]();\n        }\n        this._subscriptions.removeAll();\n        return destroyObject(this);\n    };\n\n    /**\n     * @private\n     */\n    PolylineVisualizer._onGeometryChanged = function(updater) {\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var entity = updater.entity;\n        var id = entity.id;\n\n        if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n            changedObjects.set(id, entity);\n        }\n    };\n\n    /**\n     * @private\n     */\n    PolylineVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed) {\n        var addedObjects = this._addedObjects;\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var i;\n        var id;\n        var entity;\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            if (!addedObjects.remove(id)) {\n                removedObjects.set(id, entity);\n                changedObjects.remove(id);\n            }\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            if (removedObjects.remove(id)) {\n                changedObjects.set(id, entity);\n            } else {\n                addedObjects.set(id, entity);\n            }\n        }\n    };\nexport default PolylineVisualizer;\n","import ApproximateTerrainHeights from '../Core/ApproximateTerrainHeights.js';\nimport BoundingSphere from '../Core/BoundingSphere.js';\nimport Check from '../Core/Check.js';\nimport createGuid from '../Core/createGuid.js';\nimport defaultValue from '../Core/defaultValue.js';\nimport defined from '../Core/defined.js';\nimport destroyObject from '../Core/destroyObject.js';\nimport EventHelper from '../Core/EventHelper.js';\nimport GroundPolylinePrimitive from '../Scene/GroundPolylinePrimitive.js';\nimport GroundPrimitive from '../Scene/GroundPrimitive.js';\nimport OrderedGroundPrimitiveCollection from '../Scene/OrderedGroundPrimitiveCollection.js';\nimport PrimitiveCollection from '../Scene/PrimitiveCollection.js';\nimport BillboardVisualizer from './BillboardVisualizer.js';\nimport BoundingSphereState from './BoundingSphereState.js';\nimport CustomDataSource from './CustomDataSource.js';\nimport GeometryVisualizer from './GeometryVisualizer.js';\nimport LabelVisualizer from './LabelVisualizer.js';\nimport ModelVisualizer from './ModelVisualizer.js';\nimport Cesium3DTilesetVisualizer from './Cesium3DTilesetVisualizer.js';\nimport PathVisualizer from './PathVisualizer.js';\nimport PointVisualizer from './PointVisualizer.js';\nimport PolylineVisualizer from './PolylineVisualizer.js';\n\n    /**\n     * Visualizes a collection of {@link DataSource} instances.\n     * @alias DataSourceDisplay\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Scene} options.scene The scene in which to display the data.\n     * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n     * @param {DataSourceDisplay~VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n     *        A function which creates an array of visualizers used for visualization.\n     *        If undefined, all standard visualizers are used.\n     */\n    function DataSourceDisplay(options) {\n        \n\n        this._displayID = createGuid();\n\n        GroundPrimitive.initializeTerrainHeights();\n        GroundPolylinePrimitive.initializeTerrainHeights();\n\n        var scene = options.scene;\n        var dataSourceCollection = options.dataSourceCollection;\n\n        this._eventHelper = new EventHelper();\n        this._eventHelper.add(dataSourceCollection.dataSourceAdded, this._onDataSourceAdded, this);\n        this._eventHelper.add(dataSourceCollection.dataSourceRemoved, this._onDataSourceRemoved, this);\n        this._eventHelper.add(dataSourceCollection.dataSourceMoved, this._onDataSourceMoved, this);\n        this._eventHelper.add(scene.postRender, this._postRender, this);\n\n        this._dataSourceCollection = dataSourceCollection;\n        this._scene = scene;\n        this._visualizersCallback = defaultValue(options.visualizersCallback, DataSourceDisplay.defaultVisualizersCallback);\n\n        var primitivesAdded = false;\n        var primitives = new PrimitiveCollection();\n        var groundPrimitives = new PrimitiveCollection();\n\n        if (dataSourceCollection.length > 0) {\n            scene.primitives.add(primitives);\n            scene.groundPrimitives.add(groundPrimitives);\n            primitivesAdded = true;\n        }\n\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n\n        for (var i = 0, len = dataSourceCollection.length; i < len; i++) {\n            this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n        }\n\n        var defaultDataSource = new CustomDataSource();\n        this._onDataSourceAdded(undefined, defaultDataSource);\n        this._defaultDataSource = defaultDataSource;\n\n        var removeDefaultDataSourceListener;\n        var removeDataSourceCollectionListener;\n        if (!primitivesAdded) {\n            var that = this;\n            var addPrimitives = function() {\n                scene.primitives.add(primitives);\n                scene.groundPrimitives.add(groundPrimitives);\n                removeDefaultDataSourceListener();\n                removeDataSourceCollectionListener();\n                that._removeDefaultDataSourceListener = undefined;\n                that._removeDataSourceCollectionListener = undefined;\n            };\n            removeDefaultDataSourceListener = defaultDataSource.entities.collectionChanged.addEventListener(addPrimitives);\n            removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(addPrimitives);\n        }\n\n        this._removeDefaultDataSourceListener = removeDefaultDataSourceListener;\n        this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n\n        this._ready = false;\n    }\n\n    /**\n     * Gets or sets the default function which creates an array of visualizers used for visualization.\n     * By default, this function uses all standard visualizers.\n     *\n     * @type {DataSourceDisplay~VisualizersCallback}\n     */\n    DataSourceDisplay.defaultVisualizersCallback = function(scene, entityCluster, dataSource) {\n        var entities = dataSource.entities;\n        return [new BillboardVisualizer(entityCluster, entities),\n                new GeometryVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives),\n                new LabelVisualizer(entityCluster, entities),\n                new ModelVisualizer(scene, entities),\n                new Cesium3DTilesetVisualizer(scene, entities),\n                new PointVisualizer(entityCluster, entities),\n                new PathVisualizer(scene, entities),\n                new PolylineVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives)];\n    };\n\n    Object.defineProperties(DataSourceDisplay.prototype, {\n        /**\n         * Gets the scene associated with this display.\n         * @memberof DataSourceDisplay.prototype\n         * @type {Scene}\n         */\n        scene : {\n            get : function() {\n                return this._scene;\n            }\n        },\n        /**\n         * Gets the collection of data sources to display.\n         * @memberof DataSourceDisplay.prototype\n         * @type {DataSourceCollection}\n         */\n        dataSources : {\n            get : function() {\n                return this._dataSourceCollection;\n            }\n        },\n        /**\n         * Gets the default data source instance which can be used to\n         * manually create and visualize entities not tied to\n         * a specific data source. This instance is always available\n         * and does not appear in the list dataSources collection.\n         * @memberof DataSourceDisplay.prototype\n         * @type {CustomDataSource}\n         */\n        defaultDataSource : {\n            get : function() {\n                return this._defaultDataSource;\n            }\n        },\n\n        /**\n         * Gets a value indicating whether or not all entities in the data source are ready\n         * @memberof DataSourceDisplay.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        }\n    });\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see DataSourceDisplay#destroy\n     */\n    DataSourceDisplay.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * dataSourceDisplay = dataSourceDisplay.destroy();\n     *\n     * @see DataSourceDisplay#isDestroyed\n     */\n    DataSourceDisplay.prototype.destroy = function() {\n        this._eventHelper.removeAll();\n\n        var dataSourceCollection = this._dataSourceCollection;\n        for (var i = 0, length = dataSourceCollection.length; i < length; ++i) {\n            this._onDataSourceRemoved(this._dataSourceCollection, dataSourceCollection.get(i));\n        }\n        this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n        if (defined(this._removeDefaultDataSourceListener)) {\n            this._removeDefaultDataSourceListener();\n            this._removeDataSourceCollectionListener();\n        } else {\n            this._scene.primitives.remove(this._primitives);\n            this._scene.groundPrimitives.remove(this._groundPrimitives);\n        }\n\n        return destroyObject(this);\n    };\n\n    /**\n     * Updates the display to the provided time.\n     *\n     * @param {JulianDate} time The simulation time.\n     * @returns {Boolean} True if all data sources are ready to be displayed, false otherwise.\n     */\n    DataSourceDisplay.prototype.update = function(time) {\n        \n\n        if (!ApproximateTerrainHeights.initialized) {\n            this._ready = false;\n            return false;\n        }\n\n        var result = true;\n\n        var i;\n        var x;\n        var visualizers;\n        var vLength;\n        var dataSources = this._dataSourceCollection;\n        var length = dataSources.length;\n        for (i = 0; i < length; i++) {\n            var dataSource = dataSources.get(i);\n            if (defined(dataSource.update)) {\n                result = dataSource.update(time) && result;\n            }\n\n            visualizers = dataSource._visualizersByDisplayID[this._displayID];\n            vLength = visualizers.length;\n            for (x = 0; x < vLength; x++) {\n                result = visualizers[x].update(time) && result;\n            }\n        }\n\n        visualizers = this._defaultDataSource._visualizersByDisplayID[this._displayID];\n        vLength = visualizers.length;\n        for (x = 0; x < vLength; x++) {\n            result = visualizers[x].update(time) && result;\n        }\n\n        this._ready = result;\n\n        return result;\n    };\n\n    DataSourceDisplay.prototype._postRender = function() {\n        // Adds credits for all datasources\n        var frameState = this._scene.frameState;\n        var dataSources = this._dataSourceCollection;\n        var length = dataSources.length;\n        for (var i = 0; i < length; i++) {\n            var dataSource = dataSources.get(i);\n\n            var credit = dataSource.credit;\n            if (defined(credit)) {\n                frameState.creditDisplay.addCredit(credit);\n            }\n\n            // Credits from the resource that the user can't remove\n            var credits = dataSource._resourceCredits;\n            if (defined(credits)) {\n                var creditCount = credits.length;\n                for (var c = 0; c < creditCount; c++) {\n                    frameState.creditDisplay.addCredit(credits[c]);\n                }\n            }\n        }\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {Boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n     *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    DataSourceDisplay.prototype.getBoundingSphere = function(entity, allowPartial, result) {\n        \n\n        if (!this._ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        var i;\n        var length;\n        var dataSource = this._defaultDataSource;\n        if (!dataSource.entities.contains(entity)) {\n            dataSource = undefined;\n\n            var dataSources = this._dataSourceCollection;\n            length = dataSources.length;\n            for (i = 0; i < length; i++) {\n                var d = dataSources.get(i);\n                if (d.entities.contains(entity)) {\n                    dataSource = d;\n                    break;\n                }\n            }\n        }\n\n        if (!defined(dataSource)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var visualizers = dataSource._visualizers;\n        var visualizersLength = visualizers.length;\n\n        for (i = 0; i < visualizersLength; i++) {\n            var visualizer = visualizers[i];\n            if (defined(visualizer.getBoundingSphere)) {\n                state = visualizers[i].getBoundingSphere(entity, tmp);\n                if (!allowPartial && state === BoundingSphereState.PENDING) {\n                    return BoundingSphereState.PENDING;\n                } else if (state === BoundingSphereState.DONE) {\n                    boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                    count++;\n                }\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    DataSourceDisplay.prototype._onDataSourceAdded = function(dataSourceCollection, dataSource) {\n        var scene = this._scene;\n\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = displayPrimitives.add(new PrimitiveCollection());\n        var groundPrimitives = displayGroundPrimitives.add(new OrderedGroundPrimitiveCollection());\n\n        dataSource._primitives = primitives;\n        dataSource._groundPrimitives = groundPrimitives;\n\n        var entityCluster = dataSource.clustering;\n        entityCluster._initialize(scene);\n\n        primitives.add(entityCluster);\n\n        var visualizers = this._visualizersCallback(scene, entityCluster, dataSource);\n\n        dataSource._visualizersByDisplayID = dataSource._visualizersByDisplayID || {};\n        dataSource._visualizersByDisplayID[this._displayID] = visualizers;\n\n        dataSource._visualizers = dataSource._visualizers || [];\n        dataSource._visualizers = dataSource._visualizers.concat(visualizers);\n    };\n\n    DataSourceDisplay.prototype._onDataSourceRemoved = function(dataSourceCollection, dataSource) {\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = dataSource._primitives;\n        var groundPrimitives = dataSource._groundPrimitives;\n\n        var entityCluster = dataSource.clustering;\n        primitives.remove(entityCluster);\n\n        var visualizers = dataSource._visualizersByDisplayID[this._displayID];\n        if (!defined(visualizers)) {\n            return;\n        }\n\n        var length = visualizers.length;\n        for (var i = 0; i < length; i++) {\n            var visualizer = visualizers[i];\n            visualizer.destroy();\n\n            var index = dataSource._visualizers.indexOf(visualizer);\n            dataSource._visualizers.splice(index, 1);\n        }\n\n        delete dataSource._visualizersByDisplayID[this._displayID];\n\n        displayPrimitives.remove(primitives);\n        displayGroundPrimitives.remove(groundPrimitives);\n    };\n\n    DataSourceDisplay.prototype._onDataSourceMoved = function(dataSource, newIndex, oldIndex) {\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = dataSource._primitives;\n        var groundPrimitives = dataSource._groundPrimitives;\n\n        if (newIndex === oldIndex + 1) {\n            displayPrimitives.raise(primitives);\n            displayGroundPrimitives.raise(groundPrimitives);\n        } else if (newIndex === oldIndex - 1) {\n            displayPrimitives.lower(primitives);\n            displayGroundPrimitives.lower(groundPrimitives);\n        } else if (newIndex === 0) {\n            displayPrimitives.lowerToBottom(primitives);\n            displayGroundPrimitives.lowerToBottom(groundPrimitives);\n            displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n            displayGroundPrimitives.raise(groundPrimitives);\n        } else {\n            displayPrimitives.raiseToTop(primitives);\n            displayGroundPrimitives.raiseToTop(groundPrimitives);\n        }\n    };\n\n    /**\n     * A function which creates an array of visualizers used for visualization.\n     * @callback DataSourceDisplay~VisualizersCallback\n     *\n     * @param {Scene} scene The scene to create visualizers for.\n     * @param {DataSource} dataSource The data source to create visualizers for.\n     * @returns {Visualizer[]} An array of visualizers used for visualization.\n     *\n     * @example\n     * function createVisualizers(scene, dataSource) {\n     *     return [new Cesium.BillboardVisualizer(scene, dataSource.entities)];\n     * }\n     */\nexport default DataSourceDisplay;\n"],"sourceRoot":""}